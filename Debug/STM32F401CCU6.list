
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f66c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800f810  0800f810  00010810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd28  0800fd28  000112c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd28  0800fd28  00010d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd30  0800fd30  000112c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd30  0800fd30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd34  0800fd34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800fd38  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006000  200002c8  08010000  000112c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200062c8  08010000  000112c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245ba  00000000  00000000  000112f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006589  00000000  00000000  000358b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  0003be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001685  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de5c  00000000  00000000  0003f295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c0f  00000000  00000000  0005d0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5cf  00000000  00000000  00080d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001202cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d28  00000000  00000000  00120314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0012903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f7f4 	.word	0x0800f7f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800f7f4 	.word	0x0800f7f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN10TimeTickerC1Em>:
 *  Created on: Dec 11, 2024
 *      Author: Admin
 */
#include <Common/TimeTicker.h>

TimeTicker::TimeTicker(TickType_t delayTime) :
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
		delayTime(delayTime), lastTime(getCurrentTimeMS()) {
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <_ZN10TimeTickerC1Em+0x2c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f80a 	bl	8000f78 <_ZN10TimeTicker16getCurrentTimeMSEv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
}
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	0800f8d4 	.word	0x0800f8d4

08000f78 <_ZN10TimeTicker16getCurrentTimeMSEv>:

TickType_t TimeTicker::getCurrentTimeMS() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	return (xTaskGetTickCount() * 1000) / configTICK_RATE_HZ;
 8000f80:	f009 fb9a 	bl	800a6b8 <xTaskGetTickCount>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <_ZN10TimeTicker16getCurrentTimeMSEv+0x28>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	099b      	lsrs	r3, r3, #6
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	10624dd3 	.word	0x10624dd3

08000fa4 <_ZN10TimeTicker8getDeltaEv>:

TickType_t TimeTicker::getDelta() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	TickType_t currentTime = getCurrentTimeMS();
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
 8000fb6:	60f8      	str	r0, [r7, #12]
	if (this->lastTime > currentTime) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d202      	bcs.n	8000fc8 <_ZN10TimeTicker8getDeltaEv+0x24>
		this->lastTime = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	}
	return currentTime - this->lastTime;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNK10TimeTicker12getDelayTimeEv>:

TickType_t TimeTicker::getDelayTime() const{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	return this->delayTime;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZN10TimeTicker5resetEv>:

void TimeTicker::reset() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	this->lastTime = getCurrentTimeMS();
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	4798      	blx	r3
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN10TimeTicker6onTimeEv>:

void TimeTicker::setDelayTime(TickType_t delayTime) {
	this->delayTime = delayTime;
}

bool TimeTicker::onTime() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	return getDelta() <= this->delayTime;
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffc3 	bl	8000fa4 <_ZN10TimeTicker8getDeltaEv>
 800101e:	4602      	mov	r2, r0
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN11EncodeModelC1Ev>:
 *  Created on: Dec 12, 2024
 *      Author: Admin
 */
#include "Model/EncodeModel.h"

EncodeModel::EncodeModel(): distance(0), speed(0), carStatus(CAR_STOP) {
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	721a      	strb	r2, [r3, #8]

}
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZNK11EncodeModel11getDistanceEv>:

float EncodeModel::getDistance() const {
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return this->distance;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	ee07 3a90 	vmov	s15, r3
}
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_ZNK11EncodeModel8getSpeedEv>:
float EncodeModel::getSpeed() const {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	return this->speed;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	ee07 3a90 	vmov	s15, r3
}
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZN11EncodeModel11setDistanceEf>:
float EncodeModel::getCarStatus() const {
	return this->carStatus;
}
void EncodeModel::setDistance(float discance) {
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	ed87 0a00 	vstr	s0, [r7]
	this->distance = discance;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_ZN11EncodeModel8setSpeedEf>:
void EncodeModel::setSpeed(float speed) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	ed87 0a00 	vstr	s0, [r7]
	this->speed = speed;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	605a      	str	r2, [r3, #4]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZN11EncodeModel12setCarStatusE9CarStatus>:
void EncodeModel::setCarStatus(CarStatus carStatus) {
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	70fb      	strb	r3, [r7, #3]
	this->carStatus = carStatus;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	721a      	strb	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN11SensorModelC1Ev>:
 *      Author: Admin
 */

#include "Model/SensorModel.h"

SensorModel::SensorModel() :
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
		nt(false), np(false), cm(false), at(false), pt(false), t1(false), t2(
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	705a      	strb	r2, [r3, #1]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	709a      	strb	r2, [r3, #2]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	70da      	strb	r2, [r3, #3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	711a      	strb	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	715a      	strb	r2, [r3, #5]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	719a      	strb	r2, [r3, #6]
				false), t3(false), gear(0), rpm(0), encodeModel(nullptr) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	71da      	strb	r2, [r3, #7]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	721a      	strb	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	815a      	strh	r2, [r3, #10]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
}
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZN11SensorModel5setAtEb>:

bool SensorModel::isAt() const {
	return at;
}

void SensorModel::setAt(bool at) {
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	this->at = at;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	70da      	strb	r2, [r3, #3]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_ZNK11SensorModel14getEncodeModelEv>:

const EncodeModel& SensorModel::getEncodeModel() const {
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return *(this->encodeModel);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_ZN11SensorModel14setEncodeModelEP11EncodeModel>:

void SensorModel::setEncodeModel(EncodeModel *encodeModel) {
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	this->encodeModel = encodeModel;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	60da      	str	r2, [r3, #12]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_ZN11SensorModel5setCmEb>:

bool SensorModel::isCm() const {
	return cm;
}

void SensorModel::setCm(bool cm) {
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
	this->cm = cm;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	709a      	strb	r2, [r3, #2]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_ZN11SensorModel7setGearEh>:

uint8_t SensorModel::getGear() const {
	return gear;
}

void SensorModel::setGear(uint8_t gear) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	this->gear = gear;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	721a      	strb	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_ZN11SensorModel5setNpEb>:

bool SensorModel::isNp() const {
	return np;
}

void SensorModel::setNp(bool np) {
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
	this->np = np;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	705a      	strb	r2, [r3, #1]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN11SensorModel5setNtEb>:

bool SensorModel::isNt() const {
	return nt;
}

void SensorModel::setNt(bool nt) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	this->nt = nt;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_ZN11SensorModel5setPtEb>:

bool SensorModel::isPt() const {
	return pt;
}

void SensorModel::setPt(bool pt) {
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	70fb      	strb	r3, [r7, #3]
	this->pt = pt;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	78fa      	ldrb	r2, [r7, #3]
 800122a:	711a      	strb	r2, [r3, #4]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZNK11SensorModel6getRpmEv>:

uint16_t SensorModel::getRpm() const {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	return rpm;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	895b      	ldrh	r3, [r3, #10]
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZN11SensorModel6setRpmEt>:

void SensorModel::setRpm(uint16_t rpm) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
	this->rpm = rpm;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	815a      	strh	r2, [r3, #10]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_ZN11SensorModel5setT1Eb>:

bool SensorModel::isT1() const {
	return t1;
}

void SensorModel::setT1(bool t1) {
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
	this->t1 = t1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	715a      	strb	r2, [r3, #5]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_ZN11SensorModel5setT2Eb>:

bool SensorModel::isT2() const {
	return t2;
}

void SensorModel::setT2(bool t2) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
	this->t2 = t2;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	719a      	strb	r2, [r3, #6]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_ZN11SensorModel5setT3Eb>:

bool SensorModel::isT3() const {
	return t3;
}

void SensorModel::setT3(bool t3) {
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
	this->t3 = t3;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	71da      	strb	r2, [r3, #7]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>:
 *      Author: Admin
 */

#include "MyRTOSTask.h"

MyRTOSTask::MyRTOSTask(const char *name, void (*runFunction)(void*),
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
		void *params, uint16_t size, UBaseType_t priority) :
		taskName(name), runFunction(runFunction), params(params), stackSize(
				size), priority(priority) {
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm+0x4c>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	601a      	str	r2, [r3, #0]
		taskName(name), runFunction(runFunction), params(params), stackSize(
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8b3a      	ldrh	r2, [r7, #24]
 80012f2:	829a      	strh	r2, [r3, #20]
				size), priority(priority) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	619a      	str	r2, [r3, #24]
	this->taskHandle = nullptr;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
	this->stopSt = false;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	771a      	strb	r2, [r3, #28]
}
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	0800f8e0 	.word	0x0800f8e0

08001318 <_ZN10MyRTOSTaskD1Ev>:
MyRTOSTask::~MyRTOSTask() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <_ZN10MyRTOSTaskD1Ev+0x38>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
	if (taskHandle != nullptr) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <_ZN10MyRTOSTaskD1Ev+0x26>
		vTaskDelete(taskHandle);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f008 fffa 	bl	800a32c <vTaskDelete>
		taskHandle = nullptr;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	}
	runFunction = nullptr;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800f8e0 	.word	0x0800f8e0

08001354 <_ZN10MyRTOSTaskD0Ev>:
MyRTOSTask::~MyRTOSTask() {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
}
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffdb 	bl	8001318 <_ZN10MyRTOSTaskD1Ev>
 8001362:	2120      	movs	r1, #32
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f00b fb7f 	bl	800ca68 <_ZdlPvj>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN10MyRTOSTask5delayEm>:

void MyRTOSTask::delay(TickType_t timeMs) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	vTaskDelay(pdMS_TO_TICKS(timeMs));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_ZN10MyRTOSTask5delayEm+0x2c>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	099b      	lsrs	r3, r3, #6
 8001390:	4618      	mov	r0, r3
 8001392:	f009 f83f 	bl	800a414 <vTaskDelay>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	10624dd3 	.word	0x10624dd3

080013a4 <_ZN10MyRTOSTask3runEv>:

void MyRTOSTask::run() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <_ZN10MyRTOSTask3runEv+0x1c>
		this->runFunction(this->params);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6912      	ldr	r2, [r2, #16]
 80013bc:	4610      	mov	r0, r2
 80013be:	4798      	blx	r3
	}
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN10MyRTOSTask12taskFunctionEPv>:

bool MyRTOSTask::isRunning() {
	return taskHandle != nullptr;
}

void MyRTOSTask::taskFunction(void *params) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	MyRTOSTask *task = static_cast<MyRTOSTask*>(params);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
	task->run();
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	4798      	blx	r3
	vTaskDelete(NULL);
 80013de:	2000      	movs	r0, #0
 80013e0:	f008 ffa4 	bl	800a32c <vTaskDelete>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZN10MyRTOSTask5startEv>:

bool MyRTOSTask::start() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
	stopSt = false;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	771a      	strb	r2, [r3, #28]
	BaseType_t result = xTaskCreate(taskFunction, taskName, stackSize, this,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8a98      	ldrh	r0, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	3204      	adds	r2, #4
 800140a:	9201      	str	r2, [sp, #4]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4602      	mov	r2, r0
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <_ZN10MyRTOSTask5startEv+0x44>)
 8001414:	f008 fe2c 	bl	800a070 <xTaskCreate>
 8001418:	60f8      	str	r0, [r7, #12]
			priority, &taskHandle);
	return result == pdPASS;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	080013c9 	.word	0x080013c9

08001434 <_ZN10MyRTOSTask4stopEv>:

void MyRTOSTask::stop() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	stopSt = true;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	771a      	strb	r2, [r3, #28]
	if (taskHandle != nullptr) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <_ZN10MyRTOSTask4stopEv+0x26>
		vTaskDelete(taskHandle);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f008 ff6c 	bl	800a32c <vTaskDelete>
		taskHandle = nullptr;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	}
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001468:	f001 fa7a 	bl	8002960 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800146c:	f000 f820 	bl	80014b0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001470:	f000 f894 	bl	800159c <_ZL12MX_GPIO_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001474:	f007 fc38 	bl	8008ce8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <main+0x40>)
 800147a:	2100      	movs	r1, #0
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <main+0x44>)
 800147e:	f007 fce2 	bl	8008e46 <osThreadNew>
 8001482:	4603      	mov	r3, r0
 8001484:	4a09      	ldr	r2, [pc, #36]	@ (80014ac <main+0x48>)
 8001486:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
	SensorReader::getInstance().start();
 8001488:	f001 f89c 	bl	80025c4 <_ZN12SensorReader11getInstanceEv>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	330c      	adds	r3, #12
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	4798      	blx	r3
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800149a:	f007 fc49 	bl	8008d30 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800149e:	bf00      	nop
 80014a0:	e7fd      	b.n	800149e <main+0x3a>
 80014a2:	bf00      	nop
 80014a4:	0800f8f4 	.word	0x0800f8f4
 80014a8:	080016e1 	.word	0x080016e1
 80014ac:	200002e4 	.word	0x200002e4

080014b0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00c f933 	bl	800d72a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <_Z18SystemClock_Configv+0xe4>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <_Z18SystemClock_Configv+0xe4>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <_Z18SystemClock_Configv+0xe4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <_Z18SystemClock_Configv+0xe8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <_Z18SystemClock_Configv+0xe8>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <_Z18SystemClock_Configv+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001510:	2301      	movs	r3, #1
 8001512:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001524:	2319      	movs	r3, #25
 8001526:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001528:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001532:	2307      	movs	r3, #7
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4618      	mov	r0, r3
 800153c:	f002 ff92 	bl	8004464 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 8001550:	f000 f938 	bl	80017c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001564:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f9ef 	bl	8004954 <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 8001586:	f000 f91d 	bl	80017c4 <Error_Handler>
	}
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	@ 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a45      	ldr	r2, [pc, #276]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b3f      	ldr	r3, [pc, #252]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a3e      	ldr	r2, [pc, #248]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b3c      	ldr	r3, [pc, #240]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a37      	ldr	r2, [pc, #220]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a30      	ldr	r2, [pc, #192]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <_ZL12MX_GPIO_Initv+0x134>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001628:	482a      	ldr	r0, [pc, #168]	@ (80016d4 <_ZL12MX_GPIO_Initv+0x138>)
 800162a:	f001 fc7d 	bl	8002f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800162e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001632:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4823      	ldr	r0, [pc, #140]	@ (80016d4 <_ZL12MX_GPIO_Initv+0x138>)
 8001648:	f001 fad2 	bl	8002bf0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 800164c:	23fe      	movs	r3, #254	@ 0xfe
 800164e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001654:	2302      	movs	r3, #2
 8001656:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	481e      	ldr	r0, [pc, #120]	@ (80016d8 <_ZL12MX_GPIO_Initv+0x13c>)
 8001660:	f001 fac6 	bl	8002bf0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001664:	2307      	movs	r3, #7
 8001666:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800166c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166e:	2301      	movs	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4818      	ldr	r0, [pc, #96]	@ (80016dc <_ZL12MX_GPIO_Initv+0x140>)
 800167a:	f001 fab9 	bl	8002bf0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800167e:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 8001682:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4812      	ldr	r0, [pc, #72]	@ (80016dc <_ZL12MX_GPIO_Initv+0x140>)
 8001694:	f001 faac 	bl	8002bf0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2105      	movs	r1, #5
 800169c:	2006      	movs	r0, #6
 800169e:	f001 fa7d 	bl	8002b9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a2:	2006      	movs	r0, #6
 80016a4:	f001 fa96 	bl	8002bd4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2105      	movs	r1, #5
 80016ac:	2007      	movs	r0, #7
 80016ae:	f001 fa75 	bl	8002b9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016b2:	2007      	movs	r0, #7
 80016b4:	f001 fa8e 	bl	8002bd4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2105      	movs	r1, #5
 80016bc:	2008      	movs	r0, #8
 80016be:	f001 fa6d 	bl	8002b9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016c2:	2008      	movs	r0, #8
 80016c4:	f001 fa86 	bl	8002bd4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400

080016e0 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	b0a7      	sub	sp, #156	@ 0x9c
 80016e6:	af06      	add	r7, sp, #24
 80016e8:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80016ea:	f00a fcad 	bl	800c048 <MX_USB_DEVICE_Init>
	uint16_t counter;
	counter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	uint8_t data[100];
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	const SensorModel &sensorModel =
			SensorReader::getInstance().getSensorModel();
 80016f4:	f000 ff66 	bl	80025c4 <_ZN12SensorReader11getInstanceEv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 ff55 	bl	80025aa <_ZNK12SensorReader14getSensorModelEv>
 8001700:	67b8      	str	r0, [r7, #120]	@ 0x78
	const EncodeModel &encodeModel = sensorModel.getEncodeModel();
 8001702:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001704:	f7ff fd33 	bl	800116e <_ZNK11SensorModel14getEncodeModelEv>
 8001708:	6778      	str	r0, [r7, #116]	@ 0x74
	for (;;) {
		uint16_t t = osKernelSysTick() / 1000;
 800170a:	f007 fb63 	bl	8008dd4 <osKernelGetSysTimerCount>
 800170e:	4603      	mov	r3, r0
 8001710:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <_Z16StartDefaultTaskPv+0xb8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
		counter++;
 800171c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001720:	3301      	adds	r3, #1
 8001722:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf((char*) data, "%d: Speed: %.3f, Distance: %.3f, RPM: %d \n\r",
 8001726:	f8b7 6072 	ldrh.w	r6, [r7, #114]	@ 0x72
				t, encodeModel.getSpeed(), encodeModel.getDistance(),
 800172a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800172c:	f7ff fca8 	bl	8001080 <_ZNK11EncodeModel8getSpeedEv>
 8001730:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data, "%d: Speed: %.3f, Distance: %.3f, RPM: %d \n\r",
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff0f 	bl	8000558 <__aeabi_f2d>
 800173a:	4604      	mov	r4, r0
 800173c:	460d      	mov	r5, r1
				t, encodeModel.getSpeed(), encodeModel.getDistance(),
 800173e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001740:	f7ff fc8f 	bl	8001062 <_ZNK11EncodeModel11getDistanceEv>
 8001744:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data, "%d: Speed: %.3f, Distance: %.3f, RPM: %d \n\r",
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff05 	bl	8000558 <__aeabi_f2d>
 800174e:	4680      	mov	r8, r0
 8001750:	4689      	mov	r9, r1
				sensorModel.getRpm());
 8001752:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001754:	f7ff fd70 	bl	8001238 <_ZNK11SensorModel6getRpmEv>
 8001758:	4603      	mov	r3, r0
		sprintf((char*) data, "%d: Speed: %.3f, Distance: %.3f, RPM: %d \n\r",
 800175a:	461a      	mov	r2, r3
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	9204      	str	r2, [sp, #16]
 8001762:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001766:	e9cd 4500 	strd	r4, r5, [sp]
 800176a:	4632      	mov	r2, r6
 800176c:	490b      	ldr	r1, [pc, #44]	@ (800179c <_Z16StartDefaultTaskPv+0xbc>)
 800176e:	4618      	mov	r0, r3
 8001770:	f00b ff78 	bl	800d664 <siprintf>
		CDC_Transmit_FS(data, strlen((char*) data));
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd81 	bl	8000280 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f00a fd1b 	bl	800c1c4 <CDC_Transmit_FS>
		osDelay(100);
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f007 fbeb 	bl	8008f6a <osDelay>
	}
 8001794:	bf00      	nop
 8001796:	e7b8      	b.n	800170a <_Z16StartDefaultTaskPv+0x2a>
 8001798:	10624dd3 	.word	0x10624dd3
 800179c:	0800f81c 	.word	0x0800f81c

080017a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80017b2:	f001 f8f7 	bl	80029a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010000 	.word	0x40010000

080017c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <Error_Handler+0x8>

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_MspInit+0x54>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <HAL_MspInit+0x54>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_MspInit+0x54>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_MspInit+0x54>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_MspInit+0x54>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_MspInit+0x54>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	f001 f9c1 	bl	8002b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <HAL_InitTick+0xd8>)
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <HAL_InitTick+0xd8>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6453      	str	r3, [r2, #68]	@ 0x44
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_InitTick+0xd8>)
 800184a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001854:	f107 020c 	add.w	r2, r7, #12
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fa44 	bl	8004cec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001864:	f003 fa2e 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 8001868:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800186a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <HAL_InitTick+0xdc>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	3b01      	subs	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <HAL_InitTick+0xe0>)
 800187a:	4a24      	ldr	r2, [pc, #144]	@ (800190c <HAL_InitTick+0xe4>)
 800187c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_InitTick+0xe0>)
 8001880:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001886:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <HAL_InitTick+0xe0>)
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <HAL_InitTick+0xe0>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_InitTick+0xe0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_InitTick+0xe0>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800189e:	481a      	ldr	r0, [pc, #104]	@ (8001908 <HAL_InitTick+0xe0>)
 80018a0:	f003 fa56 	bl	8004d50 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11b      	bne.n	80018ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018b2:	4815      	ldr	r0, [pc, #84]	@ (8001908 <HAL_InitTick+0xe0>)
 80018b4:	f003 fab2 	bl	8004e1c <HAL_TIM_Base_Start_IT>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d111      	bne.n	80018ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c6:	2019      	movs	r0, #25
 80018c8:	f001 f984 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d808      	bhi.n	80018e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018d2:	2200      	movs	r2, #0
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	2019      	movs	r0, #25
 80018d8:	f001 f960 	bl	8002b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <HAL_InitTick+0xe8>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e002      	b.n	80018ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_InitTick+0xec>)
 80018ec:	210e      	movs	r1, #14
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <HAL_InitTick+0xe0>)
 80018f0:	f003 fc60 	bl	80051b4 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 80018f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	431bde83 	.word	0x431bde83
 8001908:	200002e8 	.word	0x200002e8
 800190c:	40010000 	.word	0x40010000
 8001910:	20000004 	.word	0x20000004
 8001914:	08001919 	.word	0x08001919

08001918 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001920:	f001 f840 	bl	80029a4 <HAL_IncTick>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001966:	2001      	movs	r0, #1
 8001968:	f001 fb12 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001974:	2002      	movs	r0, #2
 8001976:	f001 fb0b 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001982:	2004      	movs	r0, #4
 8001984:	f001 fb04 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001992:	f003 faa5 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e8 	.word	0x200002e8

080019a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <OTG_FS_IRQHandler+0x10>)
 80019a6:	f001 fc4f 	bl	8003248 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20005a74 	.word	0x20005a74

080019b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_kill>:

int _kill(int pid, int sig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ce:	f00b ffa9 	bl	800d924 <__errno>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2216      	movs	r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_exit>:

void _exit (int status)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffe7 	bl	80019c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f6:	bf00      	nop
 80019f8:	e7fd      	b.n	80019f6 <_exit+0x12>

080019fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00a      	b.n	8001a22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0c:	f3af 8000 	nop.w
 8001a10:	4601      	mov	r1, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	b2ca      	uxtb	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf0      	blt.n	8001a0c <_read+0x12>
  }

  return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e009      	b.n	8001a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf1      	blt.n	8001a46 <_write+0x12>
  }
  return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_close>:

int _close(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a94:	605a      	str	r2, [r3, #4]
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_isatty>:

int _isatty(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f00b ff0e 	bl	800d924 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20010000 	.word	0x20010000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	2000039c 	.word	0x2000039c
 8001b3c:	200062c8 	.word	0x200062c8

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <_ZN7IRQTaskD1Ev>:

#ifndef INC_READER_IRQ_IRQTASK_H_
#define INC_READER_IRQ_IRQTASK_H_
#include "MyRTOSTask.h"
#include "semphr.h"
class IRQTask: public MyRTOSTask {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <_ZN7IRQTaskD1Ev+0x20>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fbcf 	bl	8001318 <_ZN10MyRTOSTaskD1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800f95c 	.word	0x0800f95c

08001b88 <_ZN7IRQTaskD0Ev>:
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_ZN7IRQTaskD1Ev>
 8001b96:	2124      	movs	r1, #36	@ 0x24
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00a ff65 	bl	800ca68 <_ZdlPvj>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN11EncoderTaskC1Ed>:
#include "Reader/IRQ/EncoderTash.h"

EncoderTask::EncoderTask(double scala) :
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	ed87 0b00 	vstr	d0, [r7]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2340      	movs	r3, #64	@ 0x40
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4920      	ldr	r1, [pc, #128]	@ (8001c44 <_ZN11EncoderTaskC1Ed+0x9c>)
 8001bc4:	f000 f9d2 	bl	8001f6c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <_ZN11EncoderTaskC1Ed+0xa0>)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	601a      	str	r2, [r3, #0]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	491c      	ldr	r1, [pc, #112]	@ (8001c4c <_ZN11EncoderTaskC1Ed+0xa4>)
 8001bda:	f000 fb2f 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001be4:	2300      	movs	r3, #0
 8001be6:	2202      	movs	r2, #2
 8001be8:	4918      	ldr	r1, [pc, #96]	@ (8001c4c <_ZN11EncoderTaskC1Ed+0xa4>)
 8001bea:	f000 fb27 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfa:	f7fe ff6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_ZN11EncoderTaskC1Ed+0x62>
 8001c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c08:	e002      	b.n	8001c10 <_ZN11EncoderTaskC1Ed+0x68>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <_ZN11EncoderTaskC1Ed+0xa8>)
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	@ 0x60
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa0b 	bl	8001036 <_ZN11EncodeModelC1Ev>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	336c      	adds	r3, #108	@ 0x6c
 8001c24:	21c8      	movs	r1, #200	@ 0xc8
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f98e 	bl	8000f48 <_ZN10TimeTickerC1Em>
	this->count = 0;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->hasCallA = false;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800f848 	.word	0x0800f848
 8001c48:	0800f938 	.word	0x0800f938
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	3ff00000 	.word	0x3ff00000

08001c54 <_ZN11EncoderTask9isExactlyEt>:

bool EncoderTask::isExactly(uint16_t pin) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
	if (this->aPin.equalPin(pin) && this->aPin.readValue()) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3324      	adds	r3, #36	@ 0x24
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fb00 	bl	800226e <_ZN5MyPin8equalPinEt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <_ZN11EncoderTask9isExactlyEt+0x34>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3324      	adds	r3, #36	@ 0x24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fb2e 	bl	80022da <_ZN5MyPin9readValueEv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZN11EncoderTask9isExactlyEt+0x34>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <_ZN11EncoderTask9isExactlyEt+0x36>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <_ZN11EncoderTask9isExactlyEt+0x46>
		this->hasCallA = true;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e01d      	b.n	8001cd6 <_ZN11EncoderTask9isExactlyEt+0x82>
	} else if (this->bPin.equalPin(pin) && bPin.readValue()) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3338      	adds	r3, #56	@ 0x38
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fae3 	bl	800226e <_ZN5MyPin8equalPinEt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <_ZN11EncoderTask9isExactlyEt+0x6e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3338      	adds	r3, #56	@ 0x38
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fb11 	bl	80022da <_ZN5MyPin9readValueEv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <_ZN11EncoderTask9isExactlyEt+0x6e>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <_ZN11EncoderTask9isExactlyEt+0x70>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <_ZN11EncoderTask9isExactlyEt+0x80>
		this->hasCallA = false;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <_ZN11EncoderTask9isExactlyEt+0x82>
	}
	return false;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_ZN11EncoderTask12taskCallbackEv>:

void EncoderTask::setScale(double scala) {
	this->scala = scala == 0 ? 1.0f : scala;
}

void EncoderTask::taskCallback() {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	if (this->hasCallA) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <_ZN11EncoderTask12taskCallbackEv+0x38>
		if (this->bPin.readValue()) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3338      	adds	r3, #56	@ 0x38
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 faf0 	bl	80022da <_ZN5MyPin9readValueEv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count += 1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	64da      	str	r2, [r3, #76]	@ 0x4c
	} else {
		if (this->aPin.readValue()) {
			this->count -= 1;
		}
	}
}
 8001d14:	e011      	b.n	8001d3a <_ZN11EncoderTask12taskCallbackEv+0x5c>
		if (this->aPin.readValue()) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3324      	adds	r3, #36	@ 0x24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fadd 	bl	80022da <_ZN5MyPin9readValueEv>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count -= 1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	0000      	movs	r0, r0
 8001d44:	0000      	movs	r0, r0
	...

08001d48 <_ZN11EncoderTask15getEncoderModelEv>:

EncodeModel* EncoderTask::getEncoderModel() {
 8001d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	336c      	adds	r3, #108	@ 0x6c
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f95a 	bl	8001010 <_ZN10TimeTicker6onTimeEv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f083 0301 	eor.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80cc 	beq.w	8001f02 <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
		int32_t tempCount = this->count;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	60fb      	str	r3, [r7, #12]
		float deltaTimeS = this->timer.getDelta() / 1000.0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	336c      	adds	r3, #108	@ 0x6c
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f915 	bl	8000fa4 <_ZN10TimeTicker8getDeltaEv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbc9 	bl	8000514 <__aeabi_ui2d>
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b66      	ldr	r3, [pc, #408]	@ (8001f20 <_ZN11EncoderTask15getEncoderModelEv+0x1d8>)
 8001d88:	f7fe fd68 	bl	800085c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff10 	bl	8000bb8 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	64da      	str	r2, [r3, #76]	@ 0x4c
		this->timer.reset();
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	336c      	adds	r3, #108	@ 0x6c
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f922 	bl	8000ff0 <_ZN10TimeTicker5resetEv>
		if (tempCount == 0 || deltaTimeS == 0) {
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <_ZN11EncoderTask15getEncoderModelEv+0x78>
 8001db2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d10d      	bne.n	8001ddc <_ZN11EncoderTask15getEncoderModelEv+0x94>
			this->encoderModel.setSpeed(0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3360      	adds	r3, #96	@ 0x60
 8001dc4:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001f24 <_ZN11EncoderTask15getEncoderModelEv+0x1dc>
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f977 	bl	80010bc <_ZN11EncodeModel8setSpeedEf>
			this->encoderModel.setCarStatus(CAR_STOP);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3360      	adds	r3, #96	@ 0x60
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f980 	bl	80010da <_ZN11EncodeModel12setCarStatusE9CarStatus>
 8001dda:	e092      	b.n	8001f02 <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
		} else {
			this->encoderModel.setDistance(
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f103 0660 	add.w	r6, r3, #96	@ 0x60
					this->encoderModel.getDistance() + tempCount / this->scala);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3360      	adds	r3, #96	@ 0x60
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f93b 	bl	8001062 <_ZNK11EncodeModel11getDistanceEv>
 8001dec:	ee10 3a10 	vmov	r3, s0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb1 	bl	8000558 <__aeabi_f2d>
 8001df6:	4604      	mov	r4, r0
 8001df8:	460d      	mov	r5, r1
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7fe fb9a 	bl	8000534 <__aeabi_i2d>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001e06:	f7fe fd29 	bl	800085c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fa43 	bl	800029c <__adddf3>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
			this->encoderModel.setDistance(
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fecb 	bl	8000bb8 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	ee00 3a10 	vmov	s0, r3
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f7ff f938 	bl	800109e <_ZN11EncodeModel11setDistanceEf>
			if (tempCount > 0) {
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	dd33      	ble.n	8001e9c <_ZN11EncoderTask15getEncoderModelEv+0x154>
				this->encoderModel.setSpeed(
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f103 0460 	add.w	r4, r3, #96	@ 0x60
						tempCount * 3.6 / this->scala / deltaTimeS);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7fe fb7a 	bl	8000534 <__aeabi_i2d>
 8001e40:	a333      	add	r3, pc, #204	@ (adr r3, 8001f10 <_ZN11EncoderTask15getEncoderModelEv+0x1c8>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fbdf 	bl	8000608 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001e58:	f7fe fd00 	bl	800085c <__aeabi_ddiv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4690      	mov	r8, r2
 8001e62:	4699      	mov	r9, r3
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f7fe fb77 	bl	8000558 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4640      	mov	r0, r8
 8001e70:	4649      	mov	r1, r9
 8001e72:	f7fe fcf3 	bl	800085c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
				this->encoderModel.setSpeed(
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe9b 	bl	8000bb8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	ee00 3a10 	vmov	s0, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff f917 	bl	80010bc <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel.setCarStatus(CAR_FORWARD);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3360      	adds	r3, #96	@ 0x60
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f920 	bl	80010da <_ZN11EncodeModel12setCarStatusE9CarStatus>
 8001e9a:	e032      	b.n	8001f02 <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
			} else {
				this->encoderModel.setSpeed(
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0460 	add.w	r4, r3, #96	@ 0x60
						tempCount * -3.6 / this->scala / deltaTimeS);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7fe fb46 	bl	8000534 <__aeabi_i2d>
 8001ea8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001f18 <_ZN11EncoderTask15getEncoderModelEv+0x1d0>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fbab 	bl	8000608 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001ec0:	f7fe fccc 	bl	800085c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	68b8      	ldr	r0, [r7, #8]
 8001ece:	f7fe fb43 	bl	8000558 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	4649      	mov	r1, r9
 8001eda:	f7fe fcbf 	bl	800085c <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
				this->encoderModel.setSpeed(
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fe67 	bl	8000bb8 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	ee00 3a10 	vmov	s0, r3
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff f8e3 	bl	80010bc <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel.setCarStatus(CAR_BACKWARD);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3360      	adds	r3, #96	@ 0x60
 8001efa:	2102      	movs	r1, #2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f8ec 	bl	80010da <_ZN11EncodeModel12setCarStatusE9CarStatus>
			}
		}
	}
	return &this->encoderModel;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3360      	adds	r3, #96	@ 0x60
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f10:	cccccccd 	.word	0xcccccccd
 8001f14:	400ccccc 	.word	0x400ccccc
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	c00ccccc 	.word	0xc00ccccc
 8001f20:	408f4000 	.word	0x408f4000
 8001f24:	00000000 	.word	0x00000000

08001f28 <_ZN11EncoderTaskD1Ev>:
#include <Model/EncodeModel.h>
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"

class EncoderTask: public IRQTask {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <_ZN11EncoderTaskD1Ev+0x20>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe13 	bl	8001b64 <_ZN7IRQTaskD1Ev>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800f938 	.word	0x0800f938

08001f4c <_ZN11EncoderTaskD0Ev>:
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_ZN11EncoderTaskD1Ev>
 8001f5a:	2178      	movs	r1, #120	@ 0x78
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f00a fd83 	bl	800ca68 <_ZdlPvj>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>:
 *  Created on: Dec 9, 2024
 *      Author: Admin
 */
#include "Reader/IRQ/IRQTask.h"

IRQTask::IRQTask(const char *name, void (*runFunction)(void *), void *params, uint16_t stackSize,
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
		UBaseType_t priority) :
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
				xSemaphoreCreateBinary()) {
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	8b3b      	ldrh	r3, [r7, #24]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	f7ff f99d 	bl	80012c8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <_ZN7IRQTaskC1EPKcPFvPvES2_tm+0x44>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	2203      	movs	r2, #3
 8001f96:	2100      	movs	r1, #0
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f007 f9d0 	bl	800933e <xQueueGenericCreate>
 8001f9e:	4602      	mov	r2, r0
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	621a      	str	r2, [r3, #32]

}
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	0800f95c 	.word	0x0800f95c

08001fb4 <_ZN7IRQTask17interruptCallbackEt>:
void IRQTask::interruptCallback(uint16_t pin) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFAIL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
	if(isExactly(pin)){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3318      	adds	r3, #24
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	887a      	ldrh	r2, [r7, #2]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <_ZN7IRQTask17interruptCallbackEt+0x36>
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f007 fbdb 	bl	80097a0 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <_ZN7IRQTask17interruptCallbackEt+0x4c>
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <_ZN7IRQTask17interruptCallbackEt+0x54>)
 8001ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	e000ed04 	.word	0xe000ed04

0800200c <_ZN7IRQTask12taskCallbackEv>:

void IRQTask::taskCallback() {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <_ZN7IRQTask12taskCallbackEv+0x1c>
		this->runFunction(this->params);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6912      	ldr	r2, [r2, #16]
 8002024:	4610      	mov	r0, r2
 8002026:	4798      	blx	r3
	}
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN7IRQTask3runEv>:

void IRQTask::run() {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	4618      	mov	r0, r3
 8002042:	f007 fd1f 	bl	8009a84 <xQueueSemaphoreTake>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <_ZN7IRQTask3runEv+0x8>
			this->taskCallback();
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 8002062:	e7e9      	b.n	8002038 <_ZN7IRQTask3runEv+0x8>

08002064 <_ZN7RpmTaskC1Et>:
 *      Author: Admin
 */

#include "Reader/IRQ/RpmTask.h"

RpmTask::RpmTask(uint16_t scala) :
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af02      	add	r7, sp, #8
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	2301      	movs	r3, #1
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2340      	movs	r3, #64	@ 0x40
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2300      	movs	r3, #0
 800207c:	2200      	movs	r2, #0
 800207e:	4914      	ldr	r1, [pc, #80]	@ (80020d0 <_ZN7RpmTaskC1Et+0x6c>)
 8002080:	f7ff ff74 	bl	8001f6c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 8002084:	4a13      	ldr	r2, [pc, #76]	@ (80020d4 <_ZN7RpmTaskC1Et+0x70>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8002090:	2300      	movs	r3, #0
 8002092:	2204      	movs	r2, #4
 8002094:	4910      	ldr	r1, [pc, #64]	@ (80020d8 <_ZN7RpmTaskC1Et+0x74>)
 8002096:	f000 f8d1 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <_ZN7RpmTaskC1Et+0x40>
 80020a0:	887a      	ldrh	r2, [r7, #2]
 80020a2:	e000      	b.n	80020a6 <_ZN7RpmTaskC1Et+0x42>
 80020a4:	2201      	movs	r2, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3344      	adds	r3, #68	@ 0x44
 80020b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe ff47 	bl	8000f48 <_ZN10TimeTickerC1Em>
	this->count = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
	this->rmp = 0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	0800f854 	.word	0x0800f854
 80020d4:	0800f980 	.word	0x0800f980
 80020d8:	40020400 	.word	0x40020400

080020dc <_ZN7RpmTask9isExactlyEt>:

bool RpmTask::isExactly(uint16_t pin) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
	return this->rpmPin.equalPin(pin) && this->rpmPin.readValue();
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3324      	adds	r3, #36	@ 0x24
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f8bc 	bl	800226e <_ZN5MyPin8equalPinEt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <_ZN7RpmTask9isExactlyEt+0x34>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3324      	adds	r3, #36	@ 0x24
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f8ea 	bl	80022da <_ZN5MyPin9readValueEv>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <_ZN7RpmTask9isExactlyEt+0x34>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <_ZN7RpmTask9isExactlyEt+0x36>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	0000      	movs	r0, r0
 800211c:	0000      	movs	r0, r0
	...

08002120 <_ZN7RpmTask8getValueEv>:

uint16_t RpmTask::getValue() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3344      	adds	r3, #68	@ 0x44
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ff6f 	bl	8001010 <_ZN10TimeTicker6onTimeEv>
 8002132:	4603      	mov	r3, r0
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03e      	beq.n	80021bc <_ZN7RpmTask8getValueEv+0x9c>
		int32_t tempCount = this->count;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	60fb      	str	r3, [r7, #12]
		float deltaTimeM = this->timer.getDelta() / 60000.0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3344      	adds	r3, #68	@ 0x44
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe ff2b 	bl	8000fa4 <_ZN10TimeTicker8getDeltaEv>
 800214e:	4603      	mov	r3, r0
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9df 	bl	8000514 <__aeabi_ui2d>
 8002156:	a31e      	add	r3, pc, #120	@ (adr r3, 80021d0 <_ZN7RpmTask8getValueEv+0xb0>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe fb7e 	bl	800085c <__aeabi_ddiv>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd26 	bl	8000bb8 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38
		this->timer.reset();
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3344      	adds	r3, #68	@ 0x44
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff38 	bl	8000ff0 <_ZN10TimeTicker5resetEv>
		if (deltaTimeM == 0) {
 8002180:	edd7 7a02 	vldr	s15, [r7, #8]
 8002184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218c:	d101      	bne.n	8002192 <_ZN7RpmTask8getValueEv+0x72>
			return 0;
 800218e:	2300      	movs	r3, #0
 8002190:	e017      	b.n	80021c2 <_ZN7RpmTask8getValueEv+0xa2>
		}
		rmp = tempCount / this->scala / deltaTimeM;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	fb93 f3f2 	sdiv	r3, r3, r2
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80021ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b4:	ee17 2a90 	vmov	r2, s15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	return rmp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	b29b      	uxth	r3, r3
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	00000000 	.word	0x00000000
 80021d4:	40ed4c00 	.word	0x40ed4c00

080021d8 <_ZN7RpmTask12taskCallbackEv>:

void RpmTask::setScale(uint16_t scala) {
	this->scala = scala == 0 ? 1 : scala;
}

void RpmTask::taskCallback() {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	this->count += 1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_ZN7RpmTaskD1Ev>:
#ifndef INC_READER_IRQ_RPMTASK_H_
#define INC_READER_IRQ_RPMTASK_H_
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"
class RpmTask: public IRQTask {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_ZN7RpmTaskD1Ev+0x20>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fcab 	bl	8001b64 <_ZN7IRQTaskD1Ev>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	0800f980 	.word	0x0800f980

0800221c <_ZN7RpmTaskD0Ev>:
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffe7 	bl	80021f8 <_ZN7RpmTaskD1Ev>
 800222a:	2150      	movs	r1, #80	@ 0x50
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f00a fc1b 	bl	800ca68 <_ZdlPvj>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>:
 *      Author: Admin
 */

#include "Reader/MyPin.h"

MyPin::MyPin(GPIO_TypeDef *port, uint16_t pin, TickType_t holdTime) :
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
		port(port), pin(pin), timer(holdTime) {
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	809a      	strh	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3308      	adds	r3, #8
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe72 	bl	8000f48 <_ZN10TimeTickerC1Em>
}
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_ZN5MyPin8equalPinEt>:

bool MyPin::equalPin(uint16_t pin) {
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	807b      	strh	r3, [r7, #2]
	return pin == this->pin;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	889b      	ldrh	r3, [r3, #4]
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	429a      	cmp	r2, r3
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_ZN5MyPin21isValueWithHoldSignalEb>:

GPIO_PinState MyPin::isValueWithHoldSignal(bool value) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
	if (value == false) {
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <_ZN5MyPin21isValueWithHoldSignalEb+0x30>
		if (!this->timer.onTime()) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3308      	adds	r3, #8
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe feaf 	bl	8001010 <_ZN10TimeTicker6onTimeEv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f083 0301 	eor.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <_ZN5MyPin21isValueWithHoldSignalEb+0x2c>
			return GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	e007      	b.n	80022d2 <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		} else {
			return GPIO_PIN_SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e005      	b.n	80022d2 <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		}
	} else {
		this->timer.reset();
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3308      	adds	r3, #8
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fe90 	bl	8000ff0 <_ZN10TimeTicker5resetEv>
		return GPIO_PIN_SET;
 80022d0:	2301      	movs	r3, #1
	}
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_ZN5MyPin9readValueEv>:

void MyPin::setHoldSignalTime(TickType_t holdTime) {
	this->timer.setDelayTime(holdTime);
}

GPIO_PinState MyPin::readValue() {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	if (!port) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <_ZN5MyPin9readValueEv+0x14>
		return GPIO_PIN_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e013      	b.n	8002316 <_ZN5MyPin9readValueEv+0x3c>
	}
	return isValueWithHoldSignal(HAL_GPIO_ReadPin(port, pin));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	889b      	ldrh	r3, [r3, #4]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f000 fdfd 	bl	8002ef8 <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffc2 	bl	8002296 <_ZN5MyPin21isValueWithHoldSignalEb>
 8002312:	4603      	mov	r3, r0
 8002314:	bf00      	nop
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZN5MyPin21readValueWithDebounceEb>:

GPIO_PinState MyPin::readValueWithDebounce(bool reverse) {
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
	if (!port) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <_ZN5MyPin21readValueWithDebounceEb+0x18>
		return GPIO_PIN_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	e040      	b.n	80023b8 <_ZN5MyPin21readValueWithDebounceEb+0x9a>
	}
	GPIO_PinState rs = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	889b      	ldrh	r3, [r3, #4]
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f000 fdd7 	bl	8002ef8 <HAL_GPIO_ReadPin>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	429a      	cmp	r2, r3
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <_ZN5MyPin21readValueWithDebounceEb+0x6e>
		vTaskDelay(pdMS_TO_TICKS(30));
 800235e:	201e      	movs	r0, #30
 8002360:	f008 f858 	bl	800a414 <vTaskDelay>
		if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	889b      	ldrh	r3, [r3, #4]
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f000 fdc2 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	429a      	cmp	r2, r3
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <_ZN5MyPin21readValueWithDebounceEb+0x6e>
			rs = GPIO_PIN_SET;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return this->timer.getDelayTime() > 0 ? isValueWithHoldSignal(rs) : rs;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3308      	adds	r3, #8
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fe21 	bl	8000fd8 <_ZNK10TimeTicker12getDelayTimeEv>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <_ZN5MyPin21readValueWithDebounceEb+0x96>
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff73 	bl	8002296 <_ZN5MyPin21isValueWithHoldSignalEb>
 80023b0:	4603      	mov	r3, r0
 80023b2:	e000      	b.n	80023b6 <_ZN5MyPin21readValueWithDebounceEb+0x98>
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	bf00      	nop
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZN12SensorReaderC1Ev>:
 */

#include <Reader/SensorReader.h>
SensorReader *SensorReader::instance = nullptr;
SemaphoreHandle_t SensorReader::mtx = nullptr;
SensorReader::SensorReader() :
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4)), npPin(
				MyPin(GPIOA, GPIO_PIN_4)), s1Pin(MyPin(GPIOA, GPIO_PIN_5)), s2Pin(
				MyPin(GPIOA, GPIO_PIN_6)), s3Pin(MyPin(GPIOA, GPIO_PIN_7)), s4Pin(
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorModel(), encoderTask(
				EncoderTask(100.5)), rpmTask(RpmTask(1)) {
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	2200      	movs	r2, #0
 80023d6:	494c      	ldr	r1, [pc, #304]	@ (8002508 <_ZN12SensorReaderC1Ev+0x148>)
 80023d8:	f7fe ff76 	bl	80012c8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 80023dc:	4a4b      	ldr	r2, [pc, #300]	@ (800250c <_ZN12SensorReaderC1Ev+0x14c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
		MyRTOSTask("SensorReader", nullptr, nullptr, 128, 1), atPin(
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f103 0020 	add.w	r0, r3, #32
 80023e8:	2300      	movs	r3, #0
 80023ea:	2202      	movs	r2, #2
 80023ec:	4948      	ldr	r1, [pc, #288]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 80023ee:	f7ff ff25 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_1)), ptPin(MyPin(GPIOA, GPIO_PIN_2)), cmPin(
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80023f8:	2300      	movs	r3, #0
 80023fa:	2204      	movs	r2, #4
 80023fc:	4944      	ldr	r1, [pc, #272]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 80023fe:	f7ff ff1d 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8002408:	2300      	movs	r3, #0
 800240a:	2208      	movs	r2, #8
 800240c:	4940      	ldr	r1, [pc, #256]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800240e:	f7ff ff15 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4)), npPin(
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8002418:	2300      	movs	r3, #0
 800241a:	2210      	movs	r2, #16
 800241c:	493c      	ldr	r1, [pc, #240]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800241e:	f7ff ff0d 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002428:	2300      	movs	r3, #0
 800242a:	2210      	movs	r2, #16
 800242c:	4938      	ldr	r1, [pc, #224]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800242e:	f7ff ff05 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_4)), s1Pin(MyPin(GPIOA, GPIO_PIN_5)), s2Pin(
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8002438:	2300      	movs	r3, #0
 800243a:	2220      	movs	r2, #32
 800243c:	4934      	ldr	r1, [pc, #208]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800243e:	f7ff fefd 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8002448:	2300      	movs	r3, #0
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	4930      	ldr	r1, [pc, #192]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800244e:	f7ff fef5 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_6)), s3Pin(MyPin(GPIOA, GPIO_PIN_7)), s4Pin(
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 8002458:	2300      	movs	r3, #0
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	492c      	ldr	r1, [pc, #176]	@ (8002510 <_ZN12SensorReaderC1Ev+0x150>)
 800245e:	f7ff feed 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002468:	2300      	movs	r3, #0
 800246a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800246e:	4929      	ldr	r1, [pc, #164]	@ (8002514 <_ZN12SensorReaderC1Ev+0x154>)
 8002470:	f7ff fee4 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 00d4 	add.w	r0, r3, #212	@ 0xd4
 800247a:	2300      	movs	r3, #0
 800247c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002480:	4924      	ldr	r1, [pc, #144]	@ (8002514 <_ZN12SensorReaderC1Ev+0x154>)
 8002482:	f7ff fedb 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800248c:	2300      	movs	r3, #0
 800248e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002492:	4920      	ldr	r1, [pc, #128]	@ (8002514 <_ZN12SensorReaderC1Ev+0x154>)
 8002494:	f7ff fed2 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorModel(), encoderTask(
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 800249e:	2300      	movs	r3, #0
 80024a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024a4:	491b      	ldr	r1, [pc, #108]	@ (8002514 <_ZN12SensorReaderC1Ev+0x154>)
 80024a6:	f7ff fec9 	bl	800223c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fe21 	bl	80010f8 <_ZN11SensorModelC1Ev>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80024bc:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8002500 <_ZN12SensorReaderC1Ev+0x140>
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fb71 	bl	8001ba8 <_ZN11EncoderTaskC1Ed>
				EncoderTask(100.5)), rpmTask(RpmTask(1)) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80024cc:	2101      	movs	r1, #1
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fdc8 	bl	8002064 <_ZN7RpmTaskC1Et>
	EncodeModel *enncoderModel = this->encoderTask.getEncoderModel();
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fc34 	bl	8001d48 <_ZN11EncoderTask15getEncoderModelEv>
 80024e0:	60f8      	str	r0, [r7, #12]
	this->sensorModel.setEncodeModel(enncoderModel);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fe4b 	bl	8001186 <_ZN11SensorModel14setEncodeModelEP11EncodeModel>
}
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	f3af 8000 	nop.w
 8002500:	00000000 	.word	0x00000000
 8002504:	40592000 	.word	0x40592000
 8002508:	0800f85c 	.word	0x0800f85c
 800250c:	0800f9a4 	.word	0x0800f9a4
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400

08002518 <_ZN12SensorReaderD1Ev>:

SensorReader::~SensorReader() {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <_ZN12SensorReaderD1Ev+0x38>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fe63 	bl	80021f8 <_ZN7RpmTaskD1Ev>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fcf5 	bl	8001f28 <_ZN11EncoderTaskD1Ev>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fee9 	bl	8001318 <_ZN10MyRTOSTaskD1Ev>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0800f9a4 	.word	0x0800f9a4

08002554 <_ZN12SensorReaderD0Ev>:
SensorReader::~SensorReader() {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
}
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffdb 	bl	8002518 <_ZN12SensorReaderD1Ev>
 8002562:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f00a fa7e 	bl	800ca68 <_ZdlPvj>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_ZN12SensorReader15handleInterruptEt>:

void SensorReader::handleInterrupt(uint16_t pin) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
	this->encoderTask.interruptCallback(pin);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd11 	bl	8001fb4 <_ZN7IRQTask17interruptCallbackEt>
	this->rpmTask.interruptCallback(pin);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd09 	bl	8001fb4 <_ZN7IRQTask17interruptCallbackEt>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZNK12SensorReader14getSensorModelEv>:

const SensorModel& SensorReader::getSensorModel() const {
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return this->sensorModel;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_ZN12SensorReader11getInstanceEv>:

SensorReader& SensorReader::getInstance() {
 80025c4:	b598      	push	{r3, r4, r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <_ZN12SensorReader11getInstanceEv+0x74>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12e      	bne.n	800262e <_ZN12SensorReader11getInstanceEv+0x6a>
		if (mtx == nullptr) {
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <_ZN12SensorReader11getInstanceEv+0x78>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <_ZN12SensorReader11getInstanceEv+0x20>
			mtx = xSemaphoreCreateMutex();
 80025d8:	2001      	movs	r0, #1
 80025da:	f006 ff28 	bl	800942e <xQueueCreateMutex>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a16      	ldr	r2, [pc, #88]	@ (800263c <_ZN12SensorReader11getInstanceEv+0x78>)
 80025e2:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mtx, portMAX_DELAY) == pdTRUE) {
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <_ZN12SensorReader11getInstanceEv+0x78>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	4618      	mov	r0, r3
 80025ee:	f007 fa49 	bl	8009a84 <xQueueSemaphoreTake>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <_ZN12SensorReader11getInstanceEv+0x6a>
			if (instance == nullptr) {
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <_ZN12SensorReader11getInstanceEv+0x74>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <_ZN12SensorReader11getInstanceEv+0x5c>
				instance = new SensorReader();
 800260a:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 800260e:	f00a fa2d 	bl	800ca6c <_Znwj>
 8002612:	4603      	mov	r3, r0
 8002614:	461c      	mov	r4, r3
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fed2 	bl	80023c0 <_ZN12SensorReaderC1Ev>
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <_ZN12SensorReader11getInstanceEv+0x74>)
 800261e:	601c      	str	r4, [r3, #0]
			}
			xSemaphoreGive(mtx);
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <_ZN12SensorReader11getInstanceEv+0x78>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	2300      	movs	r3, #0
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	f006 ff19 	bl	8009460 <xQueueGenericSend>
		}
	}
	return *instance;
 800262e:	4b02      	ldr	r3, [pc, #8]	@ (8002638 <_ZN12SensorReader11getInstanceEv+0x74>)
 8002630:	681b      	ldr	r3, [r3, #0]
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd98      	pop	{r3, r4, r7, pc}
 8002636:	bf00      	nop
 8002638:	200003a0 	.word	0x200003a0
 800263c:	200003a4 	.word	0x200003a4

08002640 <_ZN12SensorReader13getGearNumberEv>:

int SensorReader::getGearNumber() {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	bool s1 = this->s1Pin.readValueWithDebounce(), s2 =
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3384      	adds	r3, #132	@ 0x84
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fe65 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
			this->s2Pin.readValueWithDebounce(), s3 =
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3398      	adds	r3, #152	@ 0x98
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fe59 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	73bb      	strb	r3, [r7, #14]
			this->s3Pin.readValueWithDebounce(), s4 =
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	33ac      	adds	r3, #172	@ 0xac
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe4d 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	737b      	strb	r3, [r7, #13]
			this->s4Pin.readValueWithDebounce();
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	33c0      	adds	r3, #192	@ 0xc0
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe41 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	733b      	strb	r3, [r7, #12]
	if (s3) {
 80026a8:	7b7b      	ldrb	r3, [r7, #13]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <_ZN12SensorReader13getGearNumberEv+0x8c>
		if (s1) {
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <_ZN12SensorReader13getGearNumberEv+0x78>
			return 3;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e014      	b.n	80026e2 <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s2) {
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <_ZN12SensorReader13getGearNumberEv+0x82>
			return 4;
 80026be:	2304      	movs	r3, #4
 80026c0:	e00f      	b.n	80026e2 <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s4) {
 80026c2:	7b3b      	ldrb	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <_ZN12SensorReader13getGearNumberEv+0x8c>
			return 5;
 80026c8:	2305      	movs	r3, #5
 80026ca:	e00a      	b.n	80026e2 <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
	}
	if (s1) {
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_ZN12SensorReader13getGearNumberEv+0x96>
		return 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e005      	b.n	80026e2 <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	if (s2) {
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <_ZN12SensorReader13getGearNumberEv+0xa0>
		return 2;
 80026dc:	2302      	movs	r3, #2
 80026de:	e000      	b.n	80026e2 <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	return 0;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <_ZN12SensorReader3runEv>:

void SensorReader::run() {
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	this->encoderTask.start();
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fe76 	bl	80013ec <_ZN10MyRTOSTask5startEv>
	this->rpmTask.start();
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe70 	bl	80013ec <_ZN10MyRTOSTask5startEv>
	this->stopSt = false;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]
	while (!this->stopSt) {
 8002712:	e0c1      	b.n	8002898 <_ZN12SensorReader3runEv+0x1ac>
		this->sensorModel.setAt(this->atPin.readValueWithDebounce());
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3320      	adds	r3, #32
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fdfc 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf14      	ite	ne
 800272c:	2301      	movne	r3, #1
 800272e:	2300      	moveq	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	4620      	mov	r0, r4
 8002736:	f7fe fd0b 	bl	8001150 <_ZN11SensorModel5setAtEb>
		this->sensorModel.setPt(this->ptPin.readValueWithDebounce());
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3334      	adds	r3, #52	@ 0x34
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fde9 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	4620      	mov	r0, r4
 800275c:	f7fe fd5d 	bl	800121a <_ZN11SensorModel5setPtEb>
		this->sensorModel.setCm(this->cmPin.readValueWithDebounce());
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3348      	adds	r3, #72	@ 0x48
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fdd6 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	4620      	mov	r0, r4
 8002782:	f7fe fd0e 	bl	80011a2 <_ZN11SensorModel5setCmEb>
		this->sensorModel.setNt(this->ntPin.readValueWithDebounce());
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	335c      	adds	r3, #92	@ 0x5c
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fdc3 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf14      	ite	ne
 800279e:	2301      	movne	r3, #1
 80027a0:	2300      	moveq	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7fe fd28 	bl	80011fc <_ZN11SensorModel5setNtEb>
		this->sensorModel.setNp(this->npPin.readValueWithDebounce());
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3370      	adds	r3, #112	@ 0x70
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fdb0 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7fe fd06 	bl	80011de <_ZN11SensorModel5setNpEb>
		this->sensorModel.setT1(this->t1Pin.readValueWithDebounce());
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33d4      	adds	r3, #212	@ 0xd4
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd9d 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7fe fd3b 	bl	800126e <_ZN11SensorModel5setT1Eb>
		this->sensorModel.setT2(this->t2Pin.readValueWithDebounce());
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	33e8      	adds	r3, #232	@ 0xe8
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fd8a 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	4620      	mov	r0, r4
 800281a:	f7fe fd37 	bl	800128c <_ZN11SensorModel5setT2Eb>
		this->sensorModel.setT3(this->t3Pin.readValueWithDebounce());
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	33fc      	adds	r3, #252	@ 0xfc
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fd77 	bl	800231e <_ZN5MyPin21readValueWithDebounceEb>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	4620      	mov	r0, r4
 8002840:	f7fe fd33 	bl	80012aa <_ZN11SensorModel5setT3Eb>
		this->sensorModel.setGear(this->getGearNumber());
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fef8 	bl	8002640 <_ZN12SensorReader13getGearNumberEv>
 8002850:	4603      	mov	r3, r0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	4620      	mov	r0, r4
 8002858:	f7fe fcb2 	bl	80011c0 <_ZN11SensorModel7setGearEh>
		this->sensorModel.setRpm(this->rpmTask.getValue());
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fc59 	bl	8002120 <_ZN7RpmTask8getValueEv>
 800286e:	4603      	mov	r3, r0
 8002870:	4619      	mov	r1, r3
 8002872:	4620      	mov	r0, r4
 8002874:	f7fe fcec 	bl	8001250 <_ZN11SensorModel6setRpmEt>
		this->encoderTask.getEncoderModel();
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fa62 	bl	8001d48 <_ZN11EncoderTask15getEncoderModelEv>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002888:	480a      	ldr	r0, [pc, #40]	@ (80028b4 <_ZN12SensorReader3runEv+0x1c8>)
 800288a:	f000 fb66 	bl	8002f5a <HAL_GPIO_TogglePin>
		delay(100);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2164      	movs	r1, #100	@ 0x64
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fd6e 	bl	8001374 <_ZN10MyRTOSTask5delayEm>
	while (!this->stopSt) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f47f af36 	bne.w	8002714 <_ZN12SensorReader3runEv+0x28>
	}
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40020800 	.word	0x40020800

080028b8 <_ZN12SensorReader4stopEv>:

void SensorReader::stop() {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	this->encoderTask.stop();
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fdb4 	bl	8001434 <_ZN10MyRTOSTask4stopEv>
	this->rpmTask.stop();
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fdae 	bl	8001434 <_ZN10MyRTOSTask4stopEv>
	MyRTOSTask::stop();
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fdaa 	bl	8001434 <_ZN10MyRTOSTask4stopEv>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
	SensorReader::getInstance().handleInterrupt(pin);
 80028f2:	f7ff fe67 	bl	80025c4 <_ZN12SensorReader11getInstanceEv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7ff fe3a 	bl	8002576 <_ZN12SensorReader15handleInterruptEt>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800290c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002910:	f7ff f916 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002914:	480c      	ldr	r0, [pc, #48]	@ (8002948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002916:	490d      	ldr	r1, [pc, #52]	@ (800294c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002918:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800292c:	4c0a      	ldr	r4, [pc, #40]	@ (8002958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293a:	f00a fff9 	bl	800d930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293e:	f7fe fd91 	bl	8001464 <main>
  bx  lr    
 8002942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002944:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800294c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002950:	0800fd38 	.word	0x0800fd38
  ldr r2, =_sbss
 8002954:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002958:	200062c8 	.word	0x200062c8

0800295c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC_IRQHandler>
	...

08002960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002964:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0d      	ldr	r2, [pc, #52]	@ (80029a0 <HAL_Init+0x40>)
 800296a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <HAL_Init+0x40>)
 8002976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800297a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <HAL_Init+0x40>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f8fc 	bl	8002b86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	200f      	movs	r0, #15
 8002990:	f7fe ff4a 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7fe ff1c 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_IncTick+0x20>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	@ (80029c8 <HAL_IncTick+0x24>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008
 80029c8:	200003a8 	.word	0x200003a8

080029cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return uwTick;
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <HAL_GetTick+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	200003a8 	.word	0x200003a8

080029e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff ffee 	bl	80029cc <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d005      	beq.n	8002a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_Delay+0x44>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0a:	bf00      	nop
 8002a0c:	f7ff ffde 	bl	80029cc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8f7      	bhi.n	8002a0c <HAL_Delay+0x28>
  {
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000008 	.word	0x20000008

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff4c 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bae:	f7ff ff61 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f7ff ffb1 	bl	8002b20 <NVIC_EncodePriority>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff80 	bl	8002acc <__NVIC_SetPriority>
}
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff54 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e159      	b.n	8002ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8148 	bne.w	8002eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d005      	beq.n	8002c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d130      	bne.n	8002ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0201 	and.w	r2, r3, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d017      	beq.n	8002ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d123      	bne.n	8002d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a2 	beq.w	8002eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b57      	ldr	r3, [pc, #348]	@ (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a56      	ldr	r2, [pc, #344]	@ (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b54      	ldr	r3, [pc, #336]	@ (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a52      	ldr	r2, [pc, #328]	@ (8002edc <HAL_GPIO_Init+0x2ec>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a49      	ldr	r2, [pc, #292]	@ (8002ee0 <HAL_GPIO_Init+0x2f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x202>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a48      	ldr	r2, [pc, #288]	@ (8002ee4 <HAL_GPIO_Init+0x2f4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x1fe>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a47      	ldr	r2, [pc, #284]	@ (8002ee8 <HAL_GPIO_Init+0x2f8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x1fa>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <HAL_GPIO_Init+0x2fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x1f6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a45      	ldr	r2, [pc, #276]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x1f2>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_GPIO_Init+0x2ec>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e66:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f aea2 	bls.w	8002c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	041a      	lsls	r2, r3, #16
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa6:	4a05      	ldr	r2, [pc, #20]	@ (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fc9a 	bl	80028e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e101      	b.n	80031d6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f009 fa31 	bl	800c454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003000:	d102      	bne.n	8003008 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fc24 	bl	800585a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7c1a      	ldrb	r2, [r3, #16]
 800301a:	f88d 2000 	strb.w	r2, [sp]
 800301e:	3304      	adds	r3, #4
 8003020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003022:	f002 fb03 	bl	800562c <USB_CoreInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0ce      	b.n	80031d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fc1c 	bl	800587c <USB_SetCurrentMode>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0bf      	b.n	80031d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e04a      	b.n	80030f2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3315      	adds	r3, #21
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3314      	adds	r3, #20
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	b298      	uxth	r0, r3
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	332e      	adds	r3, #46	@ 0x2e
 8003098:	4602      	mov	r2, r0
 800309a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3318      	adds	r3, #24
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	331c      	adds	r3, #28
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3320      	adds	r3, #32
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3324      	adds	r3, #36	@ 0x24
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	3301      	adds	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d3af      	bcc.n	800305c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e044      	b.n	800318c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3301      	adds	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	791b      	ldrb	r3, [r3, #4]
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	429a      	cmp	r2, r3
 8003194:	d3b5      	bcc.n	8003102 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7c1a      	ldrb	r2, [r3, #16]
 800319e:	f88d 2000 	strb.w	r2, [sp]
 80031a2:	3304      	adds	r3, #4
 80031a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a6:	f002 fbb5 	bl	8005914 <USB_DevInit>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e00c      	b.n	80031d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fbff 	bl	80069d2 <USB_DevDisconnect>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_Start+0x1c>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e022      	b.n	8003240 <HAL_PCD_Start+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f002 fb06 	bl	8005838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fbad 	bl	8006990 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08d      	sub	sp, #52	@ 0x34
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fc6b 	bl	8006b3a <USB_GetMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 848c 	bne.w	8003b84 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fbcf 	bl	8006a14 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8482 	beq.w	8003b82 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fbbc 	bl	8006a14 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d107      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f002 0202 	and.w	r2, r2, #2
 80032b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fbaa 	bl	8006a14 <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d161      	bne.n	800338e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0210 	bic.w	r2, r2, #16
 80032d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f003 020f 	and.w	r2, r3, #15
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	0c5b      	lsrs	r3, r3, #17
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	2b02      	cmp	r3, #2
 8003304:	d124      	bne.n	8003350 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d035      	beq.n	800337e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800331c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	6a38      	ldr	r0, [r7, #32]
 8003326:	f003 f9e1 	bl	80066ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003336:	441a      	add	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003348:	441a      	add	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	615a      	str	r2, [r3, #20]
 800334e:	e016      	b.n	800337e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	0c5b      	lsrs	r3, r3, #17
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2b06      	cmp	r3, #6
 800335a:	d110      	bne.n	800337e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003362:	2208      	movs	r2, #8
 8003364:	4619      	mov	r1, r3
 8003366:	6a38      	ldr	r0, [r7, #32]
 8003368:	f003 f9c0 	bl	80066ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003378:	441a      	add	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0210 	orr.w	r2, r2, #16
 800338c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fb3e 	bl	8006a14 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033a2:	f040 80a7 	bne.w	80034f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fb43 	bl	8006a3a <USB_ReadDevAllOutEpInterrupt>
 80033b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033b6:	e099      	b.n	80034ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 808e 	beq.w	80034e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fb67 	bl	8006aa2 <USB_ReadDevOutEPInterrupt>
 80033d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2301      	movs	r3, #1
 80033f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fea3 	bl	8004140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	2308      	movs	r3, #8
 8003414:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003416:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 ff79 	bl	8004310 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	2310      	movs	r3, #16
 8003438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d030      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d109      	bne.n	8003464 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800345e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003462:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f009 f8dc 	bl	800c64c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
 80034a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	2320      	movs	r3, #32
 80034c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f af62 	bne.w	80033b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fa8b 	bl	8006a14 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003508:	f040 80db 	bne.w	80036c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 faac 	bl	8006a6e <USB_ReadDevAllInEpInterrupt>
 8003516:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800351c:	e0cd      	b.n	80036ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80c2 	beq.w	80036ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fad2 	bl	8006ade <USB_ReadDevInEPInterrupt>
 800353a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d057      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	2201      	movs	r2, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003566:	4013      	ands	r3, r2
 8003568:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003576:	461a      	mov	r2, r3
 8003578:	2301      	movs	r3, #1
 800357a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	799b      	ldrb	r3, [r3, #6]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d132      	bne.n	80035ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3320      	adds	r3, #32
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	331c      	adds	r3, #28
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4419      	add	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4403      	add	r3, r0
 80035b8:	3320      	adds	r3, #32
 80035ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <HAL_PCD_IRQHandler+0x3a2>
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3324      	adds	r3, #36	@ 0x24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035e2:	461a      	mov	r2, r3
 80035e4:	2101      	movs	r1, #1
 80035e6:	f003 fad9 	bl	8006b9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f008 ffb0 	bl	800c556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	2308      	movs	r3, #8
 8003610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2310      	movs	r3, #16
 800362c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003644:	461a      	mov	r2, r3
 8003646:	2340      	movs	r3, #64	@ 0x40
 8003648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003656:	6a38      	ldr	r0, [r7, #32]
 8003658:	f002 fac0 	bl	8005bdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3310      	adds	r3, #16
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	78db      	ldrb	r3, [r3, #3]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d108      	bne.n	800368a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f008 fff3 	bl	800c670 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003696:	461a      	mov	r2, r3
 8003698:	2302      	movs	r3, #2
 800369a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fcbd 	bl	8004028 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	3301      	adds	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f47f af2e 	bne.w	800351e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 f9a4 	bl	8006a14 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036d6:	d122      	bne.n	800371e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d108      	bne.n	8003708 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036fe:	2100      	movs	r1, #0
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fea3 	bl	800444c <HAL_PCDEx_LPM_Callback>
 8003706:	e002      	b.n	800370e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f008 ff91 	bl	800c630 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800371c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f003 f976 	bl	8006a14 <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003732:	d112      	bne.n	800375a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f008 ff4d 	bl	800c5e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003758:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 f958 	bl	8006a14 <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376e:	f040 80b7 	bne.w	80038e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2110      	movs	r1, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fa25 	bl	8005bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003796:	e046      	b.n	8003826 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a4:	461a      	mov	r2, r3
 80037a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800381a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800381e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	3301      	adds	r3, #1
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	791b      	ldrb	r3, [r3, #4]
 800382a:	461a      	mov	r2, r3
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	4293      	cmp	r3, r2
 8003830:	d3b2      	bcc.n	8003798 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003840:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003844:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7bdb      	ldrb	r3, [r3, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385e:	f043 030b 	orr.w	r3, r3, #11
 8003862:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003874:	f043 030b 	orr.w	r3, r3, #11
 8003878:	6453      	str	r3, [r2, #68]	@ 0x44
 800387a:	e015      	b.n	80038a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800388e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003892:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a2:	f043 030b 	orr.w	r3, r3, #11
 80038a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ca:	461a      	mov	r2, r3
 80038cc:	f003 f966 	bl	8006b9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 f895 	bl	8006a14 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f4:	d123      	bne.n	800393e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 f92b 	bl	8006b56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 f9e2 	bl	8005cce <USB_GetDevSpeed>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681c      	ldr	r4, [r3, #0]
 8003916:	f001 f9c9 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 800391a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003920:	461a      	mov	r2, r3
 8003922:	4620      	mov	r0, r4
 8003924:	f001 fee6 	bl	80056f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f008 fe3c 	bl	800c5a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800393c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f003 f866 	bl	8006a14 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d10a      	bne.n	8003968 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f008 fe19 	bl	800c58a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 0208 	and.w	r2, r2, #8
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f003 f851 	bl	8006a14 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003978:	2b80      	cmp	r3, #128	@ 0x80
 800397a:	d123      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	e014      	b.n	80039b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb0a 	bl	8003fc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	3301      	adds	r3, #1
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	791b      	ldrb	r3, [r3, #4]
 80039bc:	461a      	mov	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d3e4      	bcc.n	800398e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 f823 	bl	8006a14 <USB_ReadInterrupts>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d8:	d13c      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039da:	2301      	movs	r3, #1
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039de:	e02b      	b.n	8003a38 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3318      	adds	r3, #24
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d115      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da12      	bge.n	8003a32 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3317      	adds	r3, #23
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 faca 	bl	8003fc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	3301      	adds	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d3cd      	bcc.n	80039e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 ffdb 	bl	8006a14 <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a68:	d156      	bne.n	8003b18 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6e:	e045      	b.n	8003afc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d12e      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da2b      	bge.n	8003af6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d121      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af2:	6053      	str	r3, [r2, #4]
            break;
 8003af4:	e008      	b.n	8003b08 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	461a      	mov	r2, r3
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d3b3      	bcc.n	8003a70 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 ff79 	bl	8006a14 <USB_ReadInterrupts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d10a      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f008 fdb0 	bl	800c694 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 ff63 	bl	8006a14 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d115      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f008 fda0 	bl	800c6b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	e000      	b.n	8003b84 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b82:	bf00      	nop
    }
  }
}
 8003b84:	3734      	adds	r7, #52	@ 0x34
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_PCD_SetAddress+0x1a>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e012      	b.n	8003bca <HAL_PCD_SetAddress+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f002 fec2 	bl	8006944 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	461a      	mov	r2, r3
 8003be0:	4603      	mov	r3, r0
 8003be2:	70fb      	strb	r3, [r7, #3]
 8003be4:	460b      	mov	r3, r1
 8003be6:	803b      	strh	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da0f      	bge.n	8003c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3310      	adds	r3, #16
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
 8003c16:	e00f      	b.n	8003c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c44:	883b      	ldrh	r3, [r7, #0]
 8003c46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	78ba      	ldrb	r2, [r7, #2]
 8003c52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c66:	78bb      	ldrb	r3, [r7, #2]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d102      	bne.n	8003c72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_PCD_EP_Open+0xae>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e00e      	b.n	8003c9e <HAL_PCD_EP_Open+0xcc>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 f842 	bl	8005d18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da0f      	bge.n	8003cda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	3310      	adds	r3, #16
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
 8003cd8:	e00f      	b.n	8003cfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_Close+0x6e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_Close+0x8c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 f880 	bl	8005e28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	460b      	mov	r3, r1
 8003d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	799b      	ldrb	r3, [r3, #6]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	799b      	ldrb	r3, [r3, #6]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	f002 f91d 	bl	8005fe0 <USB_EPStartXfer>

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	460b      	mov	r3, r1
 8003dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	7afb      	ldrb	r3, [r7, #11]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3310      	adds	r3, #16
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e20:	7afb      	ldrb	r3, [r7, #11]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	799b      	ldrb	r3, [r3, #6]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	799b      	ldrb	r3, [r3, #6]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	f002 f8cb 	bl	8005fe0 <USB_EPStartXfer>

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	7912      	ldrb	r2, [r2, #4]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e04f      	b.n	8003f12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	da0f      	bge.n	8003e9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3310      	adds	r3, #16
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3304      	adds	r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	705a      	strb	r2, [r3, #1]
 8003e98:	e00d      	b.n	8003eb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	3304      	adds	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_PCD_EP_SetStall+0x82>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e01d      	b.n	8003f12 <HAL_PCD_EP_SetStall+0xbe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f002 fc59 	bl	800679c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7999      	ldrb	r1, [r3, #6]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f02:	461a      	mov	r2, r3
 8003f04:	f002 fe4a 	bl	8006b9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	7912      	ldrb	r2, [r2, #4]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e042      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da0f      	bge.n	8003f60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3310      	adds	r3, #16
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	705a      	strb	r2, [r3, #1]
 8003f5e:	e00f      	b.n	8003f80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_PCD_EP_ClrStall+0x86>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e00e      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0xa4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 fc62 	bl	8006878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da0c      	bge.n	8003ff4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 020f 	and.w	r2, r3, #15
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3310      	adds	r3, #16
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e00c      	b.n	800400e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	4618      	mov	r0, r3
 8004016:	f002 fa81 	bl	800651c <USB_EPStopXfer>
 800401a:	4603      	mov	r3, r0
 800401c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800401e:	7afb      	ldrb	r3, [r7, #11]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	3310      	adds	r3, #16
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	429a      	cmp	r2, r3
 800405a:	d901      	bls.n	8004060 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e06b      	b.n	8004138 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	429a      	cmp	r2, r3
 8004074:	d902      	bls.n	800407c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3303      	adds	r3, #3
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004084:	e02a      	b.n	80040dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	429a      	cmp	r2, r3
 800409a:	d902      	bls.n	80040a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3303      	adds	r3, #3
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4603      	mov	r3, r0
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f002 fad6 	bl	8006670 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d809      	bhi.n	8004106 <PCD_WriteEmptyTxFifo+0xde>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d203      	bcs.n	8004106 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1bf      	bne.n	8004086 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	429a      	cmp	r2, r3
 8004110:	d811      	bhi.n	8004136 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2201      	movs	r2, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	43db      	mvns	r3, r3
 800412c:	6939      	ldr	r1, [r7, #16]
 800412e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004132:	4013      	ands	r3, r2
 8004134:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	333c      	adds	r3, #60	@ 0x3c
 8004158:	3304      	adds	r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	799b      	ldrb	r3, [r3, #6]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d17b      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a61      	ldr	r2, [pc, #388]	@ (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	f240 80b9 	bls.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80b3 	beq.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	e0a7      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	2320      	movs	r3, #32
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e098      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 8093 	bne.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d90f      	bls.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	e07e      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	0159      	lsls	r1, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	440b      	add	r3, r1
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d114      	bne.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004248:	461a      	mov	r2, r3
 800424a:	2101      	movs	r1, #1
 800424c:	f002 fca6 	bl	8006b9c <USB_EP0_OutStart>
 8004250:	e006      	b.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f008 f95a 	bl	800c520 <HAL_PCD_DataOutStageCallback>
 800426c:	e046      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4a26      	ldr	r2, [pc, #152]	@ (800430c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d124      	bne.n	80042c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	e032      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ac:	461a      	mov	r2, r3
 80042ae:	2320      	movs	r3, #32
 80042b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f008 f931 	bl	800c520 <HAL_PCD_DataOutStageCallback>
 80042be:	e01d      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d114      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f002 fc56 	bl	8006b9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f008 f912 	bl	800c520 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	4f54300a 	.word	0x4f54300a
 800430c:	4f54310a 	.word	0x4f54310a

08004310 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	333c      	adds	r3, #60	@ 0x3c
 8004328:	3304      	adds	r3, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a15      	ldr	r2, [pc, #84]	@ (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d90e      	bls.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004362:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f008 f8c9 	bl	800c4fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90c      	bls.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	799b      	ldrb	r3, [r3, #6]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004384:	461a      	mov	r2, r3
 8004386:	2101      	movs	r1, #1
 8004388:	f002 fc08 	bl	8006b9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	4f54300a 	.word	0x4f54300a

0800439c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	0419      	lsls	r1, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043c8:	e028      	b.n	800441c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e00d      	b.n	80043fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3340      	adds	r3, #64	@ 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	3301      	adds	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	3b01      	subs	r3, #1
 8004400:	429a      	cmp	r2, r3
 8004402:	d3ec      	bcc.n	80043de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004404:	883b      	ldrh	r3, [r7, #0]
 8004406:	0418      	lsls	r0, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b01      	subs	r3, #1
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4302      	orrs	r2, r0
 8004414:	3340      	adds	r3, #64	@ 0x40
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e267      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d075      	beq.n	800456e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004482:	4b88      	ldr	r3, [pc, #544]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b04      	cmp	r3, #4
 800448c:	d00c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448e:	4b85      	ldr	r3, [pc, #532]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004496:	2b08      	cmp	r3, #8
 8004498:	d112      	bne.n	80044c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449a:	4b82      	ldr	r3, [pc, #520]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	4b7e      	ldr	r3, [pc, #504]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05b      	beq.n	800456c <HAL_RCC_OscConfig+0x108>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d157      	bne.n	800456c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e242      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x74>
 80044ca:	4b76      	ldr	r3, [pc, #472]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a75      	ldr	r2, [pc, #468]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x98>
 80044e2:	4b70      	ldr	r3, [pc, #448]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a6f      	ldr	r2, [pc, #444]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b6d      	ldr	r3, [pc, #436]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a6c      	ldr	r2, [pc, #432]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044fc:	4b69      	ldr	r3, [pc, #420]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a68      	ldr	r2, [pc, #416]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b66      	ldr	r3, [pc, #408]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a65      	ldr	r2, [pc, #404]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe fa56 	bl	80029cc <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe fa52 	bl	80029cc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e207      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b5b      	ldr	r3, [pc, #364]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xc0>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fa42 	bl	80029cc <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe fa3e 	bl	80029cc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1f3      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	4b51      	ldr	r3, [pc, #324]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0xe8>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d063      	beq.n	8004642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800457a:	4b4a      	ldr	r3, [pc, #296]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004586:	4b47      	ldr	r3, [pc, #284]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11c      	bne.n	80045cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004592:	4b44      	ldr	r3, [pc, #272]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	4b41      	ldr	r3, [pc, #260]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x152>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1c7      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4937      	ldr	r1, [pc, #220]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	e03a      	b.n	8004642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	4b34      	ldr	r3, [pc, #208]	@ (80046a8 <HAL_RCC_OscConfig+0x244>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fe f9f7 	bl	80029cc <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e2:	f7fe f9f3 	bl	80029cc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e1a8      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004600:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4925      	ldr	r1, [pc, #148]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x244>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe f9d6 	bl	80029cc <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fe f9d2 	bl	80029cc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e187      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	4b1b      	ldr	r3, [pc, #108]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <HAL_RCC_OscConfig+0x248>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe f9b6 	bl	80029cc <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fe f9b2 	bl	80029cc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e167      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_RCC_OscConfig+0x240>)
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x200>
 8004682:	e01b      	b.n	80046bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004684:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_OscConfig+0x248>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468a:	f7fe f99f 	bl	80029cc <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	e00e      	b.n	80046b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004692:	f7fe f99b 	bl	80029cc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d907      	bls.n	80046b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e150      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	42470000 	.word	0x42470000
 80046ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b0:	4b88      	ldr	r3, [pc, #544]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ea      	bne.n	8004692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8097 	beq.w	80047f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b81      	ldr	r3, [pc, #516]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	4b7d      	ldr	r3, [pc, #500]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	4a7c      	ldr	r2, [pc, #496]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ea:	4b7a      	ldr	r3, [pc, #488]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b77      	ldr	r3, [pc, #476]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b74      	ldr	r3, [pc, #464]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a73      	ldr	r2, [pc, #460]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fe f95b 	bl	80029cc <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fe f957 	bl	80029cc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e10c      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCC_OscConfig+0x474>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x2ea>
 8004740:	4b64      	ldr	r3, [pc, #400]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	@ 0x70
 800474c:	e01c      	b.n	8004788 <HAL_RCC_OscConfig+0x324>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x30c>
 8004756:	4b5f      	ldr	r3, [pc, #380]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	4a5e      	ldr	r2, [pc, #376]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	6713      	str	r3, [r2, #112]	@ 0x70
 8004762:	4b5c      	ldr	r3, [pc, #368]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	4a5b      	ldr	r2, [pc, #364]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	@ 0x70
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0x324>
 8004770:	4b58      	ldr	r3, [pc, #352]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004774:	4a57      	ldr	r2, [pc, #348]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	@ 0x70
 800477c:	4b55      	ldr	r3, [pc, #340]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a54      	ldr	r2, [pc, #336]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004782:	f023 0304 	bic.w	r3, r3, #4
 8004786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fe f91c 	bl	80029cc <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fe f918 	bl	80029cc <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0cb      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	4b49      	ldr	r3, [pc, #292]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ee      	beq.n	8004798 <HAL_RCC_OscConfig+0x334>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047bc:	f7fe f906 	bl	80029cc <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fe f902 	bl	80029cc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0b5      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047da:	4b3e      	ldr	r3, [pc, #248]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ee      	bne.n	80047c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	4a38      	ldr	r2, [pc, #224]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a1 	beq.w	8004944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004802:	4b34      	ldr	r3, [pc, #208]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b08      	cmp	r3, #8
 800480c:	d05c      	beq.n	80048c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d141      	bne.n	800489a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b31      	ldr	r3, [pc, #196]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fe f8d6 	bl	80029cc <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe f8d2 	bl	80029cc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e087      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	491b      	ldr	r1, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fe f8ab 	bl	80029cc <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fe f8a7 	bl	80029cc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e05c      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x416>
 8004898:	e054      	b.n	8004944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCC_OscConfig+0x478>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fe f894 	bl	80029cc <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe f890 	bl	80029cc <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e045      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x444>
 80048c6:	e03d      	b.n	8004944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e038      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x4ec>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d028      	beq.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d121      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d11a      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	4293      	cmp	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0cc      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b68      	ldr	r3, [pc, #416]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90c      	bls.n	8004990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b65      	ldr	r3, [pc, #404]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d044      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a12:	4b3f      	ldr	r3, [pc, #252]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e06f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e067      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4934      	ldr	r1, [pc, #208]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a44:	f7fd ffc2 	bl	80029cc <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fd ffbe 	bl	80029cc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2b      	ldr	r3, [pc, #172]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d20c      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc fe94 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	0800f918 	.word	0x0800f918
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b090      	sub	sp, #64	@ 0x40
 8004b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b38:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d00d      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x40>
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	f200 80a1 	bhi.w	8004c8c <HAL_RCC_GetSysClockFreq+0x16c>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b52:	e09b      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b54:	4b53      	ldr	r3, [pc, #332]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b58:	e09b      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5a:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b5e:	e098      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b60:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d028      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	623b      	str	r3, [r7, #32]
 8004b80:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b8c:	fb03 f201 	mul.w	r2, r3, r1
 8004b90:	2300      	movs	r3, #0
 8004b92:	fb00 f303 	mul.w	r3, r0, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	4a43      	ldr	r2, [pc, #268]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba6:	4413      	add	r3, r2
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	2200      	movs	r2, #0
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	61fa      	str	r2, [r7, #28]
 8004bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bba:	f7fc f84d 	bl	8000c58 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc6:	e053      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc8:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	2200      	movs	r2, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	617a      	str	r2, [r7, #20]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bda:	f04f 0b00 	mov.w	fp, #0
 8004bde:	4652      	mov	r2, sl
 8004be0:	465b      	mov	r3, fp
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8004bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c12:	ebb2 0408 	subs.w	r4, r2, r8
 8004c16:	eb63 0509 	sbc.w	r5, r3, r9
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	00eb      	lsls	r3, r5, #3
 8004c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c28:	00e2      	lsls	r2, r4, #3
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	eb14 030a 	adds.w	r3, r4, sl
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	eb45 030b 	adc.w	r3, r5, fp
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c46:	4629      	mov	r1, r5
 8004c48:	028b      	lsls	r3, r1, #10
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c50:	4621      	mov	r1, r4
 8004c52:	028a      	lsls	r2, r1, #10
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	60fa      	str	r2, [r7, #12]
 8004c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c64:	f7fb fff8 	bl	8000c58 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3740      	adds	r7, #64	@ 0x40
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	017d7840 	.word	0x017d7840

08004cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	@ (8004cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000000 	.word	0x20000000

08004cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cc8:	f7ff fff0 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0b5b      	lsrs	r3, r3, #13
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	@ (8004ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800f928 	.word	0x0800f928

08004cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	220f      	movs	r2, #15
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cfc:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_RCC_GetClockConfig+0x5c>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0203 	and.w	r2, r3, #3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d08:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d14:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d20:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_GetClockConfig+0x5c>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <HAL_RCC_GetClockConfig+0x60>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0207 	and.w	r2, r3, #7
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40023c00 	.word	0x40023c00

08004d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e04c      	b.n	8004dfc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d111      	bne.n	8004d92 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fbe2 	bl	8005540 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <HAL_TIM_Base_Init+0xb4>)
 8004d88:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 fb3f 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	08004e09 	.word	0x08004e09

08004e08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e044      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x6c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5e:	d013      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x6c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x6c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x6c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a17      	ldr	r2, [pc, #92]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <HAL_TIM_Base_Start_IT+0xc0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d111      	bne.n	8004eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d010      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	e007      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40014000 	.word	0x40014000

08004ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d026      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d021      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	e009      	b.n	8004f4a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d026      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d021      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0204 	mvn.w	r2, #4
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e009      	b.n	8004fa2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d026      	beq.n	8005000 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d021      	beq.n	8005000 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0208 	mvn.w	r2, #8
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
 8004fe4:	e009      	b.n	8004ffa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d026      	beq.n	8005058 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d021      	beq.n	8005058 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0210 	mvn.w	r2, #16
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2208      	movs	r2, #8
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
 800503c:	e009      	b.n	8005052 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0201 	mvn.w	r2, #1
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00e      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0220 	mvn.w	r2, #32
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	460b      	mov	r3, r1
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e125      	b.n	800541c <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f040 80b9 	bne.w	8005350 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	2b1a      	cmp	r3, #26
 80051e2:	f200 80b2 	bhi.w	800534a <HAL_TIM_RegisterCallback+0x196>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <HAL_TIM_RegisterCallback+0x38>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005259 	.word	0x08005259
 80051f0:	08005261 	.word	0x08005261
 80051f4:	08005269 	.word	0x08005269
 80051f8:	08005271 	.word	0x08005271
 80051fc:	08005279 	.word	0x08005279
 8005200:	08005281 	.word	0x08005281
 8005204:	08005289 	.word	0x08005289
 8005208:	08005291 	.word	0x08005291
 800520c:	08005299 	.word	0x08005299
 8005210:	080052a1 	.word	0x080052a1
 8005214:	080052a9 	.word	0x080052a9
 8005218:	080052b1 	.word	0x080052b1
 800521c:	080052b9 	.word	0x080052b9
 8005220:	080052c1 	.word	0x080052c1
 8005224:	080052c9 	.word	0x080052c9
 8005228:	080052d3 	.word	0x080052d3
 800522c:	080052dd 	.word	0x080052dd
 8005230:	080052e7 	.word	0x080052e7
 8005234:	080052f1 	.word	0x080052f1
 8005238:	080052fb 	.word	0x080052fb
 800523c:	08005305 	.word	0x08005305
 8005240:	0800530f 	.word	0x0800530f
 8005244:	08005319 	.word	0x08005319
 8005248:	08005323 	.word	0x08005323
 800524c:	0800532d 	.word	0x0800532d
 8005250:	08005337 	.word	0x08005337
 8005254:	08005341 	.word	0x08005341
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800525e:	e0dc      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8005266:	e0d8      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800526e:	e0d4      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005276:	e0d0      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800527e:	e0cc      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005286:	e0c8      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800528e:	e0c4      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005296:	e0c0      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800529e:	e0bc      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80052a6:	e0b8      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80052ae:	e0b4      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80052b6:	e0b0      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80052be:	e0ac      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80052c6:	e0a8      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80052d0:	e0a3      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80052da:	e09e      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80052e4:	e099      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80052ee:	e094      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80052f8:	e08f      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8005302:	e08a      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800530c:	e085      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8005316:	e080      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8005320:	e07b      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800532a:	e076      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8005334:	e071      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800533e:	e06c      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8005348:	e067      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
        break;
 800534e:	e064      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d15c      	bne.n	8005416 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	2b0d      	cmp	r3, #13
 8005360:	d856      	bhi.n	8005410 <HAL_TIM_RegisterCallback+0x25c>
 8005362:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_TIM_RegisterCallback+0x1b4>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053a9 	.word	0x080053a9
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053d9 	.word	0x080053d9
 8005388:	080053e1 	.word	0x080053e1
 800538c:	080053e9 	.word	0x080053e9
 8005390:	080053f1 	.word	0x080053f1
 8005394:	080053f9 	.word	0x080053f9
 8005398:	08005401 	.word	0x08005401
 800539c:	08005409 	.word	0x08005409
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80053a6:	e038      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80053ae:	e034      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80053b6:	e030      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80053be:	e02c      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80053c6:	e028      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80053ce:	e024      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80053d6:	e020      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80053de:	e01c      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80053e6:	e018      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80053ee:	e014      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80053f6:	e010      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80053fe:	e00c      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005406:	e008      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800540e:	e004      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
        break;
 8005414:	e001      	b.n	800541a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3a      	ldr	r2, [pc, #232]	@ (8005524 <TIM_Base_SetConfig+0xfc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00f      	beq.n	8005460 <TIM_Base_SetConfig+0x38>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005446:	d00b      	beq.n	8005460 <TIM_Base_SetConfig+0x38>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a37      	ldr	r2, [pc, #220]	@ (8005528 <TIM_Base_SetConfig+0x100>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_Base_SetConfig+0x38>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a36      	ldr	r2, [pc, #216]	@ (800552c <TIM_Base_SetConfig+0x104>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0x38>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <TIM_Base_SetConfig+0x108>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d108      	bne.n	8005472 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2b      	ldr	r2, [pc, #172]	@ (8005524 <TIM_Base_SetConfig+0xfc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01b      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005480:	d017      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <TIM_Base_SetConfig+0x100>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <TIM_Base_SetConfig+0x104>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a26      	ldr	r2, [pc, #152]	@ (8005530 <TIM_Base_SetConfig+0x108>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a25      	ldr	r2, [pc, #148]	@ (8005534 <TIM_Base_SetConfig+0x10c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a24      	ldr	r2, [pc, #144]	@ (8005538 <TIM_Base_SetConfig+0x110>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a23      	ldr	r2, [pc, #140]	@ (800553c <TIM_Base_SetConfig+0x114>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005524 <TIM_Base_SetConfig+0xfc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d103      	bne.n	80054f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f023 0201 	bic.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]
  }
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a1c      	ldr	r2, [pc, #112]	@ (80055bc <TIM_ResetCallback+0x7c>)
 800554c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a1b      	ldr	r2, [pc, #108]	@ (80055c0 <TIM_ResetCallback+0x80>)
 8005554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1a      	ldr	r2, [pc, #104]	@ (80055c4 <TIM_ResetCallback+0x84>)
 800555c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <TIM_ResetCallback+0x88>)
 8005564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	@ (80055cc <TIM_ResetCallback+0x8c>)
 800556c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <TIM_ResetCallback+0x90>)
 8005574:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <TIM_ResetCallback+0x94>)
 800557c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	@ (80055d8 <TIM_ResetCallback+0x98>)
 8005584:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <TIM_ResetCallback+0x9c>)
 800558c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <TIM_ResetCallback+0xa0>)
 8005594:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a12      	ldr	r2, [pc, #72]	@ (80055e4 <TIM_ResetCallback+0xa4>)
 800559c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <TIM_ResetCallback+0xa8>)
 80055a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <TIM_ResetCallback+0xac>)
 80055ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	080017a1 	.word	0x080017a1
 80055c0:	08005101 	.word	0x08005101
 80055c4:	08005179 	.word	0x08005179
 80055c8:	0800518d 	.word	0x0800518d
 80055cc:	08005129 	.word	0x08005129
 80055d0:	0800513d 	.word	0x0800513d
 80055d4:	08005115 	.word	0x08005115
 80055d8:	08005151 	.word	0x08005151
 80055dc:	08005165 	.word	0x08005165
 80055e0:	080051a1 	.word	0x080051a1
 80055e4:	080055f1 	.word	0x080055f1
 80055e8:	08005605 	.word	0x08005605
 80055ec:	08005619 	.word	0x08005619

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800562c:	b084      	sub	sp, #16
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	f107 001c 	add.w	r0, r7, #28
 800563a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800563e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005642:	2b01      	cmp	r3, #1
 8005644:	d123      	bne.n	800568e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800565a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800566e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fae8 	bl	8006c58 <USB_CoreReset>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	e01b      	b.n	80056c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fadc 	bl	8006c58 <USB_CoreReset>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80056b8:	e005      	b.n	80056c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056c6:	7fbb      	ldrb	r3, [r7, #30]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10b      	bne.n	80056e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f043 0206 	orr.w	r2, r3, #6
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056f0:	b004      	add	sp, #16
 80056f2:	4770      	bx	lr

080056f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d165      	bne.n	80057d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a41      	ldr	r2, [pc, #260]	@ (8005810 <USB_SetTurnaroundTime+0x11c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d906      	bls.n	800571e <USB_SetTurnaroundTime+0x2a>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4a40      	ldr	r2, [pc, #256]	@ (8005814 <USB_SetTurnaroundTime+0x120>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d202      	bcs.n	800571e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005718:	230f      	movs	r3, #15
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e062      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a3c      	ldr	r2, [pc, #240]	@ (8005814 <USB_SetTurnaroundTime+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d306      	bcc.n	8005734 <USB_SetTurnaroundTime+0x40>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4a3b      	ldr	r2, [pc, #236]	@ (8005818 <USB_SetTurnaroundTime+0x124>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d202      	bcs.n	8005734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800572e:	230e      	movs	r3, #14
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e057      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a38      	ldr	r2, [pc, #224]	@ (8005818 <USB_SetTurnaroundTime+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d306      	bcc.n	800574a <USB_SetTurnaroundTime+0x56>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a37      	ldr	r2, [pc, #220]	@ (800581c <USB_SetTurnaroundTime+0x128>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d202      	bcs.n	800574a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005744:	230d      	movs	r3, #13
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e04c      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a33      	ldr	r2, [pc, #204]	@ (800581c <USB_SetTurnaroundTime+0x128>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d306      	bcc.n	8005760 <USB_SetTurnaroundTime+0x6c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <USB_SetTurnaroundTime+0x12c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d802      	bhi.n	8005760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800575a:	230c      	movs	r3, #12
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e041      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a2f      	ldr	r2, [pc, #188]	@ (8005820 <USB_SetTurnaroundTime+0x12c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d906      	bls.n	8005776 <USB_SetTurnaroundTime+0x82>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a2e      	ldr	r2, [pc, #184]	@ (8005824 <USB_SetTurnaroundTime+0x130>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d802      	bhi.n	8005776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005770:	230b      	movs	r3, #11
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e036      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4a2a      	ldr	r2, [pc, #168]	@ (8005824 <USB_SetTurnaroundTime+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d906      	bls.n	800578c <USB_SetTurnaroundTime+0x98>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a29      	ldr	r2, [pc, #164]	@ (8005828 <USB_SetTurnaroundTime+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005786:	230a      	movs	r3, #10
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e02b      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a26      	ldr	r2, [pc, #152]	@ (8005828 <USB_SetTurnaroundTime+0x134>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d906      	bls.n	80057a2 <USB_SetTurnaroundTime+0xae>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a25      	ldr	r2, [pc, #148]	@ (800582c <USB_SetTurnaroundTime+0x138>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d202      	bcs.n	80057a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800579c:	2309      	movs	r3, #9
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e020      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4a21      	ldr	r2, [pc, #132]	@ (800582c <USB_SetTurnaroundTime+0x138>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d306      	bcc.n	80057b8 <USB_SetTurnaroundTime+0xc4>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <USB_SetTurnaroundTime+0x13c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d802      	bhi.n	80057b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057b2:	2308      	movs	r3, #8
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e015      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005830 <USB_SetTurnaroundTime+0x13c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d906      	bls.n	80057ce <USB_SetTurnaroundTime+0xda>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005834 <USB_SetTurnaroundTime+0x140>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d202      	bcs.n	80057ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057c8:	2307      	movs	r3, #7
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e00a      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057ce:	2306      	movs	r3, #6
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e007      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057da:	2309      	movs	r3, #9
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e001      	b.n	80057e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057e0:	2309      	movs	r3, #9
 80057e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80057fc:	431a      	orrs	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	00d8acbf 	.word	0x00d8acbf
 8005814:	00e4e1c0 	.word	0x00e4e1c0
 8005818:	00f42400 	.word	0x00f42400
 800581c:	01067380 	.word	0x01067380
 8005820:	011a499f 	.word	0x011a499f
 8005824:	01312cff 	.word	0x01312cff
 8005828:	014ca43f 	.word	0x014ca43f
 800582c:	016e3600 	.word	0x016e3600
 8005830:	01a6ab1f 	.word	0x01a6ab1f
 8005834:	01e84800 	.word	0x01e84800

08005838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d115      	bne.n	80058ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058aa:	200a      	movs	r0, #10
 80058ac:	f7fd f89a 	bl	80029e4 <HAL_Delay>
      ms += 10U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	330a      	adds	r3, #10
 80058b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f93f 	bl	8006b3a <USB_GetMode>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d01e      	beq.n	8005900 <USB_SetCurrentMode+0x84>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80058c6:	d9f0      	bls.n	80058aa <USB_SetCurrentMode+0x2e>
 80058c8:	e01a      	b.n	8005900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d115      	bne.n	80058fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058dc:	200a      	movs	r0, #10
 80058de:	f7fd f881 	bl	80029e4 <HAL_Delay>
      ms += 10U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	330a      	adds	r3, #10
 80058e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f926 	bl	8006b3a <USB_GetMode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <USB_SetCurrentMode+0x84>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80058f8:	d9f0      	bls.n	80058dc <USB_SetCurrentMode+0x60>
 80058fa:	e001      	b.n	8005900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e005      	b.n	800590c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2bc8      	cmp	r3, #200	@ 0xc8
 8005904:	d101      	bne.n	800590a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005914:	b084      	sub	sp, #16
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e009      	b.n	8005948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3340      	adds	r3, #64	@ 0x40
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	2200      	movs	r2, #0
 8005940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3301      	adds	r3, #1
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b0e      	cmp	r3, #14
 800594c:	d9f2      	bls.n	8005934 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800594e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11c      	bne.n	8005990 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
 800598e:	e00b      	b.n	80059a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10d      	bne.n	80059d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059c4:	2100      	movs	r1, #0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f968 	bl	8005c9c <USB_SetDevSpeed>
 80059cc:	e008      	b.n	80059e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059ce:	2101      	movs	r1, #1
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f963 	bl	8005c9c <USB_SetDevSpeed>
 80059d6:	e003      	b.n	80059e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059d8:	2103      	movs	r1, #3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f95e 	bl	8005c9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059e0:	2110      	movs	r1, #16
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8fa 	bl	8005bdc <USB_FlushTxFifo>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f924 	bl	8005c40 <USB_FlushRxFifo>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e043      	b.n	8005ab4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a42:	d118      	bne.n	8005a76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a56:	461a      	mov	r2, r3
 8005a58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e013      	b.n	8005a88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e008      	b.n	8005a88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005aac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ab8:	461a      	mov	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d3b5      	bcc.n	8005a2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	e043      	b.n	8005b4e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005adc:	d118      	bne.n	8005b10 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af0:	461a      	mov	r2, r3
 8005af2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e013      	b.n	8005b22 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b06:	461a      	mov	r2, r3
 8005b08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e008      	b.n	8005b22 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2300      	movs	r3, #0
 8005b32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b40:	461a      	mov	r2, r3
 8005b42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b52:	461a      	mov	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d3b5      	bcc.n	8005ac6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <USB_DevInit+0x2c4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f043 0208 	orr.w	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d107      	bne.n	8005bc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd4:	b004      	add	sp, #16
 8005bd6:	4770      	bx	lr
 8005bd8:	803c3800 	.word	0x803c3800

08005bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bf6:	d901      	bls.n	8005bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e01b      	b.n	8005c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	daf2      	bge.n	8005bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	019b      	lsls	r3, r3, #6
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c20:	d901      	bls.n	8005c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e006      	b.n	8005c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d0f0      	beq.n	8005c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c58:	d901      	bls.n	8005c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e018      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	daf2      	bge.n	8005c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c7c:	d901      	bls.n	8005c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d0f0      	beq.n	8005c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0306 	and.w	r3, r3, #6
 8005ce6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
 8005cf2:	e00a      	b.n	8005d0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d002      	beq.n	8005d00 <USB_GetDevSpeed+0x32>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d102      	bne.n	8005d06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d00:	2302      	movs	r3, #2
 8005d02:	75fb      	strb	r3, [r7, #23]
 8005d04:	e001      	b.n	8005d0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d06:	230f      	movs	r3, #15
 8005d08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d13a      	bne.n	8005daa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2101      	movs	r1, #1
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d155      	bne.n	8005e18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	791b      	ldrb	r3, [r3, #4]
 8005d86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	059b      	lsls	r3, r3, #22
 8005d8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d90:	4313      	orrs	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e036      	b.n	8005e18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11a      	bne.n	8005e18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	791b      	ldrb	r3, [r3, #4]
 8005dfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d161      	bne.n	8005f08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e5a:	d11f      	bne.n	8005e9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	2101      	movs	r1, #1
 8005eae:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	0159      	lsls	r1, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	440b      	add	r3, r1
 8005efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efe:	4619      	mov	r1, r3
 8005f00:	4b35      	ldr	r3, [pc, #212]	@ (8005fd8 <USB_DeactivateEndpoint+0x1b0>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
 8005f06:	e060      	b.n	8005fca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f1e:	d11f      	bne.n	8005f60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	2101      	movs	r1, #1
 8005f72:	fa01 f303 	lsl.w	r3, r1, r3
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f80:	4013      	ands	r3, r2
 8005f82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	0159      	lsls	r1, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4b05      	ldr	r3, [pc, #20]	@ (8005fdc <USB_DeactivateEndpoint+0x1b4>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	ec337800 	.word	0xec337800
 8005fdc:	eff37800 	.word	0xeff37800

08005fe0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 817f 	bne.w	8006300 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d132      	bne.n	8006070 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006024:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006028:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800602c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006048:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800604c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006068:	0cdb      	lsrs	r3, r3, #19
 800606a:	04db      	lsls	r3, r3, #19
 800606c:	6113      	str	r3, [r2, #16]
 800606e:	e097      	b.n	80061a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800608a:	0cdb      	lsrs	r3, r3, #19
 800608c:	04db      	lsls	r3, r3, #19
 800608e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11a      	bne.n	80060f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d903      	bls.n	80060ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060ec:	6113      	str	r3, [r2, #16]
 80060ee:	e044      	b.n	800617a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4413      	add	r3, r2
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	8afb      	ldrh	r3, [r7, #22]
 8006116:	04d9      	lsls	r1, r3, #19
 8006118:	4ba4      	ldr	r3, [pc, #656]	@ (80063ac <USB_EPStartXfer+0x3cc>)
 800611a:	400b      	ands	r3, r1
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	0148      	lsls	r0, r1, #5
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	4401      	add	r1, r0
 8006124:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006128:	4313      	orrs	r3, r2
 800612a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d122      	bne.n	800617a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006152:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	8afb      	ldrh	r3, [r7, #22]
 8006164:	075b      	lsls	r3, r3, #29
 8006166:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800616a:	69b9      	ldr	r1, [r7, #24]
 800616c:	0148      	lsls	r0, r1, #5
 800616e:	69f9      	ldr	r1, [r7, #28]
 8006170:	4401      	add	r1, r0
 8006172:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006176:	4313      	orrs	r3, r2
 8006178:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	0148      	lsls	r0, r1, #5
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	4401      	add	r1, r0
 8006198:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800619c:	4313      	orrs	r3, r2
 800619e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d14b      	bne.n	800623e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	461a      	mov	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d128      	bne.n	800621c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d110      	bne.n	80061fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00f      	b.n	800621c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006236:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e166      	b.n	800650c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006258:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800625c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d015      	beq.n	8006292 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 814e 	beq.w	800650c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	2101      	movs	r1, #1
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800628c:	4313      	orrs	r3, r2
 800628e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006290:	e13c      	b.n	800650c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d110      	bne.n	80062c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e00f      	b.n	80062e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	68d9      	ldr	r1, [r3, #12]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	b298      	uxth	r0, r3
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4603      	mov	r3, r0
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f9b9 	bl	8006670 <USB_WritePacket>
 80062fe:	e105      	b.n	800650c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631a:	0cdb      	lsrs	r3, r3, #19
 800631c:	04db      	lsls	r3, r3, #19
 800631e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800633e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006342:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d132      	bne.n	80063b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	0148      	lsls	r0, r1, #5
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	4401      	add	r1, r0
 8006380:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006384:	4313      	orrs	r3, r2
 8006386:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063a6:	6113      	str	r3, [r2, #16]
 80063a8:	e062      	b.n	8006470 <USB_EPStartXfer+0x490>
 80063aa:	bf00      	nop
 80063ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d123      	bne.n	8006400 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	0148      	lsls	r0, r1, #5
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	4401      	add	r1, r0
 80063d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063da:	4313      	orrs	r3, r2
 80063dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063fc:	6113      	str	r3, [r2, #16]
 80063fe:	e037      	b.n	8006470 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4413      	add	r3, r2
 800640a:	1e5a      	subs	r2, r3, #1
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	fbb2 f3f3 	udiv	r3, r2, r3
 8006414:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	8afa      	ldrh	r2, [r7, #22]
 800641c:	fb03 f202 	mul.w	r2, r3, r2
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	8afb      	ldrh	r3, [r7, #22]
 8006434:	04d9      	lsls	r1, r3, #19
 8006436:	4b38      	ldr	r3, [pc, #224]	@ (8006518 <USB_EPStartXfer+0x538>)
 8006438:	400b      	ands	r3, r1
 800643a:	69b9      	ldr	r1, [r7, #24]
 800643c:	0148      	lsls	r0, r1, #5
 800643e:	69f9      	ldr	r1, [r7, #28]
 8006440:	4401      	add	r1, r0
 8006442:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006446:	4313      	orrs	r3, r2
 8006448:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	0148      	lsls	r0, r1, #5
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	4401      	add	r1, r0
 8006468:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800646c:	4313      	orrs	r3, r2
 800646e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10d      	bne.n	8006492 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648e:	460a      	mov	r2, r1
 8006490:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	791b      	ldrb	r3, [r3, #4]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d128      	bne.n	80064ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d110      	bne.n	80064cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e00f      	b.n	80064ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006506:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800650a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	1ff80000 	.word	0x1ff80000

0800651c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d14a      	bne.n	80065d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800654e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006552:	f040 8086 	bne.w	8006662 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006578:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800659c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d902      	bls.n	80065b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
          break;
 80065b2:	e056      	b.n	8006662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065cc:	d0e7      	beq.n	800659e <USB_EPStopXfer+0x82>
 80065ce:	e048      	b.n	8006662 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e8:	d13b      	bne.n	8006662 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006608:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800660c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800663e:	4293      	cmp	r3, r2
 8006640:	d902      	bls.n	8006648 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	75fb      	strb	r3, [r7, #23]
          break;
 8006646:	e00c      	b.n	8006662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800665c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006660:	d0e7      	beq.n	8006632 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006662:	7dfb      	ldrb	r3, [r7, #23]
}
 8006664:	4618      	mov	r0, r3
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	@ 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	460b      	mov	r3, r1
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	4613      	mov	r3, r2
 8006684:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800668e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d123      	bne.n	80066de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006696:	88bb      	ldrh	r3, [r7, #4]
 8006698:	3303      	adds	r3, #3
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	e018      	b.n	80066d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	031a      	lsls	r2, r3, #12
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b0:	461a      	mov	r2, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3301      	adds	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3e2      	bcc.n	80066a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3724      	adds	r7, #36	@ 0x24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b08b      	sub	sp, #44	@ 0x2c
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	b29b      	uxth	r3, r3
 8006708:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	e014      	b.n	8006742 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	601a      	str	r2, [r3, #0]
    pDest++;
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	3301      	adds	r3, #1
 8006728:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	3301      	adds	r3, #1
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	3301      	adds	r3, #1
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d3e6      	bcc.n	8006718 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800674a:	8bfb      	ldrh	r3, [r7, #30]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01e      	beq.n	800678e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800675a:	461a      	mov	r2, r3
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	701a      	strb	r2, [r3, #0]
      i++;
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	3301      	adds	r3, #1
 800677a:	623b      	str	r3, [r7, #32]
      pDest++;
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	3301      	adds	r3, #1
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006782:	8bfb      	ldrh	r3, [r7, #30]
 8006784:	3b01      	subs	r3, #1
 8006786:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006788:	8bfb      	ldrh	r3, [r7, #30]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1ea      	bne.n	8006764 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006790:	4618      	mov	r0, r3
 8006792:	372c      	adds	r7, #44	@ 0x2c
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d12c      	bne.n	8006812 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	db12      	blt.n	80067f0 <USB_EPSetStall+0x54>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00f      	beq.n	80067f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e02b      	b.n	800686a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	db12      	blt.n	800684a <USB_EPSetStall+0xae>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00f      	beq.n	800684a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	440a      	add	r2, r1
 8006840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006844:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006848:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006864:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d128      	bne.n	80068e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	791b      	ldrb	r3, [r3, #4]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d003      	beq.n	80068c4 <USB_EPClearStall+0x4c>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	791b      	ldrb	r3, [r3, #4]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d138      	bne.n	8006936 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e027      	b.n	8006936 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006900:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006904:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d003      	beq.n	8006916 <USB_EPClearStall+0x9e>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	791b      	ldrb	r3, [r3, #4]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d10f      	bne.n	8006936 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006934:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006962:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006966:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069be:	f023 0302 	bic.w	r3, r3, #2
 80069c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069ec:	f023 0303 	bic.w	r3, r3, #3
 80069f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	0c1b      	lsrs	r3, r3, #16
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	b29b      	uxth	r3, r3
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4013      	ands	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b087      	sub	sp, #28
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	01db      	lsls	r3, r3, #7
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0301 	and.w	r3, r3, #1
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b74:	f023 0307 	bic.w	r3, r3, #7
 8006b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	333c      	adds	r3, #60	@ 0x3c
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4a26      	ldr	r2, [pc, #152]	@ (8006c54 <USB_EP0_OutStart+0xb8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d90a      	bls.n	8006bd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd0:	d101      	bne.n	8006bd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e037      	b.n	8006c46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2300      	movs	r3, #0
 8006be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c04:	f043 0318 	orr.w	r3, r3, #24
 8006c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c18:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d10f      	bne.n	8006c44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c3e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	4f54300a 	.word	0x4f54300a

08006c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c70:	d901      	bls.n	8006c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e01b      	b.n	8006cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	daf2      	bge.n	8006c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f043 0201 	orr.w	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c9a:	d901      	bls.n	8006ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e006      	b.n	8006cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d0f0      	beq.n	8006c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cc8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006ccc:	f005 fe88 	bl	800c9e0 <USBD_static_malloc>
 8006cd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	32b0      	adds	r2, #176	@ 0xb0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e0d4      	b.n	8006e96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006cec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f006 fd19 	bl	800d72a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	32b0      	adds	r2, #176	@ 0xb0
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	32b0      	adds	r2, #176	@ 0xb0
 8006d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1b      	ldrb	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d138      	bne.n	8006d96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d24:	4b5e      	ldr	r3, [pc, #376]	@ (8006ea0 <USBD_CDC_Init+0x1e4>)
 8006d26:	7819      	ldrb	r1, [r3, #0]
 8006d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f005 fd33 	bl	800c79a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d34:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea0 <USBD_CDC_Init+0x1e4>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 020f 	and.w	r2, r3, #15
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3324      	adds	r3, #36	@ 0x24
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d4e:	4b55      	ldr	r3, [pc, #340]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006d50:	7819      	ldrb	r1, [r3, #0]
 8006d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d56:	2202      	movs	r2, #2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f005 fd1e 	bl	800c79a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d5e:	4b51      	ldr	r3, [pc, #324]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 020f 	and.w	r2, r3, #15
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d76:	2201      	movs	r2, #1
 8006d78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ea8 <USBD_CDC_Init+0x1ec>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3326      	adds	r3, #38	@ 0x26
 8006d90:	2210      	movs	r2, #16
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e035      	b.n	8006e02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d96:	4b42      	ldr	r3, [pc, #264]	@ (8006ea0 <USBD_CDC_Init+0x1e4>)
 8006d98:	7819      	ldrb	r1, [r3, #0]
 8006d9a:	2340      	movs	r3, #64	@ 0x40
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f005 fcfb 	bl	800c79a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006da4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea0 <USBD_CDC_Init+0x1e4>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 020f 	and.w	r2, r3, #15
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	440b      	add	r3, r1
 8006db8:	3324      	adds	r3, #36	@ 0x24
 8006dba:	2201      	movs	r2, #1
 8006dbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006dc0:	7819      	ldrb	r1, [r3, #0]
 8006dc2:	2340      	movs	r3, #64	@ 0x40
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f005 fce7 	bl	800c79a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dcc:	4b35      	ldr	r3, [pc, #212]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006de4:	2201      	movs	r2, #1
 8006de6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006de8:	4b2f      	ldr	r3, [pc, #188]	@ (8006ea8 <USBD_CDC_Init+0x1ec>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3326      	adds	r3, #38	@ 0x26
 8006dfe:	2210      	movs	r2, #16
 8006e00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e02:	4b29      	ldr	r3, [pc, #164]	@ (8006ea8 <USBD_CDC_Init+0x1ec>)
 8006e04:	7819      	ldrb	r1, [r3, #0]
 8006e06:	2308      	movs	r3, #8
 8006e08:	2203      	movs	r2, #3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f005 fcc5 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e10:	4b25      	ldr	r3, [pc, #148]	@ (8006ea8 <USBD_CDC_Init+0x1ec>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3324      	adds	r3, #36	@ 0x24
 8006e26:	2201      	movs	r2, #1
 8006e28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	33b0      	adds	r3, #176	@ 0xb0
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e60:	2302      	movs	r3, #2
 8006e62:	e018      	b.n	8006e96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7c1b      	ldrb	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006e6e:	7819      	ldrb	r1, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f005 fd7c 	bl	800c978 <USBD_LL_PrepareReceive>
 8006e80:	e008      	b.n	8006e94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e82:	4b08      	ldr	r3, [pc, #32]	@ (8006ea4 <USBD_CDC_Init+0x1e8>)
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e8c:	2340      	movs	r3, #64	@ 0x40
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f005 fd72 	bl	800c978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000093 	.word	0x20000093
 8006ea4:	20000094 	.word	0x20000094
 8006ea8:	20000095 	.word	0x20000095

08006eac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa4 <USBD_CDC_DeInit+0xf8>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f005 fc91 	bl	800c7e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ec4:	4b37      	ldr	r3, [pc, #220]	@ (8006fa4 <USBD_CDC_DeInit+0xf8>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3324      	adds	r3, #36	@ 0x24
 8006eda:	2200      	movs	r2, #0
 8006edc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ede:	4b32      	ldr	r3, [pc, #200]	@ (8006fa8 <USBD_CDC_DeInit+0xfc>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f005 fc7e 	bl	800c7e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006eea:	4b2f      	ldr	r3, [pc, #188]	@ (8006fa8 <USBD_CDC_DeInit+0xfc>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f02:	2200      	movs	r2, #0
 8006f04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f06:	4b29      	ldr	r3, [pc, #164]	@ (8006fac <USBD_CDC_DeInit+0x100>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f005 fc6a 	bl	800c7e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f12:	4b26      	ldr	r3, [pc, #152]	@ (8006fac <USBD_CDC_DeInit+0x100>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3324      	adds	r3, #36	@ 0x24
 8006f28:	2200      	movs	r2, #0
 8006f2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fac <USBD_CDC_DeInit+0x100>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3326      	adds	r3, #38	@ 0x26
 8006f42:	2200      	movs	r2, #0
 8006f44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	32b0      	adds	r2, #176	@ 0xb0
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01f      	beq.n	8006f98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	33b0      	adds	r3, #176	@ 0xb0
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	32b0      	adds	r2, #176	@ 0xb0
 8006f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f005 fd3e 	bl	800c9fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	32b0      	adds	r2, #176	@ 0xb0
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000093 	.word	0x20000093
 8006fa8:	20000094 	.word	0x20000094
 8006fac:	20000095 	.word	0x20000095

08006fb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32b0      	adds	r2, #176	@ 0xb0
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e0bf      	b.n	8007160 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d050      	beq.n	800708e <USBD_CDC_Setup+0xde>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	f040 80af 	bne.w	8007150 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d03a      	beq.n	8007070 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	da1b      	bge.n	800703c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	33b0      	adds	r3, #176	@ 0xb0
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800701a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	88d2      	ldrh	r2, [r2, #6]
 8007020:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88db      	ldrh	r3, [r3, #6]
 8007026:	2b07      	cmp	r3, #7
 8007028:	bf28      	it	cs
 800702a:	2307      	movcs	r3, #7
 800702c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	89fa      	ldrh	r2, [r7, #14]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fd93 	bl	8008b60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800703a:	e090      	b.n	800715e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785a      	ldrb	r2, [r3, #1]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	2b3f      	cmp	r3, #63	@ 0x3f
 800704c:	d803      	bhi.n	8007056 <USBD_CDC_Setup+0xa6>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	b2da      	uxtb	r2, r3
 8007054:	e000      	b.n	8007058 <USBD_CDC_Setup+0xa8>
 8007056:	2240      	movs	r2, #64	@ 0x40
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800705e:	6939      	ldr	r1, [r7, #16]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007066:	461a      	mov	r2, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fda5 	bl	8008bb8 <USBD_CtlPrepareRx>
      break;
 800706e:	e076      	b.n	800715e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	33b0      	adds	r3, #176	@ 0xb0
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	7850      	ldrb	r0, [r2, #1]
 8007086:	2200      	movs	r2, #0
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	4798      	blx	r3
      break;
 800708c:	e067      	b.n	800715e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b0b      	cmp	r3, #11
 8007094:	d851      	bhi.n	800713a <USBD_CDC_Setup+0x18a>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <USBD_CDC_Setup+0xec>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	08007149 	.word	0x08007149
 80070a4:	0800713b 	.word	0x0800713b
 80070a8:	0800713b 	.word	0x0800713b
 80070ac:	0800713b 	.word	0x0800713b
 80070b0:	0800713b 	.word	0x0800713b
 80070b4:	0800713b 	.word	0x0800713b
 80070b8:	0800713b 	.word	0x0800713b
 80070bc:	0800713b 	.word	0x0800713b
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	080070f7 	.word	0x080070f7
 80070c8:	08007121 	.word	0x08007121
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d107      	bne.n	80070e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070d8:	f107 030a 	add.w	r3, r7, #10
 80070dc:	2202      	movs	r2, #2
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fd3d 	bl	8008b60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070e6:	e032      	b.n	800714e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fcbb 	bl	8008a66 <USBD_CtlError>
            ret = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	75fb      	strb	r3, [r7, #23]
          break;
 80070f4:	e02b      	b.n	800714e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007102:	f107 030d 	add.w	r3, r7, #13
 8007106:	2201      	movs	r2, #1
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fd28 	bl	8008b60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007110:	e01d      	b.n	800714e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fca6 	bl	8008a66 <USBD_CtlError>
            ret = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
          break;
 800711e:	e016      	b.n	800714e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b03      	cmp	r3, #3
 800712a:	d00f      	beq.n	800714c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fc99 	bl	8008a66 <USBD_CtlError>
            ret = USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007138:	e008      	b.n	800714c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fc92 	bl	8008a66 <USBD_CtlError>
          ret = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e002      	b.n	800714e <USBD_CDC_Setup+0x19e>
          break;
 8007148:	bf00      	nop
 800714a:	e008      	b.n	800715e <USBD_CDC_Setup+0x1ae>
          break;
 800714c:	bf00      	nop
      }
      break;
 800714e:	e006      	b.n	800715e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fc87 	bl	8008a66 <USBD_CtlError>
      ret = USBD_FAIL;
 8007158:	2303      	movs	r3, #3
 800715a:	75fb      	strb	r3, [r7, #23]
      break;
 800715c:	bf00      	nop
  }

  return (uint8_t)ret;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800717a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32b0      	adds	r2, #176	@ 0xb0
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800718e:	2303      	movs	r3, #3
 8007190:	e065      	b.n	800725e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	32b0      	adds	r2, #176	@ 0xb0
 800719c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3318      	adds	r3, #24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02f      	beq.n	800721c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	3318      	adds	r3, #24
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	f003 010f 	and.w	r1, r3, #15
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	460b      	mov	r3, r1
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	440b      	add	r3, r1
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4403      	add	r3, r0
 80071e4:	331c      	adds	r3, #28
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d112      	bne.n	800721c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	3318      	adds	r3, #24
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800720e:	78f9      	ldrb	r1, [r7, #3]
 8007210:	2300      	movs	r3, #0
 8007212:	2200      	movs	r2, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f005 fb8e 	bl	800c936 <USBD_LL_Transmit>
 800721a:	e01f      	b.n	800725c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	33b0      	adds	r3, #176	@ 0xb0
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	33b0      	adds	r3, #176	@ 0xb0
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	32b0      	adds	r2, #176	@ 0xb0
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	32b0      	adds	r2, #176	@ 0xb0
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	e01a      	b.n	80072ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f005 fb8c 	bl	800c9ba <USBD_LL_GetRxDataSize>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	33b0      	adds	r3, #176	@ 0xb0
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80072c8:	4611      	mov	r1, r2
 80072ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	32b0      	adds	r2, #176	@ 0xb0
 80072e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e024      	b.n	8007342 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	33b0      	adds	r3, #176	@ 0xb0
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d019      	beq.n	8007340 <USBD_CDC_EP0_RxReady+0x6a>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007312:	2bff      	cmp	r3, #255	@ 0xff
 8007314:	d014      	beq.n	8007340 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	33b0      	adds	r3, #176	@ 0xb0
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800732e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007336:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	22ff      	movs	r2, #255	@ 0xff
 800733c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007354:	2182      	movs	r1, #130	@ 0x82
 8007356:	4818      	ldr	r0, [pc, #96]	@ (80073b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007358:	f000 fd4f 	bl	8007dfa <USBD_GetEpDesc>
 800735c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800735e:	2101      	movs	r1, #1
 8007360:	4815      	ldr	r0, [pc, #84]	@ (80073b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007362:	f000 fd4a 	bl	8007dfa <USBD_GetEpDesc>
 8007366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007368:	2181      	movs	r1, #129	@ 0x81
 800736a:	4813      	ldr	r0, [pc, #76]	@ (80073b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800736c:	f000 fd45 	bl	8007dfa <USBD_GetEpDesc>
 8007370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2210      	movs	r2, #16
 800737c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2200      	movs	r2, #0
 8007388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800738c:	711a      	strb	r2, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a0:	711a      	strb	r2, [r3, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2243      	movs	r2, #67	@ 0x43
 80073aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073ac:	4b02      	ldr	r3, [pc, #8]	@ (80073b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000050 	.word	0x20000050

080073bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073c4:	2182      	movs	r1, #130	@ 0x82
 80073c6:	4818      	ldr	r0, [pc, #96]	@ (8007428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073c8:	f000 fd17 	bl	8007dfa <USBD_GetEpDesc>
 80073cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073ce:	2101      	movs	r1, #1
 80073d0:	4815      	ldr	r0, [pc, #84]	@ (8007428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073d2:	f000 fd12 	bl	8007dfa <USBD_GetEpDesc>
 80073d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d8:	2181      	movs	r1, #129	@ 0x81
 80073da:	4813      	ldr	r0, [pc, #76]	@ (8007428 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073dc:	f000 fd0d 	bl	8007dfa <USBD_GetEpDesc>
 80073e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2210      	movs	r2, #16
 80073ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2200      	movs	r2, #0
 80073f8:	711a      	strb	r2, [r3, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f042 0202 	orr.w	r2, r2, #2
 8007400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	711a      	strb	r2, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f042 0202 	orr.w	r2, r2, #2
 8007414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2243      	movs	r2, #67	@ 0x43
 800741a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800741c:	4b02      	ldr	r3, [pc, #8]	@ (8007428 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000050 	.word	0x20000050

0800742c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007434:	2182      	movs	r1, #130	@ 0x82
 8007436:	4818      	ldr	r0, [pc, #96]	@ (8007498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007438:	f000 fcdf 	bl	8007dfa <USBD_GetEpDesc>
 800743c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800743e:	2101      	movs	r1, #1
 8007440:	4815      	ldr	r0, [pc, #84]	@ (8007498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007442:	f000 fcda 	bl	8007dfa <USBD_GetEpDesc>
 8007446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007448:	2181      	movs	r1, #129	@ 0x81
 800744a:	4813      	ldr	r0, [pc, #76]	@ (8007498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800744c:	f000 fcd5 	bl	8007dfa <USBD_GetEpDesc>
 8007450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2210      	movs	r2, #16
 800745c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2200      	movs	r2, #0
 8007468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800746c:	711a      	strb	r2, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007480:	711a      	strb	r2, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2243      	movs	r2, #67	@ 0x43
 800748a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000050 	.word	0x20000050

0800749c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	220a      	movs	r2, #10
 80074a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074aa:	4b03      	ldr	r3, [pc, #12]	@ (80074b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	2000000c 	.word	0x2000000c

080074bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e009      	b.n	80074e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	33b0      	adds	r3, #176	@ 0xb0
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	32b0      	adds	r2, #176	@ 0xb0
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	e008      	b.n	8007528 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	32b0      	adds	r2, #176	@ 0xb0
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007554:	2303      	movs	r3, #3
 8007556:	e004      	b.n	8007562 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	32b0      	adds	r2, #176	@ 0xb0
 8007582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007586:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	e025      	b.n	80075e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11f      	bne.n	80075e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075a8:	4b10      	ldr	r3, [pc, #64]	@ (80075ec <USBD_CDC_TransmitPacket+0x7c>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4403      	add	r3, r0
 80075c2:	3318      	adds	r3, #24
 80075c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075c6:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <USBD_CDC_TransmitPacket+0x7c>)
 80075c8:	7819      	ldrb	r1, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f005 f9ad 	bl	800c936 <USBD_LL_Transmit>

    ret = USBD_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000093 	.word	0x20000093

080075f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32b0      	adds	r2, #176	@ 0xb0
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32b0      	adds	r2, #176	@ 0xb0
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	e018      	b.n	8007650 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7c1b      	ldrb	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007626:	4b0c      	ldr	r3, [pc, #48]	@ (8007658 <USBD_CDC_ReceivePacket+0x68>)
 8007628:	7819      	ldrb	r1, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f005 f99f 	bl	800c978 <USBD_LL_PrepareReceive>
 800763a:	e008      	b.n	800764e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <USBD_CDC_ReceivePacket+0x68>)
 800763e:	7819      	ldrb	r1, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007646:	2340      	movs	r3, #64	@ 0x40
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f005 f995 	bl	800c978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000094 	.word	0x20000094

0800765c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007670:	2303      	movs	r3, #3
 8007672:	e01f      	b.n	80076b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	79fa      	ldrb	r2, [r7, #7]
 80076a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f005 f80f 	bl	800c6cc <USBD_LL_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e025      	b.n	8007720 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	@ 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00f      	beq.n	8007710 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32ae      	adds	r2, #174	@ 0xae
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	f107 020e 	add.w	r2, r7, #14
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	4602      	mov	r2, r0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f005 f817 	bl	800c764 <USBD_LL_Start>
 8007736:	4603      	mov	r3, r0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	4611      	mov	r1, r2
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f90c 	bl	80089f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d01a      	beq.n	8007834 <USBD_LL_SetupStage+0x72>
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d822      	bhi.n	8007848 <USBD_LL_SetupStage+0x86>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <USBD_LL_SetupStage+0x4a>
 8007806:	2b01      	cmp	r3, #1
 8007808:	d00a      	beq.n	8007820 <USBD_LL_SetupStage+0x5e>
 800780a:	e01d      	b.n	8007848 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb63 	bl	8007ee0 <USBD_StdDevReq>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
      break;
 800781e:	e020      	b.n	8007862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fbcb 	bl	8007fc4 <USBD_StdItfReq>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
      break;
 8007832:	e016      	b.n	8007862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc2d 	bl	800809c <USBD_StdEPReq>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
      break;
 8007846:	e00c      	b.n	8007862 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800784e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f004 ffe4 	bl	800c824 <USBD_LL_StallEP>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
      break;
 8007860:	bf00      	nop
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	460b      	mov	r3, r1
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d16e      	bne.n	8007962 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800788a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007892:	2b03      	cmp	r3, #3
 8007894:	f040 8098 	bne.w	80079c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d913      	bls.n	80078cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	1ad2      	subs	r2, r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	bf28      	it	cs
 80078be:	4613      	movcs	r3, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f001 f994 	bl	8008bf2 <USBD_CtlContinueRx>
 80078ca:	e07d      	b.n	80079c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d014      	beq.n	8007904 <USBD_LL_DataOutStage+0x98>
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d81d      	bhi.n	800791a <USBD_LL_DataOutStage+0xae>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <USBD_LL_DataOutStage+0x7c>
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d003      	beq.n	80078ee <USBD_LL_DataOutStage+0x82>
 80078e6:	e018      	b.n	800791a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	75bb      	strb	r3, [r7, #22]
            break;
 80078ec:	e018      	b.n	8007920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fa64 	bl	8007dc6 <USBD_CoreFindIF>
 80078fe:	4603      	mov	r3, r0
 8007900:	75bb      	strb	r3, [r7, #22]
            break;
 8007902:	e00d      	b.n	8007920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800790a:	b2db      	uxtb	r3, r3
 800790c:	4619      	mov	r1, r3
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fa66 	bl	8007de0 <USBD_CoreFindEP>
 8007914:	4603      	mov	r3, r0
 8007916:	75bb      	strb	r3, [r7, #22]
            break;
 8007918:	e002      	b.n	8007920 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	75bb      	strb	r3, [r7, #22]
            break;
 800791e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007920:	7dbb      	ldrb	r3, [r7, #22]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d119      	bne.n	800795a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b03      	cmp	r3, #3
 8007930:	d113      	bne.n	800795a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007932:	7dba      	ldrb	r2, [r7, #22]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	32ae      	adds	r2, #174	@ 0xae
 8007938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007942:	7dba      	ldrb	r2, [r7, #22]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800794a:	7dba      	ldrb	r2, [r7, #22]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	32ae      	adds	r2, #174	@ 0xae
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 f95a 	bl	8008c14 <USBD_CtlSendStatus>
 8007960:	e032      	b.n	80079c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007968:	b2db      	uxtb	r3, r3
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fa37 	bl	8007de0 <USBD_CoreFindEP>
 8007972:	4603      	mov	r3, r0
 8007974:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007976:	7dbb      	ldrb	r3, [r7, #22]
 8007978:	2bff      	cmp	r3, #255	@ 0xff
 800797a:	d025      	beq.n	80079c8 <USBD_LL_DataOutStage+0x15c>
 800797c:	7dbb      	ldrb	r3, [r7, #22]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d122      	bne.n	80079c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b03      	cmp	r3, #3
 800798c:	d117      	bne.n	80079be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800798e:	7dba      	ldrb	r2, [r7, #22]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	32ae      	adds	r2, #174	@ 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00f      	beq.n	80079be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800799e:	7dba      	ldrb	r2, [r7, #22]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079a6:	7dba      	ldrb	r2, [r7, #22]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	32ae      	adds	r2, #174	@ 0xae
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	7afa      	ldrb	r2, [r7, #11]
 80079b4:	4611      	mov	r1, r2
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	e000      	b.n	80079ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	460b      	mov	r3, r1
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d16f      	bne.n	8007ac6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3314      	adds	r3, #20
 80079ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d15a      	bne.n	8007aac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d914      	bls.n	8007a2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f001 f8bc 	bl	8008b96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2200      	movs	r2, #0
 8007a22:	2100      	movs	r1, #0
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f004 ffa7 	bl	800c978 <USBD_LL_PrepareReceive>
 8007a2a:	e03f      	b.n	8007aac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d11c      	bne.n	8007a72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d316      	bcc.n	8007a72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d20f      	bcs.n	8007a72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f001 f89d 	bl	8008b96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a64:	2300      	movs	r3, #0
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f004 ff84 	bl	800c978 <USBD_LL_PrepareReceive>
 8007a70:	e01c      	b.n	8007aac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d10f      	bne.n	8007a9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9e:	2180      	movs	r1, #128	@ 0x80
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f004 febf 	bl	800c824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f001 f8c7 	bl	8008c3a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d03a      	beq.n	8007b2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fe42 	bl	8007740 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ac4:	e032      	b.n	8007b2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	4619      	mov	r1, r3
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f985 	bl	8007de0 <USBD_CoreFindEP>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2bff      	cmp	r3, #255	@ 0xff
 8007ade:	d025      	beq.n	8007b2c <USBD_LL_DataInStage+0x15a>
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d122      	bne.n	8007b2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d11c      	bne.n	8007b2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007af2:	7dfa      	ldrb	r2, [r7, #23]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	32ae      	adds	r2, #174	@ 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d014      	beq.n	8007b2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b02:	7dfa      	ldrb	r2, [r7, #23]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b0a:	7dfa      	ldrb	r2, [r7, #23]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	32ae      	adds	r2, #174	@ 0xae
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	7afa      	ldrb	r2, [r7, #11]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b22:	7dbb      	ldrb	r3, [r7, #22]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b28:	7dbb      	ldrb	r3, [r7, #22]
 8007b2a:	e000      	b.n	8007b2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d014      	beq.n	8007b9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6852      	ldr	r2, [r2, #4]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b9c:	2340      	movs	r3, #64	@ 0x40
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f004 fdf9 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2240      	movs	r2, #64	@ 0x40
 8007bb4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb8:	2340      	movs	r3, #64	@ 0x40
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f004 fdeb 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2240      	movs	r2, #64	@ 0x40
 8007bce:	621a      	str	r2, [r3, #32]

  return ret;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d006      	beq.n	8007c1c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d106      	bne.n	8007c54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d110      	bne.n	8007c98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	32ae      	adds	r2, #174	@ 0xae
 8007cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e01c      	b.n	8007cfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d115      	bne.n	8007cfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32ae      	adds	r2, #174	@ 0xae
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32ae      	adds	r2, #174	@ 0xae
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32ae      	adds	r2, #174	@ 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e01c      	b.n	8007d62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d115      	bne.n	8007d60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32ae      	adds	r2, #174	@ 0xae
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	32ae      	adds	r2, #174	@ 0xae
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6852      	ldr	r2, [r2, #4]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	4611      	mov	r1, r2
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	7812      	ldrb	r2, [r2, #0]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d91f      	bls.n	8007e60 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e26:	e013      	b.n	8007e50 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e28:	f107 030a 	add.w	r3, r7, #10
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6978      	ldr	r0, [r7, #20]
 8007e30:	f000 f81b 	bl	8007e6a <USBD_GetNextDesc>
 8007e34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d108      	bne.n	8007e50 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	789b      	ldrb	r3, [r3, #2]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d008      	beq.n	8007e5e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	885b      	ldrh	r3, [r3, #2]
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	897b      	ldrh	r3, [r7, #10]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d8e5      	bhi.n	8007e28 <USBD_GetEpDesc+0x2e>
 8007e5c:	e000      	b.n	8007e60 <USBD_GetEpDesc+0x66>
          break;
 8007e5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e60:	693b      	ldr	r3, [r7, #16]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	4413      	add	r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e94:	68fb      	ldr	r3, [r7, #12]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b087      	sub	sp, #28
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ec0:	8a3b      	ldrh	r3, [r7, #16]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b21a      	sxth	r2, r3
 8007ec6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b21b      	sxth	r3, r3
 8007ece:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ef6:	2b40      	cmp	r3, #64	@ 0x40
 8007ef8:	d005      	beq.n	8007f06 <USBD_StdDevReq+0x26>
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d857      	bhi.n	8007fae <USBD_StdDevReq+0xce>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00f      	beq.n	8007f22 <USBD_StdDevReq+0x42>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d153      	bne.n	8007fae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32ae      	adds	r2, #174	@ 0xae
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f20:	e04a      	b.n	8007fb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d83b      	bhi.n	8007fa2 <USBD_StdDevReq+0xc2>
 8007f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <USBD_StdDevReq+0x50>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f99 	.word	0x08007f99
 8007f38:	08007fa3 	.word	0x08007fa3
 8007f3c:	08007f8f 	.word	0x08007f8f
 8007f40:	08007fa3 	.word	0x08007fa3
 8007f44:	08007f63 	.word	0x08007f63
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007fa3 	.word	0x08007fa3
 8007f50:	08007f7b 	.word	0x08007f7b
 8007f54:	08007f6d 	.word	0x08007f6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa3c 	bl	80083d8 <USBD_GetDescriptor>
          break;
 8007f60:	e024      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fba1 	bl	80086ac <USBD_SetAddress>
          break;
 8007f6a:	e01f      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fbe0 	bl	8008734 <USBD_SetConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
          break;
 8007f78:	e018      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fc83 	bl	8008888 <USBD_GetConfig>
          break;
 8007f82:	e013      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fcb4 	bl	80088f4 <USBD_GetStatus>
          break;
 8007f8c:	e00e      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fce3 	bl	800895c <USBD_SetFeature>
          break;
 8007f96:	e009      	b.n	8007fac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fd07 	bl	80089ae <USBD_ClrFeature>
          break;
 8007fa0:	e004      	b.n	8007fac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fd5e 	bl	8008a66 <USBD_CtlError>
          break;
 8007faa:	bf00      	nop
      }
      break;
 8007fac:	e004      	b.n	8007fb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fd58 	bl	8008a66 <USBD_CtlError>
      break;
 8007fb6:	bf00      	nop
  }

  return ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fda:	2b40      	cmp	r3, #64	@ 0x40
 8007fdc:	d005      	beq.n	8007fea <USBD_StdItfReq+0x26>
 8007fde:	2b40      	cmp	r3, #64	@ 0x40
 8007fe0:	d852      	bhi.n	8008088 <USBD_StdItfReq+0xc4>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <USBD_StdItfReq+0x26>
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d14e      	bne.n	8008088 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d840      	bhi.n	800807a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	889b      	ldrh	r3, [r3, #4]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d836      	bhi.n	8008070 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fedb 	bl	8007dc6 <USBD_CoreFindIF>
 8008010:	4603      	mov	r3, r0
 8008012:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2bff      	cmp	r3, #255	@ 0xff
 8008018:	d01d      	beq.n	8008056 <USBD_StdItfReq+0x92>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11a      	bne.n	8008056 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008020:	7bba      	ldrb	r2, [r7, #14]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	32ae      	adds	r2, #174	@ 0xae
 8008026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00f      	beq.n	8008050 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008030:	7bba      	ldrb	r2, [r7, #14]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008038:	7bba      	ldrb	r2, [r7, #14]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32ae      	adds	r2, #174	@ 0xae
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800804e:	e004      	b.n	800805a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008054:	e001      	b.n	800805a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	88db      	ldrh	r3, [r3, #6]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d110      	bne.n	8008084 <USBD_StdItfReq+0xc0>
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fdd3 	bl	8008c14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800806e:	e009      	b.n	8008084 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fcf7 	bl	8008a66 <USBD_CtlError>
          break;
 8008078:	e004      	b.n	8008084 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fcf2 	bl	8008a66 <USBD_CtlError>
          break;
 8008082:	e000      	b.n	8008086 <USBD_StdItfReq+0xc2>
          break;
 8008084:	bf00      	nop
      }
      break;
 8008086:	e004      	b.n	8008092 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fceb 	bl	8008a66 <USBD_CtlError>
      break;
 8008090:	bf00      	nop
  }

  return ret;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b8:	2b40      	cmp	r3, #64	@ 0x40
 80080ba:	d007      	beq.n	80080cc <USBD_StdEPReq+0x30>
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	f200 817f 	bhi.w	80083c0 <USBD_StdEPReq+0x324>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d02a      	beq.n	800811c <USBD_StdEPReq+0x80>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	f040 817a 	bne.w	80083c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fe85 	bl	8007de0 <USBD_CoreFindEP>
 80080d6:	4603      	mov	r3, r0
 80080d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080da:	7b7b      	ldrb	r3, [r7, #13]
 80080dc:	2bff      	cmp	r3, #255	@ 0xff
 80080de:	f000 8174 	beq.w	80083ca <USBD_StdEPReq+0x32e>
 80080e2:	7b7b      	ldrb	r3, [r7, #13]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8170 	bne.w	80083ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80080ea:	7b7a      	ldrb	r2, [r7, #13]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080f2:	7b7a      	ldrb	r2, [r7, #13]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	32ae      	adds	r2, #174	@ 0xae
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8163 	beq.w	80083ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008104:	7b7a      	ldrb	r2, [r7, #13]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	32ae      	adds	r2, #174	@ 0xae
 800810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800811a:	e156      	b.n	80083ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b03      	cmp	r3, #3
 8008122:	d008      	beq.n	8008136 <USBD_StdEPReq+0x9a>
 8008124:	2b03      	cmp	r3, #3
 8008126:	f300 8145 	bgt.w	80083b4 <USBD_StdEPReq+0x318>
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 809b 	beq.w	8008266 <USBD_StdEPReq+0x1ca>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d03c      	beq.n	80081ae <USBD_StdEPReq+0x112>
 8008134:	e13e      	b.n	80083b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d002      	beq.n	8008148 <USBD_StdEPReq+0xac>
 8008142:	2b03      	cmp	r3, #3
 8008144:	d016      	beq.n	8008174 <USBD_StdEPReq+0xd8>
 8008146:	e02c      	b.n	80081a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <USBD_StdEPReq+0xce>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	@ 0x80
 8008152:	d00a      	beq.n	800816a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f004 fb63 	bl	800c824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800815e:	2180      	movs	r1, #128	@ 0x80
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f004 fb5f 	bl	800c824 <USBD_LL_StallEP>
 8008166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008168:	e020      	b.n	80081ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc7a 	bl	8008a66 <USBD_CtlError>
              break;
 8008172:	e01b      	b.n	80081ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	885b      	ldrh	r3, [r3, #2]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10e      	bne.n	800819a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <USBD_StdEPReq+0xfe>
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b80      	cmp	r3, #128	@ 0x80
 8008186:	d008      	beq.n	800819a <USBD_StdEPReq+0xfe>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	88db      	ldrh	r3, [r3, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d104      	bne.n	800819a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f004 fb45 	bl	800c824 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fd3a 	bl	8008c14 <USBD_CtlSendStatus>

              break;
 80081a0:	e004      	b.n	80081ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fc5e 	bl	8008a66 <USBD_CtlError>
              break;
 80081aa:	bf00      	nop
          }
          break;
 80081ac:	e107      	b.n	80083be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d002      	beq.n	80081c0 <USBD_StdEPReq+0x124>
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d016      	beq.n	80081ec <USBD_StdEPReq+0x150>
 80081be:	e04b      	b.n	8008258 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00d      	beq.n	80081e2 <USBD_StdEPReq+0x146>
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b80      	cmp	r3, #128	@ 0x80
 80081ca:	d00a      	beq.n	80081e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f004 fb27 	bl	800c824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081d6:	2180      	movs	r1, #128	@ 0x80
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f004 fb23 	bl	800c824 <USBD_LL_StallEP>
 80081de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081e0:	e040      	b.n	8008264 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc3e 	bl	8008a66 <USBD_CtlError>
              break;
 80081ea:	e03b      	b.n	8008264 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	885b      	ldrh	r3, [r3, #2]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d136      	bne.n	8008262 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f004 fb2d 	bl	800c862 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fd03 	bl	8008c14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fde4 	bl	8007de0 <USBD_CoreFindEP>
 8008218:	4603      	mov	r3, r0
 800821a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800821c:	7b7b      	ldrb	r3, [r7, #13]
 800821e:	2bff      	cmp	r3, #255	@ 0xff
 8008220:	d01f      	beq.n	8008262 <USBD_StdEPReq+0x1c6>
 8008222:	7b7b      	ldrb	r3, [r7, #13]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11c      	bne.n	8008262 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008228:	7b7a      	ldrb	r2, [r7, #13]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008230:	7b7a      	ldrb	r2, [r7, #13]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	32ae      	adds	r2, #174	@ 0xae
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d010      	beq.n	8008262 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008240:	7b7a      	ldrb	r2, [r7, #13]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	32ae      	adds	r2, #174	@ 0xae
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008256:	e004      	b.n	8008262 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fc03 	bl	8008a66 <USBD_CtlError>
              break;
 8008260:	e000      	b.n	8008264 <USBD_StdEPReq+0x1c8>
              break;
 8008262:	bf00      	nop
          }
          break;
 8008264:	e0ab      	b.n	80083be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d002      	beq.n	8008278 <USBD_StdEPReq+0x1dc>
 8008272:	2b03      	cmp	r3, #3
 8008274:	d032      	beq.n	80082dc <USBD_StdEPReq+0x240>
 8008276:	e097      	b.n	80083a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <USBD_StdEPReq+0x1f2>
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b80      	cmp	r3, #128	@ 0x80
 8008282:	d004      	beq.n	800828e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fbed 	bl	8008a66 <USBD_CtlError>
                break;
 800828c:	e091      	b.n	80083b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800828e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da0b      	bge.n	80082ae <USBD_StdEPReq+0x212>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	3310      	adds	r3, #16
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	3304      	adds	r3, #4
 80082ac:	e00b      	b.n	80082c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	3304      	adds	r3, #4
 80082c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2202      	movs	r2, #2
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fc43 	bl	8008b60 <USBD_CtlSendData>
              break;
 80082da:	e06a      	b.n	80083b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da11      	bge.n	8008308 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	f003 020f 	and.w	r2, r3, #15
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	3324      	adds	r3, #36	@ 0x24
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d117      	bne.n	800832e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fbb0 	bl	8008a66 <USBD_CtlError>
                  break;
 8008306:	e054      	b.n	80083b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	f003 020f 	and.w	r2, r3, #15
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fb9d 	bl	8008a66 <USBD_CtlError>
                  break;
 800832c:	e041      	b.n	80083b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800832e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008332:	2b00      	cmp	r3, #0
 8008334:	da0b      	bge.n	800834e <USBD_StdEPReq+0x2b2>
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	3310      	adds	r3, #16
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	3304      	adds	r3, #4
 800834c:	e00b      	b.n	8008366 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4413      	add	r3, r2
 8008364:	3304      	adds	r3, #4
 8008366:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <USBD_StdEPReq+0x2d8>
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b80      	cmp	r3, #128	@ 0x80
 8008372:	d103      	bne.n	800837c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e00e      	b.n	800839a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f004 fa8d 	bl	800c8a0 <USBD_LL_IsStallEP>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e002      	b.n	800839a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2202      	movs	r2, #2
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fbdd 	bl	8008b60 <USBD_CtlSendData>
              break;
 80083a6:	e004      	b.n	80083b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fb5b 	bl	8008a66 <USBD_CtlError>
              break;
 80083b0:	bf00      	nop
          }
          break;
 80083b2:	e004      	b.n	80083be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fb55 	bl	8008a66 <USBD_CtlError>
          break;
 80083bc:	bf00      	nop
      }
      break;
 80083be:	e005      	b.n	80083cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb4f 	bl	8008a66 <USBD_CtlError>
      break;
 80083c8:	e000      	b.n	80083cc <USBD_StdEPReq+0x330>
      break;
 80083ca:	bf00      	nop
  }

  return ret;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	2b06      	cmp	r3, #6
 80083fa:	f200 8128 	bhi.w	800864e <USBD_GetDescriptor+0x276>
 80083fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008404 <USBD_GetDescriptor+0x2c>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008421 	.word	0x08008421
 8008408:	08008439 	.word	0x08008439
 800840c:	08008479 	.word	0x08008479
 8008410:	0800864f 	.word	0x0800864f
 8008414:	0800864f 	.word	0x0800864f
 8008418:	080085ef 	.word	0x080085ef
 800841c:	0800861b 	.word	0x0800861b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
      break;
 8008436:	e112      	b.n	800865e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7c1b      	ldrb	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10d      	bne.n	800845c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f107 0208 	add.w	r2, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	2202      	movs	r2, #2
 8008458:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800845a:	e100      	b.n	800865e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008464:	f107 0208 	add.w	r2, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
      break;
 8008476:	e0f2      	b.n	800865e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	885b      	ldrh	r3, [r3, #2]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b05      	cmp	r3, #5
 8008480:	f200 80ac 	bhi.w	80085dc <USBD_GetDescriptor+0x204>
 8008484:	a201      	add	r2, pc, #4	@ (adr r2, 800848c <USBD_GetDescriptor+0xb4>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084d9 	.word	0x080084d9
 8008494:	0800850d 	.word	0x0800850d
 8008498:	08008541 	.word	0x08008541
 800849c:	08008575 	.word	0x08008575
 80084a0:	080085a9 	.word	0x080085a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	7c12      	ldrb	r2, [r2, #16]
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c6:	e091      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 facb 	bl	8008a66 <USBD_CtlError>
            err++;
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	3301      	adds	r3, #1
 80084d4:	72fb      	strb	r3, [r7, #11]
          break;
 80084d6:	e089      	b.n	80085ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	7c12      	ldrb	r2, [r2, #16]
 80084f0:	f107 0108 	add.w	r1, r7, #8
 80084f4:	4610      	mov	r0, r2
 80084f6:	4798      	blx	r3
 80084f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084fa:	e077      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fab1 	bl	8008a66 <USBD_CtlError>
            err++;
 8008504:	7afb      	ldrb	r3, [r7, #11]
 8008506:	3301      	adds	r3, #1
 8008508:	72fb      	strb	r3, [r7, #11]
          break;
 800850a:	e06f      	b.n	80085ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7c12      	ldrb	r2, [r2, #16]
 8008524:	f107 0108 	add.w	r1, r7, #8
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852e:	e05d      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa97 	bl	8008a66 <USBD_CtlError>
            err++;
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	3301      	adds	r3, #1
 800853c:	72fb      	strb	r3, [r7, #11]
          break;
 800853e:	e055      	b.n	80085ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	7c12      	ldrb	r2, [r2, #16]
 8008558:	f107 0108 	add.w	r1, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008562:	e043      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa7d 	bl	8008a66 <USBD_CtlError>
            err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
          break;
 8008572:	e03b      	b.n	80085ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e029      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa63 	bl	8008a66 <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e021      	b.n	80085ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e00f      	b.n	80085ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa49 	bl	8008a66 <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e007      	b.n	80085ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa41 	bl	8008a66 <USBD_CtlError>
          err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80085ea:	bf00      	nop
      }
      break;
 80085ec:	e037      	b.n	800865e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7c1b      	ldrb	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fe:	f107 0208 	add.w	r2, r7, #8
 8008602:	4610      	mov	r0, r2
 8008604:	4798      	blx	r3
 8008606:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008608:	e029      	b.n	800865e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa2a 	bl	8008a66 <USBD_CtlError>
        err++;
 8008612:	7afb      	ldrb	r3, [r7, #11]
 8008614:	3301      	adds	r3, #1
 8008616:	72fb      	strb	r3, [r7, #11]
      break;
 8008618:	e021      	b.n	800865e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7c1b      	ldrb	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862a:	f107 0208 	add.w	r2, r7, #8
 800862e:	4610      	mov	r0, r2
 8008630:	4798      	blx	r3
 8008632:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	2207      	movs	r2, #7
 800863a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800863c:	e00f      	b.n	800865e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fa10 	bl	8008a66 <USBD_CtlError>
        err++;
 8008646:	7afb      	ldrb	r3, [r7, #11]
 8008648:	3301      	adds	r3, #1
 800864a:	72fb      	strb	r3, [r7, #11]
      break;
 800864c:	e007      	b.n	800865e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa08 	bl	8008a66 <USBD_CtlError>
      err++;
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	3301      	adds	r3, #1
 800865a:	72fb      	strb	r3, [r7, #11]
      break;
 800865c:	bf00      	nop
  }

  if (err != 0U)
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11e      	bne.n	80086a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	88db      	ldrh	r3, [r3, #6]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d016      	beq.n	800869a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800866c:	893b      	ldrh	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00e      	beq.n	8008690 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	88da      	ldrh	r2, [r3, #6]
 8008676:	893b      	ldrh	r3, [r7, #8]
 8008678:	4293      	cmp	r3, r2
 800867a:	bf28      	it	cs
 800867c:	4613      	movcs	r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008682:	893b      	ldrh	r3, [r7, #8]
 8008684:	461a      	mov	r2, r3
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fa69 	bl	8008b60 <USBD_CtlSendData>
 800868e:	e009      	b.n	80086a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9e7 	bl	8008a66 <USBD_CtlError>
 8008698:	e004      	b.n	80086a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 faba 	bl	8008c14 <USBD_CtlSendStatus>
 80086a0:	e000      	b.n	80086a4 <USBD_GetDescriptor+0x2cc>
    return;
 80086a2:	bf00      	nop
  }
}
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d131      	bne.n	8008722 <USBD_SetAddress+0x76>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	88db      	ldrh	r3, [r3, #6]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d12d      	bne.n	8008722 <USBD_SetAddress+0x76>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	885b      	ldrh	r3, [r3, #2]
 80086ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80086cc:	d829      	bhi.n	8008722 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d104      	bne.n	80086f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f9bc 	bl	8008a66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ee:	e01d      	b.n	800872c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f004 f8fb 	bl	800c8f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa86 	bl	8008c14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008716:	e009      	b.n	800872c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008720:	e004      	b.n	800872c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f99e 	bl	8008a66 <USBD_CtlError>
  }
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	4b4e      	ldr	r3, [pc, #312]	@ (8008884 <USBD_SetConfig+0x150>)
 800874a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800874c:	4b4d      	ldr	r3, [pc, #308]	@ (8008884 <USBD_SetConfig+0x150>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d905      	bls.n	8008760 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f985 	bl	8008a66 <USBD_CtlError>
    return USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e08c      	b.n	800887a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d002      	beq.n	8008772 <USBD_SetConfig+0x3e>
 800876c:	2b03      	cmp	r3, #3
 800876e:	d029      	beq.n	80087c4 <USBD_SetConfig+0x90>
 8008770:	e075      	b.n	800885e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008772:	4b44      	ldr	r3, [pc, #272]	@ (8008884 <USBD_SetConfig+0x150>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d020      	beq.n	80087bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800877a:	4b42      	ldr	r3, [pc, #264]	@ (8008884 <USBD_SetConfig+0x150>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008784:	4b3f      	ldr	r3, [pc, #252]	@ (8008884 <USBD_SetConfig+0x150>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fe ffe3 	bl	8007756 <USBD_SetClassConfig>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f962 	bl	8008a66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087aa:	e065      	b.n	8008878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fa31 	bl	8008c14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2203      	movs	r2, #3
 80087b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087ba:	e05d      	b.n	8008878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fa29 	bl	8008c14 <USBD_CtlSendStatus>
      break;
 80087c2:	e059      	b.n	8008878 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008884 <USBD_SetConfig+0x150>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d112      	bne.n	80087f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80087d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008884 <USBD_SetConfig+0x150>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087de:	4b29      	ldr	r3, [pc, #164]	@ (8008884 <USBD_SetConfig+0x150>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7fe ffd2 	bl	800778e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa12 	bl	8008c14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087f0:	e042      	b.n	8008878 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80087f2:	4b24      	ldr	r3, [pc, #144]	@ (8008884 <USBD_SetConfig+0x150>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d02a      	beq.n	8008856 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe ffc0 	bl	800778e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800880e:	4b1d      	ldr	r3, [pc, #116]	@ (8008884 <USBD_SetConfig+0x150>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008818:	4b1a      	ldr	r3, [pc, #104]	@ (8008884 <USBD_SetConfig+0x150>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe ff99 	bl	8007756 <USBD_SetClassConfig>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00f      	beq.n	800884e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f918 	bl	8008a66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fe ffa5 	bl	800778e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800884c:	e014      	b.n	8008878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9e0 	bl	8008c14 <USBD_CtlSendStatus>
      break;
 8008854:	e010      	b.n	8008878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9dc 	bl	8008c14 <USBD_CtlSendStatus>
      break;
 800885c:	e00c      	b.n	8008878 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f900 	bl	8008a66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008866:	4b07      	ldr	r3, [pc, #28]	@ (8008884 <USBD_SetConfig+0x150>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fe ff8e 	bl	800778e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008872:	2303      	movs	r3, #3
 8008874:	73fb      	strb	r3, [r7, #15]
      break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200003ac 	.word	0x200003ac

08008888 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d004      	beq.n	80088a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8e2 	bl	8008a66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088a2:	e023      	b.n	80088ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	dc02      	bgt.n	80088b6 <USBD_GetConfig+0x2e>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc03      	bgt.n	80088bc <USBD_GetConfig+0x34>
 80088b4:	e015      	b.n	80088e2 <USBD_GetConfig+0x5a>
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d00b      	beq.n	80088d2 <USBD_GetConfig+0x4a>
 80088ba:	e012      	b.n	80088e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3308      	adds	r3, #8
 80088c6:	2201      	movs	r2, #1
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f948 	bl	8008b60 <USBD_CtlSendData>
        break;
 80088d0:	e00c      	b.n	80088ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3304      	adds	r3, #4
 80088d6:	2201      	movs	r2, #1
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f940 	bl	8008b60 <USBD_CtlSendData>
        break;
 80088e0:	e004      	b.n	80088ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f8be 	bl	8008a66 <USBD_CtlError>
        break;
 80088ea:	bf00      	nop
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008904:	b2db      	uxtb	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	2b02      	cmp	r3, #2
 800890a:	d81e      	bhi.n	800894a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d004      	beq.n	800891e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f8a5 	bl	8008a66 <USBD_CtlError>
        break;
 800891c:	e01a      	b.n	8008954 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f043 0202 	orr.w	r2, r3, #2
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	330c      	adds	r3, #12
 800893e:	2202      	movs	r2, #2
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f90c 	bl	8008b60 <USBD_CtlSendData>
      break;
 8008948:	e004      	b.n	8008954 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f88a 	bl	8008a66 <USBD_CtlError>
      break;
 8008952:	bf00      	nop
  }
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d107      	bne.n	800897e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f94c 	bl	8008c14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800897c:	e013      	b.n	80089a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d10b      	bne.n	800899e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	889b      	ldrh	r3, [r3, #4]
 800898a:	0a1b      	lsrs	r3, r3, #8
 800898c:	b29b      	uxth	r3, r3
 800898e:	b2da      	uxtb	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f93c 	bl	8008c14 <USBD_CtlSendStatus>
}
 800899c:	e003      	b.n	80089a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f860 	bl	8008a66 <USBD_CtlError>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d80b      	bhi.n	80089de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	885b      	ldrh	r3, [r3, #2]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d10c      	bne.n	80089e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f91c 	bl	8008c14 <USBD_CtlSendStatus>
      }
      break;
 80089dc:	e004      	b.n	80089e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f840 	bl	8008a66 <USBD_CtlError>
      break;
 80089e6:	e000      	b.n	80089ea <USBD_ClrFeature+0x3c>
      break;
 80089e8:	bf00      	nop
  }
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff fa40 	bl	8007ea2 <SWAPBYTE>
 8008a22:	4603      	mov	r3, r0
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff fa33 	bl	8007ea2 <SWAPBYTE>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fa26 	bl	8007ea2 <SWAPBYTE>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	80da      	strh	r2, [r3, #6]
}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a70:	2180      	movs	r1, #128	@ 0x80
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f003 fed6 	bl	800c824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a78:	2100      	movs	r1, #0
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f003 fed2 	bl	800c824 <USBD_LL_StallEP>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d042      	beq.n	8008b24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008aa2:	6938      	ldr	r0, [r7, #16]
 8008aa4:	f000 f842 	bl	8008b2c <USBD_GetLen>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	3301      	adds	r3, #1
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab2:	d808      	bhi.n	8008ac6 <USBD_GetString+0x3e>
 8008ab4:	6938      	ldr	r0, [r7, #16]
 8008ab6:	f000 f839 	bl	8008b2c <USBD_GetLen>
 8008aba:	4603      	mov	r3, r0
 8008abc:	3301      	adds	r3, #1
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	e001      	b.n	8008aca <USBD_GetString+0x42>
 8008ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	3301      	adds	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	3301      	adds	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008af0:	e013      	b.n	8008b1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	4413      	add	r3, r2
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3301      	adds	r3, #1
 8008b02:	613b      	str	r3, [r7, #16]
    idx++;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	3301      	adds	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	4413      	add	r3, r2
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	3301      	adds	r3, #1
 8008b18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e7      	bne.n	8008af2 <USBD_GetString+0x6a>
 8008b22:	e000      	b.n	8008b26 <USBD_GetString+0x9e>
    return;
 8008b24:	bf00      	nop
  }
}
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b3c:	e005      	b.n	8008b4a <USBD_GetLen+0x1e>
  {
    len++;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	3301      	adds	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f5      	bne.n	8008b3e <USBD_GetLen+0x12>
  }

  return len;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	2100      	movs	r1, #0
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f003 fed5 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f003 fec4 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f003 fec8 	bl	800c978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	2100      	movs	r1, #0
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f003 feb7 	bl	800c978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2204      	movs	r2, #4
 8008c20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c24:	2300      	movs	r3, #0
 8008c26:	2200      	movs	r2, #0
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f003 fe83 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2205      	movs	r2, #5
 8008c46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f003 fe91 	bl	800c978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <__NVIC_SetPriority>:
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	db0a      	blt.n	8008c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	490c      	ldr	r1, [pc, #48]	@ (8008cac <__NVIC_SetPriority+0x4c>)
 8008c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c7e:	0112      	lsls	r2, r2, #4
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	440b      	add	r3, r1
 8008c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008c88:	e00a      	b.n	8008ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4908      	ldr	r1, [pc, #32]	@ (8008cb0 <__NVIC_SetPriority+0x50>)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	3b04      	subs	r3, #4
 8008c98:	0112      	lsls	r2, r2, #4
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	761a      	strb	r2, [r3, #24]
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	e000e100 	.word	0xe000e100
 8008cb0:	e000ed00 	.word	0xe000ed00

08008cb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008cb8:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <SysTick_Handler+0x1c>)
 8008cba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cbc:	f002 f844 	bl	800ad48 <xTaskGetSchedulerState>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d001      	beq.n	8008cca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008cc6:	f002 ff3f 	bl	800bb48 <xPortSysTickHandler>
  }
}
 8008cca:	bf00      	nop
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	e000e010 	.word	0xe000e010

08008cd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	f06f 0004 	mvn.w	r0, #4
 8008cde:	f7ff ffbf 	bl	8008c60 <__NVIC_SetPriority>
#endif
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cee:	f3ef 8305 	mrs	r3, IPSR
 8008cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8008cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008cfa:	f06f 0305 	mvn.w	r3, #5
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	e00c      	b.n	8008d1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <osKernelInitialize+0x44>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	@ (8008d2c <osKernelInitialize+0x44>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	e002      	b.n	8008d1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d1c:	687b      	ldr	r3, [r7, #4]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	200003b0 	.word	0x200003b0

08008d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d36:	f3ef 8305 	mrs	r3, IPSR
 8008d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d42:	f06f 0305 	mvn.w	r3, #5
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	e010      	b.n	8008d6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d78 <osKernelStart+0x48>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d109      	bne.n	8008d66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d52:	f7ff ffbf 	bl	8008cd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d56:	4b08      	ldr	r3, [pc, #32]	@ (8008d78 <osKernelStart+0x48>)
 8008d58:	2202      	movs	r2, #2
 8008d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d5c:	f001 fb90 	bl	800a480 <vTaskStartScheduler>
      stat = osOK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	607b      	str	r3, [r7, #4]
 8008d64:	e002      	b.n	8008d6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d6c:	687b      	ldr	r3, [r7, #4]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	200003b0 	.word	0x200003b0

08008d7c <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8008d82:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <OS_Tick_GetCount+0x20>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <OS_Tick_GetCount+0x20>)
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	1ad3      	subs	r3, r2, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	e000e010 	.word	0xe000e010

08008da0 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8008da4:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <OS_Tick_GetOverflow+0x18>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	f003 0301 	and.w	r3, r3, #1
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	e000e010 	.word	0xe000e010

08008dbc <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8008dc0:	4b03      	ldr	r3, [pc, #12]	@ (8008dd0 <OS_Tick_GetInterval+0x14>)
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	3301      	adds	r3, #1
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	e000e010 	.word	0xe000e010

08008dd4 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008dda:	f3ef 8310 	mrs	r3, PRIMASK
 8008dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8008de0:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <osKernelGetSysTimerCount+0x1e>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008de6:	f3ef 8311 	mrs	r3, BASEPRI
 8008dea:	607b      	str	r3, [r7, #4]
  return(result);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <osKernelGetSysTimerCount+0x22>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <osKernelGetSysTimerCount+0x24>
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dfa:	b672      	cpsid	i
}
 8008dfc:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8008dfe:	f001 fc5b 	bl	800a6b8 <xTaskGetTickCount>
 8008e02:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8008e04:	f7ff ffba 	bl	8008d7c <OS_Tick_GetCount>
 8008e08:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8008e0a:	f7ff ffc9 	bl	8008da0 <OS_Tick_GetOverflow>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8008e14:	f7ff ffb2 	bl	8008d7c <OS_Tick_GetCount>
 8008e18:	6138      	str	r0, [r7, #16]
    ticks++;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8008e20:	f7ff ffcc 	bl	8008dbc <OS_Tick_GetInterval>
 8008e24:	4602      	mov	r2, r0
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	fb02 f303 	mul.w	r3, r2, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4413      	add	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8008e38:	b662      	cpsie	i
}
 8008e3a:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8008e3c:	693b      	ldr	r3, [r7, #16]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b08e      	sub	sp, #56	@ 0x38
 8008e4a:	af04      	add	r7, sp, #16
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e56:	f3ef 8305 	mrs	r3, IPSR
 8008e5a:	617b      	str	r3, [r7, #20]
  return(result);
 8008e5c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d17e      	bne.n	8008f60 <osThreadNew+0x11a>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d07b      	beq.n	8008f60 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e68:	2380      	movs	r3, #128	@ 0x80
 8008e6a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e6c:	2318      	movs	r3, #24
 8008e6e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008e74:	f04f 33ff 	mov.w	r3, #4294967295
 8008e78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d045      	beq.n	8008f0c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <osThreadNew+0x48>
        name = attr->name;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <osThreadNew+0x6e>
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2b38      	cmp	r3, #56	@ 0x38
 8008ea6:	d805      	bhi.n	8008eb4 <osThreadNew+0x6e>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <osThreadNew+0x72>
        return (NULL);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e054      	b.n	8008f62 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	089b      	lsrs	r3, r3, #2
 8008ec6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <osThreadNew+0xa8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2ba7      	cmp	r3, #167	@ 0xa7
 8008ed6:	d90a      	bls.n	8008eee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d006      	beq.n	8008eee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <osThreadNew+0xa8>
        mem = 1;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	e010      	b.n	8008f10 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10c      	bne.n	8008f10 <osThreadNew+0xca>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d108      	bne.n	8008f10 <osThreadNew+0xca>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d104      	bne.n	8008f10 <osThreadNew+0xca>
          mem = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	e001      	b.n	8008f10 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d110      	bne.n	8008f38 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f1e:	9202      	str	r2, [sp, #8]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6a3a      	ldr	r2, [r7, #32]
 8008f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f001 f83f 	bl	8009fb0 <xTaskCreateStatic>
 8008f32:	4603      	mov	r3, r0
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	e013      	b.n	8008f60 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d110      	bne.n	8008f60 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 f88d 	bl	800a070 <xTaskCreate>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d001      	beq.n	8008f60 <osThreadNew+0x11a>
            hTask = NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f60:	693b      	ldr	r3, [r7, #16]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3728      	adds	r7, #40	@ 0x28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f72:	f3ef 8305 	mrs	r3, IPSR
 8008f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <osDelay+0x1c>
    stat = osErrorISR;
 8008f7e:	f06f 0305 	mvn.w	r3, #5
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e007      	b.n	8008f96 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fa3f 	bl	800a414 <vTaskDelay>
    }
  }

  return (stat);
 8008f96:	68fb      	ldr	r3, [r7, #12]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4a07      	ldr	r2, [pc, #28]	@ (8008fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8008fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a06      	ldr	r2, [pc, #24]	@ (8008fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8008fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2280      	movs	r2, #128	@ 0x80
 8008fbc:	601a      	str	r2, [r3, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	200003b4 	.word	0x200003b4
 8008fd0:	2000045c 	.word	0x2000045c

08008fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4a07      	ldr	r2, [pc, #28]	@ (8009000 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a06      	ldr	r2, [pc, #24]	@ (8009004 <vApplicationGetTimerTaskMemory+0x30>)
 8008fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	2000065c 	.word	0x2000065c
 8009004:	20000704 	.word	0x20000704

08009008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f103 0208 	add.w	r2, r3, #8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f103 0208 	add.w	r2, r3, #8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f103 0208 	add.w	r2, r3, #8
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009062:	b480      	push	{r7}
 8009064:	b085      	sub	sp, #20
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	601a      	str	r2, [r3, #0]
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d103      	bne.n	80090ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e00c      	b.n	80090e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3308      	adds	r3, #8
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e002      	b.n	80090d8 <vListInsert+0x2e>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d2f6      	bcs.n	80090d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6892      	ldr	r2, [r2, #8]
 8009132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6852      	ldr	r2, [r2, #4]
 800913c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d103      	bne.n	8009150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	1e5a      	subs	r2, r3, #1
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10b      	bne.n	800919c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800919c:	f002 fc44 	bl	800ba28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	68f9      	ldr	r1, [r7, #12]
 80091aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091ac:	fb01 f303 	mul.w	r3, r1, r3
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091cc:	3b01      	subs	r3, #1
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	22ff      	movs	r2, #255	@ 0xff
 80091e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	22ff      	movs	r2, #255	@ 0xff
 80091e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d114      	bne.n	800921c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01a      	beq.n	8009230 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3310      	adds	r3, #16
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 fbdc 	bl	800a9bc <xTaskRemoveFromEventList>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d012      	beq.n	8009230 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800920a:	4b0d      	ldr	r3, [pc, #52]	@ (8009240 <xQueueGenericReset+0xd0>)
 800920c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	e009      	b.n	8009230 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3310      	adds	r3, #16
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff fef1 	bl	8009008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3324      	adds	r3, #36	@ 0x24
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff feec 	bl	8009008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009230:	f002 fc2c 	bl	800ba8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009234:	2301      	movs	r3, #1
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	e000ed04 	.word	0xe000ed04

08009244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08e      	sub	sp, #56	@ 0x38
 8009248:	af02      	add	r7, sp, #8
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10b      	bne.n	800928e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <xQueueGenericCreateStatic+0x56>
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <xQueueGenericCreateStatic+0x5a>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <xQueueGenericCreateStatic+0x5c>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	623b      	str	r3, [r7, #32]
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <xQueueGenericCreateStatic+0x84>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <xQueueGenericCreateStatic+0x88>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e000      	b.n	80092ce <xQueueGenericCreateStatic+0x8a>
 80092cc:	2300      	movs	r3, #0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	61fb      	str	r3, [r7, #28]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092ea:	2350      	movs	r3, #80	@ 0x50
 80092ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b50      	cmp	r3, #80	@ 0x50
 80092f2:	d00b      	beq.n	800930c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	61bb      	str	r3, [r7, #24]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800930c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00d      	beq.n	8009334 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009320:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	4613      	mov	r3, r2
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	68b9      	ldr	r1, [r7, #8]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f840 	bl	80093b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009336:	4618      	mov	r0, r3
 8009338:	3730      	adds	r7, #48	@ 0x30
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800933e:	b580      	push	{r7, lr}
 8009340:	b08a      	sub	sp, #40	@ 0x28
 8009342:	af02      	add	r7, sp, #8
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	4613      	mov	r3, r2
 800934a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	613b      	str	r3, [r7, #16]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	3350      	adds	r3, #80	@ 0x50
 8009378:	4618      	mov	r0, r3
 800937a:	f002 fc77 	bl	800bc6c <pvPortMalloc>
 800937e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d011      	beq.n	80093aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	3350      	adds	r3, #80	@ 0x50
 800938e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009398:	79fa      	ldrb	r2, [r7, #7]
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	4613      	mov	r3, r2
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f805 	bl	80093b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093aa:	69bb      	ldr	r3, [r7, #24]
	}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d103      	bne.n	80093d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e002      	b.n	80093d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093e2:	2101      	movs	r1, #1
 80093e4:	69b8      	ldr	r0, [r7, #24]
 80093e6:	f7ff fec3 	bl	8009170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	78fa      	ldrb	r2, [r7, #3]
 80093ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00e      	beq.n	8009426 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800941a:	2300      	movs	r3, #0
 800941c:	2200      	movs	r2, #0
 800941e:	2100      	movs	r1, #0
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f81d 	bl	8009460 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	4603      	mov	r3, r0
 8009436:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	461a      	mov	r2, r3
 8009444:	6939      	ldr	r1, [r7, #16]
 8009446:	6978      	ldr	r0, [r7, #20]
 8009448:	f7ff ff79 	bl	800933e <xQueueGenericCreate>
 800944c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff ffd3 	bl	80093fa <prvInitialiseMutex>

		return xNewQueue;
 8009454:	68fb      	ldr	r3, [r7, #12]
	}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	@ 0x38
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800946e:	2300      	movs	r3, #0
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <xQueueGenericSend+0x34>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <xQueueGenericSend+0x42>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <xQueueGenericSend+0x46>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <xQueueGenericSend+0x48>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <xQueueGenericSend+0x64>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSend+0x72>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <xQueueGenericSend+0x76>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <xQueueGenericSend+0x78>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10b      	bne.n	80094f4 <xQueueGenericSend+0x94>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	623b      	str	r3, [r7, #32]
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	e7fd      	b.n	80094f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094f4:	f001 fc28 	bl	800ad48 <xTaskGetSchedulerState>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <xQueueGenericSend+0xa4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <xQueueGenericSend+0xa8>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <xQueueGenericSend+0xaa>
 8009508:	2300      	movs	r3, #0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10b      	bne.n	8009526 <xQueueGenericSend+0xc6>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	61fb      	str	r3, [r7, #28]
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	e7fd      	b.n	8009522 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009526:	f002 fa7f 	bl	800ba28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009532:	429a      	cmp	r2, r3
 8009534:	d302      	bcc.n	800953c <xQueueGenericSend+0xdc>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d129      	bne.n	8009590 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009542:	f000 fbc7 	bl	8009cd4 <prvCopyDataToQueue>
 8009546:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	3324      	adds	r3, #36	@ 0x24
 8009554:	4618      	mov	r0, r3
 8009556:	f001 fa31 	bl	800a9bc <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b3f      	ldr	r3, [pc, #252]	@ (8009660 <xQueueGenericSend+0x200>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	e00a      	b.n	8009588 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009578:	4b39      	ldr	r3, [pc, #228]	@ (8009660 <xQueueGenericSend+0x200>)
 800957a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009588:	f002 fa80 	bl	800ba8c <vPortExitCritical>
				return pdPASS;
 800958c:	2301      	movs	r3, #1
 800958e:	e063      	b.n	8009658 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009596:	f002 fa79 	bl	800ba8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800959a:	2300      	movs	r3, #0
 800959c:	e05c      	b.n	8009658 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800959e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 fa6b 	bl	800aa84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ae:	2301      	movs	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095b2:	f002 fa6b 	bl	800ba8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095b6:	f000 ffd3 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ba:	f002 fa35 	bl	800ba28 <vPortEnterCritical>
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d103      	bne.n	80095d4 <xQueueGenericSend+0x174>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095da:	b25b      	sxtb	r3, r3
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x18a>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ea:	f002 fa4f 	bl	800ba8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095ee:	1d3a      	adds	r2, r7, #4
 80095f0:	f107 0314 	add.w	r3, r7, #20
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fa5a 	bl	800aab0 <xTaskCheckForTimeOut>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d124      	bne.n	800964c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009602:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009604:	f000 fc5e 	bl	8009ec4 <prvIsQueueFull>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d018      	beq.n	8009640 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	3310      	adds	r3, #16
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f001 f97e 	bl	800a918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800961c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800961e:	f000 fbe9 	bl	8009df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009622:	f000 ffab 	bl	800a57c <xTaskResumeAll>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af7c 	bne.w	8009526 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800962e:	4b0c      	ldr	r3, [pc, #48]	@ (8009660 <xQueueGenericSend+0x200>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	e772      	b.n	8009526 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009642:	f000 fbd7 	bl	8009df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009646:	f000 ff99 	bl	800a57c <xTaskResumeAll>
 800964a:	e76c      	b.n	8009526 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800964e:	f000 fbd1 	bl	8009df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009652:	f000 ff93 	bl	800a57c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009658:	4618      	mov	r0, r3
 800965a:	3738      	adds	r7, #56	@ 0x38
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	@ 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	e7fd      	b.n	8009690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSendFromISR+0x3e>
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <xQueueGenericSendFromISR+0x42>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <xQueueGenericSendFromISR+0x44>
 80096a6:	2300      	movs	r3, #0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10b      	bne.n	80096c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSendFromISR+0x6e>
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <xQueueGenericSendFromISR+0x72>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueGenericSendFromISR+0x74>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	623b      	str	r3, [r7, #32]
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	e7fd      	b.n	80096f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f4:	f002 fa78 	bl	800bbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096f8:	f3ef 8211 	mrs	r2, BASEPRI
 80096fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	61fa      	str	r2, [r7, #28]
 800970e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009710:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <xQueueGenericSendFromISR+0xc2>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d12f      	bne.n	8009786 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800972c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800973c:	f000 faca 	bl	8009cd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009740:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009748:	d112      	bne.n	8009770 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	d016      	beq.n	8009780 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	3324      	adds	r3, #36	@ 0x24
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f930 	bl	800a9bc <xTaskRemoveFromEventList>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e007      	b.n	8009780 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009774:	3301      	adds	r3, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	b25a      	sxtb	r2, r3
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009780:	2301      	movs	r3, #1
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009784:	e001      	b.n	800978a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800978a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009794:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009798:	4618      	mov	r0, r3
 800979a:	3740      	adds	r7, #64	@ 0x40
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	@ 0x38
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10b      	bne.n	80097cc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	623b      	str	r3, [r7, #32]
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <xQueueGiveFromISR+0x4c>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	61fb      	str	r3, [r7, #28]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <xQueueGiveFromISR+0x5c>
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <xQueueGiveFromISR+0x60>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <xQueueGiveFromISR+0x62>
 8009800:	2300      	movs	r3, #0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10b      	bne.n	800981e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	61bb      	str	r3, [r7, #24]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800981e:	f002 f9e3 	bl	800bbe8 <vPortValidateInterruptPriority>
	__asm volatile
 8009822:	f3ef 8211 	mrs	r2, BASEPRI
 8009826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	617a      	str	r2, [r7, #20]
 8009838:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800983a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800983c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800984a:	429a      	cmp	r2, r3
 800984c:	d22b      	bcs.n	80098a6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009860:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009868:	d112      	bne.n	8009890 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d016      	beq.n	80098a0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	3324      	adds	r3, #36	@ 0x24
 8009876:	4618      	mov	r0, r3
 8009878:	f001 f8a0 	bl	800a9bc <xTaskRemoveFromEventList>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00e      	beq.n	80098a0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2201      	movs	r2, #1
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e007      	b.n	80098a0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009894:	3301      	adds	r3, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	b25a      	sxtb	r2, r3
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098a0:	2301      	movs	r3, #1
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a4:	e001      	b.n	80098aa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f383 8811 	msr	BASEPRI, r3
}
 80098b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3738      	adds	r7, #56	@ 0x38
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08c      	sub	sp, #48	@ 0x30
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <xQueueReceive+0x32>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	623b      	str	r3, [r7, #32]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <xQueueReceive+0x40>
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <xQueueReceive+0x44>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <xQueueReceive+0x46>
 8009904:	2300      	movs	r3, #0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <xQueueReceive+0x62>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	61fb      	str	r3, [r7, #28]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009922:	f001 fa11 	bl	800ad48 <xTaskGetSchedulerState>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <xQueueReceive+0x72>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <xQueueReceive+0x76>
 8009932:	2301      	movs	r3, #1
 8009934:	e000      	b.n	8009938 <xQueueReceive+0x78>
 8009936:	2300      	movs	r3, #0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <xQueueReceive+0x94>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	61bb      	str	r3, [r7, #24]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009954:	f002 f868 	bl	800ba28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01f      	beq.n	80099a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009968:	f000 fa1e 	bl	8009da8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	1e5a      	subs	r2, r3, #1
 8009970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009972:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00f      	beq.n	800999c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	3310      	adds	r3, #16
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f81b 	bl	800a9bc <xTaskRemoveFromEventList>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800998c:	4b3c      	ldr	r3, [pc, #240]	@ (8009a80 <xQueueReceive+0x1c0>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800999c:	f002 f876 	bl	800ba8c <vPortExitCritical>
				return pdPASS;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e069      	b.n	8009a78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d103      	bne.n	80099b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099aa:	f002 f86f 	bl	800ba8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e062      	b.n	8009a78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 f861 	bl	800aa84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099c2:	2301      	movs	r3, #1
 80099c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099c6:	f002 f861 	bl	800ba8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ca:	f000 fdc9 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ce:	f002 f82b 	bl	800ba28 <vPortEnterCritical>
 80099d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d103      	bne.n	80099e8 <xQueueReceive+0x128>
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099ee:	b25b      	sxtb	r3, r3
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d103      	bne.n	80099fe <xQueueReceive+0x13e>
 80099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099fe:	f002 f845 	bl	800ba8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a02:	1d3a      	adds	r2, r7, #4
 8009a04:	f107 0310 	add.w	r3, r7, #16
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 f850 	bl	800aab0 <xTaskCheckForTimeOut>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d123      	bne.n	8009a5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a18:	f000 fa3e 	bl	8009e98 <prvIsQueueEmpty>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d017      	beq.n	8009a52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	3324      	adds	r3, #36	@ 0x24
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 ff74 	bl	800a918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a32:	f000 f9df 	bl	8009df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a36:	f000 fda1 	bl	800a57c <xTaskResumeAll>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d189      	bne.n	8009954 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009a40:	4b0f      	ldr	r3, [pc, #60]	@ (8009a80 <xQueueReceive+0x1c0>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	e780      	b.n	8009954 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a54:	f000 f9ce 	bl	8009df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a58:	f000 fd90 	bl	800a57c <xTaskResumeAll>
 8009a5c:	e77a      	b.n	8009954 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a60:	f000 f9c8 	bl	8009df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a64:	f000 fd8a 	bl	800a57c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a6a:	f000 fa15 	bl	8009e98 <prvIsQueueEmpty>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f43f af6f 	beq.w	8009954 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3730      	adds	r7, #48	@ 0x30
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	@ 0x38
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	623b      	str	r3, [r7, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	61fb      	str	r3, [r7, #28]
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ad8:	f001 f936 	bl	800ad48 <xTaskGetSchedulerState>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <xQueueSemaphoreTake+0x64>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <xQueueSemaphoreTake+0x68>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <xQueueSemaphoreTake+0x6a>
 8009aec:	2300      	movs	r3, #0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10b      	bne.n	8009b0a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	61bb      	str	r3, [r7, #24]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b0a:	f001 ff8d 	bl	800ba28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d024      	beq.n	8009b64 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d104      	bne.n	8009b34 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b2a:	f001 fa87 	bl	800b03c <pvTaskIncrementMutexHeldCount>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00f      	beq.n	8009b5c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	3310      	adds	r3, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 ff3b 	bl	800a9bc <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b4c:	4b54      	ldr	r3, [pc, #336]	@ (8009ca0 <xQueueSemaphoreTake+0x21c>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b5c:	f001 ff96 	bl	800ba8c <vPortExitCritical>
				return pdPASS;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e098      	b.n	8009c96 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d112      	bne.n	8009b90 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	617b      	str	r3, [r7, #20]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b88:	f001 ff80 	bl	800ba8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e082      	b.n	8009c96 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b96:	f107 030c 	add.w	r3, r7, #12
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 ff72 	bl	800aa84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ba4:	f001 ff72 	bl	800ba8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ba8:	f000 fcda 	bl	800a560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bac:	f001 ff3c 	bl	800ba28 <vPortEnterCritical>
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <xQueueSemaphoreTake+0x142>
 8009bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bcc:	b25b      	sxtb	r3, r3
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d103      	bne.n	8009bdc <xQueueSemaphoreTake+0x158>
 8009bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bdc:	f001 ff56 	bl	800ba8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009be0:	463a      	mov	r2, r7
 8009be2:	f107 030c 	add.w	r3, r7, #12
 8009be6:	4611      	mov	r1, r2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 ff61 	bl	800aab0 <xTaskCheckForTimeOut>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d132      	bne.n	8009c5a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bf6:	f000 f94f 	bl	8009e98 <prvIsQueueEmpty>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d026      	beq.n	8009c4e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009c08:	f001 ff0e 	bl	800ba28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 f8b7 	bl	800ad84 <xTaskPriorityInherit>
 8009c16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009c18:	f001 ff38 	bl	800ba8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1e:	3324      	adds	r3, #36	@ 0x24
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fe77 	bl	800a918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c2c:	f000 f8e2 	bl	8009df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c30:	f000 fca4 	bl	800a57c <xTaskResumeAll>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f af67 	bne.w	8009b0a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009c3c:	4b18      	ldr	r3, [pc, #96]	@ (8009ca0 <xQueueSemaphoreTake+0x21c>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	e75d      	b.n	8009b0a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c50:	f000 f8d0 	bl	8009df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c54:	f000 fc92 	bl	800a57c <xTaskResumeAll>
 8009c58:	e757      	b.n	8009b0a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c5c:	f000 f8ca 	bl	8009df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c60:	f000 fc8c 	bl	800a57c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c66:	f000 f917 	bl	8009e98 <prvIsQueueEmpty>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f43f af4c 	beq.w	8009b0a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00d      	beq.n	8009c94 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009c78:	f001 fed6 	bl	800ba28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c7e:	f000 f811 	bl	8009ca4 <prvGetDisinheritPriorityAfterTimeout>
 8009c82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 f952 	bl	800af34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c90:	f001 fefc 	bl	800ba8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3738      	adds	r7, #56	@ 0x38
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d006      	beq.n	8009cc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e001      	b.n	8009cc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10d      	bne.n	8009d0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d14d      	bne.n	8009d96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 f8a8 	bl	800ae54 <xTaskPriorityDisinherit>
 8009d04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	609a      	str	r2, [r3, #8]
 8009d0c:	e043      	b.n	8009d96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d119      	bne.n	8009d48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6858      	ldr	r0, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68b9      	ldr	r1, [r7, #8]
 8009d20:	f003 fe2d 	bl	800d97e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d2c:	441a      	add	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d32b      	bcc.n	8009d96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	e026      	b.n	8009d96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68d8      	ldr	r0, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d50:	461a      	mov	r2, r3
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	f003 fe13 	bl	800d97e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d60:	425b      	negs	r3, r3
 8009d62:	441a      	add	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d207      	bcs.n	8009d84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	441a      	add	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d105      	bne.n	8009d96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d9e:	697b      	ldr	r3, [r7, #20]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d018      	beq.n	8009dec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc2:	441a      	add	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d303      	bcc.n	8009ddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68d9      	ldr	r1, [r3, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de4:	461a      	mov	r2, r3
 8009de6:	6838      	ldr	r0, [r7, #0]
 8009de8:	f003 fdc9 	bl	800d97e <memcpy>
	}
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dfc:	f001 fe14 	bl	800ba28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e08:	e011      	b.n	8009e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d012      	beq.n	8009e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3324      	adds	r3, #36	@ 0x24
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fdd0 	bl	800a9bc <xTaskRemoveFromEventList>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e22:	f000 fea9 	bl	800ab78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	dce9      	bgt.n	8009e0a <prvUnlockQueue+0x16>
 8009e36:	e000      	b.n	8009e3a <prvUnlockQueue+0x46>
					break;
 8009e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	22ff      	movs	r2, #255	@ 0xff
 8009e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e42:	f001 fe23 	bl	800ba8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e46:	f001 fdef 	bl	800ba28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e52:	e011      	b.n	8009e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d012      	beq.n	8009e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3310      	adds	r3, #16
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fdab 	bl	800a9bc <xTaskRemoveFromEventList>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e6c:	f000 fe84 	bl	800ab78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dce9      	bgt.n	8009e54 <prvUnlockQueue+0x60>
 8009e80:	e000      	b.n	8009e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	22ff      	movs	r2, #255	@ 0xff
 8009e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e8c:	f001 fdfe 	bl	800ba8c <vPortExitCritical>
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ea0:	f001 fdc2 	bl	800ba28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009eac:	2301      	movs	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e001      	b.n	8009eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb6:	f001 fde9 	bl	800ba8c <vPortExitCritical>

	return xReturn;
 8009eba:	68fb      	ldr	r3, [r7, #12]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ecc:	f001 fdac 	bl	800ba28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d102      	bne.n	8009ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e001      	b.n	8009ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee6:	f001 fdd1 	bl	800ba8c <vPortExitCritical>

	return xReturn;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e014      	b.n	8009f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f04:	4a0f      	ldr	r2, [pc, #60]	@ (8009f44 <vQueueAddToRegistry+0x50>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f10:	490c      	ldr	r1, [pc, #48]	@ (8009f44 <vQueueAddToRegistry+0x50>)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f44 <vQueueAddToRegistry+0x50>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	4413      	add	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f26:	e006      	b.n	8009f36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b07      	cmp	r3, #7
 8009f32:	d9e7      	bls.n	8009f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000b04 	.word	0x20000b04

08009f48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f58:	f001 fd66 	bl	800ba28 <vPortEnterCritical>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f62:	b25b      	sxtb	r3, r3
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f68:	d103      	bne.n	8009f72 <vQueueWaitForMessageRestricted+0x2a>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d103      	bne.n	8009f88 <vQueueWaitForMessageRestricted+0x40>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f88:	f001 fd80 	bl	800ba8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	3324      	adds	r3, #36	@ 0x24
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fce1 	bl	800a964 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fa2:	6978      	ldr	r0, [r7, #20]
 8009fa4:	f7ff ff26 	bl	8009df4 <prvUnlockQueue>
	}
 8009fa8:	bf00      	nop
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08e      	sub	sp, #56	@ 0x38
 8009fb4:	af04      	add	r7, sp, #16
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10b      	bne.n	8009fdc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	623b      	str	r3, [r7, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10b      	bne.n	8009ffa <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	61fb      	str	r3, [r7, #28]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ffa:	23a8      	movs	r3, #168	@ 0xa8
 8009ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2ba8      	cmp	r3, #168	@ 0xa8
 800a002:	d00b      	beq.n	800a01c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	61bb      	str	r3, [r7, #24]
}
 800a016:	bf00      	nop
 800a018:	bf00      	nop
 800a01a:	e7fd      	b.n	800a018 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a01c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01e      	beq.n	800a062 <xTaskCreateStatic+0xb2>
 800a024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01b      	beq.n	800a062 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a032:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	2202      	movs	r2, #2
 800a038:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a03c:	2300      	movs	r3, #0
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	f107 0314 	add.w	r3, r7, #20
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f851 	bl	800a0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a05a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a05c:	f000 f8f6 	bl	800a24c <prvAddNewTaskToReadyList>
 800a060:	e001      	b.n	800a066 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a066:	697b      	ldr	r3, [r7, #20]
	}
 800a068:	4618      	mov	r0, r3
 800a06a:	3728      	adds	r7, #40	@ 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08c      	sub	sp, #48	@ 0x30
 800a074:	af04      	add	r7, sp, #16
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	4613      	mov	r3, r2
 800a07e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4618      	mov	r0, r3
 800a086:	f001 fdf1 	bl	800bc6c <pvPortMalloc>
 800a08a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00e      	beq.n	800a0b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a092:	20a8      	movs	r0, #168	@ 0xa8
 800a094:	f001 fdea 	bl	800bc6c <pvPortMalloc>
 800a098:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a0a6:	e005      	b.n	800a0b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0a8:	6978      	ldr	r0, [r7, #20]
 800a0aa:	f001 fead 	bl	800be08 <vPortFree>
 800a0ae:	e001      	b.n	800a0b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d017      	beq.n	800a0ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f80f 	bl	800a0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0de:	69f8      	ldr	r0, [r7, #28]
 800a0e0:	f000 f8b4 	bl	800a24c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	61bb      	str	r3, [r7, #24]
 800a0e8:	e002      	b.n	800a0f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
	}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	461a      	mov	r2, r3
 800a114:	21a5      	movs	r1, #165	@ 0xa5
 800a116:	f003 fb08 	bl	800d72a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a124:	3b01      	subs	r3, #1
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f023 0307 	bic.w	r3, r3, #7
 800a132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	617b      	str	r3, [r7, #20]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01f      	beq.n	800a19c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]
 800a160:	e012      	b.n	800a188 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	7819      	ldrb	r1, [r3, #0]
 800a16a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	3334      	adds	r3, #52	@ 0x34
 800a172:	460a      	mov	r2, r1
 800a174:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	4413      	add	r3, r2
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	3301      	adds	r3, #1
 800a186:	61fb      	str	r3, [r7, #28]
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	2b0f      	cmp	r3, #15
 800a18c:	d9e9      	bls.n	800a162 <prvInitialiseNewTask+0x66>
 800a18e:	e000      	b.n	800a192 <prvInitialiseNewTask+0x96>
			{
				break;
 800a190:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a19a:	e003      	b.n	800a1a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	2b37      	cmp	r3, #55	@ 0x37
 800a1a8:	d901      	bls.n	800a1ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1aa:	2337      	movs	r3, #55	@ 0x37
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	2200      	movs	r2, #0
 800a1be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe ff3f 	bl	8009048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	3318      	adds	r3, #24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe ff3a 	bl	8009048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	3354      	adds	r3, #84	@ 0x54
 800a1fe:	224c      	movs	r2, #76	@ 0x4c
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f003 fa91 	bl	800d72a <memset>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	4a0d      	ldr	r2, [pc, #52]	@ (800a240 <prvInitialiseNewTask+0x144>)
 800a20c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	4a0c      	ldr	r2, [pc, #48]	@ (800a244 <prvInitialiseNewTask+0x148>)
 800a212:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	4a0c      	ldr	r2, [pc, #48]	@ (800a248 <prvInitialiseNewTask+0x14c>)
 800a218:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	68f9      	ldr	r1, [r7, #12]
 800a21e:	69b8      	ldr	r0, [r7, #24]
 800a220:	f001 face 	bl	800b7c0 <pxPortInitialiseStack>
 800a224:	4602      	mov	r2, r0
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a236:	bf00      	nop
 800a238:	3720      	adds	r7, #32
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20006184 	.word	0x20006184
 800a244:	200061ec 	.word	0x200061ec
 800a248:	20006254 	.word	0x20006254

0800a24c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a254:	f001 fbe8 	bl	800ba28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a258:	4b2d      	ldr	r3, [pc, #180]	@ (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	4a2c      	ldr	r2, [pc, #176]	@ (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a262:	4b2c      	ldr	r3, [pc, #176]	@ (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d109      	bne.n	800a27e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a26a:	4a2a      	ldr	r2, [pc, #168]	@ (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a270:	4b27      	ldr	r3, [pc, #156]	@ (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d110      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a278:	f000 fca2 	bl	800abc0 <prvInitialiseTaskLists>
 800a27c:	e00d      	b.n	800a29a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a27e:	4b26      	ldr	r3, [pc, #152]	@ (800a318 <prvAddNewTaskToReadyList+0xcc>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a286:	4b23      	ldr	r3, [pc, #140]	@ (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d802      	bhi.n	800a29a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a294:	4a1f      	ldr	r2, [pc, #124]	@ (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a29a:	4b20      	ldr	r3, [pc, #128]	@ (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	4a1e      	ldr	r2, [pc, #120]	@ (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a2a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b0:	4b1b      	ldr	r3, [pc, #108]	@ (800a320 <prvAddNewTaskToReadyList+0xd4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d903      	bls.n	800a2c0 <prvAddNewTaskToReadyList+0x74>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2bc:	4a18      	ldr	r2, [pc, #96]	@ (800a320 <prvAddNewTaskToReadyList+0xd4>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <prvAddNewTaskToReadyList+0xd8>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fe fec3 	bl	8009062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2dc:	f001 fbd6 	bl	800ba8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a318 <prvAddNewTaskToReadyList+0xcc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00e      	beq.n	800a306 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d207      	bcs.n	800a306 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <prvAddNewTaskToReadyList+0xdc>)
 800a2f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20001018 	.word	0x20001018
 800a314:	20000b44 	.word	0x20000b44
 800a318:	20001024 	.word	0x20001024
 800a31c:	20001034 	.word	0x20001034
 800a320:	20001020 	.word	0x20001020
 800a324:	20000b48 	.word	0x20000b48
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a334:	f001 fb78 	bl	800ba28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <vTaskDelete+0x18>
 800a33e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3f4 <vTaskDelete+0xc8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	e000      	b.n	800a346 <vTaskDelete+0x1a>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3304      	adds	r3, #4
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe fee5 	bl	800911c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3318      	adds	r3, #24
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fedc 	bl	800911c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a364:	4b24      	ldr	r3, [pc, #144]	@ (800a3f8 <vTaskDelete+0xcc>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3301      	adds	r3, #1
 800a36a:	4a23      	ldr	r2, [pc, #140]	@ (800a3f8 <vTaskDelete+0xcc>)
 800a36c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a36e:	4b21      	ldr	r3, [pc, #132]	@ (800a3f4 <vTaskDelete+0xc8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	429a      	cmp	r2, r3
 800a376:	d10b      	bne.n	800a390 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4619      	mov	r1, r3
 800a37e:	481f      	ldr	r0, [pc, #124]	@ (800a3fc <vTaskDelete+0xd0>)
 800a380:	f7fe fe6f 	bl	8009062 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a384:	4b1e      	ldr	r3, [pc, #120]	@ (800a400 <vTaskDelete+0xd4>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3301      	adds	r3, #1
 800a38a:	4a1d      	ldr	r2, [pc, #116]	@ (800a400 <vTaskDelete+0xd4>)
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	e009      	b.n	800a3a4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a390:	4b1c      	ldr	r3, [pc, #112]	@ (800a404 <vTaskDelete+0xd8>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3b01      	subs	r3, #1
 800a396:	4a1b      	ldr	r2, [pc, #108]	@ (800a404 <vTaskDelete+0xd8>)
 800a398:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 fc7e 	bl	800ac9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a3a0:	f000 fcb2 	bl	800ad08 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a3a4:	f001 fb72 	bl	800ba8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a3a8:	4b17      	ldr	r3, [pc, #92]	@ (800a408 <vTaskDelete+0xdc>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01c      	beq.n	800a3ea <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800a3b0:	4b10      	ldr	r3, [pc, #64]	@ (800a3f4 <vTaskDelete+0xc8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d117      	bne.n	800a3ea <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a3ba:	4b14      	ldr	r3, [pc, #80]	@ (800a40c <vTaskDelete+0xe0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <vTaskDelete+0xae>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	60bb      	str	r3, [r7, #8]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a3da:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <vTaskDelete+0xe4>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000b44 	.word	0x20000b44
 800a3f8:	20001034 	.word	0x20001034
 800a3fc:	20000fec 	.word	0x20000fec
 800a400:	20001000 	.word	0x20001000
 800a404:	20001018 	.word	0x20001018
 800a408:	20001024 	.word	0x20001024
 800a40c:	20001040 	.word	0x20001040
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d018      	beq.n	800a458 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a426:	4b14      	ldr	r3, [pc, #80]	@ (800a478 <vTaskDelay+0x64>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <vTaskDelay+0x32>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	60bb      	str	r3, [r7, #8]
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	e7fd      	b.n	800a442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a446:	f000 f88b 	bl	800a560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a44a:	2100      	movs	r1, #0
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fe09 	bl	800b064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a452:	f000 f893 	bl	800a57c <xTaskResumeAll>
 800a456:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d107      	bne.n	800a46e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a45e:	4b07      	ldr	r3, [pc, #28]	@ (800a47c <vTaskDelay+0x68>)
 800a460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20001040 	.word	0x20001040
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	@ 0x28
 800a484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a486:	2300      	movs	r3, #0
 800a488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a48e:	463a      	mov	r2, r7
 800a490:	1d39      	adds	r1, r7, #4
 800a492:	f107 0308 	add.w	r3, r7, #8
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fd82 	bl	8008fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	9202      	str	r2, [sp, #8]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	460a      	mov	r2, r1
 800a4ae:	4924      	ldr	r1, [pc, #144]	@ (800a540 <vTaskStartScheduler+0xc0>)
 800a4b0:	4824      	ldr	r0, [pc, #144]	@ (800a544 <vTaskStartScheduler+0xc4>)
 800a4b2:	f7ff fd7d 	bl	8009fb0 <xTaskCreateStatic>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4a23      	ldr	r2, [pc, #140]	@ (800a548 <vTaskStartScheduler+0xc8>)
 800a4ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4bc:	4b22      	ldr	r3, [pc, #136]	@ (800a548 <vTaskStartScheduler+0xc8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	e001      	b.n	800a4ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d102      	bne.n	800a4da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4d4:	f000 fe1a 	bl	800b10c <xTimerCreateTimerTask>
 800a4d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d11b      	bne.n	800a518 <vTaskStartScheduler+0x98>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	613b      	str	r3, [r7, #16]
}
 800a4f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4f4:	4b15      	ldr	r3, [pc, #84]	@ (800a54c <vTaskStartScheduler+0xcc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3354      	adds	r3, #84	@ 0x54
 800a4fa:	4a15      	ldr	r2, [pc, #84]	@ (800a550 <vTaskStartScheduler+0xd0>)
 800a4fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4fe:	4b15      	ldr	r3, [pc, #84]	@ (800a554 <vTaskStartScheduler+0xd4>)
 800a500:	f04f 32ff 	mov.w	r2, #4294967295
 800a504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a506:	4b14      	ldr	r3, [pc, #80]	@ (800a558 <vTaskStartScheduler+0xd8>)
 800a508:	2201      	movs	r2, #1
 800a50a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a50c:	4b13      	ldr	r3, [pc, #76]	@ (800a55c <vTaskStartScheduler+0xdc>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a512:	f001 f9e5 	bl	800b8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a516:	e00f      	b.n	800a538 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d10b      	bne.n	800a538 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60fb      	str	r3, [r7, #12]
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <vTaskStartScheduler+0xb4>
}
 800a538:	bf00      	nop
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	0800f86c 	.word	0x0800f86c
 800a544:	0800ab91 	.word	0x0800ab91
 800a548:	2000103c 	.word	0x2000103c
 800a54c:	20000b44 	.word	0x20000b44
 800a550:	2000010c 	.word	0x2000010c
 800a554:	20001038 	.word	0x20001038
 800a558:	20001024 	.word	0x20001024
 800a55c:	2000101c 	.word	0x2000101c

0800a560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a560:	b480      	push	{r7}
 800a562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a564:	4b04      	ldr	r3, [pc, #16]	@ (800a578 <vTaskSuspendAll+0x18>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3301      	adds	r3, #1
 800a56a:	4a03      	ldr	r2, [pc, #12]	@ (800a578 <vTaskSuspendAll+0x18>)
 800a56c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20001040 	.word	0x20001040

0800a57c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a58a:	4b42      	ldr	r3, [pc, #264]	@ (800a694 <xTaskResumeAll+0x118>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <xTaskResumeAll+0x2e>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	603b      	str	r3, [r7, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5aa:	f001 fa3d 	bl	800ba28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5ae:	4b39      	ldr	r3, [pc, #228]	@ (800a694 <xTaskResumeAll+0x118>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	4a37      	ldr	r2, [pc, #220]	@ (800a694 <xTaskResumeAll+0x118>)
 800a5b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b8:	4b36      	ldr	r3, [pc, #216]	@ (800a694 <xTaskResumeAll+0x118>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d162      	bne.n	800a686 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5c0:	4b35      	ldr	r3, [pc, #212]	@ (800a698 <xTaskResumeAll+0x11c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d05e      	beq.n	800a686 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5c8:	e02f      	b.n	800a62a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ca:	4b34      	ldr	r3, [pc, #208]	@ (800a69c <xTaskResumeAll+0x120>)
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3318      	adds	r3, #24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fda0 	bl	800911c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fe fd9b 	bl	800911c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ea:	4b2d      	ldr	r3, [pc, #180]	@ (800a6a0 <xTaskResumeAll+0x124>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d903      	bls.n	800a5fa <xTaskResumeAll+0x7e>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a6a0 <xTaskResumeAll+0x124>)
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	4613      	mov	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4a27      	ldr	r2, [pc, #156]	@ (800a6a4 <xTaskResumeAll+0x128>)
 800a608:	441a      	add	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7fe fd26 	bl	8009062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61a:	4b23      	ldr	r3, [pc, #140]	@ (800a6a8 <xTaskResumeAll+0x12c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	429a      	cmp	r2, r3
 800a622:	d302      	bcc.n	800a62a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a624:	4b21      	ldr	r3, [pc, #132]	@ (800a6ac <xTaskResumeAll+0x130>)
 800a626:	2201      	movs	r2, #1
 800a628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a62a:	4b1c      	ldr	r3, [pc, #112]	@ (800a69c <xTaskResumeAll+0x120>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1cb      	bne.n	800a5ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a638:	f000 fb66 	bl	800ad08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a63c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6b0 <xTaskResumeAll+0x134>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d010      	beq.n	800a66a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a648:	f000 f846 	bl	800a6d8 <xTaskIncrementTick>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a652:	4b16      	ldr	r3, [pc, #88]	@ (800a6ac <xTaskResumeAll+0x130>)
 800a654:	2201      	movs	r2, #1
 800a656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1f1      	bne.n	800a648 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a664:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <xTaskResumeAll+0x134>)
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a66a:	4b10      	ldr	r3, [pc, #64]	@ (800a6ac <xTaskResumeAll+0x130>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a672:	2301      	movs	r3, #1
 800a674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a676:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b4 <xTaskResumeAll+0x138>)
 800a678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a686:	f001 fa01 	bl	800ba8c <vPortExitCritical>

	return xAlreadyYielded;
 800a68a:	68bb      	ldr	r3, [r7, #8]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20001040 	.word	0x20001040
 800a698:	20001018 	.word	0x20001018
 800a69c:	20000fd8 	.word	0x20000fd8
 800a6a0:	20001020 	.word	0x20001020
 800a6a4:	20000b48 	.word	0x20000b48
 800a6a8:	20000b44 	.word	0x20000b44
 800a6ac:	2000102c 	.word	0x2000102c
 800a6b0:	20001028 	.word	0x20001028
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6be:	4b05      	ldr	r3, [pc, #20]	@ (800a6d4 <xTaskGetTickCount+0x1c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6c4:	687b      	ldr	r3, [r7, #4]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	2000101c 	.word	0x2000101c

0800a6d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6e2:	4b4f      	ldr	r3, [pc, #316]	@ (800a820 <xTaskIncrementTick+0x148>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f040 8090 	bne.w	800a80c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a824 <xTaskIncrementTick+0x14c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6f4:	4a4b      	ldr	r2, [pc, #300]	@ (800a824 <xTaskIncrementTick+0x14c>)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d121      	bne.n	800a744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a700:	4b49      	ldr	r3, [pc, #292]	@ (800a828 <xTaskIncrementTick+0x150>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00b      	beq.n	800a722 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	603b      	str	r3, [r7, #0]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xTaskIncrementTick+0x46>
 800a722:	4b41      	ldr	r3, [pc, #260]	@ (800a828 <xTaskIncrementTick+0x150>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	4b40      	ldr	r3, [pc, #256]	@ (800a82c <xTaskIncrementTick+0x154>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a3e      	ldr	r2, [pc, #248]	@ (800a828 <xTaskIncrementTick+0x150>)
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	4a3e      	ldr	r2, [pc, #248]	@ (800a82c <xTaskIncrementTick+0x154>)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	4b3e      	ldr	r3, [pc, #248]	@ (800a830 <xTaskIncrementTick+0x158>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3301      	adds	r3, #1
 800a73c:	4a3c      	ldr	r2, [pc, #240]	@ (800a830 <xTaskIncrementTick+0x158>)
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	f000 fae2 	bl	800ad08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a744:	4b3b      	ldr	r3, [pc, #236]	@ (800a834 <xTaskIncrementTick+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d349      	bcc.n	800a7e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a74e:	4b36      	ldr	r3, [pc, #216]	@ (800a828 <xTaskIncrementTick+0x150>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d104      	bne.n	800a762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a758:	4b36      	ldr	r3, [pc, #216]	@ (800a834 <xTaskIncrementTick+0x15c>)
 800a75a:	f04f 32ff 	mov.w	r2, #4294967295
 800a75e:	601a      	str	r2, [r3, #0]
					break;
 800a760:	e03f      	b.n	800a7e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a762:	4b31      	ldr	r3, [pc, #196]	@ (800a828 <xTaskIncrementTick+0x150>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d203      	bcs.n	800a782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a77a:	4a2e      	ldr	r2, [pc, #184]	@ (800a834 <xTaskIncrementTick+0x15c>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a780:	e02f      	b.n	800a7e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	3304      	adds	r3, #4
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fcc8 	bl	800911c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	3318      	adds	r3, #24
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe fcbf 	bl	800911c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a2:	4b25      	ldr	r3, [pc, #148]	@ (800a838 <xTaskIncrementTick+0x160>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d903      	bls.n	800a7b2 <xTaskIncrementTick+0xda>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ae:	4a22      	ldr	r2, [pc, #136]	@ (800a838 <xTaskIncrementTick+0x160>)
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a1f      	ldr	r2, [pc, #124]	@ (800a83c <xTaskIncrementTick+0x164>)
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fe fc4a 	bl	8009062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a840 <xTaskIncrementTick+0x168>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d3b8      	bcc.n	800a74e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e0:	e7b5      	b.n	800a74e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7e2:	4b17      	ldr	r3, [pc, #92]	@ (800a840 <xTaskIncrementTick+0x168>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e8:	4914      	ldr	r1, [pc, #80]	@ (800a83c <xTaskIncrementTick+0x164>)
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d901      	bls.n	800a7fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7fe:	4b11      	ldr	r3, [pc, #68]	@ (800a844 <xTaskIncrementTick+0x16c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a806:	2301      	movs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e004      	b.n	800a816 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a80c:	4b0e      	ldr	r3, [pc, #56]	@ (800a848 <xTaskIncrementTick+0x170>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3301      	adds	r3, #1
 800a812:	4a0d      	ldr	r2, [pc, #52]	@ (800a848 <xTaskIncrementTick+0x170>)
 800a814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20001040 	.word	0x20001040
 800a824:	2000101c 	.word	0x2000101c
 800a828:	20000fd0 	.word	0x20000fd0
 800a82c:	20000fd4 	.word	0x20000fd4
 800a830:	20001030 	.word	0x20001030
 800a834:	20001038 	.word	0x20001038
 800a838:	20001020 	.word	0x20001020
 800a83c:	20000b48 	.word	0x20000b48
 800a840:	20000b44 	.word	0x20000b44
 800a844:	2000102c 	.word	0x2000102c
 800a848:	20001028 	.word	0x20001028

0800a84c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a852:	4b2b      	ldr	r3, [pc, #172]	@ (800a900 <vTaskSwitchContext+0xb4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a85a:	4b2a      	ldr	r3, [pc, #168]	@ (800a904 <vTaskSwitchContext+0xb8>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a860:	e047      	b.n	800a8f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a862:	4b28      	ldr	r3, [pc, #160]	@ (800a904 <vTaskSwitchContext+0xb8>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a868:	4b27      	ldr	r3, [pc, #156]	@ (800a908 <vTaskSwitchContext+0xbc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	e011      	b.n	800a894 <vTaskSwitchContext+0x48>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10b      	bne.n	800a88e <vTaskSwitchContext+0x42>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	607b      	str	r3, [r7, #4]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vTaskSwitchContext+0x3e>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b01      	subs	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	491d      	ldr	r1, [pc, #116]	@ (800a90c <vTaskSwitchContext+0xc0>)
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0e3      	beq.n	800a870 <vTaskSwitchContext+0x24>
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4a16      	ldr	r2, [pc, #88]	@ (800a90c <vTaskSwitchContext+0xc0>)
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	605a      	str	r2, [r3, #4]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d104      	bne.n	800a8d8 <vTaskSwitchContext+0x8c>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	605a      	str	r2, [r3, #4]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	4a0c      	ldr	r2, [pc, #48]	@ (800a910 <vTaskSwitchContext+0xc4>)
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4a09      	ldr	r2, [pc, #36]	@ (800a908 <vTaskSwitchContext+0xbc>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8e8:	4b09      	ldr	r3, [pc, #36]	@ (800a910 <vTaskSwitchContext+0xc4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3354      	adds	r3, #84	@ 0x54
 800a8ee:	4a09      	ldr	r2, [pc, #36]	@ (800a914 <vTaskSwitchContext+0xc8>)
 800a8f0:	6013      	str	r3, [r2, #0]
}
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	20001040 	.word	0x20001040
 800a904:	2000102c 	.word	0x2000102c
 800a908:	20001020 	.word	0x20001020
 800a90c:	20000b48 	.word	0x20000b48
 800a910:	20000b44 	.word	0x20000b44
 800a914:	2000010c 	.word	0x2000010c

0800a918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	60fb      	str	r3, [r7, #12]
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a940:	4b07      	ldr	r3, [pc, #28]	@ (800a960 <vTaskPlaceOnEventList+0x48>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3318      	adds	r3, #24
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7fe fbae 	bl	80090aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a94e:	2101      	movs	r1, #1
 800a950:	6838      	ldr	r0, [r7, #0]
 800a952:	f000 fb87 	bl	800b064 <prvAddCurrentTaskToDelayedList>
}
 800a956:	bf00      	nop
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000b44 	.word	0x20000b44

0800a964 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	617b      	str	r3, [r7, #20]
}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	e7fd      	b.n	800a98a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a98e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3318      	adds	r3, #24
 800a994:	4619      	mov	r1, r3
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f7fe fb63 	bl	8009062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	68b8      	ldr	r0, [r7, #8]
 800a9ac:	f000 fb5a 	bl	800b064 <prvAddCurrentTaskToDelayedList>
	}
 800a9b0:	bf00      	nop
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20000b44 	.word	0x20000b44

0800a9bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	60fb      	str	r3, [r7, #12]
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	e7fd      	b.n	800a9e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	3318      	adds	r3, #24
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fb94 	bl	800911c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa6c <xTaskRemoveFromEventList+0xb0>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11d      	bne.n	800aa38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fe fb8b 	bl	800911c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0a:	4b19      	ldr	r3, [pc, #100]	@ (800aa70 <xTaskRemoveFromEventList+0xb4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d903      	bls.n	800aa1a <xTaskRemoveFromEventList+0x5e>
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa16:	4a16      	ldr	r2, [pc, #88]	@ (800aa70 <xTaskRemoveFromEventList+0xb4>)
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4a13      	ldr	r2, [pc, #76]	@ (800aa74 <xTaskRemoveFromEventList+0xb8>)
 800aa28:	441a      	add	r2, r3
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f7fe fb16 	bl	8009062 <vListInsertEnd>
 800aa36:	e005      	b.n	800aa44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	3318      	adds	r3, #24
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	480e      	ldr	r0, [pc, #56]	@ (800aa78 <xTaskRemoveFromEventList+0xbc>)
 800aa40:	f7fe fb0f 	bl	8009062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa48:	4b0c      	ldr	r3, [pc, #48]	@ (800aa7c <xTaskRemoveFromEventList+0xc0>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d905      	bls.n	800aa5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa52:	2301      	movs	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa56:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <xTaskRemoveFromEventList+0xc4>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	e001      	b.n	800aa62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa62:	697b      	ldr	r3, [r7, #20]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20001040 	.word	0x20001040
 800aa70:	20001020 	.word	0x20001020
 800aa74:	20000b48 	.word	0x20000b48
 800aa78:	20000fd8 	.word	0x20000fd8
 800aa7c:	20000b44 	.word	0x20000b44
 800aa80:	2000102c 	.word	0x2000102c

0800aa84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa8c:	4b06      	ldr	r3, [pc, #24]	@ (800aaa8 <vTaskInternalSetTimeOutState+0x24>)
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa94:	4b05      	ldr	r3, [pc, #20]	@ (800aaac <vTaskInternalSetTimeOutState+0x28>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	605a      	str	r2, [r3, #4]
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	20001030 	.word	0x20001030
 800aaac:	2000101c 	.word	0x2000101c

0800aab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10b      	bne.n	800aad8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	613b      	str	r3, [r7, #16]
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	e7fd      	b.n	800aad4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aaf6:	f000 ff97 	bl	800ba28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aafa:	4b1d      	ldr	r3, [pc, #116]	@ (800ab70 <xTaskCheckForTimeOut+0xc0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab12:	d102      	bne.n	800ab1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab14:	2300      	movs	r3, #0
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	e023      	b.n	800ab62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4b15      	ldr	r3, [pc, #84]	@ (800ab74 <xTaskCheckForTimeOut+0xc4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d007      	beq.n	800ab36 <xTaskCheckForTimeOut+0x86>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d302      	bcc.n	800ab36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab30:	2301      	movs	r3, #1
 800ab32:	61fb      	str	r3, [r7, #28]
 800ab34:	e015      	b.n	800ab62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d20b      	bcs.n	800ab58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff ff99 	bl	800aa84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	e004      	b.n	800ab62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab62:	f000 ff93 	bl	800ba8c <vPortExitCritical>

	return xReturn;
 800ab66:	69fb      	ldr	r3, [r7, #28]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3720      	adds	r7, #32
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	2000101c 	.word	0x2000101c
 800ab74:	20001030 	.word	0x20001030

0800ab78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab7c:	4b03      	ldr	r3, [pc, #12]	@ (800ab8c <vTaskMissedYield+0x14>)
 800ab7e:	2201      	movs	r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	2000102c 	.word	0x2000102c

0800ab90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab98:	f000 f852 	bl	800ac40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab9c:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <prvIdleTask+0x28>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d9f9      	bls.n	800ab98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aba4:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <prvIdleTask+0x2c>)
 800aba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abb4:	e7f0      	b.n	800ab98 <prvIdleTask+0x8>
 800abb6:	bf00      	nop
 800abb8:	20000b48 	.word	0x20000b48
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abc6:	2300      	movs	r3, #0
 800abc8:	607b      	str	r3, [r7, #4]
 800abca:	e00c      	b.n	800abe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4a12      	ldr	r2, [pc, #72]	@ (800ac20 <prvInitialiseTaskLists+0x60>)
 800abd8:	4413      	add	r3, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fa14 	bl	8009008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3301      	adds	r3, #1
 800abe4:	607b      	str	r3, [r7, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b37      	cmp	r3, #55	@ 0x37
 800abea:	d9ef      	bls.n	800abcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abec:	480d      	ldr	r0, [pc, #52]	@ (800ac24 <prvInitialiseTaskLists+0x64>)
 800abee:	f7fe fa0b 	bl	8009008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abf2:	480d      	ldr	r0, [pc, #52]	@ (800ac28 <prvInitialiseTaskLists+0x68>)
 800abf4:	f7fe fa08 	bl	8009008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abf8:	480c      	ldr	r0, [pc, #48]	@ (800ac2c <prvInitialiseTaskLists+0x6c>)
 800abfa:	f7fe fa05 	bl	8009008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abfe:	480c      	ldr	r0, [pc, #48]	@ (800ac30 <prvInitialiseTaskLists+0x70>)
 800ac00:	f7fe fa02 	bl	8009008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac04:	480b      	ldr	r0, [pc, #44]	@ (800ac34 <prvInitialiseTaskLists+0x74>)
 800ac06:	f7fe f9ff 	bl	8009008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac38 <prvInitialiseTaskLists+0x78>)
 800ac0c:	4a05      	ldr	r2, [pc, #20]	@ (800ac24 <prvInitialiseTaskLists+0x64>)
 800ac0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac10:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <prvInitialiseTaskLists+0x7c>)
 800ac12:	4a05      	ldr	r2, [pc, #20]	@ (800ac28 <prvInitialiseTaskLists+0x68>)
 800ac14:	601a      	str	r2, [r3, #0]
}
 800ac16:	bf00      	nop
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000b48 	.word	0x20000b48
 800ac24:	20000fa8 	.word	0x20000fa8
 800ac28:	20000fbc 	.word	0x20000fbc
 800ac2c:	20000fd8 	.word	0x20000fd8
 800ac30:	20000fec 	.word	0x20000fec
 800ac34:	20001004 	.word	0x20001004
 800ac38:	20000fd0 	.word	0x20000fd0
 800ac3c:	20000fd4 	.word	0x20000fd4

0800ac40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac46:	e019      	b.n	800ac7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac48:	f000 feee 	bl	800ba28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac4c:	4b10      	ldr	r3, [pc, #64]	@ (800ac90 <prvCheckTasksWaitingTermination+0x50>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fa5f 	bl	800911c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <prvCheckTasksWaitingTermination+0x54>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	4a0b      	ldr	r2, [pc, #44]	@ (800ac94 <prvCheckTasksWaitingTermination+0x54>)
 800ac66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac68:	4b0b      	ldr	r3, [pc, #44]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4a0a      	ldr	r2, [pc, #40]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac72:	f000 ff0b 	bl	800ba8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f810 	bl	800ac9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac7c:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e1      	bne.n	800ac48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000fec 	.word	0x20000fec
 800ac94:	20001018 	.word	0x20001018
 800ac98:	20001000 	.word	0x20001000

0800ac9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3354      	adds	r3, #84	@ 0x54
 800aca8:	4618      	mov	r0, r3
 800acaa:	f002 fd8b 	bl	800d7c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d108      	bne.n	800acca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 f8a3 	bl	800be08 <vPortFree>
				vPortFree( pxTCB );
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f8a0 	bl	800be08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acc8:	e019      	b.n	800acfe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d103      	bne.n	800acdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f897 	bl	800be08 <vPortFree>
	}
 800acda:	e010      	b.n	800acfe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d00b      	beq.n	800acfe <prvDeleteTCB+0x62>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <prvDeleteTCB+0x5e>
	}
 800acfe:	bf00      	nop
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad18:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad20:	e008      	b.n	800ad34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad22:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a04      	ldr	r2, [pc, #16]	@ (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad32:	6013      	str	r3, [r2, #0]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	20000fd0 	.word	0x20000fd0
 800ad44:	20001038 	.word	0x20001038

0800ad48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad7c <xTaskGetSchedulerState+0x34>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad56:	2301      	movs	r3, #1
 800ad58:	607b      	str	r3, [r7, #4]
 800ad5a:	e008      	b.n	800ad6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5c:	4b08      	ldr	r3, [pc, #32]	@ (800ad80 <xTaskGetSchedulerState+0x38>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad64:	2302      	movs	r3, #2
 800ad66:	607b      	str	r3, [r7, #4]
 800ad68:	e001      	b.n	800ad6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad6e:	687b      	ldr	r3, [r7, #4]
	}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	20001024 	.word	0x20001024
 800ad80:	20001040 	.word	0x20001040

0800ad84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d051      	beq.n	800ae3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ae48 <xTaskPriorityInherit+0xc4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d241      	bcs.n	800ae2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	db06      	blt.n	800adbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb0:	4b25      	ldr	r3, [pc, #148]	@ (800ae48 <xTaskPriorityInherit+0xc4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6959      	ldr	r1, [r3, #20]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc6:	4613      	mov	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4a1f      	ldr	r2, [pc, #124]	@ (800ae4c <xTaskPriorityInherit+0xc8>)
 800add0:	4413      	add	r3, r2
 800add2:	4299      	cmp	r1, r3
 800add4:	d122      	bne.n	800ae1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	3304      	adds	r3, #4
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe f99e 	bl	800911c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ade0:	4b19      	ldr	r3, [pc, #100]	@ (800ae48 <xTaskPriorityInherit+0xc4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adee:	4b18      	ldr	r3, [pc, #96]	@ (800ae50 <xTaskPriorityInherit+0xcc>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d903      	bls.n	800adfe <xTaskPriorityInherit+0x7a>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfa:	4a15      	ldr	r2, [pc, #84]	@ (800ae50 <xTaskPriorityInherit+0xcc>)
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4a10      	ldr	r2, [pc, #64]	@ (800ae4c <xTaskPriorityInherit+0xc8>)
 800ae0c:	441a      	add	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f7fe f924 	bl	8009062 <vListInsertEnd>
 800ae1a:	e004      	b.n	800ae26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <xTaskPriorityInherit+0xc4>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e008      	b.n	800ae3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <xTaskPriorityInherit+0xc4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d201      	bcs.n	800ae3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20000b44 	.word	0x20000b44
 800ae4c:	20000b48 	.word	0x20000b48
 800ae50:	20001020 	.word	0x20001020

0800ae54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d058      	beq.n	800af1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae6a:	4b2f      	ldr	r3, [pc, #188]	@ (800af28 <xTaskPriorityDisinherit+0xd4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d00b      	beq.n	800ae8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	e7fd      	b.n	800ae88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10b      	bne.n	800aeac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60bb      	str	r3, [r7, #8]
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	e7fd      	b.n	800aea8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb0:	1e5a      	subs	r2, r3, #1
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d02c      	beq.n	800af1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d128      	bne.n	800af1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3304      	adds	r3, #4
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe f924 	bl	800911c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeec:	4b0f      	ldr	r3, [pc, #60]	@ (800af2c <xTaskPriorityDisinherit+0xd8>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d903      	bls.n	800aefc <xTaskPriorityDisinherit+0xa8>
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef8:	4a0c      	ldr	r2, [pc, #48]	@ (800af2c <xTaskPriorityDisinherit+0xd8>)
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4a09      	ldr	r2, [pc, #36]	@ (800af30 <xTaskPriorityDisinherit+0xdc>)
 800af0a:	441a      	add	r2, r3
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3304      	adds	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7fe f8a5 	bl	8009062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af1c:	697b      	ldr	r3, [r7, #20]
	}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20000b44 	.word	0x20000b44
 800af2c:	20001020 	.word	0x20001020
 800af30:	20000b48 	.word	0x20000b48

0800af34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af42:	2301      	movs	r3, #1
 800af44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d06c      	beq.n	800b026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10b      	bne.n	800af6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	60fb      	str	r3, [r7, #12]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d902      	bls.n	800af7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	61fb      	str	r3, [r7, #28]
 800af7a:	e002      	b.n	800af82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af86:	69fa      	ldr	r2, [r7, #28]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d04c      	beq.n	800b026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	429a      	cmp	r2, r3
 800af94:	d147      	bne.n	800b026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800af96:	4b26      	ldr	r3, [pc, #152]	@ (800b030 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d10b      	bne.n	800afb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60bb      	str	r3, [r7, #8]
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	69fa      	ldr	r2, [r7, #28]
 800afc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	db04      	blt.n	800afd6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	6959      	ldr	r1, [r3, #20]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4a13      	ldr	r2, [pc, #76]	@ (800b034 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800afe6:	4413      	add	r3, r2
 800afe8:	4299      	cmp	r1, r3
 800afea:	d11c      	bne.n	800b026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe f893 	bl	800911c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affa:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d903      	bls.n	800b00a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b006:	4a0c      	ldr	r2, [pc, #48]	@ (800b038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4a07      	ldr	r2, [pc, #28]	@ (800b034 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b018:	441a      	add	r2, r3
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7fe f81e 	bl	8009062 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b026:	bf00      	nop
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20000b44 	.word	0x20000b44
 800b034:	20000b48 	.word	0x20000b48
 800b038:	20001020 	.word	0x20001020

0800b03c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b040:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <pvTaskIncrementMutexHeldCount+0x24>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d004      	beq.n	800b052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b048:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <pvTaskIncrementMutexHeldCount+0x24>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b04e:	3201      	adds	r2, #1
 800b050:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b052:	4b03      	ldr	r3, [pc, #12]	@ (800b060 <pvTaskIncrementMutexHeldCount+0x24>)
 800b054:	681b      	ldr	r3, [r3, #0]
	}
 800b056:	4618      	mov	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	20000b44 	.word	0x20000b44

0800b064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b06e:	4b21      	ldr	r3, [pc, #132]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b074:	4b20      	ldr	r3, [pc, #128]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3304      	adds	r3, #4
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe f84e 	bl	800911c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d10a      	bne.n	800b09e <prvAddCurrentTaskToDelayedList+0x3a>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b08e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3304      	adds	r3, #4
 800b094:	4619      	mov	r1, r3
 800b096:	4819      	ldr	r0, [pc, #100]	@ (800b0fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b098:	f7fd ffe3 	bl	8009062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b09c:	e026      	b.n	800b0ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0a6:	4b14      	ldr	r3, [pc, #80]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d209      	bcs.n	800b0ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b6:	4b12      	ldr	r3, [pc, #72]	@ (800b100 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f7fd fff1 	bl	80090aa <vListInsert>
}
 800b0c8:	e010      	b.n	800b0ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b104 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7fd ffe7 	bl	80090aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b108 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d202      	bcs.n	800b0ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0e6:	4a08      	ldr	r2, [pc, #32]	@ (800b108 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	6013      	str	r3, [r2, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	2000101c 	.word	0x2000101c
 800b0f8:	20000b44 	.word	0x20000b44
 800b0fc:	20001004 	.word	0x20001004
 800b100:	20000fd4 	.word	0x20000fd4
 800b104:	20000fd0 	.word	0x20000fd0
 800b108:	20001038 	.word	0x20001038

0800b10c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	@ 0x28
 800b110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b116:	f000 fb13 	bl	800b740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b11a:	4b1d      	ldr	r3, [pc, #116]	@ (800b190 <xTimerCreateTimerTask+0x84>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d021      	beq.n	800b166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b12a:	1d3a      	adds	r2, r7, #4
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	f107 030c 	add.w	r3, r7, #12
 800b134:	4618      	mov	r0, r3
 800b136:	f7fd ff4d 	bl	8008fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	9202      	str	r2, [sp, #8]
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	2302      	movs	r3, #2
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	460a      	mov	r2, r1
 800b14c:	4911      	ldr	r1, [pc, #68]	@ (800b194 <xTimerCreateTimerTask+0x88>)
 800b14e:	4812      	ldr	r0, [pc, #72]	@ (800b198 <xTimerCreateTimerTask+0x8c>)
 800b150:	f7fe ff2e 	bl	8009fb0 <xTaskCreateStatic>
 800b154:	4603      	mov	r3, r0
 800b156:	4a11      	ldr	r2, [pc, #68]	@ (800b19c <xTimerCreateTimerTask+0x90>)
 800b158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b15a:	4b10      	ldr	r3, [pc, #64]	@ (800b19c <xTimerCreateTimerTask+0x90>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b162:	2301      	movs	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	613b      	str	r3, [r7, #16]
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b184:	697b      	ldr	r3, [r7, #20]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20001074 	.word	0x20001074
 800b194:	0800f874 	.word	0x0800f874
 800b198:	0800b2d9 	.word	0x0800b2d9
 800b19c:	20001078 	.word	0x20001078

0800b1a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	@ 0x28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10b      	bne.n	800b1d0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	623b      	str	r3, [r7, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	e7fd      	b.n	800b1cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1d0:	4b19      	ldr	r3, [pc, #100]	@ (800b238 <xTimerGenericCommand+0x98>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d02a      	beq.n	800b22e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b05      	cmp	r3, #5
 800b1e8:	dc18      	bgt.n	800b21c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1ea:	f7ff fdad 	bl	800ad48 <xTaskGetSchedulerState>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d109      	bne.n	800b208 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1f4:	4b10      	ldr	r3, [pc, #64]	@ (800b238 <xTimerGenericCommand+0x98>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	f107 0110 	add.w	r1, r7, #16
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b200:	f7fe f92e 	bl	8009460 <xQueueGenericSend>
 800b204:	6278      	str	r0, [r7, #36]	@ 0x24
 800b206:	e012      	b.n	800b22e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b208:	4b0b      	ldr	r3, [pc, #44]	@ (800b238 <xTimerGenericCommand+0x98>)
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	f107 0110 	add.w	r1, r7, #16
 800b210:	2300      	movs	r3, #0
 800b212:	2200      	movs	r2, #0
 800b214:	f7fe f924 	bl	8009460 <xQueueGenericSend>
 800b218:	6278      	str	r0, [r7, #36]	@ 0x24
 800b21a:	e008      	b.n	800b22e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b21c:	4b06      	ldr	r3, [pc, #24]	@ (800b238 <xTimerGenericCommand+0x98>)
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	f107 0110 	add.w	r1, r7, #16
 800b224:	2300      	movs	r3, #0
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	f7fe fa1c 	bl	8009664 <xQueueGenericSendFromISR>
 800b22c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b230:	4618      	mov	r0, r3
 800b232:	3728      	adds	r7, #40	@ 0x28
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20001074 	.word	0x20001074

0800b23c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b246:	4b23      	ldr	r3, [pc, #140]	@ (800b2d4 <prvProcessExpiredTimer+0x98>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	3304      	adds	r3, #4
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd ff61 	bl	800911c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d023      	beq.n	800b2b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	699a      	ldr	r2, [r3, #24]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	18d1      	adds	r1, r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	6978      	ldr	r0, [r7, #20]
 800b276:	f000 f8d5 	bl	800b424 <prvInsertTimerInActiveList>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d020      	beq.n	800b2c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b280:	2300      	movs	r3, #0
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	2300      	movs	r3, #0
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	2100      	movs	r1, #0
 800b28a:	6978      	ldr	r0, [r7, #20]
 800b28c:	f7ff ff88 	bl	800b1a0 <xTimerGenericCommand>
 800b290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d114      	bne.n	800b2c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2b6:	f023 0301 	bic.w	r3, r3, #1
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	4798      	blx	r3
}
 800b2ca:	bf00      	nop
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	2000106c 	.word	0x2000106c

0800b2d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2e0:	f107 0308 	add.w	r3, r7, #8
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 f859 	bl	800b39c <prvGetNextExpireTime>
 800b2ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 f805 	bl	800b300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2f6:	f000 f8d7 	bl	800b4a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2fa:	bf00      	nop
 800b2fc:	e7f0      	b.n	800b2e0 <prvTimerTask+0x8>
	...

0800b300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b30a:	f7ff f929 	bl	800a560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f866 	bl	800b3e4 <prvSampleTimeNow>
 800b318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d130      	bne.n	800b382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10a      	bne.n	800b33c <prvProcessTimerOrBlockTask+0x3c>
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d806      	bhi.n	800b33c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b32e:	f7ff f925 	bl	800a57c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff ff81 	bl	800b23c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b33a:	e024      	b.n	800b386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d008      	beq.n	800b354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b342:	4b13      	ldr	r3, [pc, #76]	@ (800b390 <prvProcessTimerOrBlockTask+0x90>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <prvProcessTimerOrBlockTask+0x50>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e000      	b.n	800b352 <prvProcessTimerOrBlockTask+0x52>
 800b350:	2300      	movs	r3, #0
 800b352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b354:	4b0f      	ldr	r3, [pc, #60]	@ (800b394 <prvProcessTimerOrBlockTask+0x94>)
 800b356:	6818      	ldr	r0, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	4619      	mov	r1, r3
 800b362:	f7fe fdf1 	bl	8009f48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b366:	f7ff f909 	bl	800a57c <xTaskResumeAll>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b370:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <prvProcessTimerOrBlockTask+0x98>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
}
 800b380:	e001      	b.n	800b386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b382:	f7ff f8fb 	bl	800a57c <xTaskResumeAll>
}
 800b386:	bf00      	nop
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20001070 	.word	0x20001070
 800b394:	20001074 	.word	0x20001074
 800b398:	e000ed04 	.word	0xe000ed04

0800b39c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e0 <prvGetNextExpireTime+0x44>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <prvGetNextExpireTime+0x16>
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	e000      	b.n	800b3b4 <prvGetNextExpireTime+0x18>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3c0:	4b07      	ldr	r3, [pc, #28]	@ (800b3e0 <prvGetNextExpireTime+0x44>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	e001      	b.n	800b3d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	2000106c 	.word	0x2000106c

0800b3e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3ec:	f7ff f964 	bl	800a6b8 <xTaskGetTickCount>
 800b3f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <prvSampleTimeNow+0x3c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d205      	bcs.n	800b408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3fc:	f000 f93a 	bl	800b674 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	e002      	b.n	800b40e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b40e:	4a04      	ldr	r2, [pc, #16]	@ (800b420 <prvSampleTimeNow+0x3c>)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b414:	68fb      	ldr	r3, [r7, #12]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	2000107c 	.word	0x2000107c

0800b424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d812      	bhi.n	800b470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	1ad2      	subs	r2, r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	429a      	cmp	r2, r3
 800b456:	d302      	bcc.n	800b45e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b458:	2301      	movs	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	e01b      	b.n	800b496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b45e:	4b10      	ldr	r3, [pc, #64]	@ (800b4a0 <prvInsertTimerInActiveList+0x7c>)
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3304      	adds	r3, #4
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f7fd fe1e 	bl	80090aa <vListInsert>
 800b46e:	e012      	b.n	800b496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d206      	bcs.n	800b486 <prvInsertTimerInActiveList+0x62>
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d302      	bcc.n	800b486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b480:	2301      	movs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	e007      	b.n	800b496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b486:	4b07      	ldr	r3, [pc, #28]	@ (800b4a4 <prvInsertTimerInActiveList+0x80>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7fd fe0a 	bl	80090aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b496:	697b      	ldr	r3, [r7, #20]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20001070 	.word	0x20001070
 800b4a4:	2000106c 	.word	0x2000106c

0800b4a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08e      	sub	sp, #56	@ 0x38
 800b4ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4ae:	e0ce      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	da19      	bge.n	800b4ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4b6:	1d3b      	adds	r3, r7, #4
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10b      	bne.n	800b4da <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	61fb      	str	r3, [r7, #28]
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	e7fd      	b.n	800b4d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4e0:	6850      	ldr	r0, [r2, #4]
 800b4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4e4:	6892      	ldr	r2, [r2, #8]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f2c0 80ae 	blt.w	800b64e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b500:	3304      	adds	r3, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f7fd fe0a 	bl	800911c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b508:	463b      	mov	r3, r7
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff ff6a 	bl	800b3e4 <prvSampleTimeNow>
 800b510:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b09      	cmp	r3, #9
 800b516:	f200 8097 	bhi.w	800b648 <prvProcessReceivedCommands+0x1a0>
 800b51a:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <prvProcessReceivedCommands+0x78>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b549 	.word	0x0800b549
 800b524:	0800b549 	.word	0x0800b549
 800b528:	0800b549 	.word	0x0800b549
 800b52c:	0800b5bf 	.word	0x0800b5bf
 800b530:	0800b5d3 	.word	0x0800b5d3
 800b534:	0800b61f 	.word	0x0800b61f
 800b538:	0800b549 	.word	0x0800b549
 800b53c:	0800b549 	.word	0x0800b549
 800b540:	0800b5bf 	.word	0x0800b5bf
 800b544:	0800b5d3 	.word	0x0800b5d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b54e:	f043 0301 	orr.w	r3, r3, #1
 800b552:	b2da      	uxtb	r2, r3
 800b554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b556:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	18d1      	adds	r1, r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b568:	f7ff ff5c 	bl	800b424 <prvInsertTimerInActiveList>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d06c      	beq.n	800b64c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b578:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b00      	cmp	r3, #0
 800b586:	d061      	beq.n	800b64c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	441a      	add	r2, r3
 800b590:	2300      	movs	r3, #0
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	2300      	movs	r3, #0
 800b596:	2100      	movs	r1, #0
 800b598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b59a:	f7ff fe01 	bl	800b1a0 <xTimerGenericCommand>
 800b59e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d152      	bne.n	800b64c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	61bb      	str	r3, [r7, #24]
}
 800b5b8:	bf00      	nop
 800b5ba:	bf00      	nop
 800b5bc:	e7fd      	b.n	800b5ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5d0:	e03d      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5d8:	f043 0301 	orr.w	r3, r3, #1
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	617b      	str	r3, [r7, #20]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60c:	699a      	ldr	r2, [r3, #24]
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	18d1      	adds	r1, r2, r3
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b618:	f7ff ff04 	bl	800b424 <prvInsertTimerInActiveList>
					break;
 800b61c:	e017      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d103      	bne.n	800b634 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b62c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b62e:	f000 fbeb 	bl	800be08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b632:	e00c      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b646:	e002      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b648:	bf00      	nop
 800b64a:	e000      	b.n	800b64e <prvProcessReceivedCommands+0x1a6>
					break;
 800b64c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b64e:	4b08      	ldr	r3, [pc, #32]	@ (800b670 <prvProcessReceivedCommands+0x1c8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	1d39      	adds	r1, r7, #4
 800b654:	2200      	movs	r2, #0
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe f932 	bl	80098c0 <xQueueReceive>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f47f af26 	bne.w	800b4b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop
 800b668:	3730      	adds	r7, #48	@ 0x30
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20001074 	.word	0x20001074

0800b674 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b67a:	e049      	b.n	800b710 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b67c:	4b2e      	ldr	r3, [pc, #184]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b686:	4b2c      	ldr	r3, [pc, #176]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	3304      	adds	r3, #4
 800b694:	4618      	mov	r0, r3
 800b696:	f7fd fd41 	bl	800911c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d02f      	beq.n	800b710 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d90e      	bls.n	800b6e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f7fd fce6 	bl	80090aa <vListInsert>
 800b6de:	e017      	b.n	800b710 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7ff fd58 	bl	800b1a0 <xTimerGenericCommand>
 800b6f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10b      	bne.n	800b710 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	603b      	str	r3, [r7, #0]
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	e7fd      	b.n	800b70c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b710:	4b09      	ldr	r3, [pc, #36]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1b0      	bne.n	800b67c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b71a:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b720:	4b06      	ldr	r3, [pc, #24]	@ (800b73c <prvSwitchTimerLists+0xc8>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a04      	ldr	r2, [pc, #16]	@ (800b738 <prvSwitchTimerLists+0xc4>)
 800b726:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b728:	4a04      	ldr	r2, [pc, #16]	@ (800b73c <prvSwitchTimerLists+0xc8>)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	6013      	str	r3, [r2, #0]
}
 800b72e:	bf00      	nop
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	2000106c 	.word	0x2000106c
 800b73c:	20001070 	.word	0x20001070

0800b740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b746:	f000 f96f 	bl	800ba28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b74a:	4b15      	ldr	r3, [pc, #84]	@ (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d120      	bne.n	800b794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b752:	4814      	ldr	r0, [pc, #80]	@ (800b7a4 <prvCheckForValidListAndQueue+0x64>)
 800b754:	f7fd fc58 	bl	8009008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b758:	4813      	ldr	r0, [pc, #76]	@ (800b7a8 <prvCheckForValidListAndQueue+0x68>)
 800b75a:	f7fd fc55 	bl	8009008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b75e:	4b13      	ldr	r3, [pc, #76]	@ (800b7ac <prvCheckForValidListAndQueue+0x6c>)
 800b760:	4a10      	ldr	r2, [pc, #64]	@ (800b7a4 <prvCheckForValidListAndQueue+0x64>)
 800b762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b764:	4b12      	ldr	r3, [pc, #72]	@ (800b7b0 <prvCheckForValidListAndQueue+0x70>)
 800b766:	4a10      	ldr	r2, [pc, #64]	@ (800b7a8 <prvCheckForValidListAndQueue+0x68>)
 800b768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b76a:	2300      	movs	r3, #0
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	4b11      	ldr	r3, [pc, #68]	@ (800b7b4 <prvCheckForValidListAndQueue+0x74>)
 800b770:	4a11      	ldr	r2, [pc, #68]	@ (800b7b8 <prvCheckForValidListAndQueue+0x78>)
 800b772:	2110      	movs	r1, #16
 800b774:	200a      	movs	r0, #10
 800b776:	f7fd fd65 	bl	8009244 <xQueueGenericCreateStatic>
 800b77a:	4603      	mov	r3, r0
 800b77c:	4a08      	ldr	r2, [pc, #32]	@ (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b77e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b780:	4b07      	ldr	r3, [pc, #28]	@ (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b788:	4b05      	ldr	r3, [pc, #20]	@ (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	490b      	ldr	r1, [pc, #44]	@ (800b7bc <prvCheckForValidListAndQueue+0x7c>)
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe fbb0 	bl	8009ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b794:	f000 f97a 	bl	800ba8c <vPortExitCritical>
}
 800b798:	bf00      	nop
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20001074 	.word	0x20001074
 800b7a4:	20001044 	.word	0x20001044
 800b7a8:	20001058 	.word	0x20001058
 800b7ac:	2000106c 	.word	0x2000106c
 800b7b0:	20001070 	.word	0x20001070
 800b7b4:	20001120 	.word	0x20001120
 800b7b8:	20001080 	.word	0x20001080
 800b7bc:	0800f87c 	.word	0x0800f87c

0800b7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b824 <pxPortInitialiseStack+0x64>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b14      	subs	r3, #20
 800b7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f06f 0202 	mvn.w	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b20      	subs	r3, #32
 800b814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	0800b829 	.word	0x0800b829

0800b828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b832:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <prvTaskExitError+0x58>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d00b      	beq.n	800b854 <prvTaskExitError+0x2c>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60fb      	str	r3, [r7, #12]
}
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	e7fd      	b.n	800b850 <prvTaskExitError+0x28>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60bb      	str	r3, [r7, #8]
}
 800b866:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b868:	bf00      	nop
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0fc      	beq.n	800b86a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000098 	.word	0x20000098
	...

0800b890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b890:	4b07      	ldr	r3, [pc, #28]	@ (800b8b0 <pxCurrentTCBConst2>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6808      	ldr	r0, [r1, #0]
 800b896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	f380 8809 	msr	PSP, r0
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8811 	msr	BASEPRI, r0
 800b8aa:	4770      	bx	lr
 800b8ac:	f3af 8000 	nop.w

0800b8b0 <pxCurrentTCBConst2>:
 800b8b0:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8b8:	4808      	ldr	r0, [pc, #32]	@ (800b8dc <prvPortStartFirstTask+0x24>)
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f380 8808 	msr	MSP, r0
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8814 	msr	CONTROL, r0
 800b8ca:	b662      	cpsie	i
 800b8cc:	b661      	cpsie	f
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	df00      	svc	0
 800b8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8da:	bf00      	nop
 800b8dc:	e000ed08 	.word	0xe000ed08

0800b8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8e6:	4b47      	ldr	r3, [pc, #284]	@ (800ba04 <xPortStartScheduler+0x124>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a47      	ldr	r2, [pc, #284]	@ (800ba08 <xPortStartScheduler+0x128>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d10b      	bne.n	800b908 <xPortStartScheduler+0x28>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	613b      	str	r3, [r7, #16]
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b908:	4b3e      	ldr	r3, [pc, #248]	@ (800ba04 <xPortStartScheduler+0x124>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba0c <xPortStartScheduler+0x12c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d10b      	bne.n	800b92a <xPortStartScheduler+0x4a>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60fb      	str	r3, [r7, #12]
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	e7fd      	b.n	800b926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b92a:	4b39      	ldr	r3, [pc, #228]	@ (800ba10 <xPortStartScheduler+0x130>)
 800b92c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	22ff      	movs	r2, #255	@ 0xff
 800b93a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	b2db      	uxtb	r3, r3
 800b942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b31      	ldr	r3, [pc, #196]	@ (800ba14 <xPortStartScheduler+0x134>)
 800b950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b952:	4b31      	ldr	r3, [pc, #196]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b954:	2207      	movs	r2, #7
 800b956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b958:	e009      	b.n	800b96e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b95a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3b01      	subs	r3, #1
 800b960:	4a2d      	ldr	r2, [pc, #180]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b964:	78fb      	ldrb	r3, [r7, #3]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b96e:	78fb      	ldrb	r3, [r7, #3]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b976:	2b80      	cmp	r3, #128	@ 0x80
 800b978:	d0ef      	beq.n	800b95a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b97a:	4b27      	ldr	r3, [pc, #156]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1c3 0307 	rsb	r3, r3, #7
 800b982:	2b04      	cmp	r3, #4
 800b984:	d00b      	beq.n	800b99e <xPortStartScheduler+0xbe>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	60bb      	str	r3, [r7, #8]
}
 800b998:	bf00      	nop
 800b99a:	bf00      	nop
 800b99c:	e7fd      	b.n	800b99a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b99e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b9a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9a8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ba18 <xPortStartScheduler+0x138>)
 800b9b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9bc:	4b17      	ldr	r3, [pc, #92]	@ (800ba1c <xPortStartScheduler+0x13c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ba1c <xPortStartScheduler+0x13c>)
 800b9c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9c8:	4b14      	ldr	r3, [pc, #80]	@ (800ba1c <xPortStartScheduler+0x13c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a13      	ldr	r2, [pc, #76]	@ (800ba1c <xPortStartScheduler+0x13c>)
 800b9ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9d4:	f000 f8da 	bl	800bb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ba20 <xPortStartScheduler+0x140>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9de:	f000 f8f9 	bl	800bbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ba24 <xPortStartScheduler+0x144>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800ba24 <xPortStartScheduler+0x144>)
 800b9e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9ee:	f7ff ff63 	bl	800b8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9f2:	f7fe ff2b 	bl	800a84c <vTaskSwitchContext>
	prvTaskExitError();
 800b9f6:	f7ff ff17 	bl	800b828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	e000ed00 	.word	0xe000ed00
 800ba08:	410fc271 	.word	0x410fc271
 800ba0c:	410fc270 	.word	0x410fc270
 800ba10:	e000e400 	.word	0xe000e400
 800ba14:	20001170 	.word	0x20001170
 800ba18:	20001174 	.word	0x20001174
 800ba1c:	e000ed20 	.word	0xe000ed20
 800ba20:	20000098 	.word	0x20000098
 800ba24:	e000ef34 	.word	0xe000ef34

0800ba28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
}
 800ba40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba42:	4b10      	ldr	r3, [pc, #64]	@ (800ba84 <vPortEnterCritical+0x5c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	4a0e      	ldr	r2, [pc, #56]	@ (800ba84 <vPortEnterCritical+0x5c>)
 800ba4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ba84 <vPortEnterCritical+0x5c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d110      	bne.n	800ba76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba54:	4b0c      	ldr	r3, [pc, #48]	@ (800ba88 <vPortEnterCritical+0x60>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00b      	beq.n	800ba76 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	603b      	str	r3, [r7, #0]
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <vPortEnterCritical+0x4a>
	}
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000098 	.word	0x20000098
 800ba88:	e000ed04 	.word	0xe000ed04

0800ba8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba92:	4b12      	ldr	r3, [pc, #72]	@ (800badc <vPortExitCritical+0x50>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <vPortExitCritical+0x26>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	607b      	str	r3, [r7, #4]
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	e7fd      	b.n	800baae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bab2:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <vPortExitCritical+0x50>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	4a08      	ldr	r2, [pc, #32]	@ (800badc <vPortExitCritical+0x50>)
 800baba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800babc:	4b07      	ldr	r3, [pc, #28]	@ (800badc <vPortExitCritical+0x50>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d105      	bne.n	800bad0 <vPortExitCritical+0x44>
 800bac4:	2300      	movs	r3, #0
 800bac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	f383 8811 	msr	BASEPRI, r3
}
 800bace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20000098 	.word	0x20000098

0800bae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bae0:	f3ef 8009 	mrs	r0, PSP
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	4b15      	ldr	r3, [pc, #84]	@ (800bb40 <pxCurrentTCBConst>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	f01e 0f10 	tst.w	lr, #16
 800baf0:	bf08      	it	eq
 800baf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800baf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	6010      	str	r0, [r2, #0]
 800bafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb04:	f380 8811 	msr	BASEPRI, r0
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f7fe fe9c 	bl	800a84c <vTaskSwitchContext>
 800bb14:	f04f 0000 	mov.w	r0, #0
 800bb18:	f380 8811 	msr	BASEPRI, r0
 800bb1c:	bc09      	pop	{r0, r3}
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	6808      	ldr	r0, [r1, #0]
 800bb22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb26:	f01e 0f10 	tst.w	lr, #16
 800bb2a:	bf08      	it	eq
 800bb2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb30:	f380 8809 	msr	PSP, r0
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w

0800bb40 <pxCurrentTCBConst>:
 800bb40:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	607b      	str	r3, [r7, #4]
}
 800bb60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb62:	f7fe fdb9 	bl	800a6d8 <xTaskIncrementTick>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb6c:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <xPortSysTickHandler+0x40>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	2300      	movs	r3, #0
 800bb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f383 8811 	msr	BASEPRI, r3
}
 800bb7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb90:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc0 <vPortSetupTimerInterrupt+0x34>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb96:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc4 <vPortSetupTimerInterrupt+0x38>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc8 <vPortSetupTimerInterrupt+0x3c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a0a      	ldr	r2, [pc, #40]	@ (800bbcc <vPortSetupTimerInterrupt+0x40>)
 800bba2:	fba2 2303 	umull	r2, r3, r2, r3
 800bba6:	099b      	lsrs	r3, r3, #6
 800bba8:	4a09      	ldr	r2, [pc, #36]	@ (800bbd0 <vPortSetupTimerInterrupt+0x44>)
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbae:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <vPortSetupTimerInterrupt+0x34>)
 800bbb0:	2207      	movs	r2, #7
 800bbb2:	601a      	str	r2, [r3, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	e000e010 	.word	0xe000e010
 800bbc4:	e000e018 	.word	0xe000e018
 800bbc8:	20000000 	.word	0x20000000
 800bbcc:	10624dd3 	.word	0x10624dd3
 800bbd0:	e000e014 	.word	0xe000e014

0800bbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bbe4 <vPortEnableVFP+0x10>
 800bbd8:	6801      	ldr	r1, [r0, #0]
 800bbda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbde:	6001      	str	r1, [r0, #0]
 800bbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbe2:	bf00      	nop
 800bbe4:	e000ed88 	.word	0xe000ed88

0800bbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbee:	f3ef 8305 	mrs	r3, IPSR
 800bbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b0f      	cmp	r3, #15
 800bbf8:	d915      	bls.n	800bc26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbfa:	4a18      	ldr	r2, [pc, #96]	@ (800bc5c <vPortValidateInterruptPriority+0x74>)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc04:	4b16      	ldr	r3, [pc, #88]	@ (800bc60 <vPortValidateInterruptPriority+0x78>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	7afa      	ldrb	r2, [r7, #11]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d20b      	bcs.n	800bc26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	607b      	str	r3, [r7, #4]
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	e7fd      	b.n	800bc22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc26:	4b0f      	ldr	r3, [pc, #60]	@ (800bc64 <vPortValidateInterruptPriority+0x7c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc68 <vPortValidateInterruptPriority+0x80>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d90b      	bls.n	800bc4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	603b      	str	r3, [r7, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	e7fd      	b.n	800bc4a <vPortValidateInterruptPriority+0x62>
	}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	e000e3f0 	.word	0xe000e3f0
 800bc60:	20001170 	.word	0x20001170
 800bc64:	e000ed0c 	.word	0xe000ed0c
 800bc68:	20001174 	.word	0x20001174

0800bc6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08a      	sub	sp, #40	@ 0x28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc78:	f7fe fc72 	bl	800a560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc7c:	4b5c      	ldr	r3, [pc, #368]	@ (800bdf0 <pvPortMalloc+0x184>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc84:	f000 f924 	bl	800bed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc88:	4b5a      	ldr	r3, [pc, #360]	@ (800bdf4 <pvPortMalloc+0x188>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f040 8095 	bne.w	800bdc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d015      	beq.n	800bcda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f023 0307 	bic.w	r3, r3, #7
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f003 0307 	and.w	r3, r3, #7
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00b      	beq.n	800bcda <pvPortMalloc+0x6e>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	617b      	str	r3, [r7, #20]
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop
 800bcd8:	e7fd      	b.n	800bcd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d06f      	beq.n	800bdc0 <pvPortMalloc+0x154>
 800bce0:	4b45      	ldr	r3, [pc, #276]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d86a      	bhi.n	800bdc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcea:	4b44      	ldr	r3, [pc, #272]	@ (800bdfc <pvPortMalloc+0x190>)
 800bcec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcee:	4b43      	ldr	r3, [pc, #268]	@ (800bdfc <pvPortMalloc+0x190>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcf4:	e004      	b.n	800bd00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d903      	bls.n	800bd12 <pvPortMalloc+0xa6>
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f1      	bne.n	800bcf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd12:	4b37      	ldr	r3, [pc, #220]	@ (800bdf0 <pvPortMalloc+0x184>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d051      	beq.n	800bdc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2208      	movs	r2, #8
 800bd22:	4413      	add	r3, r2
 800bd24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	1ad2      	subs	r2, r2, r3
 800bd36:	2308      	movs	r3, #8
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d920      	bls.n	800bd80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4413      	add	r3, r2
 800bd44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	f003 0307 	and.w	r3, r3, #7
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <pvPortMalloc+0xfc>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	613b      	str	r3, [r7, #16]
}
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd7a:	69b8      	ldr	r0, [r7, #24]
 800bd7c:	f000 f90a 	bl	800bf94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd80:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bd8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	4b1b      	ldr	r3, [pc, #108]	@ (800be00 <pvPortMalloc+0x194>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d203      	bcs.n	800bda2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd9a:	4b17      	ldr	r3, [pc, #92]	@ (800bdf8 <pvPortMalloc+0x18c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a18      	ldr	r2, [pc, #96]	@ (800be00 <pvPortMalloc+0x194>)
 800bda0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	4b13      	ldr	r3, [pc, #76]	@ (800bdf4 <pvPortMalloc+0x188>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bdb6:	4b13      	ldr	r3, [pc, #76]	@ (800be04 <pvPortMalloc+0x198>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	4a11      	ldr	r2, [pc, #68]	@ (800be04 <pvPortMalloc+0x198>)
 800bdbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bdc0:	f7fe fbdc 	bl	800a57c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <pvPortMalloc+0x17a>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	60fb      	str	r3, [r7, #12]
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop
 800bde4:	e7fd      	b.n	800bde2 <pvPortMalloc+0x176>
	return pvReturn;
 800bde6:	69fb      	ldr	r3, [r7, #28]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3728      	adds	r7, #40	@ 0x28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20004d80 	.word	0x20004d80
 800bdf4:	20004d94 	.word	0x20004d94
 800bdf8:	20004d84 	.word	0x20004d84
 800bdfc:	20004d78 	.word	0x20004d78
 800be00:	20004d88 	.word	0x20004d88
 800be04:	20004d8c 	.word	0x20004d8c

0800be08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d04f      	beq.n	800beba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be1a:	2308      	movs	r3, #8
 800be1c:	425b      	negs	r3, r3
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	4413      	add	r3, r2
 800be22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	4b25      	ldr	r3, [pc, #148]	@ (800bec4 <vPortFree+0xbc>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4013      	ands	r3, r2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <vPortFree+0x46>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	e7fd      	b.n	800be4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00b      	beq.n	800be6e <vPortFree+0x66>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	60bb      	str	r3, [r7, #8]
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	4b14      	ldr	r3, [pc, #80]	@ (800bec4 <vPortFree+0xbc>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4013      	ands	r3, r2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01e      	beq.n	800beba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d11a      	bne.n	800beba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	4b0e      	ldr	r3, [pc, #56]	@ (800bec4 <vPortFree+0xbc>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	43db      	mvns	r3, r3
 800be8e:	401a      	ands	r2, r3
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be94:	f7fe fb64 	bl	800a560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bec8 <vPortFree+0xc0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4413      	add	r3, r2
 800bea2:	4a09      	ldr	r2, [pc, #36]	@ (800bec8 <vPortFree+0xc0>)
 800bea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bea6:	6938      	ldr	r0, [r7, #16]
 800bea8:	f000 f874 	bl	800bf94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800beac:	4b07      	ldr	r3, [pc, #28]	@ (800becc <vPortFree+0xc4>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	4a06      	ldr	r2, [pc, #24]	@ (800becc <vPortFree+0xc4>)
 800beb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800beb6:	f7fe fb61 	bl	800a57c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800beba:	bf00      	nop
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20004d94 	.word	0x20004d94
 800bec8:	20004d84 	.word	0x20004d84
 800becc:	20004d90 	.word	0x20004d90

0800bed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bed6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800beda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bedc:	4b27      	ldr	r3, [pc, #156]	@ (800bf7c <prvHeapInit+0xac>)
 800bede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00c      	beq.n	800bf04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3307      	adds	r3, #7
 800beee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 0307 	bic.w	r3, r3, #7
 800bef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	4a1f      	ldr	r2, [pc, #124]	@ (800bf7c <prvHeapInit+0xac>)
 800bf00:	4413      	add	r3, r2
 800bf02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf08:	4a1d      	ldr	r2, [pc, #116]	@ (800bf80 <prvHeapInit+0xb0>)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf0e:	4b1c      	ldr	r3, [pc, #112]	@ (800bf80 <prvHeapInit+0xb0>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	4413      	add	r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf1c:	2208      	movs	r2, #8
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	1a9b      	subs	r3, r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0307 	bic.w	r3, r3, #7
 800bf2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4a15      	ldr	r2, [pc, #84]	@ (800bf84 <prvHeapInit+0xb4>)
 800bf30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf32:	4b14      	ldr	r3, [pc, #80]	@ (800bf84 <prvHeapInit+0xb4>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2200      	movs	r2, #0
 800bf38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf3a:	4b12      	ldr	r3, [pc, #72]	@ (800bf84 <prvHeapInit+0xb4>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	1ad2      	subs	r2, r2, r3
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf50:	4b0c      	ldr	r3, [pc, #48]	@ (800bf84 <prvHeapInit+0xb4>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf88 <prvHeapInit+0xb8>)
 800bf5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4a09      	ldr	r2, [pc, #36]	@ (800bf8c <prvHeapInit+0xbc>)
 800bf66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf68:	4b09      	ldr	r3, [pc, #36]	@ (800bf90 <prvHeapInit+0xc0>)
 800bf6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf6e:	601a      	str	r2, [r3, #0]
}
 800bf70:	bf00      	nop
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	20001178 	.word	0x20001178
 800bf80:	20004d78 	.word	0x20004d78
 800bf84:	20004d80 	.word	0x20004d80
 800bf88:	20004d88 	.word	0x20004d88
 800bf8c:	20004d84 	.word	0x20004d84
 800bf90:	20004d94 	.word	0x20004d94

0800bf94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf9c:	4b28      	ldr	r3, [pc, #160]	@ (800c040 <prvInsertBlockIntoFreeList+0xac>)
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e002      	b.n	800bfa8 <prvInsertBlockIntoFreeList+0x14>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d8f7      	bhi.n	800bfa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d108      	bne.n	800bfd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	441a      	add	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d118      	bne.n	800c01c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	4b15      	ldr	r3, [pc, #84]	@ (800c044 <prvInsertBlockIntoFreeList+0xb0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d00d      	beq.n	800c012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	441a      	add	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
 800c010:	e008      	b.n	800c024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c012:	4b0c      	ldr	r3, [pc, #48]	@ (800c044 <prvInsertBlockIntoFreeList+0xb0>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e003      	b.n	800c024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d002      	beq.n	800c032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c032:	bf00      	nop
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	20004d78 	.word	0x20004d78
 800c044:	20004d80 	.word	0x20004d80

0800c048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c04c:	2200      	movs	r2, #0
 800c04e:	4912      	ldr	r1, [pc, #72]	@ (800c098 <MX_USB_DEVICE_Init+0x50>)
 800c050:	4812      	ldr	r0, [pc, #72]	@ (800c09c <MX_USB_DEVICE_Init+0x54>)
 800c052:	f7fb fb03 	bl	800765c <USBD_Init>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c05c:	f7f5 fbb2 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c060:	490f      	ldr	r1, [pc, #60]	@ (800c0a0 <MX_USB_DEVICE_Init+0x58>)
 800c062:	480e      	ldr	r0, [pc, #56]	@ (800c09c <MX_USB_DEVICE_Init+0x54>)
 800c064:	f7fb fb2a 	bl	80076bc <USBD_RegisterClass>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c06e:	f7f5 fba9 	bl	80017c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c072:	490c      	ldr	r1, [pc, #48]	@ (800c0a4 <MX_USB_DEVICE_Init+0x5c>)
 800c074:	4809      	ldr	r0, [pc, #36]	@ (800c09c <MX_USB_DEVICE_Init+0x54>)
 800c076:	f7fb fa21 	bl	80074bc <USBD_CDC_RegisterInterface>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c080:	f7f5 fba0 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c084:	4805      	ldr	r0, [pc, #20]	@ (800c09c <MX_USB_DEVICE_Init+0x54>)
 800c086:	f7fb fb4f 	bl	8007728 <USBD_Start>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c090:	f7f5 fb98 	bl	80017c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c094:	bf00      	nop
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200000b0 	.word	0x200000b0
 800c09c:	20004d98 	.word	0x20004d98
 800c0a0:	20000018 	.word	0x20000018
 800c0a4:	2000009c 	.word	0x2000009c

0800c0a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4905      	ldr	r1, [pc, #20]	@ (800c0c4 <CDC_Init_FS+0x1c>)
 800c0b0:	4805      	ldr	r0, [pc, #20]	@ (800c0c8 <CDC_Init_FS+0x20>)
 800c0b2:	f7fb fa1d 	bl	80074f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c0b6:	4905      	ldr	r1, [pc, #20]	@ (800c0cc <CDC_Init_FS+0x24>)
 800c0b8:	4803      	ldr	r0, [pc, #12]	@ (800c0c8 <CDC_Init_FS+0x20>)
 800c0ba:	f7fb fa3b 	bl	8007534 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c0be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	20005474 	.word	0x20005474
 800c0c8:	20004d98 	.word	0x20004d98
 800c0cc:	20005074 	.word	0x20005074

0800c0d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c0d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	71fb      	strb	r3, [r7, #7]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	2b23      	cmp	r3, #35	@ 0x23
 800c0f4:	d84a      	bhi.n	800c18c <CDC_Control_FS+0xac>
 800c0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0fc <CDC_Control_FS+0x1c>)
 800c0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fc:	0800c18d 	.word	0x0800c18d
 800c100:	0800c18d 	.word	0x0800c18d
 800c104:	0800c18d 	.word	0x0800c18d
 800c108:	0800c18d 	.word	0x0800c18d
 800c10c:	0800c18d 	.word	0x0800c18d
 800c110:	0800c18d 	.word	0x0800c18d
 800c114:	0800c18d 	.word	0x0800c18d
 800c118:	0800c18d 	.word	0x0800c18d
 800c11c:	0800c18d 	.word	0x0800c18d
 800c120:	0800c18d 	.word	0x0800c18d
 800c124:	0800c18d 	.word	0x0800c18d
 800c128:	0800c18d 	.word	0x0800c18d
 800c12c:	0800c18d 	.word	0x0800c18d
 800c130:	0800c18d 	.word	0x0800c18d
 800c134:	0800c18d 	.word	0x0800c18d
 800c138:	0800c18d 	.word	0x0800c18d
 800c13c:	0800c18d 	.word	0x0800c18d
 800c140:	0800c18d 	.word	0x0800c18d
 800c144:	0800c18d 	.word	0x0800c18d
 800c148:	0800c18d 	.word	0x0800c18d
 800c14c:	0800c18d 	.word	0x0800c18d
 800c150:	0800c18d 	.word	0x0800c18d
 800c154:	0800c18d 	.word	0x0800c18d
 800c158:	0800c18d 	.word	0x0800c18d
 800c15c:	0800c18d 	.word	0x0800c18d
 800c160:	0800c18d 	.word	0x0800c18d
 800c164:	0800c18d 	.word	0x0800c18d
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c18d 	.word	0x0800c18d
 800c170:	0800c18d 	.word	0x0800c18d
 800c174:	0800c18d 	.word	0x0800c18d
 800c178:	0800c18d 	.word	0x0800c18d
 800c17c:	0800c18d 	.word	0x0800c18d
 800c180:	0800c18d 	.word	0x0800c18d
 800c184:	0800c18d 	.word	0x0800c18d
 800c188:	0800c18d 	.word	0x0800c18d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c18c:	bf00      	nop
  }

  return (USBD_OK);
 800c18e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c190:	4618      	mov	r0, r3
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4805      	ldr	r0, [pc, #20]	@ (800c1c0 <CDC_Receive_FS+0x24>)
 800c1aa:	f7fb f9c3 	bl	8007534 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1ae:	4804      	ldr	r0, [pc, #16]	@ (800c1c0 <CDC_Receive_FS+0x24>)
 800c1b0:	f7fb fa1e 	bl	80075f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c1b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20004d98 	.word	0x20004d98

0800c1c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c20c <CDC_Transmit_FS+0x48>)
 800c1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e00b      	b.n	800c202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1ea:	887b      	ldrh	r3, [r7, #2]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	4806      	ldr	r0, [pc, #24]	@ (800c20c <CDC_Transmit_FS+0x48>)
 800c1f2:	f7fb f97d 	bl	80074f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1f6:	4805      	ldr	r0, [pc, #20]	@ (800c20c <CDC_Transmit_FS+0x48>)
 800c1f8:	f7fb f9ba 	bl	8007570 <USBD_CDC_TransmitPacket>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20004d98 	.word	0x20004d98

0800c210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c226:	4618      	mov	r0, r3
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
	...

0800c234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2212      	movs	r2, #18
 800c244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c246:	4b03      	ldr	r3, [pc, #12]	@ (800c254 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	200000cc 	.word	0x200000cc

0800c258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2204      	movs	r2, #4
 800c268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c26a:	4b03      	ldr	r3, [pc, #12]	@ (800c278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	200000e0 	.word	0x200000e0

0800c27c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	6039      	str	r1, [r7, #0]
 800c286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	4907      	ldr	r1, [pc, #28]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c292:	4808      	ldr	r0, [pc, #32]	@ (800c2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c294:	f7fc fbf8 	bl	8008a88 <USBD_GetString>
 800c298:	e004      	b.n	800c2a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	4904      	ldr	r1, [pc, #16]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c29e:	4805      	ldr	r0, [pc, #20]	@ (800c2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a0:	f7fc fbf2 	bl	8008a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a4:	4b02      	ldr	r3, [pc, #8]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20005874 	.word	0x20005874
 800c2b4:	0800f884 	.word	0x0800f884

0800c2b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	6039      	str	r1, [r7, #0]
 800c2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	4904      	ldr	r1, [pc, #16]	@ (800c2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2c8:	4804      	ldr	r0, [pc, #16]	@ (800c2dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2ca:	f7fc fbdd 	bl	8008a88 <USBD_GetString>
  return USBD_StrDesc;
 800c2ce:	4b02      	ldr	r3, [pc, #8]	@ (800c2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20005874 	.word	0x20005874
 800c2dc:	0800f89c 	.word	0x0800f89c

0800c2e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	221a      	movs	r2, #26
 800c2f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2f2:	f000 f843 	bl	800c37c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2f6:	4b02      	ldr	r3, [pc, #8]	@ (800c300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	200000e4 	.word	0x200000e4

0800c304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	6039      	str	r1, [r7, #0]
 800c30e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d105      	bne.n	800c322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	4907      	ldr	r1, [pc, #28]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c31a:	4808      	ldr	r0, [pc, #32]	@ (800c33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c31c:	f7fc fbb4 	bl	8008a88 <USBD_GetString>
 800c320:	e004      	b.n	800c32c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4904      	ldr	r1, [pc, #16]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c326:	4805      	ldr	r0, [pc, #20]	@ (800c33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c328:	f7fc fbae 	bl	8008a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c32c:	4b02      	ldr	r3, [pc, #8]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20005874 	.word	0x20005874
 800c33c:	0800f8b0 	.word	0x0800f8b0

0800c340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	6039      	str	r1, [r7, #0]
 800c34a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d105      	bne.n	800c35e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4907      	ldr	r1, [pc, #28]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c356:	4808      	ldr	r0, [pc, #32]	@ (800c378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c358:	f7fc fb96 	bl	8008a88 <USBD_GetString>
 800c35c:	e004      	b.n	800c368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	4904      	ldr	r1, [pc, #16]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c362:	4805      	ldr	r0, [pc, #20]	@ (800c378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c364:	f7fc fb90 	bl	8008a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c368:	4b02      	ldr	r3, [pc, #8]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20005874 	.word	0x20005874
 800c378:	0800f8bc 	.word	0x0800f8bc

0800c37c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c382:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c0 <Get_SerialNum+0x44>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c388:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c4 <Get_SerialNum+0x48>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c38e:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c8 <Get_SerialNum+0x4c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4413      	add	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3a2:	2208      	movs	r2, #8
 800c3a4:	4909      	ldr	r1, [pc, #36]	@ (800c3cc <Get_SerialNum+0x50>)
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 f814 	bl	800c3d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	4908      	ldr	r1, [pc, #32]	@ (800c3d0 <Get_SerialNum+0x54>)
 800c3b0:	68b8      	ldr	r0, [r7, #8]
 800c3b2:	f000 f80f 	bl	800c3d4 <IntToUnicode>
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	1fff7a10 	.word	0x1fff7a10
 800c3c4:	1fff7a14 	.word	0x1fff7a14
 800c3c8:	1fff7a18 	.word	0x1fff7a18
 800c3cc:	200000e6 	.word	0x200000e6
 800c3d0:	200000f6 	.word	0x200000f6

0800c3d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
 800c3ea:	e027      	b.n	800c43c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	0f1b      	lsrs	r3, r3, #28
 800c3f0:	2b09      	cmp	r3, #9
 800c3f2:	d80b      	bhi.n	800c40c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	0f1b      	lsrs	r3, r3, #28
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4619      	mov	r1, r3
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	440b      	add	r3, r1
 800c404:	3230      	adds	r2, #48	@ 0x30
 800c406:	b2d2      	uxtb	r2, r2
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e00a      	b.n	800c422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	0f1b      	lsrs	r3, r3, #28
 800c410:	b2da      	uxtb	r2, r3
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4619      	mov	r1, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	440b      	add	r3, r1
 800c41c:	3237      	adds	r2, #55	@ 0x37
 800c41e:	b2d2      	uxtb	r2, r2
 800c420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	3301      	adds	r3, #1
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	3301      	adds	r3, #1
 800c43a:	75fb      	strb	r3, [r7, #23]
 800c43c:	7dfa      	ldrb	r2, [r7, #23]
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	429a      	cmp	r2, r3
 800c442:	d3d3      	bcc.n	800c3ec <IntToUnicode+0x18>
  }
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
	...

0800c454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08a      	sub	sp, #40	@ 0x28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c45c:	f107 0314 	add.w	r3, r7, #20
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
 800c466:	609a      	str	r2, [r3, #8]
 800c468:	60da      	str	r2, [r3, #12]
 800c46a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c474:	d13a      	bne.n	800c4ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c476:	2300      	movs	r3, #0
 800c478:	613b      	str	r3, [r7, #16]
 800c47a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c47e:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c480:	f043 0301 	orr.w	r3, r3, #1
 800c484:	6313      	str	r3, [r2, #48]	@ 0x30
 800c486:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	613b      	str	r3, [r7, #16]
 800c490:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c492:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c498:	2302      	movs	r3, #2
 800c49a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49c:	2300      	movs	r3, #0
 800c49e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4a4:	230a      	movs	r3, #10
 800c4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4a8:	f107 0314 	add.w	r3, r7, #20
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4812      	ldr	r0, [pc, #72]	@ (800c4f8 <HAL_PCD_MspInit+0xa4>)
 800c4b0:	f7f6 fb9e 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4be:	6353      	str	r3, [r2, #52]	@ 0x34
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c4ce:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4d0:	4b08      	ldr	r3, [pc, #32]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2105      	movs	r1, #5
 800c4e0:	2043      	movs	r0, #67	@ 0x43
 800c4e2:	f7f6 fb5b 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4e6:	2043      	movs	r0, #67	@ 0x43
 800c4e8:	f7f6 fb74 	bl	8002bd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4ec:	bf00      	nop
 800c4ee:	3728      	adds	r7, #40	@ 0x28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	40020000 	.word	0x40020000

0800c4fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fb f955 	bl	80077c2 <USBD_LL_SetupStage>
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c532:	78fa      	ldrb	r2, [r7, #3]
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	440b      	add	r3, r1
 800c540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	78fb      	ldrb	r3, [r7, #3]
 800c548:	4619      	mov	r1, r3
 800c54a:	f7fb f98f 	bl	800786c <USBD_LL_DataOutStage>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	3320      	adds	r3, #32
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	4619      	mov	r1, r3
 800c57e:	f7fb fa28 	bl	80079d2 <USBD_LL_DataInStage>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fb fb62 	bl	8007c62 <USBD_LL_SOF>
}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	79db      	ldrb	r3, [r3, #7]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d001      	beq.n	800c5be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5ba:	f7f5 f903 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5c4:	7bfa      	ldrb	r2, [r7, #15]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fb fb06 	bl	8007bda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fb faae 	bl	8007b36 <USBD_LL_Reset>
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fb fb01 	bl	8007bfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7adb      	ldrb	r3, [r3, #11]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c618:	4b04      	ldr	r3, [pc, #16]	@ (800c62c <HAL_PCD_SuspendCallback+0x48>)
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	4a03      	ldr	r2, [pc, #12]	@ (800c62c <HAL_PCD_SuspendCallback+0x48>)
 800c61e:	f043 0306 	orr.w	r3, r3, #6
 800c622:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	e000ed00 	.word	0xe000ed00

0800c630 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fb faf7 	bl	8007c32 <USBD_LL_Resume>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c65e:	78fa      	ldrb	r2, [r7, #3]
 800c660:	4611      	mov	r1, r2
 800c662:	4618      	mov	r0, r3
 800c664:	f7fb fb4f 	bl	8007d06 <USBD_LL_IsoOUTIncomplete>
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c682:	78fa      	ldrb	r2, [r7, #3]
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f7fb fb0b 	bl	8007ca2 <USBD_LL_IsoINIncomplete>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fb fb61 	bl	8007d6a <USBD_LL_DevConnected>
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fb fb5e 	bl	8007d80 <USBD_LL_DevDisconnected>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d13c      	bne.n	800c756 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6dc:	4a20      	ldr	r2, [pc, #128]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c6f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6f6:	2204      	movs	r2, #4
 800c6f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6fa:	4b19      	ldr	r3, [pc, #100]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c700:	4b17      	ldr	r3, [pc, #92]	@ (800c760 <USBD_LL_Init+0x94>)
 800c702:	2200      	movs	r2, #0
 800c704:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c706:	4b16      	ldr	r3, [pc, #88]	@ (800c760 <USBD_LL_Init+0x94>)
 800c708:	2202      	movs	r2, #2
 800c70a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c70c:	4b14      	ldr	r3, [pc, #80]	@ (800c760 <USBD_LL_Init+0x94>)
 800c70e:	2200      	movs	r2, #0
 800c710:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c712:	4b13      	ldr	r3, [pc, #76]	@ (800c760 <USBD_LL_Init+0x94>)
 800c714:	2200      	movs	r2, #0
 800c716:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c718:	4b11      	ldr	r3, [pc, #68]	@ (800c760 <USBD_LL_Init+0x94>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c71e:	4b10      	ldr	r3, [pc, #64]	@ (800c760 <USBD_LL_Init+0x94>)
 800c720:	2200      	movs	r2, #0
 800c722:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c724:	4b0e      	ldr	r3, [pc, #56]	@ (800c760 <USBD_LL_Init+0x94>)
 800c726:	2200      	movs	r2, #0
 800c728:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c72a:	480d      	ldr	r0, [pc, #52]	@ (800c760 <USBD_LL_Init+0x94>)
 800c72c:	f7f6 fc48 	bl	8002fc0 <HAL_PCD_Init>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c736:	f7f5 f845 	bl	80017c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c73a:	2180      	movs	r1, #128	@ 0x80
 800c73c:	4808      	ldr	r0, [pc, #32]	@ (800c760 <USBD_LL_Init+0x94>)
 800c73e:	f7f7 fe74 	bl	800442a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c742:	2240      	movs	r2, #64	@ 0x40
 800c744:	2100      	movs	r1, #0
 800c746:	4806      	ldr	r0, [pc, #24]	@ (800c760 <USBD_LL_Init+0x94>)
 800c748:	f7f7 fe28 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c74c:	2280      	movs	r2, #128	@ 0x80
 800c74e:	2101      	movs	r1, #1
 800c750:	4803      	ldr	r0, [pc, #12]	@ (800c760 <USBD_LL_Init+0x94>)
 800c752:	f7f7 fe23 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20005a74 	.word	0x20005a74

0800c764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f6 fd2f 	bl	80031de <HAL_PCD_Start>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f942 	bl	800ca10 <USBD_Get_USB_Status>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c790:	7bbb      	ldrb	r3, [r7, #14]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	70fb      	strb	r3, [r7, #3]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70bb      	strb	r3, [r7, #2]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7c2:	78bb      	ldrb	r3, [r7, #2]
 800c7c4:	883a      	ldrh	r2, [r7, #0]
 800c7c6:	78f9      	ldrb	r1, [r7, #3]
 800c7c8:	f7f7 fa03 	bl	8003bd2 <HAL_PCD_EP_Open>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 f91c 	bl	800ca10 <USBD_Get_USB_Status>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f7f7 fa4e 	bl	8003ca6 <HAL_PCD_EP_Close>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 f8fd 	bl	800ca10 <USBD_Get_USB_Status>
 800c816:	4603      	mov	r3, r0
 800c818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f7f7 fb06 	bl	8003e54 <HAL_PCD_EP_SetStall>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f8de 	bl	800ca10 <USBD_Get_USB_Status>
 800c854:	4603      	mov	r3, r0
 800c856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c858:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7f7 fb4a 	bl	8003f1a <HAL_PCD_EP_ClrStall>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f8bf 	bl	800ca10 <USBD_Get_USB_Status>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c896:	7bbb      	ldrb	r3, [r7, #14]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	da0b      	bge.n	800c8d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8c2:	68f9      	ldr	r1, [r7, #12]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3316      	adds	r3, #22
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	e00b      	b.n	800c8ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8da:	68f9      	ldr	r1, [r7, #12]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	440b      	add	r3, r1
 800c8e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c8ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c912:	78fa      	ldrb	r2, [r7, #3]
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7f7 f937 	bl	8003b8a <HAL_PCD_SetAddress>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 f874 	bl	800ca10 <USBD_Get_USB_Status>
 800c928:	4603      	mov	r3, r0
 800c92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	460b      	mov	r3, r1
 800c944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c954:	7af9      	ldrb	r1, [r7, #11]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	f7f7 fa41 	bl	8003de0 <HAL_PCD_EP_Transmit>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f853 	bl	800ca10 <USBD_Get_USB_Status>
 800c96a:	4603      	mov	r3, r0
 800c96c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c96e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	607a      	str	r2, [r7, #4]
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	460b      	mov	r3, r1
 800c986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c996:	7af9      	ldrb	r1, [r7, #11]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	f7f7 f9cd 	bl	8003d3a <HAL_PCD_EP_Receive>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f832 	bl	800ca10 <USBD_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f7 f9ed 	bl	8003db0 <HAL_PCD_EP_GetRxCount>
 800c9d6:	4603      	mov	r3, r0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9e8:	4b03      	ldr	r3, [pc, #12]	@ (800c9f8 <USBD_static_malloc+0x18>)
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	370c      	adds	r7, #12
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	20005f58 	.word	0x20005f58

0800c9fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]

}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d817      	bhi.n	800ca54 <USBD_Get_USB_Status+0x44>
 800ca24:	a201      	add	r2, pc, #4	@ (adr r2, 800ca2c <USBD_Get_USB_Status+0x1c>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca3d 	.word	0x0800ca3d
 800ca30:	0800ca43 	.word	0x0800ca43
 800ca34:	0800ca49 	.word	0x0800ca49
 800ca38:	0800ca4f 	.word	0x0800ca4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca40:	e00b      	b.n	800ca5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca42:	2303      	movs	r3, #3
 800ca44:	73fb      	strb	r3, [r7, #15]
    break;
 800ca46:	e008      	b.n	800ca5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca4c:	e005      	b.n	800ca5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	73fb      	strb	r3, [r7, #15]
    break;
 800ca52:	e002      	b.n	800ca5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	73fb      	strb	r3, [r7, #15]
    break;
 800ca58:	bf00      	nop
  }
  return usb_status;
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <_ZdlPvj>:
 800ca68:	f000 b811 	b.w	800ca8e <_ZdlPv>

0800ca6c <_Znwj>:
 800ca6c:	2801      	cmp	r0, #1
 800ca6e:	bf38      	it	cc
 800ca70:	2001      	movcc	r0, #1
 800ca72:	b510      	push	{r4, lr}
 800ca74:	4604      	mov	r4, r0
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 f81c 	bl	800cab4 <malloc>
 800ca7c:	b100      	cbz	r0, 800ca80 <_Znwj+0x14>
 800ca7e:	bd10      	pop	{r4, pc}
 800ca80:	f000 f808 	bl	800ca94 <_ZSt15get_new_handlerv>
 800ca84:	b908      	cbnz	r0, 800ca8a <_Znwj+0x1e>
 800ca86:	f000 f80d 	bl	800caa4 <abort>
 800ca8a:	4780      	blx	r0
 800ca8c:	e7f3      	b.n	800ca76 <_Znwj+0xa>

0800ca8e <_ZdlPv>:
 800ca8e:	f000 b819 	b.w	800cac4 <free>
	...

0800ca94 <_ZSt15get_new_handlerv>:
 800ca94:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <_ZSt15get_new_handlerv+0xc>)
 800ca96:	6818      	ldr	r0, [r3, #0]
 800ca98:	f3bf 8f5b 	dmb	ish
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	20006178 	.word	0x20006178

0800caa4 <abort>:
 800caa4:	b508      	push	{r3, lr}
 800caa6:	2006      	movs	r0, #6
 800caa8:	f000 fe70 	bl	800d78c <raise>
 800caac:	2001      	movs	r0, #1
 800caae:	f7f4 ff99 	bl	80019e4 <_exit>
	...

0800cab4 <malloc>:
 800cab4:	4b02      	ldr	r3, [pc, #8]	@ (800cac0 <malloc+0xc>)
 800cab6:	4601      	mov	r1, r0
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	f000 b82d 	b.w	800cb18 <_malloc_r>
 800cabe:	bf00      	nop
 800cac0:	2000010c 	.word	0x2000010c

0800cac4 <free>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <free+0xc>)
 800cac6:	4601      	mov	r1, r0
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f001 bdb5 	b.w	800e638 <_free_r>
 800cace:	bf00      	nop
 800cad0:	2000010c 	.word	0x2000010c

0800cad4 <sbrk_aligned>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	4e0f      	ldr	r6, [pc, #60]	@ (800cb14 <sbrk_aligned+0x40>)
 800cad8:	460c      	mov	r4, r1
 800cada:	6831      	ldr	r1, [r6, #0]
 800cadc:	4605      	mov	r5, r0
 800cade:	b911      	cbnz	r1, 800cae6 <sbrk_aligned+0x12>
 800cae0:	f000 fefe 	bl	800d8e0 <_sbrk_r>
 800cae4:	6030      	str	r0, [r6, #0]
 800cae6:	4621      	mov	r1, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 fef9 	bl	800d8e0 <_sbrk_r>
 800caee:	1c43      	adds	r3, r0, #1
 800caf0:	d103      	bne.n	800cafa <sbrk_aligned+0x26>
 800caf2:	f04f 34ff 	mov.w	r4, #4294967295
 800caf6:	4620      	mov	r0, r4
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
 800cafa:	1cc4      	adds	r4, r0, #3
 800cafc:	f024 0403 	bic.w	r4, r4, #3
 800cb00:	42a0      	cmp	r0, r4
 800cb02:	d0f8      	beq.n	800caf6 <sbrk_aligned+0x22>
 800cb04:	1a21      	subs	r1, r4, r0
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 feea 	bl	800d8e0 <_sbrk_r>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d1f2      	bne.n	800caf6 <sbrk_aligned+0x22>
 800cb10:	e7ef      	b.n	800caf2 <sbrk_aligned+0x1e>
 800cb12:	bf00      	nop
 800cb14:	2000617c 	.word	0x2000617c

0800cb18 <_malloc_r>:
 800cb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb1c:	1ccd      	adds	r5, r1, #3
 800cb1e:	f025 0503 	bic.w	r5, r5, #3
 800cb22:	3508      	adds	r5, #8
 800cb24:	2d0c      	cmp	r5, #12
 800cb26:	bf38      	it	cc
 800cb28:	250c      	movcc	r5, #12
 800cb2a:	2d00      	cmp	r5, #0
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	db01      	blt.n	800cb34 <_malloc_r+0x1c>
 800cb30:	42a9      	cmp	r1, r5
 800cb32:	d904      	bls.n	800cb3e <_malloc_r+0x26>
 800cb34:	230c      	movs	r3, #12
 800cb36:	6033      	str	r3, [r6, #0]
 800cb38:	2000      	movs	r0, #0
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc14 <_malloc_r+0xfc>
 800cb42:	f000 f869 	bl	800cc18 <__malloc_lock>
 800cb46:	f8d8 3000 	ldr.w	r3, [r8]
 800cb4a:	461c      	mov	r4, r3
 800cb4c:	bb44      	cbnz	r4, 800cba0 <_malloc_r+0x88>
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4630      	mov	r0, r6
 800cb52:	f7ff ffbf 	bl	800cad4 <sbrk_aligned>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	4604      	mov	r4, r0
 800cb5a:	d158      	bne.n	800cc0e <_malloc_r+0xf6>
 800cb5c:	f8d8 4000 	ldr.w	r4, [r8]
 800cb60:	4627      	mov	r7, r4
 800cb62:	2f00      	cmp	r7, #0
 800cb64:	d143      	bne.n	800cbee <_malloc_r+0xd6>
 800cb66:	2c00      	cmp	r4, #0
 800cb68:	d04b      	beq.n	800cc02 <_malloc_r+0xea>
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4630      	mov	r0, r6
 800cb70:	eb04 0903 	add.w	r9, r4, r3
 800cb74:	f000 feb4 	bl	800d8e0 <_sbrk_r>
 800cb78:	4581      	cmp	r9, r0
 800cb7a:	d142      	bne.n	800cc02 <_malloc_r+0xea>
 800cb7c:	6821      	ldr	r1, [r4, #0]
 800cb7e:	1a6d      	subs	r5, r5, r1
 800cb80:	4629      	mov	r1, r5
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ffa6 	bl	800cad4 <sbrk_aligned>
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d03a      	beq.n	800cc02 <_malloc_r+0xea>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	442b      	add	r3, r5
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	f8d8 3000 	ldr.w	r3, [r8]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	bb62      	cbnz	r2, 800cbf4 <_malloc_r+0xdc>
 800cb9a:	f8c8 7000 	str.w	r7, [r8]
 800cb9e:	e00f      	b.n	800cbc0 <_malloc_r+0xa8>
 800cba0:	6822      	ldr	r2, [r4, #0]
 800cba2:	1b52      	subs	r2, r2, r5
 800cba4:	d420      	bmi.n	800cbe8 <_malloc_r+0xd0>
 800cba6:	2a0b      	cmp	r2, #11
 800cba8:	d917      	bls.n	800cbda <_malloc_r+0xc2>
 800cbaa:	1961      	adds	r1, r4, r5
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	6025      	str	r5, [r4, #0]
 800cbb0:	bf18      	it	ne
 800cbb2:	6059      	strne	r1, [r3, #4]
 800cbb4:	6863      	ldr	r3, [r4, #4]
 800cbb6:	bf08      	it	eq
 800cbb8:	f8c8 1000 	streq.w	r1, [r8]
 800cbbc:	5162      	str	r2, [r4, r5]
 800cbbe:	604b      	str	r3, [r1, #4]
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f000 f82f 	bl	800cc24 <__malloc_unlock>
 800cbc6:	f104 000b 	add.w	r0, r4, #11
 800cbca:	1d23      	adds	r3, r4, #4
 800cbcc:	f020 0007 	bic.w	r0, r0, #7
 800cbd0:	1ac2      	subs	r2, r0, r3
 800cbd2:	bf1c      	itt	ne
 800cbd4:	1a1b      	subne	r3, r3, r0
 800cbd6:	50a3      	strne	r3, [r4, r2]
 800cbd8:	e7af      	b.n	800cb3a <_malloc_r+0x22>
 800cbda:	6862      	ldr	r2, [r4, #4]
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	bf0c      	ite	eq
 800cbe0:	f8c8 2000 	streq.w	r2, [r8]
 800cbe4:	605a      	strne	r2, [r3, #4]
 800cbe6:	e7eb      	b.n	800cbc0 <_malloc_r+0xa8>
 800cbe8:	4623      	mov	r3, r4
 800cbea:	6864      	ldr	r4, [r4, #4]
 800cbec:	e7ae      	b.n	800cb4c <_malloc_r+0x34>
 800cbee:	463c      	mov	r4, r7
 800cbf0:	687f      	ldr	r7, [r7, #4]
 800cbf2:	e7b6      	b.n	800cb62 <_malloc_r+0x4a>
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	d1fb      	bne.n	800cbf4 <_malloc_r+0xdc>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	6053      	str	r3, [r2, #4]
 800cc00:	e7de      	b.n	800cbc0 <_malloc_r+0xa8>
 800cc02:	230c      	movs	r3, #12
 800cc04:	6033      	str	r3, [r6, #0]
 800cc06:	4630      	mov	r0, r6
 800cc08:	f000 f80c 	bl	800cc24 <__malloc_unlock>
 800cc0c:	e794      	b.n	800cb38 <_malloc_r+0x20>
 800cc0e:	6005      	str	r5, [r0, #0]
 800cc10:	e7d6      	b.n	800cbc0 <_malloc_r+0xa8>
 800cc12:	bf00      	nop
 800cc14:	20006180 	.word	0x20006180

0800cc18 <__malloc_lock>:
 800cc18:	4801      	ldr	r0, [pc, #4]	@ (800cc20 <__malloc_lock+0x8>)
 800cc1a:	f000 beae 	b.w	800d97a <__retarget_lock_acquire_recursive>
 800cc1e:	bf00      	nop
 800cc20:	200062c4 	.word	0x200062c4

0800cc24 <__malloc_unlock>:
 800cc24:	4801      	ldr	r0, [pc, #4]	@ (800cc2c <__malloc_unlock+0x8>)
 800cc26:	f000 bea9 	b.w	800d97c <__retarget_lock_release_recursive>
 800cc2a:	bf00      	nop
 800cc2c:	200062c4 	.word	0x200062c4

0800cc30 <__cvt>:
 800cc30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	ec57 6b10 	vmov	r6, r7, d0
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	463b      	mov	r3, r7
 800cc40:	bfbb      	ittet	lt
 800cc42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc46:	461f      	movlt	r7, r3
 800cc48:	2300      	movge	r3, #0
 800cc4a:	232d      	movlt	r3, #45	@ 0x2d
 800cc4c:	700b      	strb	r3, [r1, #0]
 800cc4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc54:	4691      	mov	r9, r2
 800cc56:	f023 0820 	bic.w	r8, r3, #32
 800cc5a:	bfbc      	itt	lt
 800cc5c:	4632      	movlt	r2, r6
 800cc5e:	4616      	movlt	r6, r2
 800cc60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc64:	d005      	beq.n	800cc72 <__cvt+0x42>
 800cc66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc6a:	d100      	bne.n	800cc6e <__cvt+0x3e>
 800cc6c:	3401      	adds	r4, #1
 800cc6e:	2102      	movs	r1, #2
 800cc70:	e000      	b.n	800cc74 <__cvt+0x44>
 800cc72:	2103      	movs	r1, #3
 800cc74:	ab03      	add	r3, sp, #12
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	ab02      	add	r3, sp, #8
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	ec47 6b10 	vmov	d0, r6, r7
 800cc80:	4653      	mov	r3, sl
 800cc82:	4622      	mov	r2, r4
 800cc84:	f000 ff14 	bl	800dab0 <_dtoa_r>
 800cc88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	d119      	bne.n	800ccc4 <__cvt+0x94>
 800cc90:	f019 0f01 	tst.w	r9, #1
 800cc94:	d00e      	beq.n	800ccb4 <__cvt+0x84>
 800cc96:	eb00 0904 	add.w	r9, r0, r4
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4630      	mov	r0, r6
 800cca0:	4639      	mov	r1, r7
 800cca2:	f7f3 ff19 	bl	8000ad8 <__aeabi_dcmpeq>
 800cca6:	b108      	cbz	r0, 800ccac <__cvt+0x7c>
 800cca8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ccac:	2230      	movs	r2, #48	@ 0x30
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	454b      	cmp	r3, r9
 800ccb2:	d31e      	bcc.n	800ccf2 <__cvt+0xc2>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccb8:	1b5b      	subs	r3, r3, r5
 800ccba:	4628      	mov	r0, r5
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	b004      	add	sp, #16
 800ccc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccc8:	eb00 0904 	add.w	r9, r0, r4
 800cccc:	d1e5      	bne.n	800cc9a <__cvt+0x6a>
 800ccce:	7803      	ldrb	r3, [r0, #0]
 800ccd0:	2b30      	cmp	r3, #48	@ 0x30
 800ccd2:	d10a      	bne.n	800ccea <__cvt+0xba>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	4630      	mov	r0, r6
 800ccda:	4639      	mov	r1, r7
 800ccdc:	f7f3 fefc 	bl	8000ad8 <__aeabi_dcmpeq>
 800cce0:	b918      	cbnz	r0, 800ccea <__cvt+0xba>
 800cce2:	f1c4 0401 	rsb	r4, r4, #1
 800cce6:	f8ca 4000 	str.w	r4, [sl]
 800ccea:	f8da 3000 	ldr.w	r3, [sl]
 800ccee:	4499      	add	r9, r3
 800ccf0:	e7d3      	b.n	800cc9a <__cvt+0x6a>
 800ccf2:	1c59      	adds	r1, r3, #1
 800ccf4:	9103      	str	r1, [sp, #12]
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	e7d9      	b.n	800ccae <__cvt+0x7e>

0800ccfa <__exponent>:
 800ccfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	bfba      	itte	lt
 800cd00:	4249      	neglt	r1, r1
 800cd02:	232d      	movlt	r3, #45	@ 0x2d
 800cd04:	232b      	movge	r3, #43	@ 0x2b
 800cd06:	2909      	cmp	r1, #9
 800cd08:	7002      	strb	r2, [r0, #0]
 800cd0a:	7043      	strb	r3, [r0, #1]
 800cd0c:	dd29      	ble.n	800cd62 <__exponent+0x68>
 800cd0e:	f10d 0307 	add.w	r3, sp, #7
 800cd12:	461d      	mov	r5, r3
 800cd14:	270a      	movs	r7, #10
 800cd16:	461a      	mov	r2, r3
 800cd18:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd1c:	fb07 1416 	mls	r4, r7, r6, r1
 800cd20:	3430      	adds	r4, #48	@ 0x30
 800cd22:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd26:	460c      	mov	r4, r1
 800cd28:	2c63      	cmp	r4, #99	@ 0x63
 800cd2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd2e:	4631      	mov	r1, r6
 800cd30:	dcf1      	bgt.n	800cd16 <__exponent+0x1c>
 800cd32:	3130      	adds	r1, #48	@ 0x30
 800cd34:	1e94      	subs	r4, r2, #2
 800cd36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd3a:	1c41      	adds	r1, r0, #1
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	42ab      	cmp	r3, r5
 800cd40:	d30a      	bcc.n	800cd58 <__exponent+0x5e>
 800cd42:	f10d 0309 	add.w	r3, sp, #9
 800cd46:	1a9b      	subs	r3, r3, r2
 800cd48:	42ac      	cmp	r4, r5
 800cd4a:	bf88      	it	hi
 800cd4c:	2300      	movhi	r3, #0
 800cd4e:	3302      	adds	r3, #2
 800cd50:	4403      	add	r3, r0
 800cd52:	1a18      	subs	r0, r3, r0
 800cd54:	b003      	add	sp, #12
 800cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd58:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd60:	e7ed      	b.n	800cd3e <__exponent+0x44>
 800cd62:	2330      	movs	r3, #48	@ 0x30
 800cd64:	3130      	adds	r1, #48	@ 0x30
 800cd66:	7083      	strb	r3, [r0, #2]
 800cd68:	70c1      	strb	r1, [r0, #3]
 800cd6a:	1d03      	adds	r3, r0, #4
 800cd6c:	e7f1      	b.n	800cd52 <__exponent+0x58>
	...

0800cd70 <_printf_float>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	b08d      	sub	sp, #52	@ 0x34
 800cd76:	460c      	mov	r4, r1
 800cd78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	461f      	mov	r7, r3
 800cd80:	4605      	mov	r5, r0
 800cd82:	f000 fd0b 	bl	800d79c <_localeconv_r>
 800cd86:	6803      	ldr	r3, [r0, #0]
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f3 fa78 	bl	8000280 <strlen>
 800cd90:	2300      	movs	r3, #0
 800cd92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd94:	f8d8 3000 	ldr.w	r3, [r8]
 800cd98:	9005      	str	r0, [sp, #20]
 800cd9a:	3307      	adds	r3, #7
 800cd9c:	f023 0307 	bic.w	r3, r3, #7
 800cda0:	f103 0208 	add.w	r2, r3, #8
 800cda4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cda8:	f8d4 b000 	ldr.w	fp, [r4]
 800cdac:	f8c8 2000 	str.w	r2, [r8]
 800cdb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cdc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdc6:	4b9c      	ldr	r3, [pc, #624]	@ (800d038 <_printf_float+0x2c8>)
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdcc:	f7f3 feb6 	bl	8000b3c <__aeabi_dcmpun>
 800cdd0:	bb70      	cbnz	r0, 800ce30 <_printf_float+0xc0>
 800cdd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdd6:	4b98      	ldr	r3, [pc, #608]	@ (800d038 <_printf_float+0x2c8>)
 800cdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cddc:	f7f3 fe90 	bl	8000b00 <__aeabi_dcmple>
 800cde0:	bb30      	cbnz	r0, 800ce30 <_printf_float+0xc0>
 800cde2:	2200      	movs	r2, #0
 800cde4:	2300      	movs	r3, #0
 800cde6:	4640      	mov	r0, r8
 800cde8:	4649      	mov	r1, r9
 800cdea:	f7f3 fe7f 	bl	8000aec <__aeabi_dcmplt>
 800cdee:	b110      	cbz	r0, 800cdf6 <_printf_float+0x86>
 800cdf0:	232d      	movs	r3, #45	@ 0x2d
 800cdf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdf6:	4a91      	ldr	r2, [pc, #580]	@ (800d03c <_printf_float+0x2cc>)
 800cdf8:	4b91      	ldr	r3, [pc, #580]	@ (800d040 <_printf_float+0x2d0>)
 800cdfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdfe:	bf94      	ite	ls
 800ce00:	4690      	movls	r8, r2
 800ce02:	4698      	movhi	r8, r3
 800ce04:	2303      	movs	r3, #3
 800ce06:	6123      	str	r3, [r4, #16]
 800ce08:	f02b 0304 	bic.w	r3, fp, #4
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	f04f 0900 	mov.w	r9, #0
 800ce12:	9700      	str	r7, [sp, #0]
 800ce14:	4633      	mov	r3, r6
 800ce16:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	f000 f9d2 	bl	800d1c4 <_printf_common>
 800ce20:	3001      	adds	r0, #1
 800ce22:	f040 808d 	bne.w	800cf40 <_printf_float+0x1d0>
 800ce26:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2a:	b00d      	add	sp, #52	@ 0x34
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce30:	4642      	mov	r2, r8
 800ce32:	464b      	mov	r3, r9
 800ce34:	4640      	mov	r0, r8
 800ce36:	4649      	mov	r1, r9
 800ce38:	f7f3 fe80 	bl	8000b3c <__aeabi_dcmpun>
 800ce3c:	b140      	cbz	r0, 800ce50 <_printf_float+0xe0>
 800ce3e:	464b      	mov	r3, r9
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bfbc      	itt	lt
 800ce44:	232d      	movlt	r3, #45	@ 0x2d
 800ce46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce4a:	4a7e      	ldr	r2, [pc, #504]	@ (800d044 <_printf_float+0x2d4>)
 800ce4c:	4b7e      	ldr	r3, [pc, #504]	@ (800d048 <_printf_float+0x2d8>)
 800ce4e:	e7d4      	b.n	800cdfa <_printf_float+0x8a>
 800ce50:	6863      	ldr	r3, [r4, #4]
 800ce52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce56:	9206      	str	r2, [sp, #24]
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	d13b      	bne.n	800ced4 <_printf_float+0x164>
 800ce5c:	2306      	movs	r3, #6
 800ce5e:	6063      	str	r3, [r4, #4]
 800ce60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce64:	2300      	movs	r3, #0
 800ce66:	6022      	str	r2, [r4, #0]
 800ce68:	9303      	str	r3, [sp, #12]
 800ce6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce70:	ab09      	add	r3, sp, #36	@ 0x24
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	6861      	ldr	r1, [r4, #4]
 800ce76:	ec49 8b10 	vmov	d0, r8, r9
 800ce7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce7e:	4628      	mov	r0, r5
 800ce80:	f7ff fed6 	bl	800cc30 <__cvt>
 800ce84:	9b06      	ldr	r3, [sp, #24]
 800ce86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce88:	2b47      	cmp	r3, #71	@ 0x47
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	d129      	bne.n	800cee2 <_printf_float+0x172>
 800ce8e:	1cc8      	adds	r0, r1, #3
 800ce90:	db02      	blt.n	800ce98 <_printf_float+0x128>
 800ce92:	6863      	ldr	r3, [r4, #4]
 800ce94:	4299      	cmp	r1, r3
 800ce96:	dd41      	ble.n	800cf1c <_printf_float+0x1ac>
 800ce98:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cea0:	3901      	subs	r1, #1
 800cea2:	4652      	mov	r2, sl
 800cea4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cea8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ceaa:	f7ff ff26 	bl	800ccfa <__exponent>
 800ceae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceb0:	1813      	adds	r3, r2, r0
 800ceb2:	2a01      	cmp	r2, #1
 800ceb4:	4681      	mov	r9, r0
 800ceb6:	6123      	str	r3, [r4, #16]
 800ceb8:	dc02      	bgt.n	800cec0 <_printf_float+0x150>
 800ceba:	6822      	ldr	r2, [r4, #0]
 800cebc:	07d2      	lsls	r2, r2, #31
 800cebe:	d501      	bpl.n	800cec4 <_printf_float+0x154>
 800cec0:	3301      	adds	r3, #1
 800cec2:	6123      	str	r3, [r4, #16]
 800cec4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d0a2      	beq.n	800ce12 <_printf_float+0xa2>
 800cecc:	232d      	movs	r3, #45	@ 0x2d
 800cece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ced2:	e79e      	b.n	800ce12 <_printf_float+0xa2>
 800ced4:	9a06      	ldr	r2, [sp, #24]
 800ced6:	2a47      	cmp	r2, #71	@ 0x47
 800ced8:	d1c2      	bne.n	800ce60 <_printf_float+0xf0>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1c0      	bne.n	800ce60 <_printf_float+0xf0>
 800cede:	2301      	movs	r3, #1
 800cee0:	e7bd      	b.n	800ce5e <_printf_float+0xee>
 800cee2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cee6:	d9db      	bls.n	800cea0 <_printf_float+0x130>
 800cee8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ceec:	d118      	bne.n	800cf20 <_printf_float+0x1b0>
 800ceee:	2900      	cmp	r1, #0
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	dd0b      	ble.n	800cf0c <_printf_float+0x19c>
 800cef4:	6121      	str	r1, [r4, #16]
 800cef6:	b913      	cbnz	r3, 800cefe <_printf_float+0x18e>
 800cef8:	6822      	ldr	r2, [r4, #0]
 800cefa:	07d0      	lsls	r0, r2, #31
 800cefc:	d502      	bpl.n	800cf04 <_printf_float+0x194>
 800cefe:	3301      	adds	r3, #1
 800cf00:	440b      	add	r3, r1
 800cf02:	6123      	str	r3, [r4, #16]
 800cf04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cf06:	f04f 0900 	mov.w	r9, #0
 800cf0a:	e7db      	b.n	800cec4 <_printf_float+0x154>
 800cf0c:	b913      	cbnz	r3, 800cf14 <_printf_float+0x1a4>
 800cf0e:	6822      	ldr	r2, [r4, #0]
 800cf10:	07d2      	lsls	r2, r2, #31
 800cf12:	d501      	bpl.n	800cf18 <_printf_float+0x1a8>
 800cf14:	3302      	adds	r3, #2
 800cf16:	e7f4      	b.n	800cf02 <_printf_float+0x192>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e7f2      	b.n	800cf02 <_printf_float+0x192>
 800cf1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf22:	4299      	cmp	r1, r3
 800cf24:	db05      	blt.n	800cf32 <_printf_float+0x1c2>
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	6121      	str	r1, [r4, #16]
 800cf2a:	07d8      	lsls	r0, r3, #31
 800cf2c:	d5ea      	bpl.n	800cf04 <_printf_float+0x194>
 800cf2e:	1c4b      	adds	r3, r1, #1
 800cf30:	e7e7      	b.n	800cf02 <_printf_float+0x192>
 800cf32:	2900      	cmp	r1, #0
 800cf34:	bfd4      	ite	le
 800cf36:	f1c1 0202 	rsble	r2, r1, #2
 800cf3a:	2201      	movgt	r2, #1
 800cf3c:	4413      	add	r3, r2
 800cf3e:	e7e0      	b.n	800cf02 <_printf_float+0x192>
 800cf40:	6823      	ldr	r3, [r4, #0]
 800cf42:	055a      	lsls	r2, r3, #21
 800cf44:	d407      	bmi.n	800cf56 <_printf_float+0x1e6>
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	4642      	mov	r2, r8
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	d12b      	bne.n	800cfac <_printf_float+0x23c>
 800cf54:	e767      	b.n	800ce26 <_printf_float+0xb6>
 800cf56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf5a:	f240 80dd 	bls.w	800d118 <_printf_float+0x3a8>
 800cf5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf62:	2200      	movs	r2, #0
 800cf64:	2300      	movs	r3, #0
 800cf66:	f7f3 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d033      	beq.n	800cfd6 <_printf_float+0x266>
 800cf6e:	4a37      	ldr	r2, [pc, #220]	@ (800d04c <_printf_float+0x2dc>)
 800cf70:	2301      	movs	r3, #1
 800cf72:	4631      	mov	r1, r6
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	f43f af54 	beq.w	800ce26 <_printf_float+0xb6>
 800cf7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf82:	4543      	cmp	r3, r8
 800cf84:	db02      	blt.n	800cf8c <_printf_float+0x21c>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	07d8      	lsls	r0, r3, #31
 800cf8a:	d50f      	bpl.n	800cfac <_printf_float+0x23c>
 800cf8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf90:	4631      	mov	r1, r6
 800cf92:	4628      	mov	r0, r5
 800cf94:	47b8      	blx	r7
 800cf96:	3001      	adds	r0, #1
 800cf98:	f43f af45 	beq.w	800ce26 <_printf_float+0xb6>
 800cf9c:	f04f 0900 	mov.w	r9, #0
 800cfa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfa4:	f104 0a1a 	add.w	sl, r4, #26
 800cfa8:	45c8      	cmp	r8, r9
 800cfaa:	dc09      	bgt.n	800cfc0 <_printf_float+0x250>
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	079b      	lsls	r3, r3, #30
 800cfb0:	f100 8103 	bmi.w	800d1ba <_printf_float+0x44a>
 800cfb4:	68e0      	ldr	r0, [r4, #12]
 800cfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb8:	4298      	cmp	r0, r3
 800cfba:	bfb8      	it	lt
 800cfbc:	4618      	movlt	r0, r3
 800cfbe:	e734      	b.n	800ce2a <_printf_float+0xba>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	4652      	mov	r2, sl
 800cfc4:	4631      	mov	r1, r6
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b8      	blx	r7
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f43f af2b 	beq.w	800ce26 <_printf_float+0xb6>
 800cfd0:	f109 0901 	add.w	r9, r9, #1
 800cfd4:	e7e8      	b.n	800cfa8 <_printf_float+0x238>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dc39      	bgt.n	800d050 <_printf_float+0x2e0>
 800cfdc:	4a1b      	ldr	r2, [pc, #108]	@ (800d04c <_printf_float+0x2dc>)
 800cfde:	2301      	movs	r3, #1
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f af1d 	beq.w	800ce26 <_printf_float+0xb6>
 800cfec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cff0:	ea59 0303 	orrs.w	r3, r9, r3
 800cff4:	d102      	bne.n	800cffc <_printf_float+0x28c>
 800cff6:	6823      	ldr	r3, [r4, #0]
 800cff8:	07d9      	lsls	r1, r3, #31
 800cffa:	d5d7      	bpl.n	800cfac <_printf_float+0x23c>
 800cffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	f43f af0d 	beq.w	800ce26 <_printf_float+0xb6>
 800d00c:	f04f 0a00 	mov.w	sl, #0
 800d010:	f104 0b1a 	add.w	fp, r4, #26
 800d014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d016:	425b      	negs	r3, r3
 800d018:	4553      	cmp	r3, sl
 800d01a:	dc01      	bgt.n	800d020 <_printf_float+0x2b0>
 800d01c:	464b      	mov	r3, r9
 800d01e:	e793      	b.n	800cf48 <_printf_float+0x1d8>
 800d020:	2301      	movs	r3, #1
 800d022:	465a      	mov	r2, fp
 800d024:	4631      	mov	r1, r6
 800d026:	4628      	mov	r0, r5
 800d028:	47b8      	blx	r7
 800d02a:	3001      	adds	r0, #1
 800d02c:	f43f aefb 	beq.w	800ce26 <_printf_float+0xb6>
 800d030:	f10a 0a01 	add.w	sl, sl, #1
 800d034:	e7ee      	b.n	800d014 <_printf_float+0x2a4>
 800d036:	bf00      	nop
 800d038:	7fefffff 	.word	0x7fefffff
 800d03c:	0800f9b8 	.word	0x0800f9b8
 800d040:	0800f9bc 	.word	0x0800f9bc
 800d044:	0800f9c0 	.word	0x0800f9c0
 800d048:	0800f9c4 	.word	0x0800f9c4
 800d04c:	0800f9c8 	.word	0x0800f9c8
 800d050:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d052:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d056:	4553      	cmp	r3, sl
 800d058:	bfa8      	it	ge
 800d05a:	4653      	movge	r3, sl
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	4699      	mov	r9, r3
 800d060:	dc36      	bgt.n	800d0d0 <_printf_float+0x360>
 800d062:	f04f 0b00 	mov.w	fp, #0
 800d066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d06a:	f104 021a 	add.w	r2, r4, #26
 800d06e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d070:	9306      	str	r3, [sp, #24]
 800d072:	eba3 0309 	sub.w	r3, r3, r9
 800d076:	455b      	cmp	r3, fp
 800d078:	dc31      	bgt.n	800d0de <_printf_float+0x36e>
 800d07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07c:	459a      	cmp	sl, r3
 800d07e:	dc3a      	bgt.n	800d0f6 <_printf_float+0x386>
 800d080:	6823      	ldr	r3, [r4, #0]
 800d082:	07da      	lsls	r2, r3, #31
 800d084:	d437      	bmi.n	800d0f6 <_printf_float+0x386>
 800d086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d088:	ebaa 0903 	sub.w	r9, sl, r3
 800d08c:	9b06      	ldr	r3, [sp, #24]
 800d08e:	ebaa 0303 	sub.w	r3, sl, r3
 800d092:	4599      	cmp	r9, r3
 800d094:	bfa8      	it	ge
 800d096:	4699      	movge	r9, r3
 800d098:	f1b9 0f00 	cmp.w	r9, #0
 800d09c:	dc33      	bgt.n	800d106 <_printf_float+0x396>
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0a6:	f104 0b1a 	add.w	fp, r4, #26
 800d0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ac:	ebaa 0303 	sub.w	r3, sl, r3
 800d0b0:	eba3 0309 	sub.w	r3, r3, r9
 800d0b4:	4543      	cmp	r3, r8
 800d0b6:	f77f af79 	ble.w	800cfac <_printf_float+0x23c>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	465a      	mov	r2, fp
 800d0be:	4631      	mov	r1, r6
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b8      	blx	r7
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	f43f aeae 	beq.w	800ce26 <_printf_float+0xb6>
 800d0ca:	f108 0801 	add.w	r8, r8, #1
 800d0ce:	e7ec      	b.n	800d0aa <_printf_float+0x33a>
 800d0d0:	4642      	mov	r2, r8
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b8      	blx	r7
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d1c2      	bne.n	800d062 <_printf_float+0x2f2>
 800d0dc:	e6a3      	b.n	800ce26 <_printf_float+0xb6>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4631      	mov	r1, r6
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	9206      	str	r2, [sp, #24]
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f43f ae9c 	beq.w	800ce26 <_printf_float+0xb6>
 800d0ee:	9a06      	ldr	r2, [sp, #24]
 800d0f0:	f10b 0b01 	add.w	fp, fp, #1
 800d0f4:	e7bb      	b.n	800d06e <_printf_float+0x2fe>
 800d0f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	47b8      	blx	r7
 800d100:	3001      	adds	r0, #1
 800d102:	d1c0      	bne.n	800d086 <_printf_float+0x316>
 800d104:	e68f      	b.n	800ce26 <_printf_float+0xb6>
 800d106:	9a06      	ldr	r2, [sp, #24]
 800d108:	464b      	mov	r3, r9
 800d10a:	4442      	add	r2, r8
 800d10c:	4631      	mov	r1, r6
 800d10e:	4628      	mov	r0, r5
 800d110:	47b8      	blx	r7
 800d112:	3001      	adds	r0, #1
 800d114:	d1c3      	bne.n	800d09e <_printf_float+0x32e>
 800d116:	e686      	b.n	800ce26 <_printf_float+0xb6>
 800d118:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d11c:	f1ba 0f01 	cmp.w	sl, #1
 800d120:	dc01      	bgt.n	800d126 <_printf_float+0x3b6>
 800d122:	07db      	lsls	r3, r3, #31
 800d124:	d536      	bpl.n	800d194 <_printf_float+0x424>
 800d126:	2301      	movs	r3, #1
 800d128:	4642      	mov	r2, r8
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f ae78 	beq.w	800ce26 <_printf_float+0xb6>
 800d136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d13a:	4631      	mov	r1, r6
 800d13c:	4628      	mov	r0, r5
 800d13e:	47b8      	blx	r7
 800d140:	3001      	adds	r0, #1
 800d142:	f43f ae70 	beq.w	800ce26 <_printf_float+0xb6>
 800d146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d14a:	2200      	movs	r2, #0
 800d14c:	2300      	movs	r3, #0
 800d14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d152:	f7f3 fcc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d156:	b9c0      	cbnz	r0, 800d18a <_printf_float+0x41a>
 800d158:	4653      	mov	r3, sl
 800d15a:	f108 0201 	add.w	r2, r8, #1
 800d15e:	4631      	mov	r1, r6
 800d160:	4628      	mov	r0, r5
 800d162:	47b8      	blx	r7
 800d164:	3001      	adds	r0, #1
 800d166:	d10c      	bne.n	800d182 <_printf_float+0x412>
 800d168:	e65d      	b.n	800ce26 <_printf_float+0xb6>
 800d16a:	2301      	movs	r3, #1
 800d16c:	465a      	mov	r2, fp
 800d16e:	4631      	mov	r1, r6
 800d170:	4628      	mov	r0, r5
 800d172:	47b8      	blx	r7
 800d174:	3001      	adds	r0, #1
 800d176:	f43f ae56 	beq.w	800ce26 <_printf_float+0xb6>
 800d17a:	f108 0801 	add.w	r8, r8, #1
 800d17e:	45d0      	cmp	r8, sl
 800d180:	dbf3      	blt.n	800d16a <_printf_float+0x3fa>
 800d182:	464b      	mov	r3, r9
 800d184:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d188:	e6df      	b.n	800cf4a <_printf_float+0x1da>
 800d18a:	f04f 0800 	mov.w	r8, #0
 800d18e:	f104 0b1a 	add.w	fp, r4, #26
 800d192:	e7f4      	b.n	800d17e <_printf_float+0x40e>
 800d194:	2301      	movs	r3, #1
 800d196:	4642      	mov	r2, r8
 800d198:	e7e1      	b.n	800d15e <_printf_float+0x3ee>
 800d19a:	2301      	movs	r3, #1
 800d19c:	464a      	mov	r2, r9
 800d19e:	4631      	mov	r1, r6
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b8      	blx	r7
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	f43f ae3e 	beq.w	800ce26 <_printf_float+0xb6>
 800d1aa:	f108 0801 	add.w	r8, r8, #1
 800d1ae:	68e3      	ldr	r3, [r4, #12]
 800d1b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1b2:	1a5b      	subs	r3, r3, r1
 800d1b4:	4543      	cmp	r3, r8
 800d1b6:	dcf0      	bgt.n	800d19a <_printf_float+0x42a>
 800d1b8:	e6fc      	b.n	800cfb4 <_printf_float+0x244>
 800d1ba:	f04f 0800 	mov.w	r8, #0
 800d1be:	f104 0919 	add.w	r9, r4, #25
 800d1c2:	e7f4      	b.n	800d1ae <_printf_float+0x43e>

0800d1c4 <_printf_common>:
 800d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	4698      	mov	r8, r3
 800d1cc:	688a      	ldr	r2, [r1, #8]
 800d1ce:	690b      	ldr	r3, [r1, #16]
 800d1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	bfb8      	it	lt
 800d1d8:	4613      	movlt	r3, r2
 800d1da:	6033      	str	r3, [r6, #0]
 800d1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	b10a      	cbz	r2, 800d1ea <_printf_common+0x26>
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	6033      	str	r3, [r6, #0]
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	0699      	lsls	r1, r3, #26
 800d1ee:	bf42      	ittt	mi
 800d1f0:	6833      	ldrmi	r3, [r6, #0]
 800d1f2:	3302      	addmi	r3, #2
 800d1f4:	6033      	strmi	r3, [r6, #0]
 800d1f6:	6825      	ldr	r5, [r4, #0]
 800d1f8:	f015 0506 	ands.w	r5, r5, #6
 800d1fc:	d106      	bne.n	800d20c <_printf_common+0x48>
 800d1fe:	f104 0a19 	add.w	sl, r4, #25
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	6832      	ldr	r2, [r6, #0]
 800d206:	1a9b      	subs	r3, r3, r2
 800d208:	42ab      	cmp	r3, r5
 800d20a:	dc26      	bgt.n	800d25a <_printf_common+0x96>
 800d20c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d210:	6822      	ldr	r2, [r4, #0]
 800d212:	3b00      	subs	r3, #0
 800d214:	bf18      	it	ne
 800d216:	2301      	movne	r3, #1
 800d218:	0692      	lsls	r2, r2, #26
 800d21a:	d42b      	bmi.n	800d274 <_printf_common+0xb0>
 800d21c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d220:	4641      	mov	r1, r8
 800d222:	4638      	mov	r0, r7
 800d224:	47c8      	blx	r9
 800d226:	3001      	adds	r0, #1
 800d228:	d01e      	beq.n	800d268 <_printf_common+0xa4>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	6922      	ldr	r2, [r4, #16]
 800d22e:	f003 0306 	and.w	r3, r3, #6
 800d232:	2b04      	cmp	r3, #4
 800d234:	bf02      	ittt	eq
 800d236:	68e5      	ldreq	r5, [r4, #12]
 800d238:	6833      	ldreq	r3, [r6, #0]
 800d23a:	1aed      	subeq	r5, r5, r3
 800d23c:	68a3      	ldr	r3, [r4, #8]
 800d23e:	bf0c      	ite	eq
 800d240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d244:	2500      	movne	r5, #0
 800d246:	4293      	cmp	r3, r2
 800d248:	bfc4      	itt	gt
 800d24a:	1a9b      	subgt	r3, r3, r2
 800d24c:	18ed      	addgt	r5, r5, r3
 800d24e:	2600      	movs	r6, #0
 800d250:	341a      	adds	r4, #26
 800d252:	42b5      	cmp	r5, r6
 800d254:	d11a      	bne.n	800d28c <_printf_common+0xc8>
 800d256:	2000      	movs	r0, #0
 800d258:	e008      	b.n	800d26c <_printf_common+0xa8>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4652      	mov	r2, sl
 800d25e:	4641      	mov	r1, r8
 800d260:	4638      	mov	r0, r7
 800d262:	47c8      	blx	r9
 800d264:	3001      	adds	r0, #1
 800d266:	d103      	bne.n	800d270 <_printf_common+0xac>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d270:	3501      	adds	r5, #1
 800d272:	e7c6      	b.n	800d202 <_printf_common+0x3e>
 800d274:	18e1      	adds	r1, r4, r3
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	2030      	movs	r0, #48	@ 0x30
 800d27a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d27e:	4422      	add	r2, r4
 800d280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d288:	3302      	adds	r3, #2
 800d28a:	e7c7      	b.n	800d21c <_printf_common+0x58>
 800d28c:	2301      	movs	r3, #1
 800d28e:	4622      	mov	r2, r4
 800d290:	4641      	mov	r1, r8
 800d292:	4638      	mov	r0, r7
 800d294:	47c8      	blx	r9
 800d296:	3001      	adds	r0, #1
 800d298:	d0e6      	beq.n	800d268 <_printf_common+0xa4>
 800d29a:	3601      	adds	r6, #1
 800d29c:	e7d9      	b.n	800d252 <_printf_common+0x8e>
	...

0800d2a0 <_printf_i>:
 800d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	7e0f      	ldrb	r7, [r1, #24]
 800d2a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2a8:	2f78      	cmp	r7, #120	@ 0x78
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2b6:	d807      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2b8:	2f62      	cmp	r7, #98	@ 0x62
 800d2ba:	d80a      	bhi.n	800d2d2 <_printf_i+0x32>
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	f000 80d2 	beq.w	800d466 <_printf_i+0x1c6>
 800d2c2:	2f58      	cmp	r7, #88	@ 0x58
 800d2c4:	f000 80b9 	beq.w	800d43a <_printf_i+0x19a>
 800d2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2d0:	e03a      	b.n	800d348 <_printf_i+0xa8>
 800d2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2d6:	2b15      	cmp	r3, #21
 800d2d8:	d8f6      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2da:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e0 <_printf_i+0x40>)
 800d2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e0:	0800d339 	.word	0x0800d339
 800d2e4:	0800d34d 	.word	0x0800d34d
 800d2e8:	0800d2c9 	.word	0x0800d2c9
 800d2ec:	0800d2c9 	.word	0x0800d2c9
 800d2f0:	0800d2c9 	.word	0x0800d2c9
 800d2f4:	0800d2c9 	.word	0x0800d2c9
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d2c9 	.word	0x0800d2c9
 800d300:	0800d2c9 	.word	0x0800d2c9
 800d304:	0800d2c9 	.word	0x0800d2c9
 800d308:	0800d2c9 	.word	0x0800d2c9
 800d30c:	0800d44d 	.word	0x0800d44d
 800d310:	0800d377 	.word	0x0800d377
 800d314:	0800d407 	.word	0x0800d407
 800d318:	0800d2c9 	.word	0x0800d2c9
 800d31c:	0800d2c9 	.word	0x0800d2c9
 800d320:	0800d46f 	.word	0x0800d46f
 800d324:	0800d2c9 	.word	0x0800d2c9
 800d328:	0800d377 	.word	0x0800d377
 800d32c:	0800d2c9 	.word	0x0800d2c9
 800d330:	0800d2c9 	.word	0x0800d2c9
 800d334:	0800d40f 	.word	0x0800d40f
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6032      	str	r2, [r6, #0]
 800d340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e09d      	b.n	800d488 <_printf_i+0x1e8>
 800d34c:	6833      	ldr	r3, [r6, #0]
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	1d19      	adds	r1, r3, #4
 800d352:	6031      	str	r1, [r6, #0]
 800d354:	0606      	lsls	r6, r0, #24
 800d356:	d501      	bpl.n	800d35c <_printf_i+0xbc>
 800d358:	681d      	ldr	r5, [r3, #0]
 800d35a:	e003      	b.n	800d364 <_printf_i+0xc4>
 800d35c:	0645      	lsls	r5, r0, #25
 800d35e:	d5fb      	bpl.n	800d358 <_printf_i+0xb8>
 800d360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d364:	2d00      	cmp	r5, #0
 800d366:	da03      	bge.n	800d370 <_printf_i+0xd0>
 800d368:	232d      	movs	r3, #45	@ 0x2d
 800d36a:	426d      	negs	r5, r5
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d370:	4859      	ldr	r0, [pc, #356]	@ (800d4d8 <_printf_i+0x238>)
 800d372:	230a      	movs	r3, #10
 800d374:	e011      	b.n	800d39a <_printf_i+0xfa>
 800d376:	6821      	ldr	r1, [r4, #0]
 800d378:	6833      	ldr	r3, [r6, #0]
 800d37a:	0608      	lsls	r0, r1, #24
 800d37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d380:	d402      	bmi.n	800d388 <_printf_i+0xe8>
 800d382:	0649      	lsls	r1, r1, #25
 800d384:	bf48      	it	mi
 800d386:	b2ad      	uxthmi	r5, r5
 800d388:	2f6f      	cmp	r7, #111	@ 0x6f
 800d38a:	4853      	ldr	r0, [pc, #332]	@ (800d4d8 <_printf_i+0x238>)
 800d38c:	6033      	str	r3, [r6, #0]
 800d38e:	bf14      	ite	ne
 800d390:	230a      	movne	r3, #10
 800d392:	2308      	moveq	r3, #8
 800d394:	2100      	movs	r1, #0
 800d396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d39a:	6866      	ldr	r6, [r4, #4]
 800d39c:	60a6      	str	r6, [r4, #8]
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	bfa2      	ittt	ge
 800d3a2:	6821      	ldrge	r1, [r4, #0]
 800d3a4:	f021 0104 	bicge.w	r1, r1, #4
 800d3a8:	6021      	strge	r1, [r4, #0]
 800d3aa:	b90d      	cbnz	r5, 800d3b0 <_printf_i+0x110>
 800d3ac:	2e00      	cmp	r6, #0
 800d3ae:	d04b      	beq.n	800d448 <_printf_i+0x1a8>
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3b6:	fb03 5711 	mls	r7, r3, r1, r5
 800d3ba:	5dc7      	ldrb	r7, [r0, r7]
 800d3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c0:	462f      	mov	r7, r5
 800d3c2:	42bb      	cmp	r3, r7
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	d9f4      	bls.n	800d3b2 <_printf_i+0x112>
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d10b      	bne.n	800d3e4 <_printf_i+0x144>
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	07df      	lsls	r7, r3, #31
 800d3d0:	d508      	bpl.n	800d3e4 <_printf_i+0x144>
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	6861      	ldr	r1, [r4, #4]
 800d3d6:	4299      	cmp	r1, r3
 800d3d8:	bfde      	ittt	le
 800d3da:	2330      	movle	r3, #48	@ 0x30
 800d3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3e4:	1b92      	subs	r2, r2, r6
 800d3e6:	6122      	str	r2, [r4, #16]
 800d3e8:	f8cd a000 	str.w	sl, [sp]
 800d3ec:	464b      	mov	r3, r9
 800d3ee:	aa03      	add	r2, sp, #12
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	f7ff fee6 	bl	800d1c4 <_printf_common>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d14a      	bne.n	800d492 <_printf_i+0x1f2>
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d400:	b004      	add	sp, #16
 800d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	f043 0320 	orr.w	r3, r3, #32
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	4833      	ldr	r0, [pc, #204]	@ (800d4dc <_printf_i+0x23c>)
 800d410:	2778      	movs	r7, #120	@ 0x78
 800d412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	6831      	ldr	r1, [r6, #0]
 800d41a:	061f      	lsls	r7, r3, #24
 800d41c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d420:	d402      	bmi.n	800d428 <_printf_i+0x188>
 800d422:	065f      	lsls	r7, r3, #25
 800d424:	bf48      	it	mi
 800d426:	b2ad      	uxthmi	r5, r5
 800d428:	6031      	str	r1, [r6, #0]
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	bf44      	itt	mi
 800d42e:	f043 0320 	orrmi.w	r3, r3, #32
 800d432:	6023      	strmi	r3, [r4, #0]
 800d434:	b11d      	cbz	r5, 800d43e <_printf_i+0x19e>
 800d436:	2310      	movs	r3, #16
 800d438:	e7ac      	b.n	800d394 <_printf_i+0xf4>
 800d43a:	4827      	ldr	r0, [pc, #156]	@ (800d4d8 <_printf_i+0x238>)
 800d43c:	e7e9      	b.n	800d412 <_printf_i+0x172>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	f023 0320 	bic.w	r3, r3, #32
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	e7f6      	b.n	800d436 <_printf_i+0x196>
 800d448:	4616      	mov	r6, r2
 800d44a:	e7bd      	b.n	800d3c8 <_printf_i+0x128>
 800d44c:	6833      	ldr	r3, [r6, #0]
 800d44e:	6825      	ldr	r5, [r4, #0]
 800d450:	6961      	ldr	r1, [r4, #20]
 800d452:	1d18      	adds	r0, r3, #4
 800d454:	6030      	str	r0, [r6, #0]
 800d456:	062e      	lsls	r6, r5, #24
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0x1c0>
 800d45c:	6019      	str	r1, [r3, #0]
 800d45e:	e002      	b.n	800d466 <_printf_i+0x1c6>
 800d460:	0668      	lsls	r0, r5, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0x1bc>
 800d464:	8019      	strh	r1, [r3, #0]
 800d466:	2300      	movs	r3, #0
 800d468:	6123      	str	r3, [r4, #16]
 800d46a:	4616      	mov	r6, r2
 800d46c:	e7bc      	b.n	800d3e8 <_printf_i+0x148>
 800d46e:	6833      	ldr	r3, [r6, #0]
 800d470:	1d1a      	adds	r2, r3, #4
 800d472:	6032      	str	r2, [r6, #0]
 800d474:	681e      	ldr	r6, [r3, #0]
 800d476:	6862      	ldr	r2, [r4, #4]
 800d478:	2100      	movs	r1, #0
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7f2 feb0 	bl	80001e0 <memchr>
 800d480:	b108      	cbz	r0, 800d486 <_printf_i+0x1e6>
 800d482:	1b80      	subs	r0, r0, r6
 800d484:	6060      	str	r0, [r4, #4]
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	6123      	str	r3, [r4, #16]
 800d48a:	2300      	movs	r3, #0
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d490:	e7aa      	b.n	800d3e8 <_printf_i+0x148>
 800d492:	6923      	ldr	r3, [r4, #16]
 800d494:	4632      	mov	r2, r6
 800d496:	4649      	mov	r1, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	47d0      	blx	sl
 800d49c:	3001      	adds	r0, #1
 800d49e:	d0ad      	beq.n	800d3fc <_printf_i+0x15c>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	079b      	lsls	r3, r3, #30
 800d4a4:	d413      	bmi.n	800d4ce <_printf_i+0x22e>
 800d4a6:	68e0      	ldr	r0, [r4, #12]
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	4298      	cmp	r0, r3
 800d4ac:	bfb8      	it	lt
 800d4ae:	4618      	movlt	r0, r3
 800d4b0:	e7a6      	b.n	800d400 <_printf_i+0x160>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	47d0      	blx	sl
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d09d      	beq.n	800d3fc <_printf_i+0x15c>
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	9903      	ldr	r1, [sp, #12]
 800d4c6:	1a5b      	subs	r3, r3, r1
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dcf2      	bgt.n	800d4b2 <_printf_i+0x212>
 800d4cc:	e7eb      	b.n	800d4a6 <_printf_i+0x206>
 800d4ce:	2500      	movs	r5, #0
 800d4d0:	f104 0619 	add.w	r6, r4, #25
 800d4d4:	e7f5      	b.n	800d4c2 <_printf_i+0x222>
 800d4d6:	bf00      	nop
 800d4d8:	0800f9ca 	.word	0x0800f9ca
 800d4dc:	0800f9db 	.word	0x0800f9db

0800d4e0 <std>:
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4ee:	6083      	str	r3, [r0, #8]
 800d4f0:	8181      	strh	r1, [r0, #12]
 800d4f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4f4:	81c2      	strh	r2, [r0, #14]
 800d4f6:	6183      	str	r3, [r0, #24]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	2208      	movs	r2, #8
 800d4fc:	305c      	adds	r0, #92	@ 0x5c
 800d4fe:	f000 f914 	bl	800d72a <memset>
 800d502:	4b0d      	ldr	r3, [pc, #52]	@ (800d538 <std+0x58>)
 800d504:	6263      	str	r3, [r4, #36]	@ 0x24
 800d506:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <std+0x5c>)
 800d508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d50a:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <std+0x60>)
 800d50c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d50e:	4b0d      	ldr	r3, [pc, #52]	@ (800d544 <std+0x64>)
 800d510:	6323      	str	r3, [r4, #48]	@ 0x30
 800d512:	4b0d      	ldr	r3, [pc, #52]	@ (800d548 <std+0x68>)
 800d514:	6224      	str	r4, [r4, #32]
 800d516:	429c      	cmp	r4, r3
 800d518:	d006      	beq.n	800d528 <std+0x48>
 800d51a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d51e:	4294      	cmp	r4, r2
 800d520:	d002      	beq.n	800d528 <std+0x48>
 800d522:	33d0      	adds	r3, #208	@ 0xd0
 800d524:	429c      	cmp	r4, r3
 800d526:	d105      	bne.n	800d534 <std+0x54>
 800d528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d530:	f000 ba22 	b.w	800d978 <__retarget_lock_init_recursive>
 800d534:	bd10      	pop	{r4, pc}
 800d536:	bf00      	nop
 800d538:	0800d6a5 	.word	0x0800d6a5
 800d53c:	0800d6c7 	.word	0x0800d6c7
 800d540:	0800d6ff 	.word	0x0800d6ff
 800d544:	0800d723 	.word	0x0800d723
 800d548:	20006184 	.word	0x20006184

0800d54c <stdio_exit_handler>:
 800d54c:	4a02      	ldr	r2, [pc, #8]	@ (800d558 <stdio_exit_handler+0xc>)
 800d54e:	4903      	ldr	r1, [pc, #12]	@ (800d55c <stdio_exit_handler+0x10>)
 800d550:	4803      	ldr	r0, [pc, #12]	@ (800d560 <stdio_exit_handler+0x14>)
 800d552:	f000 b869 	b.w	800d628 <_fwalk_sglue>
 800d556:	bf00      	nop
 800d558:	20000100 	.word	0x20000100
 800d55c:	0800f189 	.word	0x0800f189
 800d560:	20000110 	.word	0x20000110

0800d564 <cleanup_stdio>:
 800d564:	6841      	ldr	r1, [r0, #4]
 800d566:	4b0c      	ldr	r3, [pc, #48]	@ (800d598 <cleanup_stdio+0x34>)
 800d568:	4299      	cmp	r1, r3
 800d56a:	b510      	push	{r4, lr}
 800d56c:	4604      	mov	r4, r0
 800d56e:	d001      	beq.n	800d574 <cleanup_stdio+0x10>
 800d570:	f001 fe0a 	bl	800f188 <_fflush_r>
 800d574:	68a1      	ldr	r1, [r4, #8]
 800d576:	4b09      	ldr	r3, [pc, #36]	@ (800d59c <cleanup_stdio+0x38>)
 800d578:	4299      	cmp	r1, r3
 800d57a:	d002      	beq.n	800d582 <cleanup_stdio+0x1e>
 800d57c:	4620      	mov	r0, r4
 800d57e:	f001 fe03 	bl	800f188 <_fflush_r>
 800d582:	68e1      	ldr	r1, [r4, #12]
 800d584:	4b06      	ldr	r3, [pc, #24]	@ (800d5a0 <cleanup_stdio+0x3c>)
 800d586:	4299      	cmp	r1, r3
 800d588:	d004      	beq.n	800d594 <cleanup_stdio+0x30>
 800d58a:	4620      	mov	r0, r4
 800d58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d590:	f001 bdfa 	b.w	800f188 <_fflush_r>
 800d594:	bd10      	pop	{r4, pc}
 800d596:	bf00      	nop
 800d598:	20006184 	.word	0x20006184
 800d59c:	200061ec 	.word	0x200061ec
 800d5a0:	20006254 	.word	0x20006254

0800d5a4 <global_stdio_init.part.0>:
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d4 <global_stdio_init.part.0+0x30>)
 800d5a8:	4c0b      	ldr	r4, [pc, #44]	@ (800d5d8 <global_stdio_init.part.0+0x34>)
 800d5aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d5dc <global_stdio_init.part.0+0x38>)
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2104      	movs	r1, #4
 800d5b4:	f7ff ff94 	bl	800d4e0 <std>
 800d5b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5bc:	2201      	movs	r2, #1
 800d5be:	2109      	movs	r1, #9
 800d5c0:	f7ff ff8e 	bl	800d4e0 <std>
 800d5c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5c8:	2202      	movs	r2, #2
 800d5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ce:	2112      	movs	r1, #18
 800d5d0:	f7ff bf86 	b.w	800d4e0 <std>
 800d5d4:	200062bc 	.word	0x200062bc
 800d5d8:	20006184 	.word	0x20006184
 800d5dc:	0800d54d 	.word	0x0800d54d

0800d5e0 <__sfp_lock_acquire>:
 800d5e0:	4801      	ldr	r0, [pc, #4]	@ (800d5e8 <__sfp_lock_acquire+0x8>)
 800d5e2:	f000 b9ca 	b.w	800d97a <__retarget_lock_acquire_recursive>
 800d5e6:	bf00      	nop
 800d5e8:	200062c5 	.word	0x200062c5

0800d5ec <__sfp_lock_release>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	@ (800d5f4 <__sfp_lock_release+0x8>)
 800d5ee:	f000 b9c5 	b.w	800d97c <__retarget_lock_release_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	200062c5 	.word	0x200062c5

0800d5f8 <__sinit>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	f7ff fff0 	bl	800d5e0 <__sfp_lock_acquire>
 800d600:	6a23      	ldr	r3, [r4, #32]
 800d602:	b11b      	cbz	r3, 800d60c <__sinit+0x14>
 800d604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d608:	f7ff bff0 	b.w	800d5ec <__sfp_lock_release>
 800d60c:	4b04      	ldr	r3, [pc, #16]	@ (800d620 <__sinit+0x28>)
 800d60e:	6223      	str	r3, [r4, #32]
 800d610:	4b04      	ldr	r3, [pc, #16]	@ (800d624 <__sinit+0x2c>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1f5      	bne.n	800d604 <__sinit+0xc>
 800d618:	f7ff ffc4 	bl	800d5a4 <global_stdio_init.part.0>
 800d61c:	e7f2      	b.n	800d604 <__sinit+0xc>
 800d61e:	bf00      	nop
 800d620:	0800d565 	.word	0x0800d565
 800d624:	200062bc 	.word	0x200062bc

0800d628 <_fwalk_sglue>:
 800d628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d62c:	4607      	mov	r7, r0
 800d62e:	4688      	mov	r8, r1
 800d630:	4614      	mov	r4, r2
 800d632:	2600      	movs	r6, #0
 800d634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d638:	f1b9 0901 	subs.w	r9, r9, #1
 800d63c:	d505      	bpl.n	800d64a <_fwalk_sglue+0x22>
 800d63e:	6824      	ldr	r4, [r4, #0]
 800d640:	2c00      	cmp	r4, #0
 800d642:	d1f7      	bne.n	800d634 <_fwalk_sglue+0xc>
 800d644:	4630      	mov	r0, r6
 800d646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64a:	89ab      	ldrh	r3, [r5, #12]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d907      	bls.n	800d660 <_fwalk_sglue+0x38>
 800d650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d654:	3301      	adds	r3, #1
 800d656:	d003      	beq.n	800d660 <_fwalk_sglue+0x38>
 800d658:	4629      	mov	r1, r5
 800d65a:	4638      	mov	r0, r7
 800d65c:	47c0      	blx	r8
 800d65e:	4306      	orrs	r6, r0
 800d660:	3568      	adds	r5, #104	@ 0x68
 800d662:	e7e9      	b.n	800d638 <_fwalk_sglue+0x10>

0800d664 <siprintf>:
 800d664:	b40e      	push	{r1, r2, r3}
 800d666:	b500      	push	{lr}
 800d668:	b09c      	sub	sp, #112	@ 0x70
 800d66a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d66c:	9002      	str	r0, [sp, #8]
 800d66e:	9006      	str	r0, [sp, #24]
 800d670:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d674:	4809      	ldr	r0, [pc, #36]	@ (800d69c <siprintf+0x38>)
 800d676:	9107      	str	r1, [sp, #28]
 800d678:	9104      	str	r1, [sp, #16]
 800d67a:	4909      	ldr	r1, [pc, #36]	@ (800d6a0 <siprintf+0x3c>)
 800d67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d680:	9105      	str	r1, [sp, #20]
 800d682:	6800      	ldr	r0, [r0, #0]
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	a902      	add	r1, sp, #8
 800d688:	f001 fbfe 	bl	800ee88 <_svfiprintf_r>
 800d68c:	9b02      	ldr	r3, [sp, #8]
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
 800d692:	b01c      	add	sp, #112	@ 0x70
 800d694:	f85d eb04 	ldr.w	lr, [sp], #4
 800d698:	b003      	add	sp, #12
 800d69a:	4770      	bx	lr
 800d69c:	2000010c 	.word	0x2000010c
 800d6a0:	ffff0208 	.word	0xffff0208

0800d6a4 <__sread>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ac:	f000 f8f2 	bl	800d894 <_read_r>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	bfab      	itete	ge
 800d6b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6b8:	181b      	addge	r3, r3, r0
 800d6ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6be:	bfac      	ite	ge
 800d6c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6c2:	81a3      	strhlt	r3, [r4, #12]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <__swrite>:
 800d6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ca:	461f      	mov	r7, r3
 800d6cc:	898b      	ldrh	r3, [r1, #12]
 800d6ce:	05db      	lsls	r3, r3, #23
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	4616      	mov	r6, r2
 800d6d6:	d505      	bpl.n	800d6e4 <__swrite+0x1e>
 800d6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6dc:	2302      	movs	r3, #2
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f000 f8c6 	bl	800d870 <_lseek_r>
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6ee:	81a3      	strh	r3, [r4, #12]
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	463b      	mov	r3, r7
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fa:	f000 b901 	b.w	800d900 <_write_r>

0800d6fe <__sseek>:
 800d6fe:	b510      	push	{r4, lr}
 800d700:	460c      	mov	r4, r1
 800d702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d706:	f000 f8b3 	bl	800d870 <_lseek_r>
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	bf15      	itete	ne
 800d710:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d71a:	81a3      	strheq	r3, [r4, #12]
 800d71c:	bf18      	it	ne
 800d71e:	81a3      	strhne	r3, [r4, #12]
 800d720:	bd10      	pop	{r4, pc}

0800d722 <__sclose>:
 800d722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d726:	f000 b83d 	b.w	800d7a4 <_close_r>

0800d72a <memset>:
 800d72a:	4402      	add	r2, r0
 800d72c:	4603      	mov	r3, r0
 800d72e:	4293      	cmp	r3, r2
 800d730:	d100      	bne.n	800d734 <memset+0xa>
 800d732:	4770      	bx	lr
 800d734:	f803 1b01 	strb.w	r1, [r3], #1
 800d738:	e7f9      	b.n	800d72e <memset+0x4>

0800d73a <_raise_r>:
 800d73a:	291f      	cmp	r1, #31
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4605      	mov	r5, r0
 800d740:	460c      	mov	r4, r1
 800d742:	d904      	bls.n	800d74e <_raise_r+0x14>
 800d744:	2316      	movs	r3, #22
 800d746:	6003      	str	r3, [r0, #0]
 800d748:	f04f 30ff 	mov.w	r0, #4294967295
 800d74c:	bd38      	pop	{r3, r4, r5, pc}
 800d74e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d750:	b112      	cbz	r2, 800d758 <_raise_r+0x1e>
 800d752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d756:	b94b      	cbnz	r3, 800d76c <_raise_r+0x32>
 800d758:	4628      	mov	r0, r5
 800d75a:	f000 f8bf 	bl	800d8dc <_getpid_r>
 800d75e:	4622      	mov	r2, r4
 800d760:	4601      	mov	r1, r0
 800d762:	4628      	mov	r0, r5
 800d764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d768:	f000 b8a6 	b.w	800d8b8 <_kill_r>
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d00a      	beq.n	800d786 <_raise_r+0x4c>
 800d770:	1c59      	adds	r1, r3, #1
 800d772:	d103      	bne.n	800d77c <_raise_r+0x42>
 800d774:	2316      	movs	r3, #22
 800d776:	6003      	str	r3, [r0, #0]
 800d778:	2001      	movs	r0, #1
 800d77a:	e7e7      	b.n	800d74c <_raise_r+0x12>
 800d77c:	2100      	movs	r1, #0
 800d77e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d782:	4620      	mov	r0, r4
 800d784:	4798      	blx	r3
 800d786:	2000      	movs	r0, #0
 800d788:	e7e0      	b.n	800d74c <_raise_r+0x12>
	...

0800d78c <raise>:
 800d78c:	4b02      	ldr	r3, [pc, #8]	@ (800d798 <raise+0xc>)
 800d78e:	4601      	mov	r1, r0
 800d790:	6818      	ldr	r0, [r3, #0]
 800d792:	f7ff bfd2 	b.w	800d73a <_raise_r>
 800d796:	bf00      	nop
 800d798:	2000010c 	.word	0x2000010c

0800d79c <_localeconv_r>:
 800d79c:	4800      	ldr	r0, [pc, #0]	@ (800d7a0 <_localeconv_r+0x4>)
 800d79e:	4770      	bx	lr
 800d7a0:	2000024c 	.word	0x2000024c

0800d7a4 <_close_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4d06      	ldr	r5, [pc, #24]	@ (800d7c0 <_close_r+0x1c>)
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	602b      	str	r3, [r5, #0]
 800d7b0:	f7f4 f95c 	bl	8001a6c <_close>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d102      	bne.n	800d7be <_close_r+0x1a>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	b103      	cbz	r3, 800d7be <_close_r+0x1a>
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	200062c0 	.word	0x200062c0

0800d7c4 <_reclaim_reent>:
 800d7c4:	4b29      	ldr	r3, [pc, #164]	@ (800d86c <_reclaim_reent+0xa8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4283      	cmp	r3, r0
 800d7ca:	b570      	push	{r4, r5, r6, lr}
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	d04b      	beq.n	800d868 <_reclaim_reent+0xa4>
 800d7d0:	69c3      	ldr	r3, [r0, #28]
 800d7d2:	b1ab      	cbz	r3, 800d800 <_reclaim_reent+0x3c>
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	b16b      	cbz	r3, 800d7f4 <_reclaim_reent+0x30>
 800d7d8:	2500      	movs	r5, #0
 800d7da:	69e3      	ldr	r3, [r4, #28]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	5959      	ldr	r1, [r3, r5]
 800d7e0:	2900      	cmp	r1, #0
 800d7e2:	d13b      	bne.n	800d85c <_reclaim_reent+0x98>
 800d7e4:	3504      	adds	r5, #4
 800d7e6:	2d80      	cmp	r5, #128	@ 0x80
 800d7e8:	d1f7      	bne.n	800d7da <_reclaim_reent+0x16>
 800d7ea:	69e3      	ldr	r3, [r4, #28]
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	68d9      	ldr	r1, [r3, #12]
 800d7f0:	f000 ff22 	bl	800e638 <_free_r>
 800d7f4:	69e3      	ldr	r3, [r4, #28]
 800d7f6:	6819      	ldr	r1, [r3, #0]
 800d7f8:	b111      	cbz	r1, 800d800 <_reclaim_reent+0x3c>
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 ff1c 	bl	800e638 <_free_r>
 800d800:	6961      	ldr	r1, [r4, #20]
 800d802:	b111      	cbz	r1, 800d80a <_reclaim_reent+0x46>
 800d804:	4620      	mov	r0, r4
 800d806:	f000 ff17 	bl	800e638 <_free_r>
 800d80a:	69e1      	ldr	r1, [r4, #28]
 800d80c:	b111      	cbz	r1, 800d814 <_reclaim_reent+0x50>
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 ff12 	bl	800e638 <_free_r>
 800d814:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d816:	b111      	cbz	r1, 800d81e <_reclaim_reent+0x5a>
 800d818:	4620      	mov	r0, r4
 800d81a:	f000 ff0d 	bl	800e638 <_free_r>
 800d81e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d820:	b111      	cbz	r1, 800d828 <_reclaim_reent+0x64>
 800d822:	4620      	mov	r0, r4
 800d824:	f000 ff08 	bl	800e638 <_free_r>
 800d828:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d82a:	b111      	cbz	r1, 800d832 <_reclaim_reent+0x6e>
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 ff03 	bl	800e638 <_free_r>
 800d832:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d834:	b111      	cbz	r1, 800d83c <_reclaim_reent+0x78>
 800d836:	4620      	mov	r0, r4
 800d838:	f000 fefe 	bl	800e638 <_free_r>
 800d83c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d83e:	b111      	cbz	r1, 800d846 <_reclaim_reent+0x82>
 800d840:	4620      	mov	r0, r4
 800d842:	f000 fef9 	bl	800e638 <_free_r>
 800d846:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d848:	b111      	cbz	r1, 800d850 <_reclaim_reent+0x8c>
 800d84a:	4620      	mov	r0, r4
 800d84c:	f000 fef4 	bl	800e638 <_free_r>
 800d850:	6a23      	ldr	r3, [r4, #32]
 800d852:	b14b      	cbz	r3, 800d868 <_reclaim_reent+0xa4>
 800d854:	4620      	mov	r0, r4
 800d856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d85a:	4718      	bx	r3
 800d85c:	680e      	ldr	r6, [r1, #0]
 800d85e:	4620      	mov	r0, r4
 800d860:	f000 feea 	bl	800e638 <_free_r>
 800d864:	4631      	mov	r1, r6
 800d866:	e7bb      	b.n	800d7e0 <_reclaim_reent+0x1c>
 800d868:	bd70      	pop	{r4, r5, r6, pc}
 800d86a:	bf00      	nop
 800d86c:	2000010c 	.word	0x2000010c

0800d870 <_lseek_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	4d07      	ldr	r5, [pc, #28]	@ (800d890 <_lseek_r+0x20>)
 800d874:	4604      	mov	r4, r0
 800d876:	4608      	mov	r0, r1
 800d878:	4611      	mov	r1, r2
 800d87a:	2200      	movs	r2, #0
 800d87c:	602a      	str	r2, [r5, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	f7f4 f91b 	bl	8001aba <_lseek>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d102      	bne.n	800d88e <_lseek_r+0x1e>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	b103      	cbz	r3, 800d88e <_lseek_r+0x1e>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	200062c0 	.word	0x200062c0

0800d894 <_read_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4d07      	ldr	r5, [pc, #28]	@ (800d8b4 <_read_r+0x20>)
 800d898:	4604      	mov	r4, r0
 800d89a:	4608      	mov	r0, r1
 800d89c:	4611      	mov	r1, r2
 800d89e:	2200      	movs	r2, #0
 800d8a0:	602a      	str	r2, [r5, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f7f4 f8a9 	bl	80019fa <_read>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_read_r+0x1e>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_read_r+0x1e>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	200062c0 	.word	0x200062c0

0800d8b8 <_kill_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4d07      	ldr	r5, [pc, #28]	@ (800d8d8 <_kill_r+0x20>)
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4604      	mov	r4, r0
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	602b      	str	r3, [r5, #0]
 800d8c6:	f7f4 f87d 	bl	80019c4 <_kill>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	d102      	bne.n	800d8d4 <_kill_r+0x1c>
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	b103      	cbz	r3, 800d8d4 <_kill_r+0x1c>
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
 800d8d6:	bf00      	nop
 800d8d8:	200062c0 	.word	0x200062c0

0800d8dc <_getpid_r>:
 800d8dc:	f7f4 b86a 	b.w	80019b4 <_getpid>

0800d8e0 <_sbrk_r>:
 800d8e0:	b538      	push	{r3, r4, r5, lr}
 800d8e2:	4d06      	ldr	r5, [pc, #24]	@ (800d8fc <_sbrk_r+0x1c>)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	4608      	mov	r0, r1
 800d8ea:	602b      	str	r3, [r5, #0]
 800d8ec:	f7f4 f8f2 	bl	8001ad4 <_sbrk>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	d102      	bne.n	800d8fa <_sbrk_r+0x1a>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	b103      	cbz	r3, 800d8fa <_sbrk_r+0x1a>
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	200062c0 	.word	0x200062c0

0800d900 <_write_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4d07      	ldr	r5, [pc, #28]	@ (800d920 <_write_r+0x20>)
 800d904:	4604      	mov	r4, r0
 800d906:	4608      	mov	r0, r1
 800d908:	4611      	mov	r1, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	602a      	str	r2, [r5, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	f7f4 f890 	bl	8001a34 <_write>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_write_r+0x1e>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_write_r+0x1e>
 800d91c:	6023      	str	r3, [r4, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	200062c0 	.word	0x200062c0

0800d924 <__errno>:
 800d924:	4b01      	ldr	r3, [pc, #4]	@ (800d92c <__errno+0x8>)
 800d926:	6818      	ldr	r0, [r3, #0]
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	2000010c 	.word	0x2000010c

0800d930 <__libc_init_array>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	4d0d      	ldr	r5, [pc, #52]	@ (800d968 <__libc_init_array+0x38>)
 800d934:	4c0d      	ldr	r4, [pc, #52]	@ (800d96c <__libc_init_array+0x3c>)
 800d936:	1b64      	subs	r4, r4, r5
 800d938:	10a4      	asrs	r4, r4, #2
 800d93a:	2600      	movs	r6, #0
 800d93c:	42a6      	cmp	r6, r4
 800d93e:	d109      	bne.n	800d954 <__libc_init_array+0x24>
 800d940:	4d0b      	ldr	r5, [pc, #44]	@ (800d970 <__libc_init_array+0x40>)
 800d942:	4c0c      	ldr	r4, [pc, #48]	@ (800d974 <__libc_init_array+0x44>)
 800d944:	f001 ff56 	bl	800f7f4 <_init>
 800d948:	1b64      	subs	r4, r4, r5
 800d94a:	10a4      	asrs	r4, r4, #2
 800d94c:	2600      	movs	r6, #0
 800d94e:	42a6      	cmp	r6, r4
 800d950:	d105      	bne.n	800d95e <__libc_init_array+0x2e>
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	f855 3b04 	ldr.w	r3, [r5], #4
 800d958:	4798      	blx	r3
 800d95a:	3601      	adds	r6, #1
 800d95c:	e7ee      	b.n	800d93c <__libc_init_array+0xc>
 800d95e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d962:	4798      	blx	r3
 800d964:	3601      	adds	r6, #1
 800d966:	e7f2      	b.n	800d94e <__libc_init_array+0x1e>
 800d968:	0800fd30 	.word	0x0800fd30
 800d96c:	0800fd30 	.word	0x0800fd30
 800d970:	0800fd30 	.word	0x0800fd30
 800d974:	0800fd34 	.word	0x0800fd34

0800d978 <__retarget_lock_init_recursive>:
 800d978:	4770      	bx	lr

0800d97a <__retarget_lock_acquire_recursive>:
 800d97a:	4770      	bx	lr

0800d97c <__retarget_lock_release_recursive>:
 800d97c:	4770      	bx	lr

0800d97e <memcpy>:
 800d97e:	440a      	add	r2, r1
 800d980:	4291      	cmp	r1, r2
 800d982:	f100 33ff 	add.w	r3, r0, #4294967295
 800d986:	d100      	bne.n	800d98a <memcpy+0xc>
 800d988:	4770      	bx	lr
 800d98a:	b510      	push	{r4, lr}
 800d98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d990:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d994:	4291      	cmp	r1, r2
 800d996:	d1f9      	bne.n	800d98c <memcpy+0xe>
 800d998:	bd10      	pop	{r4, pc}

0800d99a <quorem>:
 800d99a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99e:	6903      	ldr	r3, [r0, #16]
 800d9a0:	690c      	ldr	r4, [r1, #16]
 800d9a2:	42a3      	cmp	r3, r4
 800d9a4:	4607      	mov	r7, r0
 800d9a6:	db7e      	blt.n	800daa6 <quorem+0x10c>
 800d9a8:	3c01      	subs	r4, #1
 800d9aa:	f101 0814 	add.w	r8, r1, #20
 800d9ae:	00a3      	lsls	r3, r4, #2
 800d9b0:	f100 0514 	add.w	r5, r0, #20
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9d0:	d32e      	bcc.n	800da30 <quorem+0x96>
 800d9d2:	f04f 0a00 	mov.w	sl, #0
 800d9d6:	46c4      	mov	ip, r8
 800d9d8:	46ae      	mov	lr, r5
 800d9da:	46d3      	mov	fp, sl
 800d9dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9e0:	b298      	uxth	r0, r3
 800d9e2:	fb06 a000 	mla	r0, r6, r0, sl
 800d9e6:	0c02      	lsrs	r2, r0, #16
 800d9e8:	0c1b      	lsrs	r3, r3, #16
 800d9ea:	fb06 2303 	mla	r3, r6, r3, r2
 800d9ee:	f8de 2000 	ldr.w	r2, [lr]
 800d9f2:	b280      	uxth	r0, r0
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	1a12      	subs	r2, r2, r0
 800d9f8:	445a      	add	r2, fp
 800d9fa:	f8de 0000 	ldr.w	r0, [lr]
 800d9fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da02:	b29b      	uxth	r3, r3
 800da04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800da08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800da0c:	b292      	uxth	r2, r2
 800da0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800da12:	45e1      	cmp	r9, ip
 800da14:	f84e 2b04 	str.w	r2, [lr], #4
 800da18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800da1c:	d2de      	bcs.n	800d9dc <quorem+0x42>
 800da1e:	9b00      	ldr	r3, [sp, #0]
 800da20:	58eb      	ldr	r3, [r5, r3]
 800da22:	b92b      	cbnz	r3, 800da30 <quorem+0x96>
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	3b04      	subs	r3, #4
 800da28:	429d      	cmp	r5, r3
 800da2a:	461a      	mov	r2, r3
 800da2c:	d32f      	bcc.n	800da8e <quorem+0xf4>
 800da2e:	613c      	str	r4, [r7, #16]
 800da30:	4638      	mov	r0, r7
 800da32:	f001 f8c5 	bl	800ebc0 <__mcmp>
 800da36:	2800      	cmp	r0, #0
 800da38:	db25      	blt.n	800da86 <quorem+0xec>
 800da3a:	4629      	mov	r1, r5
 800da3c:	2000      	movs	r0, #0
 800da3e:	f858 2b04 	ldr.w	r2, [r8], #4
 800da42:	f8d1 c000 	ldr.w	ip, [r1]
 800da46:	fa1f fe82 	uxth.w	lr, r2
 800da4a:	fa1f f38c 	uxth.w	r3, ip
 800da4e:	eba3 030e 	sub.w	r3, r3, lr
 800da52:	4403      	add	r3, r0
 800da54:	0c12      	lsrs	r2, r2, #16
 800da56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800da5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800da5e:	b29b      	uxth	r3, r3
 800da60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da64:	45c1      	cmp	r9, r8
 800da66:	f841 3b04 	str.w	r3, [r1], #4
 800da6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800da6e:	d2e6      	bcs.n	800da3e <quorem+0xa4>
 800da70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da78:	b922      	cbnz	r2, 800da84 <quorem+0xea>
 800da7a:	3b04      	subs	r3, #4
 800da7c:	429d      	cmp	r5, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	d30b      	bcc.n	800da9a <quorem+0x100>
 800da82:	613c      	str	r4, [r7, #16]
 800da84:	3601      	adds	r6, #1
 800da86:	4630      	mov	r0, r6
 800da88:	b003      	add	sp, #12
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8e:	6812      	ldr	r2, [r2, #0]
 800da90:	3b04      	subs	r3, #4
 800da92:	2a00      	cmp	r2, #0
 800da94:	d1cb      	bne.n	800da2e <quorem+0x94>
 800da96:	3c01      	subs	r4, #1
 800da98:	e7c6      	b.n	800da28 <quorem+0x8e>
 800da9a:	6812      	ldr	r2, [r2, #0]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	2a00      	cmp	r2, #0
 800daa0:	d1ef      	bne.n	800da82 <quorem+0xe8>
 800daa2:	3c01      	subs	r4, #1
 800daa4:	e7ea      	b.n	800da7c <quorem+0xe2>
 800daa6:	2000      	movs	r0, #0
 800daa8:	e7ee      	b.n	800da88 <quorem+0xee>
 800daaa:	0000      	movs	r0, r0
 800daac:	0000      	movs	r0, r0
	...

0800dab0 <_dtoa_r>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	69c7      	ldr	r7, [r0, #28]
 800dab6:	b099      	sub	sp, #100	@ 0x64
 800dab8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dabc:	ec55 4b10 	vmov	r4, r5, d0
 800dac0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dac2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dac4:	4683      	mov	fp, r0
 800dac6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daca:	b97f      	cbnz	r7, 800daec <_dtoa_r+0x3c>
 800dacc:	2010      	movs	r0, #16
 800dace:	f7fe fff1 	bl	800cab4 <malloc>
 800dad2:	4602      	mov	r2, r0
 800dad4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dad8:	b920      	cbnz	r0, 800dae4 <_dtoa_r+0x34>
 800dada:	4ba7      	ldr	r3, [pc, #668]	@ (800dd78 <_dtoa_r+0x2c8>)
 800dadc:	21ef      	movs	r1, #239	@ 0xef
 800dade:	48a7      	ldr	r0, [pc, #668]	@ (800dd7c <_dtoa_r+0x2cc>)
 800dae0:	f001 fb94 	bl	800f20c <__assert_func>
 800dae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dae8:	6007      	str	r7, [r0, #0]
 800daea:	60c7      	str	r7, [r0, #12]
 800daec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800daf0:	6819      	ldr	r1, [r3, #0]
 800daf2:	b159      	cbz	r1, 800db0c <_dtoa_r+0x5c>
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	604a      	str	r2, [r1, #4]
 800daf8:	2301      	movs	r3, #1
 800dafa:	4093      	lsls	r3, r2
 800dafc:	608b      	str	r3, [r1, #8]
 800dafe:	4658      	mov	r0, fp
 800db00:	f000 fe24 	bl	800e74c <_Bfree>
 800db04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db08:	2200      	movs	r2, #0
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	1e2b      	subs	r3, r5, #0
 800db0e:	bfb9      	ittee	lt
 800db10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800db14:	9303      	strlt	r3, [sp, #12]
 800db16:	2300      	movge	r3, #0
 800db18:	6033      	strge	r3, [r6, #0]
 800db1a:	9f03      	ldr	r7, [sp, #12]
 800db1c:	4b98      	ldr	r3, [pc, #608]	@ (800dd80 <_dtoa_r+0x2d0>)
 800db1e:	bfbc      	itt	lt
 800db20:	2201      	movlt	r2, #1
 800db22:	6032      	strlt	r2, [r6, #0]
 800db24:	43bb      	bics	r3, r7
 800db26:	d112      	bne.n	800db4e <_dtoa_r+0x9e>
 800db28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db34:	4323      	orrs	r3, r4
 800db36:	f000 854d 	beq.w	800e5d4 <_dtoa_r+0xb24>
 800db3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dd94 <_dtoa_r+0x2e4>
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 854f 	beq.w	800e5e4 <_dtoa_r+0xb34>
 800db46:	f10a 0303 	add.w	r3, sl, #3
 800db4a:	f000 bd49 	b.w	800e5e0 <_dtoa_r+0xb30>
 800db4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db52:	2200      	movs	r2, #0
 800db54:	ec51 0b17 	vmov	r0, r1, d7
 800db58:	2300      	movs	r3, #0
 800db5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800db5e:	f7f2 ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 800db62:	4680      	mov	r8, r0
 800db64:	b158      	cbz	r0, 800db7e <_dtoa_r+0xce>
 800db66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db68:	2301      	movs	r3, #1
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db6e:	b113      	cbz	r3, 800db76 <_dtoa_r+0xc6>
 800db70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db72:	4b84      	ldr	r3, [pc, #528]	@ (800dd84 <_dtoa_r+0x2d4>)
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dd98 <_dtoa_r+0x2e8>
 800db7a:	f000 bd33 	b.w	800e5e4 <_dtoa_r+0xb34>
 800db7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db82:	aa16      	add	r2, sp, #88	@ 0x58
 800db84:	a917      	add	r1, sp, #92	@ 0x5c
 800db86:	4658      	mov	r0, fp
 800db88:	f001 f8ca 	bl	800ed20 <__d2b>
 800db8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800db90:	4681      	mov	r9, r0
 800db92:	2e00      	cmp	r6, #0
 800db94:	d077      	beq.n	800dc86 <_dtoa_r+0x1d6>
 800db96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800db9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dbac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4b74      	ldr	r3, [pc, #464]	@ (800dd88 <_dtoa_r+0x2d8>)
 800dbb6:	f7f2 fb6f 	bl	8000298 <__aeabi_dsub>
 800dbba:	a369      	add	r3, pc, #420	@ (adr r3, 800dd60 <_dtoa_r+0x2b0>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	f7f2 fd22 	bl	8000608 <__aeabi_dmul>
 800dbc4:	a368      	add	r3, pc, #416	@ (adr r3, 800dd68 <_dtoa_r+0x2b8>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fb67 	bl	800029c <__adddf3>
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	f7f2 fcae 	bl	8000534 <__aeabi_i2d>
 800dbd8:	a365      	add	r3, pc, #404	@ (adr r3, 800dd70 <_dtoa_r+0x2c0>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	f7f2 fd13 	bl	8000608 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f2 fb57 	bl	800029c <__adddf3>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	f7f2 ffb9 	bl	8000b68 <__aeabi_d2iz>
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 ff74 	bl	8000aec <__aeabi_dcmplt>
 800dc04:	b140      	cbz	r0, 800dc18 <_dtoa_r+0x168>
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7f2 fc94 	bl	8000534 <__aeabi_i2d>
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	462b      	mov	r3, r5
 800dc10:	f7f2 ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc14:	b900      	cbnz	r0, 800dc18 <_dtoa_r+0x168>
 800dc16:	3f01      	subs	r7, #1
 800dc18:	2f16      	cmp	r7, #22
 800dc1a:	d851      	bhi.n	800dcc0 <_dtoa_r+0x210>
 800dc1c:	4b5b      	ldr	r3, [pc, #364]	@ (800dd8c <_dtoa_r+0x2dc>)
 800dc1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc2a:	f7f2 ff5f 	bl	8000aec <__aeabi_dcmplt>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d048      	beq.n	800dcc4 <_dtoa_r+0x214>
 800dc32:	3f01      	subs	r7, #1
 800dc34:	2300      	movs	r3, #0
 800dc36:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc3a:	1b9b      	subs	r3, r3, r6
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	bf44      	itt	mi
 800dc40:	f1c3 0801 	rsbmi	r8, r3, #1
 800dc44:	2300      	movmi	r3, #0
 800dc46:	9208      	str	r2, [sp, #32]
 800dc48:	bf54      	ite	pl
 800dc4a:	f04f 0800 	movpl.w	r8, #0
 800dc4e:	9308      	strmi	r3, [sp, #32]
 800dc50:	2f00      	cmp	r7, #0
 800dc52:	db39      	blt.n	800dcc8 <_dtoa_r+0x218>
 800dc54:	9b08      	ldr	r3, [sp, #32]
 800dc56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dc58:	443b      	add	r3, r7
 800dc5a:	9308      	str	r3, [sp, #32]
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc62:	2b09      	cmp	r3, #9
 800dc64:	d864      	bhi.n	800dd30 <_dtoa_r+0x280>
 800dc66:	2b05      	cmp	r3, #5
 800dc68:	bfc4      	itt	gt
 800dc6a:	3b04      	subgt	r3, #4
 800dc6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc70:	f1a3 0302 	sub.w	r3, r3, #2
 800dc74:	bfcc      	ite	gt
 800dc76:	2400      	movgt	r4, #0
 800dc78:	2401      	movle	r4, #1
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d863      	bhi.n	800dd46 <_dtoa_r+0x296>
 800dc7e:	e8df f003 	tbb	[pc, r3]
 800dc82:	372a      	.short	0x372a
 800dc84:	5535      	.short	0x5535
 800dc86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dc8a:	441e      	add	r6, r3
 800dc8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dc90:	2b20      	cmp	r3, #32
 800dc92:	bfc1      	itttt	gt
 800dc94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dc98:	409f      	lslgt	r7, r3
 800dc9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dc9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dca2:	bfd6      	itet	le
 800dca4:	f1c3 0320 	rsble	r3, r3, #32
 800dca8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dcac:	fa04 f003 	lslle.w	r0, r4, r3
 800dcb0:	f7f2 fc30 	bl	8000514 <__aeabi_ui2d>
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dcba:	3e01      	subs	r6, #1
 800dcbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800dcbe:	e777      	b.n	800dbb0 <_dtoa_r+0x100>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e7b8      	b.n	800dc36 <_dtoa_r+0x186>
 800dcc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800dcc6:	e7b7      	b.n	800dc38 <_dtoa_r+0x188>
 800dcc8:	427b      	negs	r3, r7
 800dcca:	930a      	str	r3, [sp, #40]	@ 0x28
 800dccc:	2300      	movs	r3, #0
 800dcce:	eba8 0807 	sub.w	r8, r8, r7
 800dcd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcd4:	e7c4      	b.n	800dc60 <_dtoa_r+0x1b0>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc35      	bgt.n	800dd4c <_dtoa_r+0x29c>
 800dce0:	2301      	movs	r3, #1
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	9307      	str	r3, [sp, #28]
 800dce6:	461a      	mov	r2, r3
 800dce8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dcea:	e00b      	b.n	800dd04 <_dtoa_r+0x254>
 800dcec:	2301      	movs	r3, #1
 800dcee:	e7f3      	b.n	800dcd8 <_dtoa_r+0x228>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf6:	18fb      	adds	r3, r7, r3
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	9307      	str	r3, [sp, #28]
 800dd00:	bfb8      	it	lt
 800dd02:	2301      	movlt	r3, #1
 800dd04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dd08:	2100      	movs	r1, #0
 800dd0a:	2204      	movs	r2, #4
 800dd0c:	f102 0514 	add.w	r5, r2, #20
 800dd10:	429d      	cmp	r5, r3
 800dd12:	d91f      	bls.n	800dd54 <_dtoa_r+0x2a4>
 800dd14:	6041      	str	r1, [r0, #4]
 800dd16:	4658      	mov	r0, fp
 800dd18:	f000 fcd8 	bl	800e6cc <_Balloc>
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d13c      	bne.n	800dd9c <_dtoa_r+0x2ec>
 800dd22:	4b1b      	ldr	r3, [pc, #108]	@ (800dd90 <_dtoa_r+0x2e0>)
 800dd24:	4602      	mov	r2, r0
 800dd26:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd2a:	e6d8      	b.n	800dade <_dtoa_r+0x2e>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e7e0      	b.n	800dcf2 <_dtoa_r+0x242>
 800dd30:	2401      	movs	r4, #1
 800dd32:	2300      	movs	r3, #0
 800dd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	9307      	str	r3, [sp, #28]
 800dd40:	2200      	movs	r2, #0
 800dd42:	2312      	movs	r3, #18
 800dd44:	e7d0      	b.n	800dce8 <_dtoa_r+0x238>
 800dd46:	2301      	movs	r3, #1
 800dd48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd4a:	e7f5      	b.n	800dd38 <_dtoa_r+0x288>
 800dd4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	9307      	str	r3, [sp, #28]
 800dd52:	e7d7      	b.n	800dd04 <_dtoa_r+0x254>
 800dd54:	3101      	adds	r1, #1
 800dd56:	0052      	lsls	r2, r2, #1
 800dd58:	e7d8      	b.n	800dd0c <_dtoa_r+0x25c>
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w
 800dd60:	636f4361 	.word	0x636f4361
 800dd64:	3fd287a7 	.word	0x3fd287a7
 800dd68:	8b60c8b3 	.word	0x8b60c8b3
 800dd6c:	3fc68a28 	.word	0x3fc68a28
 800dd70:	509f79fb 	.word	0x509f79fb
 800dd74:	3fd34413 	.word	0x3fd34413
 800dd78:	0800f9f9 	.word	0x0800f9f9
 800dd7c:	0800fa10 	.word	0x0800fa10
 800dd80:	7ff00000 	.word	0x7ff00000
 800dd84:	0800f9c9 	.word	0x0800f9c9
 800dd88:	3ff80000 	.word	0x3ff80000
 800dd8c:	0800fb08 	.word	0x0800fb08
 800dd90:	0800fa68 	.word	0x0800fa68
 800dd94:	0800f9f5 	.word	0x0800f9f5
 800dd98:	0800f9c8 	.word	0x0800f9c8
 800dd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dda0:	6018      	str	r0, [r3, #0]
 800dda2:	9b07      	ldr	r3, [sp, #28]
 800dda4:	2b0e      	cmp	r3, #14
 800dda6:	f200 80a4 	bhi.w	800def2 <_dtoa_r+0x442>
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	f000 80a1 	beq.w	800def2 <_dtoa_r+0x442>
 800ddb0:	2f00      	cmp	r7, #0
 800ddb2:	dd33      	ble.n	800de1c <_dtoa_r+0x36c>
 800ddb4:	4bad      	ldr	r3, [pc, #692]	@ (800e06c <_dtoa_r+0x5bc>)
 800ddb6:	f007 020f 	and.w	r2, r7, #15
 800ddba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddbe:	ed93 7b00 	vldr	d7, [r3]
 800ddc2:	05f8      	lsls	r0, r7, #23
 800ddc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ddc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ddcc:	d516      	bpl.n	800ddfc <_dtoa_r+0x34c>
 800ddce:	4ba8      	ldr	r3, [pc, #672]	@ (800e070 <_dtoa_r+0x5c0>)
 800ddd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddd8:	f7f2 fd40 	bl	800085c <__aeabi_ddiv>
 800dddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dde0:	f004 040f 	and.w	r4, r4, #15
 800dde4:	2603      	movs	r6, #3
 800dde6:	4da2      	ldr	r5, [pc, #648]	@ (800e070 <_dtoa_r+0x5c0>)
 800dde8:	b954      	cbnz	r4, 800de00 <_dtoa_r+0x350>
 800ddea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddf2:	f7f2 fd33 	bl	800085c <__aeabi_ddiv>
 800ddf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddfa:	e028      	b.n	800de4e <_dtoa_r+0x39e>
 800ddfc:	2602      	movs	r6, #2
 800ddfe:	e7f2      	b.n	800dde6 <_dtoa_r+0x336>
 800de00:	07e1      	lsls	r1, r4, #31
 800de02:	d508      	bpl.n	800de16 <_dtoa_r+0x366>
 800de04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de0c:	f7f2 fbfc 	bl	8000608 <__aeabi_dmul>
 800de10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de14:	3601      	adds	r6, #1
 800de16:	1064      	asrs	r4, r4, #1
 800de18:	3508      	adds	r5, #8
 800de1a:	e7e5      	b.n	800dde8 <_dtoa_r+0x338>
 800de1c:	f000 80d2 	beq.w	800dfc4 <_dtoa_r+0x514>
 800de20:	427c      	negs	r4, r7
 800de22:	4b92      	ldr	r3, [pc, #584]	@ (800e06c <_dtoa_r+0x5bc>)
 800de24:	4d92      	ldr	r5, [pc, #584]	@ (800e070 <_dtoa_r+0x5c0>)
 800de26:	f004 020f 	and.w	r2, r4, #15
 800de2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de36:	f7f2 fbe7 	bl	8000608 <__aeabi_dmul>
 800de3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de3e:	1124      	asrs	r4, r4, #4
 800de40:	2300      	movs	r3, #0
 800de42:	2602      	movs	r6, #2
 800de44:	2c00      	cmp	r4, #0
 800de46:	f040 80b2 	bne.w	800dfae <_dtoa_r+0x4fe>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1d3      	bne.n	800ddf6 <_dtoa_r+0x346>
 800de4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 80b7 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de5a:	4b86      	ldr	r3, [pc, #536]	@ (800e074 <_dtoa_r+0x5c4>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	f7f2 fe43 	bl	8000aec <__aeabi_dcmplt>
 800de66:	2800      	cmp	r0, #0
 800de68:	f000 80ae 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de6c:	9b07      	ldr	r3, [sp, #28]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 80aa 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de74:	9b00      	ldr	r3, [sp, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	dd37      	ble.n	800deea <_dtoa_r+0x43a>
 800de7a:	1e7b      	subs	r3, r7, #1
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	4620      	mov	r0, r4
 800de80:	4b7d      	ldr	r3, [pc, #500]	@ (800e078 <_dtoa_r+0x5c8>)
 800de82:	2200      	movs	r2, #0
 800de84:	4629      	mov	r1, r5
 800de86:	f7f2 fbbf 	bl	8000608 <__aeabi_dmul>
 800de8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de8e:	9c00      	ldr	r4, [sp, #0]
 800de90:	3601      	adds	r6, #1
 800de92:	4630      	mov	r0, r6
 800de94:	f7f2 fb4e 	bl	8000534 <__aeabi_i2d>
 800de98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de9c:	f7f2 fbb4 	bl	8000608 <__aeabi_dmul>
 800dea0:	4b76      	ldr	r3, [pc, #472]	@ (800e07c <_dtoa_r+0x5cc>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	f7f2 f9fa 	bl	800029c <__adddf3>
 800dea8:	4605      	mov	r5, r0
 800deaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800deae:	2c00      	cmp	r4, #0
 800deb0:	f040 808d 	bne.w	800dfce <_dtoa_r+0x51e>
 800deb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deb8:	4b71      	ldr	r3, [pc, #452]	@ (800e080 <_dtoa_r+0x5d0>)
 800deba:	2200      	movs	r2, #0
 800debc:	f7f2 f9ec 	bl	8000298 <__aeabi_dsub>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dec8:	462a      	mov	r2, r5
 800deca:	4633      	mov	r3, r6
 800decc:	f7f2 fe2c 	bl	8000b28 <__aeabi_dcmpgt>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f040 828b 	bne.w	800e3ec <_dtoa_r+0x93c>
 800ded6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deda:	462a      	mov	r2, r5
 800dedc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dee0:	f7f2 fe04 	bl	8000aec <__aeabi_dcmplt>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f040 8128 	bne.w	800e13a <_dtoa_r+0x68a>
 800deea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800deee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800def2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800def4:	2b00      	cmp	r3, #0
 800def6:	f2c0 815a 	blt.w	800e1ae <_dtoa_r+0x6fe>
 800defa:	2f0e      	cmp	r7, #14
 800defc:	f300 8157 	bgt.w	800e1ae <_dtoa_r+0x6fe>
 800df00:	4b5a      	ldr	r3, [pc, #360]	@ (800e06c <_dtoa_r+0x5bc>)
 800df02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df06:	ed93 7b00 	vldr	d7, [r3]
 800df0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	ed8d 7b00 	vstr	d7, [sp]
 800df12:	da03      	bge.n	800df1c <_dtoa_r+0x46c>
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	f340 8101 	ble.w	800e11e <_dtoa_r+0x66e>
 800df1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df20:	4656      	mov	r6, sl
 800df22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fc97 	bl	800085c <__aeabi_ddiv>
 800df2e:	f7f2 fe1b 	bl	8000b68 <__aeabi_d2iz>
 800df32:	4680      	mov	r8, r0
 800df34:	f7f2 fafe 	bl	8000534 <__aeabi_i2d>
 800df38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df3c:	f7f2 fb64 	bl	8000608 <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4620      	mov	r0, r4
 800df46:	4629      	mov	r1, r5
 800df48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df4c:	f7f2 f9a4 	bl	8000298 <__aeabi_dsub>
 800df50:	f806 4b01 	strb.w	r4, [r6], #1
 800df54:	9d07      	ldr	r5, [sp, #28]
 800df56:	eba6 040a 	sub.w	r4, r6, sl
 800df5a:	42a5      	cmp	r5, r4
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	f040 8117 	bne.w	800e192 <_dtoa_r+0x6e2>
 800df64:	f7f2 f99a 	bl	800029c <__adddf3>
 800df68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	f7f2 fdda 	bl	8000b28 <__aeabi_dcmpgt>
 800df74:	2800      	cmp	r0, #0
 800df76:	f040 80f9 	bne.w	800e16c <_dtoa_r+0x6bc>
 800df7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df7e:	4620      	mov	r0, r4
 800df80:	4629      	mov	r1, r5
 800df82:	f7f2 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 800df86:	b118      	cbz	r0, 800df90 <_dtoa_r+0x4e0>
 800df88:	f018 0f01 	tst.w	r8, #1
 800df8c:	f040 80ee 	bne.w	800e16c <_dtoa_r+0x6bc>
 800df90:	4649      	mov	r1, r9
 800df92:	4658      	mov	r0, fp
 800df94:	f000 fbda 	bl	800e74c <_Bfree>
 800df98:	2300      	movs	r3, #0
 800df9a:	7033      	strb	r3, [r6, #0]
 800df9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df9e:	3701      	adds	r7, #1
 800dfa0:	601f      	str	r7, [r3, #0]
 800dfa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 831d 	beq.w	800e5e4 <_dtoa_r+0xb34>
 800dfaa:	601e      	str	r6, [r3, #0]
 800dfac:	e31a      	b.n	800e5e4 <_dtoa_r+0xb34>
 800dfae:	07e2      	lsls	r2, r4, #31
 800dfb0:	d505      	bpl.n	800dfbe <_dtoa_r+0x50e>
 800dfb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfb6:	f7f2 fb27 	bl	8000608 <__aeabi_dmul>
 800dfba:	3601      	adds	r6, #1
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	1064      	asrs	r4, r4, #1
 800dfc0:	3508      	adds	r5, #8
 800dfc2:	e73f      	b.n	800de44 <_dtoa_r+0x394>
 800dfc4:	2602      	movs	r6, #2
 800dfc6:	e742      	b.n	800de4e <_dtoa_r+0x39e>
 800dfc8:	9c07      	ldr	r4, [sp, #28]
 800dfca:	9704      	str	r7, [sp, #16]
 800dfcc:	e761      	b.n	800de92 <_dtoa_r+0x3e2>
 800dfce:	4b27      	ldr	r3, [pc, #156]	@ (800e06c <_dtoa_r+0x5bc>)
 800dfd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfda:	4454      	add	r4, sl
 800dfdc:	2900      	cmp	r1, #0
 800dfde:	d053      	beq.n	800e088 <_dtoa_r+0x5d8>
 800dfe0:	4928      	ldr	r1, [pc, #160]	@ (800e084 <_dtoa_r+0x5d4>)
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f7f2 fc3a 	bl	800085c <__aeabi_ddiv>
 800dfe8:	4633      	mov	r3, r6
 800dfea:	462a      	mov	r2, r5
 800dfec:	f7f2 f954 	bl	8000298 <__aeabi_dsub>
 800dff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dff4:	4656      	mov	r6, sl
 800dff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dffa:	f7f2 fdb5 	bl	8000b68 <__aeabi_d2iz>
 800dffe:	4605      	mov	r5, r0
 800e000:	f7f2 fa98 	bl	8000534 <__aeabi_i2d>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00c:	f7f2 f944 	bl	8000298 <__aeabi_dsub>
 800e010:	3530      	adds	r5, #48	@ 0x30
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e01a:	f806 5b01 	strb.w	r5, [r6], #1
 800e01e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e022:	f7f2 fd63 	bl	8000aec <__aeabi_dcmplt>
 800e026:	2800      	cmp	r0, #0
 800e028:	d171      	bne.n	800e10e <_dtoa_r+0x65e>
 800e02a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e02e:	4911      	ldr	r1, [pc, #68]	@ (800e074 <_dtoa_r+0x5c4>)
 800e030:	2000      	movs	r0, #0
 800e032:	f7f2 f931 	bl	8000298 <__aeabi_dsub>
 800e036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e03a:	f7f2 fd57 	bl	8000aec <__aeabi_dcmplt>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f040 8095 	bne.w	800e16e <_dtoa_r+0x6be>
 800e044:	42a6      	cmp	r6, r4
 800e046:	f43f af50 	beq.w	800deea <_dtoa_r+0x43a>
 800e04a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e04e:	4b0a      	ldr	r3, [pc, #40]	@ (800e078 <_dtoa_r+0x5c8>)
 800e050:	2200      	movs	r2, #0
 800e052:	f7f2 fad9 	bl	8000608 <__aeabi_dmul>
 800e056:	4b08      	ldr	r3, [pc, #32]	@ (800e078 <_dtoa_r+0x5c8>)
 800e058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e05c:	2200      	movs	r2, #0
 800e05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e06a:	e7c4      	b.n	800dff6 <_dtoa_r+0x546>
 800e06c:	0800fb08 	.word	0x0800fb08
 800e070:	0800fae0 	.word	0x0800fae0
 800e074:	3ff00000 	.word	0x3ff00000
 800e078:	40240000 	.word	0x40240000
 800e07c:	401c0000 	.word	0x401c0000
 800e080:	40140000 	.word	0x40140000
 800e084:	3fe00000 	.word	0x3fe00000
 800e088:	4631      	mov	r1, r6
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7f2 fabc 	bl	8000608 <__aeabi_dmul>
 800e090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e094:	9415      	str	r4, [sp, #84]	@ 0x54
 800e096:	4656      	mov	r6, sl
 800e098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09c:	f7f2 fd64 	bl	8000b68 <__aeabi_d2iz>
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	f7f2 fa47 	bl	8000534 <__aeabi_i2d>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ae:	f7f2 f8f3 	bl	8000298 <__aeabi_dsub>
 800e0b2:	3530      	adds	r5, #48	@ 0x30
 800e0b4:	f806 5b01 	strb.w	r5, [r6], #1
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	42a6      	cmp	r6, r4
 800e0be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0c2:	f04f 0200 	mov.w	r2, #0
 800e0c6:	d124      	bne.n	800e112 <_dtoa_r+0x662>
 800e0c8:	4bac      	ldr	r3, [pc, #688]	@ (800e37c <_dtoa_r+0x8cc>)
 800e0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e0ce:	f7f2 f8e5 	bl	800029c <__adddf3>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0da:	f7f2 fd25 	bl	8000b28 <__aeabi_dcmpgt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d145      	bne.n	800e16e <_dtoa_r+0x6be>
 800e0e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0e6:	49a5      	ldr	r1, [pc, #660]	@ (800e37c <_dtoa_r+0x8cc>)
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f7f2 f8d5 	bl	8000298 <__aeabi_dsub>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0f6:	f7f2 fcf9 	bl	8000aec <__aeabi_dcmplt>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	f43f aef5 	beq.w	800deea <_dtoa_r+0x43a>
 800e100:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e102:	1e73      	subs	r3, r6, #1
 800e104:	9315      	str	r3, [sp, #84]	@ 0x54
 800e106:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e10a:	2b30      	cmp	r3, #48	@ 0x30
 800e10c:	d0f8      	beq.n	800e100 <_dtoa_r+0x650>
 800e10e:	9f04      	ldr	r7, [sp, #16]
 800e110:	e73e      	b.n	800df90 <_dtoa_r+0x4e0>
 800e112:	4b9b      	ldr	r3, [pc, #620]	@ (800e380 <_dtoa_r+0x8d0>)
 800e114:	f7f2 fa78 	bl	8000608 <__aeabi_dmul>
 800e118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e11c:	e7bc      	b.n	800e098 <_dtoa_r+0x5e8>
 800e11e:	d10c      	bne.n	800e13a <_dtoa_r+0x68a>
 800e120:	4b98      	ldr	r3, [pc, #608]	@ (800e384 <_dtoa_r+0x8d4>)
 800e122:	2200      	movs	r2, #0
 800e124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e128:	f7f2 fa6e 	bl	8000608 <__aeabi_dmul>
 800e12c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e130:	f7f2 fcf0 	bl	8000b14 <__aeabi_dcmpge>
 800e134:	2800      	cmp	r0, #0
 800e136:	f000 8157 	beq.w	800e3e8 <_dtoa_r+0x938>
 800e13a:	2400      	movs	r4, #0
 800e13c:	4625      	mov	r5, r4
 800e13e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e140:	43db      	mvns	r3, r3
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	4656      	mov	r6, sl
 800e146:	2700      	movs	r7, #0
 800e148:	4621      	mov	r1, r4
 800e14a:	4658      	mov	r0, fp
 800e14c:	f000 fafe 	bl	800e74c <_Bfree>
 800e150:	2d00      	cmp	r5, #0
 800e152:	d0dc      	beq.n	800e10e <_dtoa_r+0x65e>
 800e154:	b12f      	cbz	r7, 800e162 <_dtoa_r+0x6b2>
 800e156:	42af      	cmp	r7, r5
 800e158:	d003      	beq.n	800e162 <_dtoa_r+0x6b2>
 800e15a:	4639      	mov	r1, r7
 800e15c:	4658      	mov	r0, fp
 800e15e:	f000 faf5 	bl	800e74c <_Bfree>
 800e162:	4629      	mov	r1, r5
 800e164:	4658      	mov	r0, fp
 800e166:	f000 faf1 	bl	800e74c <_Bfree>
 800e16a:	e7d0      	b.n	800e10e <_dtoa_r+0x65e>
 800e16c:	9704      	str	r7, [sp, #16]
 800e16e:	4633      	mov	r3, r6
 800e170:	461e      	mov	r6, r3
 800e172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e176:	2a39      	cmp	r2, #57	@ 0x39
 800e178:	d107      	bne.n	800e18a <_dtoa_r+0x6da>
 800e17a:	459a      	cmp	sl, r3
 800e17c:	d1f8      	bne.n	800e170 <_dtoa_r+0x6c0>
 800e17e:	9a04      	ldr	r2, [sp, #16]
 800e180:	3201      	adds	r2, #1
 800e182:	9204      	str	r2, [sp, #16]
 800e184:	2230      	movs	r2, #48	@ 0x30
 800e186:	f88a 2000 	strb.w	r2, [sl]
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	3201      	adds	r2, #1
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e7bd      	b.n	800e10e <_dtoa_r+0x65e>
 800e192:	4b7b      	ldr	r3, [pc, #492]	@ (800e380 <_dtoa_r+0x8d0>)
 800e194:	2200      	movs	r2, #0
 800e196:	f7f2 fa37 	bl	8000608 <__aeabi_dmul>
 800e19a:	2200      	movs	r2, #0
 800e19c:	2300      	movs	r3, #0
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	f7f2 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	f43f aebb 	beq.w	800df22 <_dtoa_r+0x472>
 800e1ac:	e6f0      	b.n	800df90 <_dtoa_r+0x4e0>
 800e1ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	f000 80db 	beq.w	800e36c <_dtoa_r+0x8bc>
 800e1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1b8:	2a01      	cmp	r2, #1
 800e1ba:	f300 80bf 	bgt.w	800e33c <_dtoa_r+0x88c>
 800e1be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	f000 80b7 	beq.w	800e334 <_dtoa_r+0x884>
 800e1c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e1ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1cc:	4646      	mov	r6, r8
 800e1ce:	9a08      	ldr	r2, [sp, #32]
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	441a      	add	r2, r3
 800e1d4:	4658      	mov	r0, fp
 800e1d6:	4498      	add	r8, r3
 800e1d8:	9208      	str	r2, [sp, #32]
 800e1da:	f000 fb6b 	bl	800e8b4 <__i2b>
 800e1de:	4605      	mov	r5, r0
 800e1e0:	b15e      	cbz	r6, 800e1fa <_dtoa_r+0x74a>
 800e1e2:	9b08      	ldr	r3, [sp, #32]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dd08      	ble.n	800e1fa <_dtoa_r+0x74a>
 800e1e8:	42b3      	cmp	r3, r6
 800e1ea:	9a08      	ldr	r2, [sp, #32]
 800e1ec:	bfa8      	it	ge
 800e1ee:	4633      	movge	r3, r6
 800e1f0:	eba8 0803 	sub.w	r8, r8, r3
 800e1f4:	1af6      	subs	r6, r6, r3
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	9308      	str	r3, [sp, #32]
 800e1fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1fc:	b1f3      	cbz	r3, 800e23c <_dtoa_r+0x78c>
 800e1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 80b7 	beq.w	800e374 <_dtoa_r+0x8c4>
 800e206:	b18c      	cbz	r4, 800e22c <_dtoa_r+0x77c>
 800e208:	4629      	mov	r1, r5
 800e20a:	4622      	mov	r2, r4
 800e20c:	4658      	mov	r0, fp
 800e20e:	f000 fc11 	bl	800ea34 <__pow5mult>
 800e212:	464a      	mov	r2, r9
 800e214:	4601      	mov	r1, r0
 800e216:	4605      	mov	r5, r0
 800e218:	4658      	mov	r0, fp
 800e21a:	f000 fb61 	bl	800e8e0 <__multiply>
 800e21e:	4649      	mov	r1, r9
 800e220:	9004      	str	r0, [sp, #16]
 800e222:	4658      	mov	r0, fp
 800e224:	f000 fa92 	bl	800e74c <_Bfree>
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	4699      	mov	r9, r3
 800e22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e22e:	1b1a      	subs	r2, r3, r4
 800e230:	d004      	beq.n	800e23c <_dtoa_r+0x78c>
 800e232:	4649      	mov	r1, r9
 800e234:	4658      	mov	r0, fp
 800e236:	f000 fbfd 	bl	800ea34 <__pow5mult>
 800e23a:	4681      	mov	r9, r0
 800e23c:	2101      	movs	r1, #1
 800e23e:	4658      	mov	r0, fp
 800e240:	f000 fb38 	bl	800e8b4 <__i2b>
 800e244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e246:	4604      	mov	r4, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 81cf 	beq.w	800e5ec <_dtoa_r+0xb3c>
 800e24e:	461a      	mov	r2, r3
 800e250:	4601      	mov	r1, r0
 800e252:	4658      	mov	r0, fp
 800e254:	f000 fbee 	bl	800ea34 <__pow5mult>
 800e258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	4604      	mov	r4, r0
 800e25e:	f300 8095 	bgt.w	800e38c <_dtoa_r+0x8dc>
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8087 	bne.w	800e378 <_dtoa_r+0x8c8>
 800e26a:	9b03      	ldr	r3, [sp, #12]
 800e26c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e270:	2b00      	cmp	r3, #0
 800e272:	f040 8089 	bne.w	800e388 <_dtoa_r+0x8d8>
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e27c:	0d1b      	lsrs	r3, r3, #20
 800e27e:	051b      	lsls	r3, r3, #20
 800e280:	b12b      	cbz	r3, 800e28e <_dtoa_r+0x7de>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	3301      	adds	r3, #1
 800e286:	9308      	str	r3, [sp, #32]
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	2301      	movs	r3, #1
 800e28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 81b0 	beq.w	800e5f8 <_dtoa_r+0xb48>
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e29e:	6918      	ldr	r0, [r3, #16]
 800e2a0:	f000 fabc 	bl	800e81c <__hi0bits>
 800e2a4:	f1c0 0020 	rsb	r0, r0, #32
 800e2a8:	9b08      	ldr	r3, [sp, #32]
 800e2aa:	4418      	add	r0, r3
 800e2ac:	f010 001f 	ands.w	r0, r0, #31
 800e2b0:	d077      	beq.n	800e3a2 <_dtoa_r+0x8f2>
 800e2b2:	f1c0 0320 	rsb	r3, r0, #32
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	dd6b      	ble.n	800e392 <_dtoa_r+0x8e2>
 800e2ba:	9b08      	ldr	r3, [sp, #32]
 800e2bc:	f1c0 001c 	rsb	r0, r0, #28
 800e2c0:	4403      	add	r3, r0
 800e2c2:	4480      	add	r8, r0
 800e2c4:	4406      	add	r6, r0
 800e2c6:	9308      	str	r3, [sp, #32]
 800e2c8:	f1b8 0f00 	cmp.w	r8, #0
 800e2cc:	dd05      	ble.n	800e2da <_dtoa_r+0x82a>
 800e2ce:	4649      	mov	r1, r9
 800e2d0:	4642      	mov	r2, r8
 800e2d2:	4658      	mov	r0, fp
 800e2d4:	f000 fc08 	bl	800eae8 <__lshift>
 800e2d8:	4681      	mov	r9, r0
 800e2da:	9b08      	ldr	r3, [sp, #32]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dd05      	ble.n	800e2ec <_dtoa_r+0x83c>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4658      	mov	r0, fp
 800e2e6:	f000 fbff 	bl	800eae8 <__lshift>
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d059      	beq.n	800e3a6 <_dtoa_r+0x8f6>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4648      	mov	r0, r9
 800e2f6:	f000 fc63 	bl	800ebc0 <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	da53      	bge.n	800e3a6 <_dtoa_r+0x8f6>
 800e2fe:	1e7b      	subs	r3, r7, #1
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	4649      	mov	r1, r9
 800e304:	2300      	movs	r3, #0
 800e306:	220a      	movs	r2, #10
 800e308:	4658      	mov	r0, fp
 800e30a:	f000 fa41 	bl	800e790 <__multadd>
 800e30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e310:	4681      	mov	r9, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 8172 	beq.w	800e5fc <_dtoa_r+0xb4c>
 800e318:	2300      	movs	r3, #0
 800e31a:	4629      	mov	r1, r5
 800e31c:	220a      	movs	r2, #10
 800e31e:	4658      	mov	r0, fp
 800e320:	f000 fa36 	bl	800e790 <__multadd>
 800e324:	9b00      	ldr	r3, [sp, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	4605      	mov	r5, r0
 800e32a:	dc67      	bgt.n	800e3fc <_dtoa_r+0x94c>
 800e32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e32e:	2b02      	cmp	r3, #2
 800e330:	dc41      	bgt.n	800e3b6 <_dtoa_r+0x906>
 800e332:	e063      	b.n	800e3fc <_dtoa_r+0x94c>
 800e334:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e33a:	e746      	b.n	800e1ca <_dtoa_r+0x71a>
 800e33c:	9b07      	ldr	r3, [sp, #28]
 800e33e:	1e5c      	subs	r4, r3, #1
 800e340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e342:	42a3      	cmp	r3, r4
 800e344:	bfbf      	itttt	lt
 800e346:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e348:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e34a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e34c:	1ae3      	sublt	r3, r4, r3
 800e34e:	bfb4      	ite	lt
 800e350:	18d2      	addlt	r2, r2, r3
 800e352:	1b1c      	subge	r4, r3, r4
 800e354:	9b07      	ldr	r3, [sp, #28]
 800e356:	bfbc      	itt	lt
 800e358:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e35a:	2400      	movlt	r4, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfb5      	itete	lt
 800e360:	eba8 0603 	sublt.w	r6, r8, r3
 800e364:	9b07      	ldrge	r3, [sp, #28]
 800e366:	2300      	movlt	r3, #0
 800e368:	4646      	movge	r6, r8
 800e36a:	e730      	b.n	800e1ce <_dtoa_r+0x71e>
 800e36c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e36e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e370:	4646      	mov	r6, r8
 800e372:	e735      	b.n	800e1e0 <_dtoa_r+0x730>
 800e374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e376:	e75c      	b.n	800e232 <_dtoa_r+0x782>
 800e378:	2300      	movs	r3, #0
 800e37a:	e788      	b.n	800e28e <_dtoa_r+0x7de>
 800e37c:	3fe00000 	.word	0x3fe00000
 800e380:	40240000 	.word	0x40240000
 800e384:	40140000 	.word	0x40140000
 800e388:	9b02      	ldr	r3, [sp, #8]
 800e38a:	e780      	b.n	800e28e <_dtoa_r+0x7de>
 800e38c:	2300      	movs	r3, #0
 800e38e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e390:	e782      	b.n	800e298 <_dtoa_r+0x7e8>
 800e392:	d099      	beq.n	800e2c8 <_dtoa_r+0x818>
 800e394:	9a08      	ldr	r2, [sp, #32]
 800e396:	331c      	adds	r3, #28
 800e398:	441a      	add	r2, r3
 800e39a:	4498      	add	r8, r3
 800e39c:	441e      	add	r6, r3
 800e39e:	9208      	str	r2, [sp, #32]
 800e3a0:	e792      	b.n	800e2c8 <_dtoa_r+0x818>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	e7f6      	b.n	800e394 <_dtoa_r+0x8e4>
 800e3a6:	9b07      	ldr	r3, [sp, #28]
 800e3a8:	9704      	str	r7, [sp, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dc20      	bgt.n	800e3f0 <_dtoa_r+0x940>
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	dd1e      	ble.n	800e3f4 <_dtoa_r+0x944>
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f47f aec0 	bne.w	800e13e <_dtoa_r+0x68e>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 f9e4 	bl	800e790 <__multadd>
 800e3c8:	4601      	mov	r1, r0
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4648      	mov	r0, r9
 800e3ce:	f000 fbf7 	bl	800ebc0 <__mcmp>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	f77f aeb3 	ble.w	800e13e <_dtoa_r+0x68e>
 800e3d8:	4656      	mov	r6, sl
 800e3da:	2331      	movs	r3, #49	@ 0x31
 800e3dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e3e0:	9b04      	ldr	r3, [sp, #16]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	9304      	str	r3, [sp, #16]
 800e3e6:	e6ae      	b.n	800e146 <_dtoa_r+0x696>
 800e3e8:	9c07      	ldr	r4, [sp, #28]
 800e3ea:	9704      	str	r7, [sp, #16]
 800e3ec:	4625      	mov	r5, r4
 800e3ee:	e7f3      	b.n	800e3d8 <_dtoa_r+0x928>
 800e3f0:	9b07      	ldr	r3, [sp, #28]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 8104 	beq.w	800e604 <_dtoa_r+0xb54>
 800e3fc:	2e00      	cmp	r6, #0
 800e3fe:	dd05      	ble.n	800e40c <_dtoa_r+0x95c>
 800e400:	4629      	mov	r1, r5
 800e402:	4632      	mov	r2, r6
 800e404:	4658      	mov	r0, fp
 800e406:	f000 fb6f 	bl	800eae8 <__lshift>
 800e40a:	4605      	mov	r5, r0
 800e40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d05a      	beq.n	800e4c8 <_dtoa_r+0xa18>
 800e412:	6869      	ldr	r1, [r5, #4]
 800e414:	4658      	mov	r0, fp
 800e416:	f000 f959 	bl	800e6cc <_Balloc>
 800e41a:	4606      	mov	r6, r0
 800e41c:	b928      	cbnz	r0, 800e42a <_dtoa_r+0x97a>
 800e41e:	4b84      	ldr	r3, [pc, #528]	@ (800e630 <_dtoa_r+0xb80>)
 800e420:	4602      	mov	r2, r0
 800e422:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e426:	f7ff bb5a 	b.w	800dade <_dtoa_r+0x2e>
 800e42a:	692a      	ldr	r2, [r5, #16]
 800e42c:	3202      	adds	r2, #2
 800e42e:	0092      	lsls	r2, r2, #2
 800e430:	f105 010c 	add.w	r1, r5, #12
 800e434:	300c      	adds	r0, #12
 800e436:	f7ff faa2 	bl	800d97e <memcpy>
 800e43a:	2201      	movs	r2, #1
 800e43c:	4631      	mov	r1, r6
 800e43e:	4658      	mov	r0, fp
 800e440:	f000 fb52 	bl	800eae8 <__lshift>
 800e444:	f10a 0301 	add.w	r3, sl, #1
 800e448:	9307      	str	r3, [sp, #28]
 800e44a:	9b00      	ldr	r3, [sp, #0]
 800e44c:	4453      	add	r3, sl
 800e44e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e450:	9b02      	ldr	r3, [sp, #8]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	462f      	mov	r7, r5
 800e458:	930a      	str	r3, [sp, #40]	@ 0x28
 800e45a:	4605      	mov	r5, r0
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	4621      	mov	r1, r4
 800e460:	3b01      	subs	r3, #1
 800e462:	4648      	mov	r0, r9
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	f7ff fa98 	bl	800d99a <quorem>
 800e46a:	4639      	mov	r1, r7
 800e46c:	9002      	str	r0, [sp, #8]
 800e46e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e472:	4648      	mov	r0, r9
 800e474:	f000 fba4 	bl	800ebc0 <__mcmp>
 800e478:	462a      	mov	r2, r5
 800e47a:	9008      	str	r0, [sp, #32]
 800e47c:	4621      	mov	r1, r4
 800e47e:	4658      	mov	r0, fp
 800e480:	f000 fbba 	bl	800ebf8 <__mdiff>
 800e484:	68c2      	ldr	r2, [r0, #12]
 800e486:	4606      	mov	r6, r0
 800e488:	bb02      	cbnz	r2, 800e4cc <_dtoa_r+0xa1c>
 800e48a:	4601      	mov	r1, r0
 800e48c:	4648      	mov	r0, r9
 800e48e:	f000 fb97 	bl	800ebc0 <__mcmp>
 800e492:	4602      	mov	r2, r0
 800e494:	4631      	mov	r1, r6
 800e496:	4658      	mov	r0, fp
 800e498:	920e      	str	r2, [sp, #56]	@ 0x38
 800e49a:	f000 f957 	bl	800e74c <_Bfree>
 800e49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4a2:	9e07      	ldr	r6, [sp, #28]
 800e4a4:	ea43 0102 	orr.w	r1, r3, r2
 800e4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4aa:	4319      	orrs	r1, r3
 800e4ac:	d110      	bne.n	800e4d0 <_dtoa_r+0xa20>
 800e4ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e4b2:	d029      	beq.n	800e508 <_dtoa_r+0xa58>
 800e4b4:	9b08      	ldr	r3, [sp, #32]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	dd02      	ble.n	800e4c0 <_dtoa_r+0xa10>
 800e4ba:	9b02      	ldr	r3, [sp, #8]
 800e4bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e4c0:	9b00      	ldr	r3, [sp, #0]
 800e4c2:	f883 8000 	strb.w	r8, [r3]
 800e4c6:	e63f      	b.n	800e148 <_dtoa_r+0x698>
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	e7bb      	b.n	800e444 <_dtoa_r+0x994>
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	e7e1      	b.n	800e494 <_dtoa_r+0x9e4>
 800e4d0:	9b08      	ldr	r3, [sp, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	db04      	blt.n	800e4e0 <_dtoa_r+0xa30>
 800e4d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4d8:	430b      	orrs	r3, r1
 800e4da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	d120      	bne.n	800e522 <_dtoa_r+0xa72>
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	dded      	ble.n	800e4c0 <_dtoa_r+0xa10>
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	4658      	mov	r0, fp
 800e4ea:	f000 fafd 	bl	800eae8 <__lshift>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	f000 fb65 	bl	800ebc0 <__mcmp>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	dc03      	bgt.n	800e502 <_dtoa_r+0xa52>
 800e4fa:	d1e1      	bne.n	800e4c0 <_dtoa_r+0xa10>
 800e4fc:	f018 0f01 	tst.w	r8, #1
 800e500:	d0de      	beq.n	800e4c0 <_dtoa_r+0xa10>
 800e502:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e506:	d1d8      	bne.n	800e4ba <_dtoa_r+0xa0a>
 800e508:	9a00      	ldr	r2, [sp, #0]
 800e50a:	2339      	movs	r3, #57	@ 0x39
 800e50c:	7013      	strb	r3, [r2, #0]
 800e50e:	4633      	mov	r3, r6
 800e510:	461e      	mov	r6, r3
 800e512:	3b01      	subs	r3, #1
 800e514:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e518:	2a39      	cmp	r2, #57	@ 0x39
 800e51a:	d052      	beq.n	800e5c2 <_dtoa_r+0xb12>
 800e51c:	3201      	adds	r2, #1
 800e51e:	701a      	strb	r2, [r3, #0]
 800e520:	e612      	b.n	800e148 <_dtoa_r+0x698>
 800e522:	2a00      	cmp	r2, #0
 800e524:	dd07      	ble.n	800e536 <_dtoa_r+0xa86>
 800e526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e52a:	d0ed      	beq.n	800e508 <_dtoa_r+0xa58>
 800e52c:	9a00      	ldr	r2, [sp, #0]
 800e52e:	f108 0301 	add.w	r3, r8, #1
 800e532:	7013      	strb	r3, [r2, #0]
 800e534:	e608      	b.n	800e148 <_dtoa_r+0x698>
 800e536:	9b07      	ldr	r3, [sp, #28]
 800e538:	9a07      	ldr	r2, [sp, #28]
 800e53a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e540:	4293      	cmp	r3, r2
 800e542:	d028      	beq.n	800e596 <_dtoa_r+0xae6>
 800e544:	4649      	mov	r1, r9
 800e546:	2300      	movs	r3, #0
 800e548:	220a      	movs	r2, #10
 800e54a:	4658      	mov	r0, fp
 800e54c:	f000 f920 	bl	800e790 <__multadd>
 800e550:	42af      	cmp	r7, r5
 800e552:	4681      	mov	r9, r0
 800e554:	f04f 0300 	mov.w	r3, #0
 800e558:	f04f 020a 	mov.w	r2, #10
 800e55c:	4639      	mov	r1, r7
 800e55e:	4658      	mov	r0, fp
 800e560:	d107      	bne.n	800e572 <_dtoa_r+0xac2>
 800e562:	f000 f915 	bl	800e790 <__multadd>
 800e566:	4607      	mov	r7, r0
 800e568:	4605      	mov	r5, r0
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	3301      	adds	r3, #1
 800e56e:	9307      	str	r3, [sp, #28]
 800e570:	e774      	b.n	800e45c <_dtoa_r+0x9ac>
 800e572:	f000 f90d 	bl	800e790 <__multadd>
 800e576:	4629      	mov	r1, r5
 800e578:	4607      	mov	r7, r0
 800e57a:	2300      	movs	r3, #0
 800e57c:	220a      	movs	r2, #10
 800e57e:	4658      	mov	r0, fp
 800e580:	f000 f906 	bl	800e790 <__multadd>
 800e584:	4605      	mov	r5, r0
 800e586:	e7f0      	b.n	800e56a <_dtoa_r+0xaba>
 800e588:	9b00      	ldr	r3, [sp, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	bfcc      	ite	gt
 800e58e:	461e      	movgt	r6, r3
 800e590:	2601      	movle	r6, #1
 800e592:	4456      	add	r6, sl
 800e594:	2700      	movs	r7, #0
 800e596:	4649      	mov	r1, r9
 800e598:	2201      	movs	r2, #1
 800e59a:	4658      	mov	r0, fp
 800e59c:	f000 faa4 	bl	800eae8 <__lshift>
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4681      	mov	r9, r0
 800e5a4:	f000 fb0c 	bl	800ebc0 <__mcmp>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	dcb0      	bgt.n	800e50e <_dtoa_r+0xa5e>
 800e5ac:	d102      	bne.n	800e5b4 <_dtoa_r+0xb04>
 800e5ae:	f018 0f01 	tst.w	r8, #1
 800e5b2:	d1ac      	bne.n	800e50e <_dtoa_r+0xa5e>
 800e5b4:	4633      	mov	r3, r6
 800e5b6:	461e      	mov	r6, r3
 800e5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5bc:	2a30      	cmp	r2, #48	@ 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <_dtoa_r+0xb06>
 800e5c0:	e5c2      	b.n	800e148 <_dtoa_r+0x698>
 800e5c2:	459a      	cmp	sl, r3
 800e5c4:	d1a4      	bne.n	800e510 <_dtoa_r+0xa60>
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	9304      	str	r3, [sp, #16]
 800e5cc:	2331      	movs	r3, #49	@ 0x31
 800e5ce:	f88a 3000 	strb.w	r3, [sl]
 800e5d2:	e5b9      	b.n	800e148 <_dtoa_r+0x698>
 800e5d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e634 <_dtoa_r+0xb84>
 800e5da:	b11b      	cbz	r3, 800e5e4 <_dtoa_r+0xb34>
 800e5dc:	f10a 0308 	add.w	r3, sl, #8
 800e5e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	4650      	mov	r0, sl
 800e5e6:	b019      	add	sp, #100	@ 0x64
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	f77f ae37 	ble.w	800e262 <_dtoa_r+0x7b2>
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5f8:	2001      	movs	r0, #1
 800e5fa:	e655      	b.n	800e2a8 <_dtoa_r+0x7f8>
 800e5fc:	9b00      	ldr	r3, [sp, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f77f aed6 	ble.w	800e3b0 <_dtoa_r+0x900>
 800e604:	4656      	mov	r6, sl
 800e606:	4621      	mov	r1, r4
 800e608:	4648      	mov	r0, r9
 800e60a:	f7ff f9c6 	bl	800d99a <quorem>
 800e60e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e612:	f806 8b01 	strb.w	r8, [r6], #1
 800e616:	9b00      	ldr	r3, [sp, #0]
 800e618:	eba6 020a 	sub.w	r2, r6, sl
 800e61c:	4293      	cmp	r3, r2
 800e61e:	ddb3      	ble.n	800e588 <_dtoa_r+0xad8>
 800e620:	4649      	mov	r1, r9
 800e622:	2300      	movs	r3, #0
 800e624:	220a      	movs	r2, #10
 800e626:	4658      	mov	r0, fp
 800e628:	f000 f8b2 	bl	800e790 <__multadd>
 800e62c:	4681      	mov	r9, r0
 800e62e:	e7ea      	b.n	800e606 <_dtoa_r+0xb56>
 800e630:	0800fa68 	.word	0x0800fa68
 800e634:	0800f9ec 	.word	0x0800f9ec

0800e638 <_free_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4605      	mov	r5, r0
 800e63c:	2900      	cmp	r1, #0
 800e63e:	d041      	beq.n	800e6c4 <_free_r+0x8c>
 800e640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e644:	1f0c      	subs	r4, r1, #4
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfb8      	it	lt
 800e64a:	18e4      	addlt	r4, r4, r3
 800e64c:	f7fe fae4 	bl	800cc18 <__malloc_lock>
 800e650:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c8 <_free_r+0x90>)
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	b933      	cbnz	r3, 800e664 <_free_r+0x2c>
 800e656:	6063      	str	r3, [r4, #4]
 800e658:	6014      	str	r4, [r2, #0]
 800e65a:	4628      	mov	r0, r5
 800e65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e660:	f7fe bae0 	b.w	800cc24 <__malloc_unlock>
 800e664:	42a3      	cmp	r3, r4
 800e666:	d908      	bls.n	800e67a <_free_r+0x42>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	1821      	adds	r1, r4, r0
 800e66c:	428b      	cmp	r3, r1
 800e66e:	bf01      	itttt	eq
 800e670:	6819      	ldreq	r1, [r3, #0]
 800e672:	685b      	ldreq	r3, [r3, #4]
 800e674:	1809      	addeq	r1, r1, r0
 800e676:	6021      	streq	r1, [r4, #0]
 800e678:	e7ed      	b.n	800e656 <_free_r+0x1e>
 800e67a:	461a      	mov	r2, r3
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	b10b      	cbz	r3, 800e684 <_free_r+0x4c>
 800e680:	42a3      	cmp	r3, r4
 800e682:	d9fa      	bls.n	800e67a <_free_r+0x42>
 800e684:	6811      	ldr	r1, [r2, #0]
 800e686:	1850      	adds	r0, r2, r1
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d10b      	bne.n	800e6a4 <_free_r+0x6c>
 800e68c:	6820      	ldr	r0, [r4, #0]
 800e68e:	4401      	add	r1, r0
 800e690:	1850      	adds	r0, r2, r1
 800e692:	4283      	cmp	r3, r0
 800e694:	6011      	str	r1, [r2, #0]
 800e696:	d1e0      	bne.n	800e65a <_free_r+0x22>
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	6053      	str	r3, [r2, #4]
 800e69e:	4408      	add	r0, r1
 800e6a0:	6010      	str	r0, [r2, #0]
 800e6a2:	e7da      	b.n	800e65a <_free_r+0x22>
 800e6a4:	d902      	bls.n	800e6ac <_free_r+0x74>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	e7d6      	b.n	800e65a <_free_r+0x22>
 800e6ac:	6820      	ldr	r0, [r4, #0]
 800e6ae:	1821      	adds	r1, r4, r0
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	bf04      	itt	eq
 800e6b4:	6819      	ldreq	r1, [r3, #0]
 800e6b6:	685b      	ldreq	r3, [r3, #4]
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	bf04      	itt	eq
 800e6bc:	1809      	addeq	r1, r1, r0
 800e6be:	6021      	streq	r1, [r4, #0]
 800e6c0:	6054      	str	r4, [r2, #4]
 800e6c2:	e7ca      	b.n	800e65a <_free_r+0x22>
 800e6c4:	bd38      	pop	{r3, r4, r5, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20006180 	.word	0x20006180

0800e6cc <_Balloc>:
 800e6cc:	b570      	push	{r4, r5, r6, lr}
 800e6ce:	69c6      	ldr	r6, [r0, #28]
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	b976      	cbnz	r6, 800e6f4 <_Balloc+0x28>
 800e6d6:	2010      	movs	r0, #16
 800e6d8:	f7fe f9ec 	bl	800cab4 <malloc>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	61e0      	str	r0, [r4, #28]
 800e6e0:	b920      	cbnz	r0, 800e6ec <_Balloc+0x20>
 800e6e2:	4b18      	ldr	r3, [pc, #96]	@ (800e744 <_Balloc+0x78>)
 800e6e4:	4818      	ldr	r0, [pc, #96]	@ (800e748 <_Balloc+0x7c>)
 800e6e6:	216b      	movs	r1, #107	@ 0x6b
 800e6e8:	f000 fd90 	bl	800f20c <__assert_func>
 800e6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6f0:	6006      	str	r6, [r0, #0]
 800e6f2:	60c6      	str	r6, [r0, #12]
 800e6f4:	69e6      	ldr	r6, [r4, #28]
 800e6f6:	68f3      	ldr	r3, [r6, #12]
 800e6f8:	b183      	cbz	r3, 800e71c <_Balloc+0x50>
 800e6fa:	69e3      	ldr	r3, [r4, #28]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e702:	b9b8      	cbnz	r0, 800e734 <_Balloc+0x68>
 800e704:	2101      	movs	r1, #1
 800e706:	fa01 f605 	lsl.w	r6, r1, r5
 800e70a:	1d72      	adds	r2, r6, #5
 800e70c:	0092      	lsls	r2, r2, #2
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 fd9a 	bl	800f248 <_calloc_r>
 800e714:	b160      	cbz	r0, 800e730 <_Balloc+0x64>
 800e716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e71a:	e00e      	b.n	800e73a <_Balloc+0x6e>
 800e71c:	2221      	movs	r2, #33	@ 0x21
 800e71e:	2104      	movs	r1, #4
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fd91 	bl	800f248 <_calloc_r>
 800e726:	69e3      	ldr	r3, [r4, #28]
 800e728:	60f0      	str	r0, [r6, #12]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e4      	bne.n	800e6fa <_Balloc+0x2e>
 800e730:	2000      	movs	r0, #0
 800e732:	bd70      	pop	{r4, r5, r6, pc}
 800e734:	6802      	ldr	r2, [r0, #0]
 800e736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e73a:	2300      	movs	r3, #0
 800e73c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e740:	e7f7      	b.n	800e732 <_Balloc+0x66>
 800e742:	bf00      	nop
 800e744:	0800f9f9 	.word	0x0800f9f9
 800e748:	0800fa79 	.word	0x0800fa79

0800e74c <_Bfree>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	69c6      	ldr	r6, [r0, #28]
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	b976      	cbnz	r6, 800e774 <_Bfree+0x28>
 800e756:	2010      	movs	r0, #16
 800e758:	f7fe f9ac 	bl	800cab4 <malloc>
 800e75c:	4602      	mov	r2, r0
 800e75e:	61e8      	str	r0, [r5, #28]
 800e760:	b920      	cbnz	r0, 800e76c <_Bfree+0x20>
 800e762:	4b09      	ldr	r3, [pc, #36]	@ (800e788 <_Bfree+0x3c>)
 800e764:	4809      	ldr	r0, [pc, #36]	@ (800e78c <_Bfree+0x40>)
 800e766:	218f      	movs	r1, #143	@ 0x8f
 800e768:	f000 fd50 	bl	800f20c <__assert_func>
 800e76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e770:	6006      	str	r6, [r0, #0]
 800e772:	60c6      	str	r6, [r0, #12]
 800e774:	b13c      	cbz	r4, 800e786 <_Bfree+0x3a>
 800e776:	69eb      	ldr	r3, [r5, #28]
 800e778:	6862      	ldr	r2, [r4, #4]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e780:	6021      	str	r1, [r4, #0]
 800e782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e786:	bd70      	pop	{r4, r5, r6, pc}
 800e788:	0800f9f9 	.word	0x0800f9f9
 800e78c:	0800fa79 	.word	0x0800fa79

0800e790 <__multadd>:
 800e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	690d      	ldr	r5, [r1, #16]
 800e796:	4607      	mov	r7, r0
 800e798:	460c      	mov	r4, r1
 800e79a:	461e      	mov	r6, r3
 800e79c:	f101 0c14 	add.w	ip, r1, #20
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e7a6:	b299      	uxth	r1, r3
 800e7a8:	fb02 6101 	mla	r1, r2, r1, r6
 800e7ac:	0c1e      	lsrs	r6, r3, #16
 800e7ae:	0c0b      	lsrs	r3, r1, #16
 800e7b0:	fb02 3306 	mla	r3, r2, r6, r3
 800e7b4:	b289      	uxth	r1, r1
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7bc:	4285      	cmp	r5, r0
 800e7be:	f84c 1b04 	str.w	r1, [ip], #4
 800e7c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7c6:	dcec      	bgt.n	800e7a2 <__multadd+0x12>
 800e7c8:	b30e      	cbz	r6, 800e80e <__multadd+0x7e>
 800e7ca:	68a3      	ldr	r3, [r4, #8]
 800e7cc:	42ab      	cmp	r3, r5
 800e7ce:	dc19      	bgt.n	800e804 <__multadd+0x74>
 800e7d0:	6861      	ldr	r1, [r4, #4]
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	3101      	adds	r1, #1
 800e7d6:	f7ff ff79 	bl	800e6cc <_Balloc>
 800e7da:	4680      	mov	r8, r0
 800e7dc:	b928      	cbnz	r0, 800e7ea <__multadd+0x5a>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e814 <__multadd+0x84>)
 800e7e2:	480d      	ldr	r0, [pc, #52]	@ (800e818 <__multadd+0x88>)
 800e7e4:	21ba      	movs	r1, #186	@ 0xba
 800e7e6:	f000 fd11 	bl	800f20c <__assert_func>
 800e7ea:	6922      	ldr	r2, [r4, #16]
 800e7ec:	3202      	adds	r2, #2
 800e7ee:	f104 010c 	add.w	r1, r4, #12
 800e7f2:	0092      	lsls	r2, r2, #2
 800e7f4:	300c      	adds	r0, #12
 800e7f6:	f7ff f8c2 	bl	800d97e <memcpy>
 800e7fa:	4621      	mov	r1, r4
 800e7fc:	4638      	mov	r0, r7
 800e7fe:	f7ff ffa5 	bl	800e74c <_Bfree>
 800e802:	4644      	mov	r4, r8
 800e804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e808:	3501      	adds	r5, #1
 800e80a:	615e      	str	r6, [r3, #20]
 800e80c:	6125      	str	r5, [r4, #16]
 800e80e:	4620      	mov	r0, r4
 800e810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e814:	0800fa68 	.word	0x0800fa68
 800e818:	0800fa79 	.word	0x0800fa79

0800e81c <__hi0bits>:
 800e81c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e820:	4603      	mov	r3, r0
 800e822:	bf36      	itet	cc
 800e824:	0403      	lslcc	r3, r0, #16
 800e826:	2000      	movcs	r0, #0
 800e828:	2010      	movcc	r0, #16
 800e82a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e82e:	bf3c      	itt	cc
 800e830:	021b      	lslcc	r3, r3, #8
 800e832:	3008      	addcc	r0, #8
 800e834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e838:	bf3c      	itt	cc
 800e83a:	011b      	lslcc	r3, r3, #4
 800e83c:	3004      	addcc	r0, #4
 800e83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e842:	bf3c      	itt	cc
 800e844:	009b      	lslcc	r3, r3, #2
 800e846:	3002      	addcc	r0, #2
 800e848:	2b00      	cmp	r3, #0
 800e84a:	db05      	blt.n	800e858 <__hi0bits+0x3c>
 800e84c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e850:	f100 0001 	add.w	r0, r0, #1
 800e854:	bf08      	it	eq
 800e856:	2020      	moveq	r0, #32
 800e858:	4770      	bx	lr

0800e85a <__lo0bits>:
 800e85a:	6803      	ldr	r3, [r0, #0]
 800e85c:	4602      	mov	r2, r0
 800e85e:	f013 0007 	ands.w	r0, r3, #7
 800e862:	d00b      	beq.n	800e87c <__lo0bits+0x22>
 800e864:	07d9      	lsls	r1, r3, #31
 800e866:	d421      	bmi.n	800e8ac <__lo0bits+0x52>
 800e868:	0798      	lsls	r0, r3, #30
 800e86a:	bf49      	itett	mi
 800e86c:	085b      	lsrmi	r3, r3, #1
 800e86e:	089b      	lsrpl	r3, r3, #2
 800e870:	2001      	movmi	r0, #1
 800e872:	6013      	strmi	r3, [r2, #0]
 800e874:	bf5c      	itt	pl
 800e876:	6013      	strpl	r3, [r2, #0]
 800e878:	2002      	movpl	r0, #2
 800e87a:	4770      	bx	lr
 800e87c:	b299      	uxth	r1, r3
 800e87e:	b909      	cbnz	r1, 800e884 <__lo0bits+0x2a>
 800e880:	0c1b      	lsrs	r3, r3, #16
 800e882:	2010      	movs	r0, #16
 800e884:	b2d9      	uxtb	r1, r3
 800e886:	b909      	cbnz	r1, 800e88c <__lo0bits+0x32>
 800e888:	3008      	adds	r0, #8
 800e88a:	0a1b      	lsrs	r3, r3, #8
 800e88c:	0719      	lsls	r1, r3, #28
 800e88e:	bf04      	itt	eq
 800e890:	091b      	lsreq	r3, r3, #4
 800e892:	3004      	addeq	r0, #4
 800e894:	0799      	lsls	r1, r3, #30
 800e896:	bf04      	itt	eq
 800e898:	089b      	lsreq	r3, r3, #2
 800e89a:	3002      	addeq	r0, #2
 800e89c:	07d9      	lsls	r1, r3, #31
 800e89e:	d403      	bmi.n	800e8a8 <__lo0bits+0x4e>
 800e8a0:	085b      	lsrs	r3, r3, #1
 800e8a2:	f100 0001 	add.w	r0, r0, #1
 800e8a6:	d003      	beq.n	800e8b0 <__lo0bits+0x56>
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	4770      	bx	lr
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	4770      	bx	lr
 800e8b0:	2020      	movs	r0, #32
 800e8b2:	4770      	bx	lr

0800e8b4 <__i2b>:
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	f7ff ff07 	bl	800e6cc <_Balloc>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	b928      	cbnz	r0, 800e8ce <__i2b+0x1a>
 800e8c2:	4b05      	ldr	r3, [pc, #20]	@ (800e8d8 <__i2b+0x24>)
 800e8c4:	4805      	ldr	r0, [pc, #20]	@ (800e8dc <__i2b+0x28>)
 800e8c6:	f240 1145 	movw	r1, #325	@ 0x145
 800e8ca:	f000 fc9f 	bl	800f20c <__assert_func>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	6144      	str	r4, [r0, #20]
 800e8d2:	6103      	str	r3, [r0, #16]
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	bf00      	nop
 800e8d8:	0800fa68 	.word	0x0800fa68
 800e8dc:	0800fa79 	.word	0x0800fa79

0800e8e0 <__multiply>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	4614      	mov	r4, r2
 800e8e6:	690a      	ldr	r2, [r1, #16]
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	bfa8      	it	ge
 800e8ee:	4623      	movge	r3, r4
 800e8f0:	460f      	mov	r7, r1
 800e8f2:	bfa4      	itt	ge
 800e8f4:	460c      	movge	r4, r1
 800e8f6:	461f      	movge	r7, r3
 800e8f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e8fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e900:	68a3      	ldr	r3, [r4, #8]
 800e902:	6861      	ldr	r1, [r4, #4]
 800e904:	eb0a 0609 	add.w	r6, sl, r9
 800e908:	42b3      	cmp	r3, r6
 800e90a:	b085      	sub	sp, #20
 800e90c:	bfb8      	it	lt
 800e90e:	3101      	addlt	r1, #1
 800e910:	f7ff fedc 	bl	800e6cc <_Balloc>
 800e914:	b930      	cbnz	r0, 800e924 <__multiply+0x44>
 800e916:	4602      	mov	r2, r0
 800e918:	4b44      	ldr	r3, [pc, #272]	@ (800ea2c <__multiply+0x14c>)
 800e91a:	4845      	ldr	r0, [pc, #276]	@ (800ea30 <__multiply+0x150>)
 800e91c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e920:	f000 fc74 	bl	800f20c <__assert_func>
 800e924:	f100 0514 	add.w	r5, r0, #20
 800e928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e92c:	462b      	mov	r3, r5
 800e92e:	2200      	movs	r2, #0
 800e930:	4543      	cmp	r3, r8
 800e932:	d321      	bcc.n	800e978 <__multiply+0x98>
 800e934:	f107 0114 	add.w	r1, r7, #20
 800e938:	f104 0214 	add.w	r2, r4, #20
 800e93c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e940:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	1b13      	subs	r3, r2, r4
 800e948:	3b15      	subs	r3, #21
 800e94a:	f023 0303 	bic.w	r3, r3, #3
 800e94e:	3304      	adds	r3, #4
 800e950:	f104 0715 	add.w	r7, r4, #21
 800e954:	42ba      	cmp	r2, r7
 800e956:	bf38      	it	cc
 800e958:	2304      	movcc	r3, #4
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	9b02      	ldr	r3, [sp, #8]
 800e95e:	9103      	str	r1, [sp, #12]
 800e960:	428b      	cmp	r3, r1
 800e962:	d80c      	bhi.n	800e97e <__multiply+0x9e>
 800e964:	2e00      	cmp	r6, #0
 800e966:	dd03      	ble.n	800e970 <__multiply+0x90>
 800e968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d05b      	beq.n	800ea28 <__multiply+0x148>
 800e970:	6106      	str	r6, [r0, #16]
 800e972:	b005      	add	sp, #20
 800e974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e978:	f843 2b04 	str.w	r2, [r3], #4
 800e97c:	e7d8      	b.n	800e930 <__multiply+0x50>
 800e97e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e982:	f1ba 0f00 	cmp.w	sl, #0
 800e986:	d024      	beq.n	800e9d2 <__multiply+0xf2>
 800e988:	f104 0e14 	add.w	lr, r4, #20
 800e98c:	46a9      	mov	r9, r5
 800e98e:	f04f 0c00 	mov.w	ip, #0
 800e992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e996:	f8d9 3000 	ldr.w	r3, [r9]
 800e99a:	fa1f fb87 	uxth.w	fp, r7
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800e9a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e9a8:	f8d9 7000 	ldr.w	r7, [r9]
 800e9ac:	4463      	add	r3, ip
 800e9ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e9b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800e9b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e9c0:	4572      	cmp	r2, lr
 800e9c2:	f849 3b04 	str.w	r3, [r9], #4
 800e9c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e9ca:	d8e2      	bhi.n	800e992 <__multiply+0xb2>
 800e9cc:	9b01      	ldr	r3, [sp, #4]
 800e9ce:	f845 c003 	str.w	ip, [r5, r3]
 800e9d2:	9b03      	ldr	r3, [sp, #12]
 800e9d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e9d8:	3104      	adds	r1, #4
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	d021      	beq.n	800ea24 <__multiply+0x144>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	f104 0c14 	add.w	ip, r4, #20
 800e9e6:	46ae      	mov	lr, r5
 800e9e8:	f04f 0a00 	mov.w	sl, #0
 800e9ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e9f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e9f4:	fb09 770b 	mla	r7, r9, fp, r7
 800e9f8:	4457      	add	r7, sl
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea00:	f84e 3b04 	str.w	r3, [lr], #4
 800ea04:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea0c:	f8be 3000 	ldrh.w	r3, [lr]
 800ea10:	fb09 330a 	mla	r3, r9, sl, r3
 800ea14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ea18:	4562      	cmp	r2, ip
 800ea1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea1e:	d8e5      	bhi.n	800e9ec <__multiply+0x10c>
 800ea20:	9f01      	ldr	r7, [sp, #4]
 800ea22:	51eb      	str	r3, [r5, r7]
 800ea24:	3504      	adds	r5, #4
 800ea26:	e799      	b.n	800e95c <__multiply+0x7c>
 800ea28:	3e01      	subs	r6, #1
 800ea2a:	e79b      	b.n	800e964 <__multiply+0x84>
 800ea2c:	0800fa68 	.word	0x0800fa68
 800ea30:	0800fa79 	.word	0x0800fa79

0800ea34 <__pow5mult>:
 800ea34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	4615      	mov	r5, r2
 800ea3a:	f012 0203 	ands.w	r2, r2, #3
 800ea3e:	4607      	mov	r7, r0
 800ea40:	460e      	mov	r6, r1
 800ea42:	d007      	beq.n	800ea54 <__pow5mult+0x20>
 800ea44:	4c25      	ldr	r4, [pc, #148]	@ (800eadc <__pow5mult+0xa8>)
 800ea46:	3a01      	subs	r2, #1
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea4e:	f7ff fe9f 	bl	800e790 <__multadd>
 800ea52:	4606      	mov	r6, r0
 800ea54:	10ad      	asrs	r5, r5, #2
 800ea56:	d03d      	beq.n	800ead4 <__pow5mult+0xa0>
 800ea58:	69fc      	ldr	r4, [r7, #28]
 800ea5a:	b97c      	cbnz	r4, 800ea7c <__pow5mult+0x48>
 800ea5c:	2010      	movs	r0, #16
 800ea5e:	f7fe f829 	bl	800cab4 <malloc>
 800ea62:	4602      	mov	r2, r0
 800ea64:	61f8      	str	r0, [r7, #28]
 800ea66:	b928      	cbnz	r0, 800ea74 <__pow5mult+0x40>
 800ea68:	4b1d      	ldr	r3, [pc, #116]	@ (800eae0 <__pow5mult+0xac>)
 800ea6a:	481e      	ldr	r0, [pc, #120]	@ (800eae4 <__pow5mult+0xb0>)
 800ea6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea70:	f000 fbcc 	bl	800f20c <__assert_func>
 800ea74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea78:	6004      	str	r4, [r0, #0]
 800ea7a:	60c4      	str	r4, [r0, #12]
 800ea7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea84:	b94c      	cbnz	r4, 800ea9a <__pow5mult+0x66>
 800ea86:	f240 2171 	movw	r1, #625	@ 0x271
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f7ff ff12 	bl	800e8b4 <__i2b>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea96:	4604      	mov	r4, r0
 800ea98:	6003      	str	r3, [r0, #0]
 800ea9a:	f04f 0900 	mov.w	r9, #0
 800ea9e:	07eb      	lsls	r3, r5, #31
 800eaa0:	d50a      	bpl.n	800eab8 <__pow5mult+0x84>
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	f7ff ff1a 	bl	800e8e0 <__multiply>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4680      	mov	r8, r0
 800eab0:	4638      	mov	r0, r7
 800eab2:	f7ff fe4b 	bl	800e74c <_Bfree>
 800eab6:	4646      	mov	r6, r8
 800eab8:	106d      	asrs	r5, r5, #1
 800eaba:	d00b      	beq.n	800ead4 <__pow5mult+0xa0>
 800eabc:	6820      	ldr	r0, [r4, #0]
 800eabe:	b938      	cbnz	r0, 800ead0 <__pow5mult+0x9c>
 800eac0:	4622      	mov	r2, r4
 800eac2:	4621      	mov	r1, r4
 800eac4:	4638      	mov	r0, r7
 800eac6:	f7ff ff0b 	bl	800e8e0 <__multiply>
 800eaca:	6020      	str	r0, [r4, #0]
 800eacc:	f8c0 9000 	str.w	r9, [r0]
 800ead0:	4604      	mov	r4, r0
 800ead2:	e7e4      	b.n	800ea9e <__pow5mult+0x6a>
 800ead4:	4630      	mov	r0, r6
 800ead6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eada:	bf00      	nop
 800eadc:	0800fad4 	.word	0x0800fad4
 800eae0:	0800f9f9 	.word	0x0800f9f9
 800eae4:	0800fa79 	.word	0x0800fa79

0800eae8 <__lshift>:
 800eae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaec:	460c      	mov	r4, r1
 800eaee:	6849      	ldr	r1, [r1, #4]
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaf6:	68a3      	ldr	r3, [r4, #8]
 800eaf8:	4607      	mov	r7, r0
 800eafa:	4691      	mov	r9, r2
 800eafc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb00:	f108 0601 	add.w	r6, r8, #1
 800eb04:	42b3      	cmp	r3, r6
 800eb06:	db0b      	blt.n	800eb20 <__lshift+0x38>
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7ff fddf 	bl	800e6cc <_Balloc>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	b948      	cbnz	r0, 800eb26 <__lshift+0x3e>
 800eb12:	4602      	mov	r2, r0
 800eb14:	4b28      	ldr	r3, [pc, #160]	@ (800ebb8 <__lshift+0xd0>)
 800eb16:	4829      	ldr	r0, [pc, #164]	@ (800ebbc <__lshift+0xd4>)
 800eb18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb1c:	f000 fb76 	bl	800f20c <__assert_func>
 800eb20:	3101      	adds	r1, #1
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	e7ee      	b.n	800eb04 <__lshift+0x1c>
 800eb26:	2300      	movs	r3, #0
 800eb28:	f100 0114 	add.w	r1, r0, #20
 800eb2c:	f100 0210 	add.w	r2, r0, #16
 800eb30:	4618      	mov	r0, r3
 800eb32:	4553      	cmp	r3, sl
 800eb34:	db33      	blt.n	800eb9e <__lshift+0xb6>
 800eb36:	6920      	ldr	r0, [r4, #16]
 800eb38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb3c:	f104 0314 	add.w	r3, r4, #20
 800eb40:	f019 091f 	ands.w	r9, r9, #31
 800eb44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb4c:	d02b      	beq.n	800eba6 <__lshift+0xbe>
 800eb4e:	f1c9 0e20 	rsb	lr, r9, #32
 800eb52:	468a      	mov	sl, r1
 800eb54:	2200      	movs	r2, #0
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	fa00 f009 	lsl.w	r0, r0, r9
 800eb5c:	4310      	orrs	r0, r2
 800eb5e:	f84a 0b04 	str.w	r0, [sl], #4
 800eb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb66:	459c      	cmp	ip, r3
 800eb68:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb6c:	d8f3      	bhi.n	800eb56 <__lshift+0x6e>
 800eb6e:	ebac 0304 	sub.w	r3, ip, r4
 800eb72:	3b15      	subs	r3, #21
 800eb74:	f023 0303 	bic.w	r3, r3, #3
 800eb78:	3304      	adds	r3, #4
 800eb7a:	f104 0015 	add.w	r0, r4, #21
 800eb7e:	4584      	cmp	ip, r0
 800eb80:	bf38      	it	cc
 800eb82:	2304      	movcc	r3, #4
 800eb84:	50ca      	str	r2, [r1, r3]
 800eb86:	b10a      	cbz	r2, 800eb8c <__lshift+0xa4>
 800eb88:	f108 0602 	add.w	r6, r8, #2
 800eb8c:	3e01      	subs	r6, #1
 800eb8e:	4638      	mov	r0, r7
 800eb90:	612e      	str	r6, [r5, #16]
 800eb92:	4621      	mov	r1, r4
 800eb94:	f7ff fdda 	bl	800e74c <_Bfree>
 800eb98:	4628      	mov	r0, r5
 800eb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800eba2:	3301      	adds	r3, #1
 800eba4:	e7c5      	b.n	800eb32 <__lshift+0x4a>
 800eba6:	3904      	subs	r1, #4
 800eba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebac:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebb0:	459c      	cmp	ip, r3
 800ebb2:	d8f9      	bhi.n	800eba8 <__lshift+0xc0>
 800ebb4:	e7ea      	b.n	800eb8c <__lshift+0xa4>
 800ebb6:	bf00      	nop
 800ebb8:	0800fa68 	.word	0x0800fa68
 800ebbc:	0800fa79 	.word	0x0800fa79

0800ebc0 <__mcmp>:
 800ebc0:	690a      	ldr	r2, [r1, #16]
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	6900      	ldr	r0, [r0, #16]
 800ebc6:	1a80      	subs	r0, r0, r2
 800ebc8:	b530      	push	{r4, r5, lr}
 800ebca:	d10e      	bne.n	800ebea <__mcmp+0x2a>
 800ebcc:	3314      	adds	r3, #20
 800ebce:	3114      	adds	r1, #20
 800ebd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ebd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ebd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ebdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ebe0:	4295      	cmp	r5, r2
 800ebe2:	d003      	beq.n	800ebec <__mcmp+0x2c>
 800ebe4:	d205      	bcs.n	800ebf2 <__mcmp+0x32>
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebea:	bd30      	pop	{r4, r5, pc}
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	d3f3      	bcc.n	800ebd8 <__mcmp+0x18>
 800ebf0:	e7fb      	b.n	800ebea <__mcmp+0x2a>
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	e7f9      	b.n	800ebea <__mcmp+0x2a>
	...

0800ebf8 <__mdiff>:
 800ebf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	4689      	mov	r9, r1
 800ebfe:	4606      	mov	r6, r0
 800ec00:	4611      	mov	r1, r2
 800ec02:	4648      	mov	r0, r9
 800ec04:	4614      	mov	r4, r2
 800ec06:	f7ff ffdb 	bl	800ebc0 <__mcmp>
 800ec0a:	1e05      	subs	r5, r0, #0
 800ec0c:	d112      	bne.n	800ec34 <__mdiff+0x3c>
 800ec0e:	4629      	mov	r1, r5
 800ec10:	4630      	mov	r0, r6
 800ec12:	f7ff fd5b 	bl	800e6cc <_Balloc>
 800ec16:	4602      	mov	r2, r0
 800ec18:	b928      	cbnz	r0, 800ec26 <__mdiff+0x2e>
 800ec1a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed18 <__mdiff+0x120>)
 800ec1c:	f240 2137 	movw	r1, #567	@ 0x237
 800ec20:	483e      	ldr	r0, [pc, #248]	@ (800ed1c <__mdiff+0x124>)
 800ec22:	f000 faf3 	bl	800f20c <__assert_func>
 800ec26:	2301      	movs	r3, #1
 800ec28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	b003      	add	sp, #12
 800ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec34:	bfbc      	itt	lt
 800ec36:	464b      	movlt	r3, r9
 800ec38:	46a1      	movlt	r9, r4
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ec40:	bfba      	itte	lt
 800ec42:	461c      	movlt	r4, r3
 800ec44:	2501      	movlt	r5, #1
 800ec46:	2500      	movge	r5, #0
 800ec48:	f7ff fd40 	bl	800e6cc <_Balloc>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	b918      	cbnz	r0, 800ec58 <__mdiff+0x60>
 800ec50:	4b31      	ldr	r3, [pc, #196]	@ (800ed18 <__mdiff+0x120>)
 800ec52:	f240 2145 	movw	r1, #581	@ 0x245
 800ec56:	e7e3      	b.n	800ec20 <__mdiff+0x28>
 800ec58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec5c:	6926      	ldr	r6, [r4, #16]
 800ec5e:	60c5      	str	r5, [r0, #12]
 800ec60:	f109 0310 	add.w	r3, r9, #16
 800ec64:	f109 0514 	add.w	r5, r9, #20
 800ec68:	f104 0e14 	add.w	lr, r4, #20
 800ec6c:	f100 0b14 	add.w	fp, r0, #20
 800ec70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	46d9      	mov	r9, fp
 800ec7c:	f04f 0c00 	mov.w	ip, #0
 800ec80:	9b01      	ldr	r3, [sp, #4]
 800ec82:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec86:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec8a:	9301      	str	r3, [sp, #4]
 800ec8c:	fa1f f38a 	uxth.w	r3, sl
 800ec90:	4619      	mov	r1, r3
 800ec92:	b283      	uxth	r3, r0
 800ec94:	1acb      	subs	r3, r1, r3
 800ec96:	0c00      	lsrs	r0, r0, #16
 800ec98:	4463      	add	r3, ip
 800ec9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eca8:	4576      	cmp	r6, lr
 800ecaa:	f849 3b04 	str.w	r3, [r9], #4
 800ecae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ecb2:	d8e5      	bhi.n	800ec80 <__mdiff+0x88>
 800ecb4:	1b33      	subs	r3, r6, r4
 800ecb6:	3b15      	subs	r3, #21
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
 800ecbc:	3415      	adds	r4, #21
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	42a6      	cmp	r6, r4
 800ecc2:	bf38      	it	cc
 800ecc4:	2304      	movcc	r3, #4
 800ecc6:	441d      	add	r5, r3
 800ecc8:	445b      	add	r3, fp
 800ecca:	461e      	mov	r6, r3
 800eccc:	462c      	mov	r4, r5
 800ecce:	4544      	cmp	r4, r8
 800ecd0:	d30e      	bcc.n	800ecf0 <__mdiff+0xf8>
 800ecd2:	f108 0103 	add.w	r1, r8, #3
 800ecd6:	1b49      	subs	r1, r1, r5
 800ecd8:	f021 0103 	bic.w	r1, r1, #3
 800ecdc:	3d03      	subs	r5, #3
 800ecde:	45a8      	cmp	r8, r5
 800ece0:	bf38      	it	cc
 800ece2:	2100      	movcc	r1, #0
 800ece4:	440b      	add	r3, r1
 800ece6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ecea:	b191      	cbz	r1, 800ed12 <__mdiff+0x11a>
 800ecec:	6117      	str	r7, [r2, #16]
 800ecee:	e79d      	b.n	800ec2c <__mdiff+0x34>
 800ecf0:	f854 1b04 	ldr.w	r1, [r4], #4
 800ecf4:	46e6      	mov	lr, ip
 800ecf6:	0c08      	lsrs	r0, r1, #16
 800ecf8:	fa1c fc81 	uxtah	ip, ip, r1
 800ecfc:	4471      	add	r1, lr
 800ecfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ed02:	b289      	uxth	r1, r1
 800ed04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed08:	f846 1b04 	str.w	r1, [r6], #4
 800ed0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed10:	e7dd      	b.n	800ecce <__mdiff+0xd6>
 800ed12:	3f01      	subs	r7, #1
 800ed14:	e7e7      	b.n	800ece6 <__mdiff+0xee>
 800ed16:	bf00      	nop
 800ed18:	0800fa68 	.word	0x0800fa68
 800ed1c:	0800fa79 	.word	0x0800fa79

0800ed20 <__d2b>:
 800ed20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed24:	460f      	mov	r7, r1
 800ed26:	2101      	movs	r1, #1
 800ed28:	ec59 8b10 	vmov	r8, r9, d0
 800ed2c:	4616      	mov	r6, r2
 800ed2e:	f7ff fccd 	bl	800e6cc <_Balloc>
 800ed32:	4604      	mov	r4, r0
 800ed34:	b930      	cbnz	r0, 800ed44 <__d2b+0x24>
 800ed36:	4602      	mov	r2, r0
 800ed38:	4b23      	ldr	r3, [pc, #140]	@ (800edc8 <__d2b+0xa8>)
 800ed3a:	4824      	ldr	r0, [pc, #144]	@ (800edcc <__d2b+0xac>)
 800ed3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed40:	f000 fa64 	bl	800f20c <__assert_func>
 800ed44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed4c:	b10d      	cbz	r5, 800ed52 <__d2b+0x32>
 800ed4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	f1b8 0300 	subs.w	r3, r8, #0
 800ed58:	d023      	beq.n	800eda2 <__d2b+0x82>
 800ed5a:	4668      	mov	r0, sp
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	f7ff fd7c 	bl	800e85a <__lo0bits>
 800ed62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed66:	b1d0      	cbz	r0, 800ed9e <__d2b+0x7e>
 800ed68:	f1c0 0320 	rsb	r3, r0, #32
 800ed6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed70:	430b      	orrs	r3, r1
 800ed72:	40c2      	lsrs	r2, r0
 800ed74:	6163      	str	r3, [r4, #20]
 800ed76:	9201      	str	r2, [sp, #4]
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	61a3      	str	r3, [r4, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	bf0c      	ite	eq
 800ed80:	2201      	moveq	r2, #1
 800ed82:	2202      	movne	r2, #2
 800ed84:	6122      	str	r2, [r4, #16]
 800ed86:	b1a5      	cbz	r5, 800edb2 <__d2b+0x92>
 800ed88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed8c:	4405      	add	r5, r0
 800ed8e:	603d      	str	r5, [r7, #0]
 800ed90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed94:	6030      	str	r0, [r6, #0]
 800ed96:	4620      	mov	r0, r4
 800ed98:	b003      	add	sp, #12
 800ed9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed9e:	6161      	str	r1, [r4, #20]
 800eda0:	e7ea      	b.n	800ed78 <__d2b+0x58>
 800eda2:	a801      	add	r0, sp, #4
 800eda4:	f7ff fd59 	bl	800e85a <__lo0bits>
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	6163      	str	r3, [r4, #20]
 800edac:	3020      	adds	r0, #32
 800edae:	2201      	movs	r2, #1
 800edb0:	e7e8      	b.n	800ed84 <__d2b+0x64>
 800edb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edba:	6038      	str	r0, [r7, #0]
 800edbc:	6918      	ldr	r0, [r3, #16]
 800edbe:	f7ff fd2d 	bl	800e81c <__hi0bits>
 800edc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edc6:	e7e5      	b.n	800ed94 <__d2b+0x74>
 800edc8:	0800fa68 	.word	0x0800fa68
 800edcc:	0800fa79 	.word	0x0800fa79

0800edd0 <__ssputs_r>:
 800edd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd4:	688e      	ldr	r6, [r1, #8]
 800edd6:	461f      	mov	r7, r3
 800edd8:	42be      	cmp	r6, r7
 800edda:	680b      	ldr	r3, [r1, #0]
 800eddc:	4682      	mov	sl, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	4690      	mov	r8, r2
 800ede2:	d82d      	bhi.n	800ee40 <__ssputs_r+0x70>
 800ede4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ede8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800edec:	d026      	beq.n	800ee3c <__ssputs_r+0x6c>
 800edee:	6965      	ldr	r5, [r4, #20]
 800edf0:	6909      	ldr	r1, [r1, #16]
 800edf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edf6:	eba3 0901 	sub.w	r9, r3, r1
 800edfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edfe:	1c7b      	adds	r3, r7, #1
 800ee00:	444b      	add	r3, r9
 800ee02:	106d      	asrs	r5, r5, #1
 800ee04:	429d      	cmp	r5, r3
 800ee06:	bf38      	it	cc
 800ee08:	461d      	movcc	r5, r3
 800ee0a:	0553      	lsls	r3, r2, #21
 800ee0c:	d527      	bpl.n	800ee5e <__ssputs_r+0x8e>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	f7fd fe82 	bl	800cb18 <_malloc_r>
 800ee14:	4606      	mov	r6, r0
 800ee16:	b360      	cbz	r0, 800ee72 <__ssputs_r+0xa2>
 800ee18:	6921      	ldr	r1, [r4, #16]
 800ee1a:	464a      	mov	r2, r9
 800ee1c:	f7fe fdaf 	bl	800d97e <memcpy>
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ee26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee2a:	81a3      	strh	r3, [r4, #12]
 800ee2c:	6126      	str	r6, [r4, #16]
 800ee2e:	6165      	str	r5, [r4, #20]
 800ee30:	444e      	add	r6, r9
 800ee32:	eba5 0509 	sub.w	r5, r5, r9
 800ee36:	6026      	str	r6, [r4, #0]
 800ee38:	60a5      	str	r5, [r4, #8]
 800ee3a:	463e      	mov	r6, r7
 800ee3c:	42be      	cmp	r6, r7
 800ee3e:	d900      	bls.n	800ee42 <__ssputs_r+0x72>
 800ee40:	463e      	mov	r6, r7
 800ee42:	6820      	ldr	r0, [r4, #0]
 800ee44:	4632      	mov	r2, r6
 800ee46:	4641      	mov	r1, r8
 800ee48:	f000 f9c6 	bl	800f1d8 <memmove>
 800ee4c:	68a3      	ldr	r3, [r4, #8]
 800ee4e:	1b9b      	subs	r3, r3, r6
 800ee50:	60a3      	str	r3, [r4, #8]
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	4433      	add	r3, r6
 800ee56:	6023      	str	r3, [r4, #0]
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5e:	462a      	mov	r2, r5
 800ee60:	f000 fa18 	bl	800f294 <_realloc_r>
 800ee64:	4606      	mov	r6, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d1e0      	bne.n	800ee2c <__ssputs_r+0x5c>
 800ee6a:	6921      	ldr	r1, [r4, #16]
 800ee6c:	4650      	mov	r0, sl
 800ee6e:	f7ff fbe3 	bl	800e638 <_free_r>
 800ee72:	230c      	movs	r3, #12
 800ee74:	f8ca 3000 	str.w	r3, [sl]
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee7e:	81a3      	strh	r3, [r4, #12]
 800ee80:	f04f 30ff 	mov.w	r0, #4294967295
 800ee84:	e7e9      	b.n	800ee5a <__ssputs_r+0x8a>
	...

0800ee88 <_svfiprintf_r>:
 800ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8c:	4698      	mov	r8, r3
 800ee8e:	898b      	ldrh	r3, [r1, #12]
 800ee90:	061b      	lsls	r3, r3, #24
 800ee92:	b09d      	sub	sp, #116	@ 0x74
 800ee94:	4607      	mov	r7, r0
 800ee96:	460d      	mov	r5, r1
 800ee98:	4614      	mov	r4, r2
 800ee9a:	d510      	bpl.n	800eebe <_svfiprintf_r+0x36>
 800ee9c:	690b      	ldr	r3, [r1, #16]
 800ee9e:	b973      	cbnz	r3, 800eebe <_svfiprintf_r+0x36>
 800eea0:	2140      	movs	r1, #64	@ 0x40
 800eea2:	f7fd fe39 	bl	800cb18 <_malloc_r>
 800eea6:	6028      	str	r0, [r5, #0]
 800eea8:	6128      	str	r0, [r5, #16]
 800eeaa:	b930      	cbnz	r0, 800eeba <_svfiprintf_r+0x32>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb4:	b01d      	add	sp, #116	@ 0x74
 800eeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeba:	2340      	movs	r3, #64	@ 0x40
 800eebc:	616b      	str	r3, [r5, #20]
 800eebe:	2300      	movs	r3, #0
 800eec0:	9309      	str	r3, [sp, #36]	@ 0x24
 800eec2:	2320      	movs	r3, #32
 800eec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eec8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eecc:	2330      	movs	r3, #48	@ 0x30
 800eece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f06c <_svfiprintf_r+0x1e4>
 800eed2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eed6:	f04f 0901 	mov.w	r9, #1
 800eeda:	4623      	mov	r3, r4
 800eedc:	469a      	mov	sl, r3
 800eede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eee2:	b10a      	cbz	r2, 800eee8 <_svfiprintf_r+0x60>
 800eee4:	2a25      	cmp	r2, #37	@ 0x25
 800eee6:	d1f9      	bne.n	800eedc <_svfiprintf_r+0x54>
 800eee8:	ebba 0b04 	subs.w	fp, sl, r4
 800eeec:	d00b      	beq.n	800ef06 <_svfiprintf_r+0x7e>
 800eeee:	465b      	mov	r3, fp
 800eef0:	4622      	mov	r2, r4
 800eef2:	4629      	mov	r1, r5
 800eef4:	4638      	mov	r0, r7
 800eef6:	f7ff ff6b 	bl	800edd0 <__ssputs_r>
 800eefa:	3001      	adds	r0, #1
 800eefc:	f000 80a7 	beq.w	800f04e <_svfiprintf_r+0x1c6>
 800ef00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef02:	445a      	add	r2, fp
 800ef04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef06:	f89a 3000 	ldrb.w	r3, [sl]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 809f 	beq.w	800f04e <_svfiprintf_r+0x1c6>
 800ef10:	2300      	movs	r3, #0
 800ef12:	f04f 32ff 	mov.w	r2, #4294967295
 800ef16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef1a:	f10a 0a01 	add.w	sl, sl, #1
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	9307      	str	r3, [sp, #28]
 800ef22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef26:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef28:	4654      	mov	r4, sl
 800ef2a:	2205      	movs	r2, #5
 800ef2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef30:	484e      	ldr	r0, [pc, #312]	@ (800f06c <_svfiprintf_r+0x1e4>)
 800ef32:	f7f1 f955 	bl	80001e0 <memchr>
 800ef36:	9a04      	ldr	r2, [sp, #16]
 800ef38:	b9d8      	cbnz	r0, 800ef72 <_svfiprintf_r+0xea>
 800ef3a:	06d0      	lsls	r0, r2, #27
 800ef3c:	bf44      	itt	mi
 800ef3e:	2320      	movmi	r3, #32
 800ef40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef44:	0711      	lsls	r1, r2, #28
 800ef46:	bf44      	itt	mi
 800ef48:	232b      	movmi	r3, #43	@ 0x2b
 800ef4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef54:	d015      	beq.n	800ef82 <_svfiprintf_r+0xfa>
 800ef56:	9a07      	ldr	r2, [sp, #28]
 800ef58:	4654      	mov	r4, sl
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	f04f 0c0a 	mov.w	ip, #10
 800ef60:	4621      	mov	r1, r4
 800ef62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef66:	3b30      	subs	r3, #48	@ 0x30
 800ef68:	2b09      	cmp	r3, #9
 800ef6a:	d94b      	bls.n	800f004 <_svfiprintf_r+0x17c>
 800ef6c:	b1b0      	cbz	r0, 800ef9c <_svfiprintf_r+0x114>
 800ef6e:	9207      	str	r2, [sp, #28]
 800ef70:	e014      	b.n	800ef9c <_svfiprintf_r+0x114>
 800ef72:	eba0 0308 	sub.w	r3, r0, r8
 800ef76:	fa09 f303 	lsl.w	r3, r9, r3
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	9304      	str	r3, [sp, #16]
 800ef7e:	46a2      	mov	sl, r4
 800ef80:	e7d2      	b.n	800ef28 <_svfiprintf_r+0xa0>
 800ef82:	9b03      	ldr	r3, [sp, #12]
 800ef84:	1d19      	adds	r1, r3, #4
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	9103      	str	r1, [sp, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	bfbb      	ittet	lt
 800ef8e:	425b      	neglt	r3, r3
 800ef90:	f042 0202 	orrlt.w	r2, r2, #2
 800ef94:	9307      	strge	r3, [sp, #28]
 800ef96:	9307      	strlt	r3, [sp, #28]
 800ef98:	bfb8      	it	lt
 800ef9a:	9204      	strlt	r2, [sp, #16]
 800ef9c:	7823      	ldrb	r3, [r4, #0]
 800ef9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa0:	d10a      	bne.n	800efb8 <_svfiprintf_r+0x130>
 800efa2:	7863      	ldrb	r3, [r4, #1]
 800efa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800efa6:	d132      	bne.n	800f00e <_svfiprintf_r+0x186>
 800efa8:	9b03      	ldr	r3, [sp, #12]
 800efaa:	1d1a      	adds	r2, r3, #4
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	9203      	str	r2, [sp, #12]
 800efb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efb4:	3402      	adds	r4, #2
 800efb6:	9305      	str	r3, [sp, #20]
 800efb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f07c <_svfiprintf_r+0x1f4>
 800efbc:	7821      	ldrb	r1, [r4, #0]
 800efbe:	2203      	movs	r2, #3
 800efc0:	4650      	mov	r0, sl
 800efc2:	f7f1 f90d 	bl	80001e0 <memchr>
 800efc6:	b138      	cbz	r0, 800efd8 <_svfiprintf_r+0x150>
 800efc8:	9b04      	ldr	r3, [sp, #16]
 800efca:	eba0 000a 	sub.w	r0, r0, sl
 800efce:	2240      	movs	r2, #64	@ 0x40
 800efd0:	4082      	lsls	r2, r0
 800efd2:	4313      	orrs	r3, r2
 800efd4:	3401      	adds	r4, #1
 800efd6:	9304      	str	r3, [sp, #16]
 800efd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efdc:	4824      	ldr	r0, [pc, #144]	@ (800f070 <_svfiprintf_r+0x1e8>)
 800efde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efe2:	2206      	movs	r2, #6
 800efe4:	f7f1 f8fc 	bl	80001e0 <memchr>
 800efe8:	2800      	cmp	r0, #0
 800efea:	d036      	beq.n	800f05a <_svfiprintf_r+0x1d2>
 800efec:	4b21      	ldr	r3, [pc, #132]	@ (800f074 <_svfiprintf_r+0x1ec>)
 800efee:	bb1b      	cbnz	r3, 800f038 <_svfiprintf_r+0x1b0>
 800eff0:	9b03      	ldr	r3, [sp, #12]
 800eff2:	3307      	adds	r3, #7
 800eff4:	f023 0307 	bic.w	r3, r3, #7
 800eff8:	3308      	adds	r3, #8
 800effa:	9303      	str	r3, [sp, #12]
 800effc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effe:	4433      	add	r3, r6
 800f000:	9309      	str	r3, [sp, #36]	@ 0x24
 800f002:	e76a      	b.n	800eeda <_svfiprintf_r+0x52>
 800f004:	fb0c 3202 	mla	r2, ip, r2, r3
 800f008:	460c      	mov	r4, r1
 800f00a:	2001      	movs	r0, #1
 800f00c:	e7a8      	b.n	800ef60 <_svfiprintf_r+0xd8>
 800f00e:	2300      	movs	r3, #0
 800f010:	3401      	adds	r4, #1
 800f012:	9305      	str	r3, [sp, #20]
 800f014:	4619      	mov	r1, r3
 800f016:	f04f 0c0a 	mov.w	ip, #10
 800f01a:	4620      	mov	r0, r4
 800f01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f020:	3a30      	subs	r2, #48	@ 0x30
 800f022:	2a09      	cmp	r2, #9
 800f024:	d903      	bls.n	800f02e <_svfiprintf_r+0x1a6>
 800f026:	2b00      	cmp	r3, #0
 800f028:	d0c6      	beq.n	800efb8 <_svfiprintf_r+0x130>
 800f02a:	9105      	str	r1, [sp, #20]
 800f02c:	e7c4      	b.n	800efb8 <_svfiprintf_r+0x130>
 800f02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f032:	4604      	mov	r4, r0
 800f034:	2301      	movs	r3, #1
 800f036:	e7f0      	b.n	800f01a <_svfiprintf_r+0x192>
 800f038:	ab03      	add	r3, sp, #12
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	462a      	mov	r2, r5
 800f03e:	4b0e      	ldr	r3, [pc, #56]	@ (800f078 <_svfiprintf_r+0x1f0>)
 800f040:	a904      	add	r1, sp, #16
 800f042:	4638      	mov	r0, r7
 800f044:	f7fd fe94 	bl	800cd70 <_printf_float>
 800f048:	1c42      	adds	r2, r0, #1
 800f04a:	4606      	mov	r6, r0
 800f04c:	d1d6      	bne.n	800effc <_svfiprintf_r+0x174>
 800f04e:	89ab      	ldrh	r3, [r5, #12]
 800f050:	065b      	lsls	r3, r3, #25
 800f052:	f53f af2d 	bmi.w	800eeb0 <_svfiprintf_r+0x28>
 800f056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f058:	e72c      	b.n	800eeb4 <_svfiprintf_r+0x2c>
 800f05a:	ab03      	add	r3, sp, #12
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	462a      	mov	r2, r5
 800f060:	4b05      	ldr	r3, [pc, #20]	@ (800f078 <_svfiprintf_r+0x1f0>)
 800f062:	a904      	add	r1, sp, #16
 800f064:	4638      	mov	r0, r7
 800f066:	f7fe f91b 	bl	800d2a0 <_printf_i>
 800f06a:	e7ed      	b.n	800f048 <_svfiprintf_r+0x1c0>
 800f06c:	0800fbd0 	.word	0x0800fbd0
 800f070:	0800fbda 	.word	0x0800fbda
 800f074:	0800cd71 	.word	0x0800cd71
 800f078:	0800edd1 	.word	0x0800edd1
 800f07c:	0800fbd6 	.word	0x0800fbd6

0800f080 <__sflush_r>:
 800f080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	0716      	lsls	r6, r2, #28
 800f08a:	4605      	mov	r5, r0
 800f08c:	460c      	mov	r4, r1
 800f08e:	d454      	bmi.n	800f13a <__sflush_r+0xba>
 800f090:	684b      	ldr	r3, [r1, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	dc02      	bgt.n	800f09c <__sflush_r+0x1c>
 800f096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dd48      	ble.n	800f12e <__sflush_r+0xae>
 800f09c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f09e:	2e00      	cmp	r6, #0
 800f0a0:	d045      	beq.n	800f12e <__sflush_r+0xae>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0a8:	682f      	ldr	r7, [r5, #0]
 800f0aa:	6a21      	ldr	r1, [r4, #32]
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	d030      	beq.n	800f112 <__sflush_r+0x92>
 800f0b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	0759      	lsls	r1, r3, #29
 800f0b6:	d505      	bpl.n	800f0c4 <__sflush_r+0x44>
 800f0b8:	6863      	ldr	r3, [r4, #4]
 800f0ba:	1ad2      	subs	r2, r2, r3
 800f0bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0be:	b10b      	cbz	r3, 800f0c4 <__sflush_r+0x44>
 800f0c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0c2:	1ad2      	subs	r2, r2, r3
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0c8:	6a21      	ldr	r1, [r4, #32]
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	47b0      	blx	r6
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	d106      	bne.n	800f0e2 <__sflush_r+0x62>
 800f0d4:	6829      	ldr	r1, [r5, #0]
 800f0d6:	291d      	cmp	r1, #29
 800f0d8:	d82b      	bhi.n	800f132 <__sflush_r+0xb2>
 800f0da:	4a2a      	ldr	r2, [pc, #168]	@ (800f184 <__sflush_r+0x104>)
 800f0dc:	410a      	asrs	r2, r1
 800f0de:	07d6      	lsls	r6, r2, #31
 800f0e0:	d427      	bmi.n	800f132 <__sflush_r+0xb2>
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	6062      	str	r2, [r4, #4]
 800f0e6:	04d9      	lsls	r1, r3, #19
 800f0e8:	6922      	ldr	r2, [r4, #16]
 800f0ea:	6022      	str	r2, [r4, #0]
 800f0ec:	d504      	bpl.n	800f0f8 <__sflush_r+0x78>
 800f0ee:	1c42      	adds	r2, r0, #1
 800f0f0:	d101      	bne.n	800f0f6 <__sflush_r+0x76>
 800f0f2:	682b      	ldr	r3, [r5, #0]
 800f0f4:	b903      	cbnz	r3, 800f0f8 <__sflush_r+0x78>
 800f0f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0fa:	602f      	str	r7, [r5, #0]
 800f0fc:	b1b9      	cbz	r1, 800f12e <__sflush_r+0xae>
 800f0fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f102:	4299      	cmp	r1, r3
 800f104:	d002      	beq.n	800f10c <__sflush_r+0x8c>
 800f106:	4628      	mov	r0, r5
 800f108:	f7ff fa96 	bl	800e638 <_free_r>
 800f10c:	2300      	movs	r3, #0
 800f10e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f110:	e00d      	b.n	800f12e <__sflush_r+0xae>
 800f112:	2301      	movs	r3, #1
 800f114:	4628      	mov	r0, r5
 800f116:	47b0      	blx	r6
 800f118:	4602      	mov	r2, r0
 800f11a:	1c50      	adds	r0, r2, #1
 800f11c:	d1c9      	bne.n	800f0b2 <__sflush_r+0x32>
 800f11e:	682b      	ldr	r3, [r5, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d0c6      	beq.n	800f0b2 <__sflush_r+0x32>
 800f124:	2b1d      	cmp	r3, #29
 800f126:	d001      	beq.n	800f12c <__sflush_r+0xac>
 800f128:	2b16      	cmp	r3, #22
 800f12a:	d11e      	bne.n	800f16a <__sflush_r+0xea>
 800f12c:	602f      	str	r7, [r5, #0]
 800f12e:	2000      	movs	r0, #0
 800f130:	e022      	b.n	800f178 <__sflush_r+0xf8>
 800f132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f136:	b21b      	sxth	r3, r3
 800f138:	e01b      	b.n	800f172 <__sflush_r+0xf2>
 800f13a:	690f      	ldr	r7, [r1, #16]
 800f13c:	2f00      	cmp	r7, #0
 800f13e:	d0f6      	beq.n	800f12e <__sflush_r+0xae>
 800f140:	0793      	lsls	r3, r2, #30
 800f142:	680e      	ldr	r6, [r1, #0]
 800f144:	bf08      	it	eq
 800f146:	694b      	ldreq	r3, [r1, #20]
 800f148:	600f      	str	r7, [r1, #0]
 800f14a:	bf18      	it	ne
 800f14c:	2300      	movne	r3, #0
 800f14e:	eba6 0807 	sub.w	r8, r6, r7
 800f152:	608b      	str	r3, [r1, #8]
 800f154:	f1b8 0f00 	cmp.w	r8, #0
 800f158:	dde9      	ble.n	800f12e <__sflush_r+0xae>
 800f15a:	6a21      	ldr	r1, [r4, #32]
 800f15c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f15e:	4643      	mov	r3, r8
 800f160:	463a      	mov	r2, r7
 800f162:	4628      	mov	r0, r5
 800f164:	47b0      	blx	r6
 800f166:	2800      	cmp	r0, #0
 800f168:	dc08      	bgt.n	800f17c <__sflush_r+0xfc>
 800f16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f172:	81a3      	strh	r3, [r4, #12]
 800f174:	f04f 30ff 	mov.w	r0, #4294967295
 800f178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f17c:	4407      	add	r7, r0
 800f17e:	eba8 0800 	sub.w	r8, r8, r0
 800f182:	e7e7      	b.n	800f154 <__sflush_r+0xd4>
 800f184:	dfbffffe 	.word	0xdfbffffe

0800f188 <_fflush_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	690b      	ldr	r3, [r1, #16]
 800f18c:	4605      	mov	r5, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	b913      	cbnz	r3, 800f198 <_fflush_r+0x10>
 800f192:	2500      	movs	r5, #0
 800f194:	4628      	mov	r0, r5
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	b118      	cbz	r0, 800f1a2 <_fflush_r+0x1a>
 800f19a:	6a03      	ldr	r3, [r0, #32]
 800f19c:	b90b      	cbnz	r3, 800f1a2 <_fflush_r+0x1a>
 800f19e:	f7fe fa2b 	bl	800d5f8 <__sinit>
 800f1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d0f3      	beq.n	800f192 <_fflush_r+0xa>
 800f1aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1ac:	07d0      	lsls	r0, r2, #31
 800f1ae:	d404      	bmi.n	800f1ba <_fflush_r+0x32>
 800f1b0:	0599      	lsls	r1, r3, #22
 800f1b2:	d402      	bmi.n	800f1ba <_fflush_r+0x32>
 800f1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1b6:	f7fe fbe0 	bl	800d97a <__retarget_lock_acquire_recursive>
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	4621      	mov	r1, r4
 800f1be:	f7ff ff5f 	bl	800f080 <__sflush_r>
 800f1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1c4:	07da      	lsls	r2, r3, #31
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	d4e4      	bmi.n	800f194 <_fflush_r+0xc>
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	059b      	lsls	r3, r3, #22
 800f1ce:	d4e1      	bmi.n	800f194 <_fflush_r+0xc>
 800f1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1d2:	f7fe fbd3 	bl	800d97c <__retarget_lock_release_recursive>
 800f1d6:	e7dd      	b.n	800f194 <_fflush_r+0xc>

0800f1d8 <memmove>:
 800f1d8:	4288      	cmp	r0, r1
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	eb01 0402 	add.w	r4, r1, r2
 800f1e0:	d902      	bls.n	800f1e8 <memmove+0x10>
 800f1e2:	4284      	cmp	r4, r0
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	d807      	bhi.n	800f1f8 <memmove+0x20>
 800f1e8:	1e43      	subs	r3, r0, #1
 800f1ea:	42a1      	cmp	r1, r4
 800f1ec:	d008      	beq.n	800f200 <memmove+0x28>
 800f1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1f6:	e7f8      	b.n	800f1ea <memmove+0x12>
 800f1f8:	4402      	add	r2, r0
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	428a      	cmp	r2, r1
 800f1fe:	d100      	bne.n	800f202 <memmove+0x2a>
 800f200:	bd10      	pop	{r4, pc}
 800f202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f20a:	e7f7      	b.n	800f1fc <memmove+0x24>

0800f20c <__assert_func>:
 800f20c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f20e:	4614      	mov	r4, r2
 800f210:	461a      	mov	r2, r3
 800f212:	4b09      	ldr	r3, [pc, #36]	@ (800f238 <__assert_func+0x2c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4605      	mov	r5, r0
 800f218:	68d8      	ldr	r0, [r3, #12]
 800f21a:	b954      	cbnz	r4, 800f232 <__assert_func+0x26>
 800f21c:	4b07      	ldr	r3, [pc, #28]	@ (800f23c <__assert_func+0x30>)
 800f21e:	461c      	mov	r4, r3
 800f220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f224:	9100      	str	r1, [sp, #0]
 800f226:	462b      	mov	r3, r5
 800f228:	4905      	ldr	r1, [pc, #20]	@ (800f240 <__assert_func+0x34>)
 800f22a:	f000 f86f 	bl	800f30c <fiprintf>
 800f22e:	f7fd fc39 	bl	800caa4 <abort>
 800f232:	4b04      	ldr	r3, [pc, #16]	@ (800f244 <__assert_func+0x38>)
 800f234:	e7f4      	b.n	800f220 <__assert_func+0x14>
 800f236:	bf00      	nop
 800f238:	2000010c 	.word	0x2000010c
 800f23c:	0800fc26 	.word	0x0800fc26
 800f240:	0800fbf8 	.word	0x0800fbf8
 800f244:	0800fbeb 	.word	0x0800fbeb

0800f248 <_calloc_r>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	fba1 5402 	umull	r5, r4, r1, r2
 800f24e:	b93c      	cbnz	r4, 800f260 <_calloc_r+0x18>
 800f250:	4629      	mov	r1, r5
 800f252:	f7fd fc61 	bl	800cb18 <_malloc_r>
 800f256:	4606      	mov	r6, r0
 800f258:	b928      	cbnz	r0, 800f266 <_calloc_r+0x1e>
 800f25a:	2600      	movs	r6, #0
 800f25c:	4630      	mov	r0, r6
 800f25e:	bd70      	pop	{r4, r5, r6, pc}
 800f260:	220c      	movs	r2, #12
 800f262:	6002      	str	r2, [r0, #0]
 800f264:	e7f9      	b.n	800f25a <_calloc_r+0x12>
 800f266:	462a      	mov	r2, r5
 800f268:	4621      	mov	r1, r4
 800f26a:	f7fe fa5e 	bl	800d72a <memset>
 800f26e:	e7f5      	b.n	800f25c <_calloc_r+0x14>

0800f270 <__ascii_mbtowc>:
 800f270:	b082      	sub	sp, #8
 800f272:	b901      	cbnz	r1, 800f276 <__ascii_mbtowc+0x6>
 800f274:	a901      	add	r1, sp, #4
 800f276:	b142      	cbz	r2, 800f28a <__ascii_mbtowc+0x1a>
 800f278:	b14b      	cbz	r3, 800f28e <__ascii_mbtowc+0x1e>
 800f27a:	7813      	ldrb	r3, [r2, #0]
 800f27c:	600b      	str	r3, [r1, #0]
 800f27e:	7812      	ldrb	r2, [r2, #0]
 800f280:	1e10      	subs	r0, r2, #0
 800f282:	bf18      	it	ne
 800f284:	2001      	movne	r0, #1
 800f286:	b002      	add	sp, #8
 800f288:	4770      	bx	lr
 800f28a:	4610      	mov	r0, r2
 800f28c:	e7fb      	b.n	800f286 <__ascii_mbtowc+0x16>
 800f28e:	f06f 0001 	mvn.w	r0, #1
 800f292:	e7f8      	b.n	800f286 <__ascii_mbtowc+0x16>

0800f294 <_realloc_r>:
 800f294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f298:	4680      	mov	r8, r0
 800f29a:	4615      	mov	r5, r2
 800f29c:	460c      	mov	r4, r1
 800f29e:	b921      	cbnz	r1, 800f2aa <_realloc_r+0x16>
 800f2a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	f7fd bc37 	b.w	800cb18 <_malloc_r>
 800f2aa:	b92a      	cbnz	r2, 800f2b8 <_realloc_r+0x24>
 800f2ac:	f7ff f9c4 	bl	800e638 <_free_r>
 800f2b0:	2400      	movs	r4, #0
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b8:	f000 f83a 	bl	800f330 <_malloc_usable_size_r>
 800f2bc:	4285      	cmp	r5, r0
 800f2be:	4606      	mov	r6, r0
 800f2c0:	d802      	bhi.n	800f2c8 <_realloc_r+0x34>
 800f2c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f2c6:	d8f4      	bhi.n	800f2b2 <_realloc_r+0x1e>
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	f7fd fc24 	bl	800cb18 <_malloc_r>
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d0ec      	beq.n	800f2b0 <_realloc_r+0x1c>
 800f2d6:	42b5      	cmp	r5, r6
 800f2d8:	462a      	mov	r2, r5
 800f2da:	4621      	mov	r1, r4
 800f2dc:	bf28      	it	cs
 800f2de:	4632      	movcs	r2, r6
 800f2e0:	f7fe fb4d 	bl	800d97e <memcpy>
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	4640      	mov	r0, r8
 800f2e8:	f7ff f9a6 	bl	800e638 <_free_r>
 800f2ec:	463c      	mov	r4, r7
 800f2ee:	e7e0      	b.n	800f2b2 <_realloc_r+0x1e>

0800f2f0 <__ascii_wctomb>:
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	b141      	cbz	r1, 800f308 <__ascii_wctomb+0x18>
 800f2f6:	2aff      	cmp	r2, #255	@ 0xff
 800f2f8:	d904      	bls.n	800f304 <__ascii_wctomb+0x14>
 800f2fa:	228a      	movs	r2, #138	@ 0x8a
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f302:	4770      	bx	lr
 800f304:	700a      	strb	r2, [r1, #0]
 800f306:	2001      	movs	r0, #1
 800f308:	4770      	bx	lr
	...

0800f30c <fiprintf>:
 800f30c:	b40e      	push	{r1, r2, r3}
 800f30e:	b503      	push	{r0, r1, lr}
 800f310:	4601      	mov	r1, r0
 800f312:	ab03      	add	r3, sp, #12
 800f314:	4805      	ldr	r0, [pc, #20]	@ (800f32c <fiprintf+0x20>)
 800f316:	f853 2b04 	ldr.w	r2, [r3], #4
 800f31a:	6800      	ldr	r0, [r0, #0]
 800f31c:	9301      	str	r3, [sp, #4]
 800f31e:	f000 f839 	bl	800f394 <_vfiprintf_r>
 800f322:	b002      	add	sp, #8
 800f324:	f85d eb04 	ldr.w	lr, [sp], #4
 800f328:	b003      	add	sp, #12
 800f32a:	4770      	bx	lr
 800f32c:	2000010c 	.word	0x2000010c

0800f330 <_malloc_usable_size_r>:
 800f330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f334:	1f18      	subs	r0, r3, #4
 800f336:	2b00      	cmp	r3, #0
 800f338:	bfbc      	itt	lt
 800f33a:	580b      	ldrlt	r3, [r1, r0]
 800f33c:	18c0      	addlt	r0, r0, r3
 800f33e:	4770      	bx	lr

0800f340 <__sfputc_r>:
 800f340:	6893      	ldr	r3, [r2, #8]
 800f342:	3b01      	subs	r3, #1
 800f344:	2b00      	cmp	r3, #0
 800f346:	b410      	push	{r4}
 800f348:	6093      	str	r3, [r2, #8]
 800f34a:	da08      	bge.n	800f35e <__sfputc_r+0x1e>
 800f34c:	6994      	ldr	r4, [r2, #24]
 800f34e:	42a3      	cmp	r3, r4
 800f350:	db01      	blt.n	800f356 <__sfputc_r+0x16>
 800f352:	290a      	cmp	r1, #10
 800f354:	d103      	bne.n	800f35e <__sfputc_r+0x1e>
 800f356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f35a:	f000 b933 	b.w	800f5c4 <__swbuf_r>
 800f35e:	6813      	ldr	r3, [r2, #0]
 800f360:	1c58      	adds	r0, r3, #1
 800f362:	6010      	str	r0, [r2, #0]
 800f364:	7019      	strb	r1, [r3, #0]
 800f366:	4608      	mov	r0, r1
 800f368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <__sfputs_r>:
 800f36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f370:	4606      	mov	r6, r0
 800f372:	460f      	mov	r7, r1
 800f374:	4614      	mov	r4, r2
 800f376:	18d5      	adds	r5, r2, r3
 800f378:	42ac      	cmp	r4, r5
 800f37a:	d101      	bne.n	800f380 <__sfputs_r+0x12>
 800f37c:	2000      	movs	r0, #0
 800f37e:	e007      	b.n	800f390 <__sfputs_r+0x22>
 800f380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f384:	463a      	mov	r2, r7
 800f386:	4630      	mov	r0, r6
 800f388:	f7ff ffda 	bl	800f340 <__sfputc_r>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d1f3      	bne.n	800f378 <__sfputs_r+0xa>
 800f390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f394 <_vfiprintf_r>:
 800f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f398:	460d      	mov	r5, r1
 800f39a:	b09d      	sub	sp, #116	@ 0x74
 800f39c:	4614      	mov	r4, r2
 800f39e:	4698      	mov	r8, r3
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	b118      	cbz	r0, 800f3ac <_vfiprintf_r+0x18>
 800f3a4:	6a03      	ldr	r3, [r0, #32]
 800f3a6:	b90b      	cbnz	r3, 800f3ac <_vfiprintf_r+0x18>
 800f3a8:	f7fe f926 	bl	800d5f8 <__sinit>
 800f3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ae:	07d9      	lsls	r1, r3, #31
 800f3b0:	d405      	bmi.n	800f3be <_vfiprintf_r+0x2a>
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	059a      	lsls	r2, r3, #22
 800f3b6:	d402      	bmi.n	800f3be <_vfiprintf_r+0x2a>
 800f3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ba:	f7fe fade 	bl	800d97a <__retarget_lock_acquire_recursive>
 800f3be:	89ab      	ldrh	r3, [r5, #12]
 800f3c0:	071b      	lsls	r3, r3, #28
 800f3c2:	d501      	bpl.n	800f3c8 <_vfiprintf_r+0x34>
 800f3c4:	692b      	ldr	r3, [r5, #16]
 800f3c6:	b99b      	cbnz	r3, 800f3f0 <_vfiprintf_r+0x5c>
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f000 f938 	bl	800f640 <__swsetup_r>
 800f3d0:	b170      	cbz	r0, 800f3f0 <_vfiprintf_r+0x5c>
 800f3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3d4:	07dc      	lsls	r4, r3, #31
 800f3d6:	d504      	bpl.n	800f3e2 <_vfiprintf_r+0x4e>
 800f3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3dc:	b01d      	add	sp, #116	@ 0x74
 800f3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	0598      	lsls	r0, r3, #22
 800f3e6:	d4f7      	bmi.n	800f3d8 <_vfiprintf_r+0x44>
 800f3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ea:	f7fe fac7 	bl	800d97c <__retarget_lock_release_recursive>
 800f3ee:	e7f3      	b.n	800f3d8 <_vfiprintf_r+0x44>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3fe:	2330      	movs	r3, #48	@ 0x30
 800f400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f5b0 <_vfiprintf_r+0x21c>
 800f404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f408:	f04f 0901 	mov.w	r9, #1
 800f40c:	4623      	mov	r3, r4
 800f40e:	469a      	mov	sl, r3
 800f410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f414:	b10a      	cbz	r2, 800f41a <_vfiprintf_r+0x86>
 800f416:	2a25      	cmp	r2, #37	@ 0x25
 800f418:	d1f9      	bne.n	800f40e <_vfiprintf_r+0x7a>
 800f41a:	ebba 0b04 	subs.w	fp, sl, r4
 800f41e:	d00b      	beq.n	800f438 <_vfiprintf_r+0xa4>
 800f420:	465b      	mov	r3, fp
 800f422:	4622      	mov	r2, r4
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ffa1 	bl	800f36e <__sfputs_r>
 800f42c:	3001      	adds	r0, #1
 800f42e:	f000 80a7 	beq.w	800f580 <_vfiprintf_r+0x1ec>
 800f432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f434:	445a      	add	r2, fp
 800f436:	9209      	str	r2, [sp, #36]	@ 0x24
 800f438:	f89a 3000 	ldrb.w	r3, [sl]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 809f 	beq.w	800f580 <_vfiprintf_r+0x1ec>
 800f442:	2300      	movs	r3, #0
 800f444:	f04f 32ff 	mov.w	r2, #4294967295
 800f448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f44c:	f10a 0a01 	add.w	sl, sl, #1
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	9307      	str	r3, [sp, #28]
 800f454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f458:	931a      	str	r3, [sp, #104]	@ 0x68
 800f45a:	4654      	mov	r4, sl
 800f45c:	2205      	movs	r2, #5
 800f45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f462:	4853      	ldr	r0, [pc, #332]	@ (800f5b0 <_vfiprintf_r+0x21c>)
 800f464:	f7f0 febc 	bl	80001e0 <memchr>
 800f468:	9a04      	ldr	r2, [sp, #16]
 800f46a:	b9d8      	cbnz	r0, 800f4a4 <_vfiprintf_r+0x110>
 800f46c:	06d1      	lsls	r1, r2, #27
 800f46e:	bf44      	itt	mi
 800f470:	2320      	movmi	r3, #32
 800f472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f476:	0713      	lsls	r3, r2, #28
 800f478:	bf44      	itt	mi
 800f47a:	232b      	movmi	r3, #43	@ 0x2b
 800f47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f480:	f89a 3000 	ldrb.w	r3, [sl]
 800f484:	2b2a      	cmp	r3, #42	@ 0x2a
 800f486:	d015      	beq.n	800f4b4 <_vfiprintf_r+0x120>
 800f488:	9a07      	ldr	r2, [sp, #28]
 800f48a:	4654      	mov	r4, sl
 800f48c:	2000      	movs	r0, #0
 800f48e:	f04f 0c0a 	mov.w	ip, #10
 800f492:	4621      	mov	r1, r4
 800f494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f498:	3b30      	subs	r3, #48	@ 0x30
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	d94b      	bls.n	800f536 <_vfiprintf_r+0x1a2>
 800f49e:	b1b0      	cbz	r0, 800f4ce <_vfiprintf_r+0x13a>
 800f4a0:	9207      	str	r2, [sp, #28]
 800f4a2:	e014      	b.n	800f4ce <_vfiprintf_r+0x13a>
 800f4a4:	eba0 0308 	sub.w	r3, r0, r8
 800f4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	46a2      	mov	sl, r4
 800f4b2:	e7d2      	b.n	800f45a <_vfiprintf_r+0xc6>
 800f4b4:	9b03      	ldr	r3, [sp, #12]
 800f4b6:	1d19      	adds	r1, r3, #4
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	9103      	str	r1, [sp, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	bfbb      	ittet	lt
 800f4c0:	425b      	neglt	r3, r3
 800f4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c6:	9307      	strge	r3, [sp, #28]
 800f4c8:	9307      	strlt	r3, [sp, #28]
 800f4ca:	bfb8      	it	lt
 800f4cc:	9204      	strlt	r2, [sp, #16]
 800f4ce:	7823      	ldrb	r3, [r4, #0]
 800f4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4d2:	d10a      	bne.n	800f4ea <_vfiprintf_r+0x156>
 800f4d4:	7863      	ldrb	r3, [r4, #1]
 800f4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4d8:	d132      	bne.n	800f540 <_vfiprintf_r+0x1ac>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	1d1a      	adds	r2, r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	9203      	str	r2, [sp, #12]
 800f4e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4e6:	3402      	adds	r4, #2
 800f4e8:	9305      	str	r3, [sp, #20]
 800f4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5c0 <_vfiprintf_r+0x22c>
 800f4ee:	7821      	ldrb	r1, [r4, #0]
 800f4f0:	2203      	movs	r2, #3
 800f4f2:	4650      	mov	r0, sl
 800f4f4:	f7f0 fe74 	bl	80001e0 <memchr>
 800f4f8:	b138      	cbz	r0, 800f50a <_vfiprintf_r+0x176>
 800f4fa:	9b04      	ldr	r3, [sp, #16]
 800f4fc:	eba0 000a 	sub.w	r0, r0, sl
 800f500:	2240      	movs	r2, #64	@ 0x40
 800f502:	4082      	lsls	r2, r0
 800f504:	4313      	orrs	r3, r2
 800f506:	3401      	adds	r4, #1
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f50e:	4829      	ldr	r0, [pc, #164]	@ (800f5b4 <_vfiprintf_r+0x220>)
 800f510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f514:	2206      	movs	r2, #6
 800f516:	f7f0 fe63 	bl	80001e0 <memchr>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d03f      	beq.n	800f59e <_vfiprintf_r+0x20a>
 800f51e:	4b26      	ldr	r3, [pc, #152]	@ (800f5b8 <_vfiprintf_r+0x224>)
 800f520:	bb1b      	cbnz	r3, 800f56a <_vfiprintf_r+0x1d6>
 800f522:	9b03      	ldr	r3, [sp, #12]
 800f524:	3307      	adds	r3, #7
 800f526:	f023 0307 	bic.w	r3, r3, #7
 800f52a:	3308      	adds	r3, #8
 800f52c:	9303      	str	r3, [sp, #12]
 800f52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f530:	443b      	add	r3, r7
 800f532:	9309      	str	r3, [sp, #36]	@ 0x24
 800f534:	e76a      	b.n	800f40c <_vfiprintf_r+0x78>
 800f536:	fb0c 3202 	mla	r2, ip, r2, r3
 800f53a:	460c      	mov	r4, r1
 800f53c:	2001      	movs	r0, #1
 800f53e:	e7a8      	b.n	800f492 <_vfiprintf_r+0xfe>
 800f540:	2300      	movs	r3, #0
 800f542:	3401      	adds	r4, #1
 800f544:	9305      	str	r3, [sp, #20]
 800f546:	4619      	mov	r1, r3
 800f548:	f04f 0c0a 	mov.w	ip, #10
 800f54c:	4620      	mov	r0, r4
 800f54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f552:	3a30      	subs	r2, #48	@ 0x30
 800f554:	2a09      	cmp	r2, #9
 800f556:	d903      	bls.n	800f560 <_vfiprintf_r+0x1cc>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d0c6      	beq.n	800f4ea <_vfiprintf_r+0x156>
 800f55c:	9105      	str	r1, [sp, #20]
 800f55e:	e7c4      	b.n	800f4ea <_vfiprintf_r+0x156>
 800f560:	fb0c 2101 	mla	r1, ip, r1, r2
 800f564:	4604      	mov	r4, r0
 800f566:	2301      	movs	r3, #1
 800f568:	e7f0      	b.n	800f54c <_vfiprintf_r+0x1b8>
 800f56a:	ab03      	add	r3, sp, #12
 800f56c:	9300      	str	r3, [sp, #0]
 800f56e:	462a      	mov	r2, r5
 800f570:	4b12      	ldr	r3, [pc, #72]	@ (800f5bc <_vfiprintf_r+0x228>)
 800f572:	a904      	add	r1, sp, #16
 800f574:	4630      	mov	r0, r6
 800f576:	f7fd fbfb 	bl	800cd70 <_printf_float>
 800f57a:	4607      	mov	r7, r0
 800f57c:	1c78      	adds	r0, r7, #1
 800f57e:	d1d6      	bne.n	800f52e <_vfiprintf_r+0x19a>
 800f580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f582:	07d9      	lsls	r1, r3, #31
 800f584:	d405      	bmi.n	800f592 <_vfiprintf_r+0x1fe>
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	059a      	lsls	r2, r3, #22
 800f58a:	d402      	bmi.n	800f592 <_vfiprintf_r+0x1fe>
 800f58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f58e:	f7fe f9f5 	bl	800d97c <__retarget_lock_release_recursive>
 800f592:	89ab      	ldrh	r3, [r5, #12]
 800f594:	065b      	lsls	r3, r3, #25
 800f596:	f53f af1f 	bmi.w	800f3d8 <_vfiprintf_r+0x44>
 800f59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f59c:	e71e      	b.n	800f3dc <_vfiprintf_r+0x48>
 800f59e:	ab03      	add	r3, sp, #12
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	462a      	mov	r2, r5
 800f5a4:	4b05      	ldr	r3, [pc, #20]	@ (800f5bc <_vfiprintf_r+0x228>)
 800f5a6:	a904      	add	r1, sp, #16
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7fd fe79 	bl	800d2a0 <_printf_i>
 800f5ae:	e7e4      	b.n	800f57a <_vfiprintf_r+0x1e6>
 800f5b0:	0800fbd0 	.word	0x0800fbd0
 800f5b4:	0800fbda 	.word	0x0800fbda
 800f5b8:	0800cd71 	.word	0x0800cd71
 800f5bc:	0800f36f 	.word	0x0800f36f
 800f5c0:	0800fbd6 	.word	0x0800fbd6

0800f5c4 <__swbuf_r>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	460e      	mov	r6, r1
 800f5c8:	4614      	mov	r4, r2
 800f5ca:	4605      	mov	r5, r0
 800f5cc:	b118      	cbz	r0, 800f5d6 <__swbuf_r+0x12>
 800f5ce:	6a03      	ldr	r3, [r0, #32]
 800f5d0:	b90b      	cbnz	r3, 800f5d6 <__swbuf_r+0x12>
 800f5d2:	f7fe f811 	bl	800d5f8 <__sinit>
 800f5d6:	69a3      	ldr	r3, [r4, #24]
 800f5d8:	60a3      	str	r3, [r4, #8]
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	071a      	lsls	r2, r3, #28
 800f5de:	d501      	bpl.n	800f5e4 <__swbuf_r+0x20>
 800f5e0:	6923      	ldr	r3, [r4, #16]
 800f5e2:	b943      	cbnz	r3, 800f5f6 <__swbuf_r+0x32>
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f000 f82a 	bl	800f640 <__swsetup_r>
 800f5ec:	b118      	cbz	r0, 800f5f6 <__swbuf_r+0x32>
 800f5ee:	f04f 37ff 	mov.w	r7, #4294967295
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	6922      	ldr	r2, [r4, #16]
 800f5fa:	1a98      	subs	r0, r3, r2
 800f5fc:	6963      	ldr	r3, [r4, #20]
 800f5fe:	b2f6      	uxtb	r6, r6
 800f600:	4283      	cmp	r3, r0
 800f602:	4637      	mov	r7, r6
 800f604:	dc05      	bgt.n	800f612 <__swbuf_r+0x4e>
 800f606:	4621      	mov	r1, r4
 800f608:	4628      	mov	r0, r5
 800f60a:	f7ff fdbd 	bl	800f188 <_fflush_r>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d1ed      	bne.n	800f5ee <__swbuf_r+0x2a>
 800f612:	68a3      	ldr	r3, [r4, #8]
 800f614:	3b01      	subs	r3, #1
 800f616:	60a3      	str	r3, [r4, #8]
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	6022      	str	r2, [r4, #0]
 800f61e:	701e      	strb	r6, [r3, #0]
 800f620:	6962      	ldr	r2, [r4, #20]
 800f622:	1c43      	adds	r3, r0, #1
 800f624:	429a      	cmp	r2, r3
 800f626:	d004      	beq.n	800f632 <__swbuf_r+0x6e>
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	07db      	lsls	r3, r3, #31
 800f62c:	d5e1      	bpl.n	800f5f2 <__swbuf_r+0x2e>
 800f62e:	2e0a      	cmp	r6, #10
 800f630:	d1df      	bne.n	800f5f2 <__swbuf_r+0x2e>
 800f632:	4621      	mov	r1, r4
 800f634:	4628      	mov	r0, r5
 800f636:	f7ff fda7 	bl	800f188 <_fflush_r>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d0d9      	beq.n	800f5f2 <__swbuf_r+0x2e>
 800f63e:	e7d6      	b.n	800f5ee <__swbuf_r+0x2a>

0800f640 <__swsetup_r>:
 800f640:	b538      	push	{r3, r4, r5, lr}
 800f642:	4b29      	ldr	r3, [pc, #164]	@ (800f6e8 <__swsetup_r+0xa8>)
 800f644:	4605      	mov	r5, r0
 800f646:	6818      	ldr	r0, [r3, #0]
 800f648:	460c      	mov	r4, r1
 800f64a:	b118      	cbz	r0, 800f654 <__swsetup_r+0x14>
 800f64c:	6a03      	ldr	r3, [r0, #32]
 800f64e:	b90b      	cbnz	r3, 800f654 <__swsetup_r+0x14>
 800f650:	f7fd ffd2 	bl	800d5f8 <__sinit>
 800f654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f658:	0719      	lsls	r1, r3, #28
 800f65a:	d422      	bmi.n	800f6a2 <__swsetup_r+0x62>
 800f65c:	06da      	lsls	r2, r3, #27
 800f65e:	d407      	bmi.n	800f670 <__swsetup_r+0x30>
 800f660:	2209      	movs	r2, #9
 800f662:	602a      	str	r2, [r5, #0]
 800f664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	f04f 30ff 	mov.w	r0, #4294967295
 800f66e:	e033      	b.n	800f6d8 <__swsetup_r+0x98>
 800f670:	0758      	lsls	r0, r3, #29
 800f672:	d512      	bpl.n	800f69a <__swsetup_r+0x5a>
 800f674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f676:	b141      	cbz	r1, 800f68a <__swsetup_r+0x4a>
 800f678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f67c:	4299      	cmp	r1, r3
 800f67e:	d002      	beq.n	800f686 <__swsetup_r+0x46>
 800f680:	4628      	mov	r0, r5
 800f682:	f7fe ffd9 	bl	800e638 <_free_r>
 800f686:	2300      	movs	r3, #0
 800f688:	6363      	str	r3, [r4, #52]	@ 0x34
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f690:	81a3      	strh	r3, [r4, #12]
 800f692:	2300      	movs	r3, #0
 800f694:	6063      	str	r3, [r4, #4]
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	6023      	str	r3, [r4, #0]
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	f043 0308 	orr.w	r3, r3, #8
 800f6a0:	81a3      	strh	r3, [r4, #12]
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	b94b      	cbnz	r3, 800f6ba <__swsetup_r+0x7a>
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6b0:	d003      	beq.n	800f6ba <__swsetup_r+0x7a>
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	f000 f83f 	bl	800f738 <__smakebuf_r>
 800f6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6be:	f013 0201 	ands.w	r2, r3, #1
 800f6c2:	d00a      	beq.n	800f6da <__swsetup_r+0x9a>
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	6962      	ldr	r2, [r4, #20]
 800f6ca:	4252      	negs	r2, r2
 800f6cc:	61a2      	str	r2, [r4, #24]
 800f6ce:	6922      	ldr	r2, [r4, #16]
 800f6d0:	b942      	cbnz	r2, 800f6e4 <__swsetup_r+0xa4>
 800f6d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6d6:	d1c5      	bne.n	800f664 <__swsetup_r+0x24>
 800f6d8:	bd38      	pop	{r3, r4, r5, pc}
 800f6da:	0799      	lsls	r1, r3, #30
 800f6dc:	bf58      	it	pl
 800f6de:	6962      	ldrpl	r2, [r4, #20]
 800f6e0:	60a2      	str	r2, [r4, #8]
 800f6e2:	e7f4      	b.n	800f6ce <__swsetup_r+0x8e>
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	e7f7      	b.n	800f6d8 <__swsetup_r+0x98>
 800f6e8:	2000010c 	.word	0x2000010c

0800f6ec <__swhatbuf_r>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	b096      	sub	sp, #88	@ 0x58
 800f6f8:	4615      	mov	r5, r2
 800f6fa:	461e      	mov	r6, r3
 800f6fc:	da0d      	bge.n	800f71a <__swhatbuf_r+0x2e>
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f704:	f04f 0100 	mov.w	r1, #0
 800f708:	bf14      	ite	ne
 800f70a:	2340      	movne	r3, #64	@ 0x40
 800f70c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f710:	2000      	movs	r0, #0
 800f712:	6031      	str	r1, [r6, #0]
 800f714:	602b      	str	r3, [r5, #0]
 800f716:	b016      	add	sp, #88	@ 0x58
 800f718:	bd70      	pop	{r4, r5, r6, pc}
 800f71a:	466a      	mov	r2, sp
 800f71c:	f000 f848 	bl	800f7b0 <_fstat_r>
 800f720:	2800      	cmp	r0, #0
 800f722:	dbec      	blt.n	800f6fe <__swhatbuf_r+0x12>
 800f724:	9901      	ldr	r1, [sp, #4]
 800f726:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f72a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f72e:	4259      	negs	r1, r3
 800f730:	4159      	adcs	r1, r3
 800f732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f736:	e7eb      	b.n	800f710 <__swhatbuf_r+0x24>

0800f738 <__smakebuf_r>:
 800f738:	898b      	ldrh	r3, [r1, #12]
 800f73a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f73c:	079d      	lsls	r5, r3, #30
 800f73e:	4606      	mov	r6, r0
 800f740:	460c      	mov	r4, r1
 800f742:	d507      	bpl.n	800f754 <__smakebuf_r+0x1c>
 800f744:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	6123      	str	r3, [r4, #16]
 800f74c:	2301      	movs	r3, #1
 800f74e:	6163      	str	r3, [r4, #20]
 800f750:	b003      	add	sp, #12
 800f752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f754:	ab01      	add	r3, sp, #4
 800f756:	466a      	mov	r2, sp
 800f758:	f7ff ffc8 	bl	800f6ec <__swhatbuf_r>
 800f75c:	9f00      	ldr	r7, [sp, #0]
 800f75e:	4605      	mov	r5, r0
 800f760:	4639      	mov	r1, r7
 800f762:	4630      	mov	r0, r6
 800f764:	f7fd f9d8 	bl	800cb18 <_malloc_r>
 800f768:	b948      	cbnz	r0, 800f77e <__smakebuf_r+0x46>
 800f76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f76e:	059a      	lsls	r2, r3, #22
 800f770:	d4ee      	bmi.n	800f750 <__smakebuf_r+0x18>
 800f772:	f023 0303 	bic.w	r3, r3, #3
 800f776:	f043 0302 	orr.w	r3, r3, #2
 800f77a:	81a3      	strh	r3, [r4, #12]
 800f77c:	e7e2      	b.n	800f744 <__smakebuf_r+0xc>
 800f77e:	89a3      	ldrh	r3, [r4, #12]
 800f780:	6020      	str	r0, [r4, #0]
 800f782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f786:	81a3      	strh	r3, [r4, #12]
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f78e:	b15b      	cbz	r3, 800f7a8 <__smakebuf_r+0x70>
 800f790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f794:	4630      	mov	r0, r6
 800f796:	f000 f81d 	bl	800f7d4 <_isatty_r>
 800f79a:	b128      	cbz	r0, 800f7a8 <__smakebuf_r+0x70>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f043 0301 	orr.w	r3, r3, #1
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	89a3      	ldrh	r3, [r4, #12]
 800f7aa:	431d      	orrs	r5, r3
 800f7ac:	81a5      	strh	r5, [r4, #12]
 800f7ae:	e7cf      	b.n	800f750 <__smakebuf_r+0x18>

0800f7b0 <_fstat_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d07      	ldr	r5, [pc, #28]	@ (800f7d0 <_fstat_r+0x20>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	4611      	mov	r1, r2
 800f7bc:	602b      	str	r3, [r5, #0]
 800f7be:	f7f2 f961 	bl	8001a84 <_fstat>
 800f7c2:	1c43      	adds	r3, r0, #1
 800f7c4:	d102      	bne.n	800f7cc <_fstat_r+0x1c>
 800f7c6:	682b      	ldr	r3, [r5, #0]
 800f7c8:	b103      	cbz	r3, 800f7cc <_fstat_r+0x1c>
 800f7ca:	6023      	str	r3, [r4, #0]
 800f7cc:	bd38      	pop	{r3, r4, r5, pc}
 800f7ce:	bf00      	nop
 800f7d0:	200062c0 	.word	0x200062c0

0800f7d4 <_isatty_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d06      	ldr	r5, [pc, #24]	@ (800f7f0 <_isatty_r+0x1c>)
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4608      	mov	r0, r1
 800f7de:	602b      	str	r3, [r5, #0]
 800f7e0:	f7f2 f960 	bl	8001aa4 <_isatty>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_isatty_r+0x1a>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_isatty_r+0x1a>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	200062c0 	.word	0x200062c0

0800f7f4 <_init>:
 800f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f6:	bf00      	nop
 800f7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7fa:	bc08      	pop	{r3}
 800f7fc:	469e      	mov	lr, r3
 800f7fe:	4770      	bx	lr

0800f800 <_fini>:
 800f800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f802:	bf00      	nop
 800f804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f806:	bc08      	pop	{r3}
 800f808:	469e      	mov	lr, r3
 800f80a:	4770      	bx	lr
