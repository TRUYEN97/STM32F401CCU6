
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08016880  08016880  00017880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017008  08017008  000192cc  2**0
                  CONTENTS
  4 .ARM          00000008  08017008  08017008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017010  08017010  000192cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017010  08017010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08017018  08017018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  08017020  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006048  200002cc  080172ec  000192cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006314  080172ec  00019314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066897  00000000  00000000  000192fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a373  00000000  00000000  0007fb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004290  00000000  00000000  00089f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000032ab  00000000  00000000  0008e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d70  00000000  00000000  00091443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c2ce  00000000  00000000  000b41b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2bd1  00000000  00000000  000f0481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014d54  00000000  00000000  001b3098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  001c7dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016864 	.word	0x08016864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08016864 	.word	0x08016864

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b96a 	b.w	80011a0 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9d08      	ldr	r5, [sp, #32]
 8000eea:	460c      	mov	r4, r1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d14e      	bne.n	8000f8e <__udivmoddi4+0xaa>
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	458c      	cmp	ip, r1
 8000ef4:	4686      	mov	lr, r0
 8000ef6:	fab2 f282 	clz	r2, r2
 8000efa:	d962      	bls.n	8000fc2 <__udivmoddi4+0xde>
 8000efc:	b14a      	cbz	r2, 8000f12 <__udivmoddi4+0x2e>
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	4091      	lsls	r1, r2
 8000f04:	fa20 f303 	lsr.w	r3, r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	4319      	orrs	r1, r3
 8000f0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f f68c 	uxth.w	r6, ip
 8000f1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f22:	fb07 1114 	mls	r1, r7, r4, r1
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb04 f106 	mul.w	r1, r4, r6
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d90a      	bls.n	8000f48 <__udivmoddi4+0x64>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f3a:	f080 8112 	bcs.w	8001162 <__udivmoddi4+0x27e>
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	f240 810f 	bls.w	8001162 <__udivmoddi4+0x27e>
 8000f44:	3c02      	subs	r4, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1a59      	subs	r1, r3, r1
 8000f4a:	fa1f f38e 	uxth.w	r3, lr
 8000f4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f52:	fb07 1110 	mls	r1, r7, r0, r1
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f606 	mul.w	r6, r0, r6
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	d90a      	bls.n	8000f78 <__udivmoddi4+0x94>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f6a:	f080 80fc 	bcs.w	8001166 <__udivmoddi4+0x282>
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	f240 80f9 	bls.w	8001166 <__udivmoddi4+0x282>
 8000f74:	4463      	add	r3, ip
 8000f76:	3802      	subs	r0, #2
 8000f78:	1b9b      	subs	r3, r3, r6
 8000f7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f7e:	2100      	movs	r1, #0
 8000f80:	b11d      	cbz	r5, 8000f8a <__udivmoddi4+0xa6>
 8000f82:	40d3      	lsrs	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	e9c5 3200 	strd	r3, r2, [r5]
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d905      	bls.n	8000f9e <__udivmoddi4+0xba>
 8000f92:	b10d      	cbz	r5, 8000f98 <__udivmoddi4+0xb4>
 8000f94:	e9c5 0100 	strd	r0, r1, [r5]
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e7f5      	b.n	8000f8a <__udivmoddi4+0xa6>
 8000f9e:	fab3 f183 	clz	r1, r3
 8000fa2:	2900      	cmp	r1, #0
 8000fa4:	d146      	bne.n	8001034 <__udivmoddi4+0x150>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d302      	bcc.n	8000fb0 <__udivmoddi4+0xcc>
 8000faa:	4290      	cmp	r0, r2
 8000fac:	f0c0 80f0 	bcc.w	8001190 <__udivmoddi4+0x2ac>
 8000fb0:	1a86      	subs	r6, r0, r2
 8000fb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d0e6      	beq.n	8000f8a <__udivmoddi4+0xa6>
 8000fbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000fc0:	e7e3      	b.n	8000f8a <__udivmoddi4+0xa6>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	f040 8090 	bne.w	80010e8 <__udivmoddi4+0x204>
 8000fc8:	eba1 040c 	sub.w	r4, r1, ip
 8000fcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd0:	fa1f f78c 	uxth.w	r7, ip
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fde:	fb08 4416 	mls	r4, r8, r6, r4
 8000fe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fe6:	fb07 f006 	mul.w	r0, r7, r6
 8000fea:	4298      	cmp	r0, r3
 8000fec:	d908      	bls.n	8001000 <__udivmoddi4+0x11c>
 8000fee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ff6:	d202      	bcs.n	8000ffe <__udivmoddi4+0x11a>
 8000ff8:	4298      	cmp	r0, r3
 8000ffa:	f200 80cd 	bhi.w	8001198 <__udivmoddi4+0x2b4>
 8000ffe:	4626      	mov	r6, r4
 8001000:	1a1c      	subs	r4, r3, r0
 8001002:	fa1f f38e 	uxth.w	r3, lr
 8001006:	fbb4 f0f8 	udiv	r0, r4, r8
 800100a:	fb08 4410 	mls	r4, r8, r0, r4
 800100e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001012:	fb00 f707 	mul.w	r7, r0, r7
 8001016:	429f      	cmp	r7, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x148>
 800101a:	eb1c 0303 	adds.w	r3, ip, r3
 800101e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001022:	d202      	bcs.n	800102a <__udivmoddi4+0x146>
 8001024:	429f      	cmp	r7, r3
 8001026:	f200 80b0 	bhi.w	800118a <__udivmoddi4+0x2a6>
 800102a:	4620      	mov	r0, r4
 800102c:	1bdb      	subs	r3, r3, r7
 800102e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001032:	e7a5      	b.n	8000f80 <__udivmoddi4+0x9c>
 8001034:	f1c1 0620 	rsb	r6, r1, #32
 8001038:	408b      	lsls	r3, r1
 800103a:	fa22 f706 	lsr.w	r7, r2, r6
 800103e:	431f      	orrs	r7, r3
 8001040:	fa20 fc06 	lsr.w	ip, r0, r6
 8001044:	fa04 f301 	lsl.w	r3, r4, r1
 8001048:	ea43 030c 	orr.w	r3, r3, ip
 800104c:	40f4      	lsrs	r4, r6
 800104e:	fa00 f801 	lsl.w	r8, r0, r1
 8001052:	0c38      	lsrs	r0, r7, #16
 8001054:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001058:	fbb4 fef0 	udiv	lr, r4, r0
 800105c:	fa1f fc87 	uxth.w	ip, r7
 8001060:	fb00 441e 	mls	r4, r0, lr, r4
 8001064:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001068:	fb0e f90c 	mul.w	r9, lr, ip
 800106c:	45a1      	cmp	r9, r4
 800106e:	fa02 f201 	lsl.w	r2, r2, r1
 8001072:	d90a      	bls.n	800108a <__udivmoddi4+0x1a6>
 8001074:	193c      	adds	r4, r7, r4
 8001076:	f10e 3aff 	add.w	sl, lr, #4294967295
 800107a:	f080 8084 	bcs.w	8001186 <__udivmoddi4+0x2a2>
 800107e:	45a1      	cmp	r9, r4
 8001080:	f240 8081 	bls.w	8001186 <__udivmoddi4+0x2a2>
 8001084:	f1ae 0e02 	sub.w	lr, lr, #2
 8001088:	443c      	add	r4, r7
 800108a:	eba4 0409 	sub.w	r4, r4, r9
 800108e:	fa1f f983 	uxth.w	r9, r3
 8001092:	fbb4 f3f0 	udiv	r3, r4, r0
 8001096:	fb00 4413 	mls	r4, r0, r3, r4
 800109a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800109e:	fb03 fc0c 	mul.w	ip, r3, ip
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	d907      	bls.n	80010b6 <__udivmoddi4+0x1d2>
 80010a6:	193c      	adds	r4, r7, r4
 80010a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80010ac:	d267      	bcs.n	800117e <__udivmoddi4+0x29a>
 80010ae:	45a4      	cmp	ip, r4
 80010b0:	d965      	bls.n	800117e <__udivmoddi4+0x29a>
 80010b2:	3b02      	subs	r3, #2
 80010b4:	443c      	add	r4, r7
 80010b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010ba:	fba0 9302 	umull	r9, r3, r0, r2
 80010be:	eba4 040c 	sub.w	r4, r4, ip
 80010c2:	429c      	cmp	r4, r3
 80010c4:	46ce      	mov	lr, r9
 80010c6:	469c      	mov	ip, r3
 80010c8:	d351      	bcc.n	800116e <__udivmoddi4+0x28a>
 80010ca:	d04e      	beq.n	800116a <__udivmoddi4+0x286>
 80010cc:	b155      	cbz	r5, 80010e4 <__udivmoddi4+0x200>
 80010ce:	ebb8 030e 	subs.w	r3, r8, lr
 80010d2:	eb64 040c 	sbc.w	r4, r4, ip
 80010d6:	fa04 f606 	lsl.w	r6, r4, r6
 80010da:	40cb      	lsrs	r3, r1
 80010dc:	431e      	orrs	r6, r3
 80010de:	40cc      	lsrs	r4, r1
 80010e0:	e9c5 6400 	strd	r6, r4, [r5]
 80010e4:	2100      	movs	r1, #0
 80010e6:	e750      	b.n	8000f8a <__udivmoddi4+0xa6>
 80010e8:	f1c2 0320 	rsb	r3, r2, #32
 80010ec:	fa20 f103 	lsr.w	r1, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	fa24 f303 	lsr.w	r3, r4, r3
 80010f8:	4094      	lsls	r4, r2
 80010fa:	430c      	orrs	r4, r1
 80010fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001100:	fa00 fe02 	lsl.w	lr, r0, r2
 8001104:	fa1f f78c 	uxth.w	r7, ip
 8001108:	fbb3 f0f8 	udiv	r0, r3, r8
 800110c:	fb08 3110 	mls	r1, r8, r0, r3
 8001110:	0c23      	lsrs	r3, r4, #16
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb00 f107 	mul.w	r1, r0, r7
 800111a:	4299      	cmp	r1, r3
 800111c:	d908      	bls.n	8001130 <__udivmoddi4+0x24c>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f100 36ff 	add.w	r6, r0, #4294967295
 8001126:	d22c      	bcs.n	8001182 <__udivmoddi4+0x29e>
 8001128:	4299      	cmp	r1, r3
 800112a:	d92a      	bls.n	8001182 <__udivmoddi4+0x29e>
 800112c:	3802      	subs	r0, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a5b      	subs	r3, r3, r1
 8001132:	b2a4      	uxth	r4, r4
 8001134:	fbb3 f1f8 	udiv	r1, r3, r8
 8001138:	fb08 3311 	mls	r3, r8, r1, r3
 800113c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001140:	fb01 f307 	mul.w	r3, r1, r7
 8001144:	42a3      	cmp	r3, r4
 8001146:	d908      	bls.n	800115a <__udivmoddi4+0x276>
 8001148:	eb1c 0404 	adds.w	r4, ip, r4
 800114c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001150:	d213      	bcs.n	800117a <__udivmoddi4+0x296>
 8001152:	42a3      	cmp	r3, r4
 8001154:	d911      	bls.n	800117a <__udivmoddi4+0x296>
 8001156:	3902      	subs	r1, #2
 8001158:	4464      	add	r4, ip
 800115a:	1ae4      	subs	r4, r4, r3
 800115c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001160:	e739      	b.n	8000fd6 <__udivmoddi4+0xf2>
 8001162:	4604      	mov	r4, r0
 8001164:	e6f0      	b.n	8000f48 <__udivmoddi4+0x64>
 8001166:	4608      	mov	r0, r1
 8001168:	e706      	b.n	8000f78 <__udivmoddi4+0x94>
 800116a:	45c8      	cmp	r8, r9
 800116c:	d2ae      	bcs.n	80010cc <__udivmoddi4+0x1e8>
 800116e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001172:	eb63 0c07 	sbc.w	ip, r3, r7
 8001176:	3801      	subs	r0, #1
 8001178:	e7a8      	b.n	80010cc <__udivmoddi4+0x1e8>
 800117a:	4631      	mov	r1, r6
 800117c:	e7ed      	b.n	800115a <__udivmoddi4+0x276>
 800117e:	4603      	mov	r3, r0
 8001180:	e799      	b.n	80010b6 <__udivmoddi4+0x1d2>
 8001182:	4630      	mov	r0, r6
 8001184:	e7d4      	b.n	8001130 <__udivmoddi4+0x24c>
 8001186:	46d6      	mov	lr, sl
 8001188:	e77f      	b.n	800108a <__udivmoddi4+0x1a6>
 800118a:	4463      	add	r3, ip
 800118c:	3802      	subs	r0, #2
 800118e:	e74d      	b.n	800102c <__udivmoddi4+0x148>
 8001190:	4606      	mov	r6, r0
 8001192:	4623      	mov	r3, r4
 8001194:	4608      	mov	r0, r1
 8001196:	e70f      	b.n	8000fb8 <__udivmoddi4+0xd4>
 8001198:	3e02      	subs	r6, #2
 800119a:	4463      	add	r3, ip
 800119c:	e730      	b.n	8001000 <__udivmoddi4+0x11c>
 800119e:	bf00      	nop

080011a0 <__aeabi_idiv0>:
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <_ZN10TimeTickerC1Em>:
 *  Created on: Dec 11, 2024
 *      Author: Admin
 */
#include <Common/TimeTicker.h>

TimeTicker::TimeTicker(TickType_t delayTime) :
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
		delayTime(delayTime), lastTime(getCurrentTimeMS()) {
 80011ae:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <_ZN10TimeTickerC1Em+0x2c>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f80a 	bl	80011d4 <_ZN10TimeTicker16getCurrentTimeMSEv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
}
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08016a70 	.word	0x08016a70

080011d4 <_ZN10TimeTicker16getCurrentTimeMSEv>:

TickType_t TimeTicker::getCurrentTimeMS() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	return (xTaskGetTickCount() * 1000) / configTICK_RATE_HZ;
 80011dc:	f010 f9ac 	bl	8011538 <xTaskGetTickCount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <_ZN10TimeTicker16getCurrentTimeMSEv+0x28>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <_ZN10TimeTicker8getDeltaEv>:

TickType_t TimeTicker::getDelta() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	TickType_t currentTime = getCurrentTimeMS();
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
 8001212:	60f8      	str	r0, [r7, #12]
	if (this->lastTime > currentTime) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	429a      	cmp	r2, r3
 800121c:	d202      	bcs.n	8001224 <_ZN10TimeTicker8getDeltaEv+0x24>
		this->lastTime = 0;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
	}
	return currentTime - this->lastTime;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZNK10TimeTicker12getDelayTimeEv>:

TickType_t TimeTicker::getDelayTime() const{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	return this->delayTime;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_ZN10TimeTicker5resetEv>:

void TimeTicker::reset() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	this->lastTime = getCurrentTimeMS();
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN10TimeTicker6onTimeEv>:

void TimeTicker::setDelayTime(TickType_t delayTime) {
	this->delayTime = delayTime;
}

bool TimeTicker::onTime() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	return getDelta() <= this->delayTime;
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffc3 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	bf94      	ite	ls
 8001284:	2301      	movls	r3, #1
 8001286:	2300      	movhi	r3, #0
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>:

  FORCE_INLINE size_t size() const {
    return str_ ? ::strlen(str_) : 0;
  }

  char operator[](size_t i) const {
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
  }
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
  }
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_ZN11EncodeModelC1Ev>:
 *  Created on: Dec 12, 2024
 *      Author: Admin
 */
#include "Model/EncodeModel.h"

EncodeModel::EncodeModel(): distance(0), speed(0), carStatus(CAR_STOP) {
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	721a      	strb	r2, [r3, #8]

}
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZNK11EncodeModel11getDistanceEv>:

float EncodeModel::getDistance() const {
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return this->distance;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
}
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZNK11EncodeModel8getSpeedEv>:
float EncodeModel::getSpeed() const {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	return this->speed;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_ZN11EncodeModel11setDistanceEf>:
float EncodeModel::getCarStatus() const {
	return this->carStatus;
}
void EncodeModel::setDistance(float distance) {
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	ed87 0a00 	vstr	s0, [r7]
	this->distance = distance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_ZN11EncodeModel8setSpeedEf>:
void EncodeModel::setSpeed(float speed) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	ed87 0a00 	vstr	s0, [r7]
	this->speed = speed;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	605a      	str	r2, [r3, #4]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>:
void EncodeModel::setCarStatus(CarStatus carStatus) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
	this->carStatus = carStatus;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	721a      	strb	r2, [r3, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN11EncodeModel13resetDistanceEv>:
void EncodeModel::resetDistance() {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	this->distance = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN15ModelManagementC1Ev>:
#include "Model/ModelManagement.h"

ModelManagement *ModelManagement::instance = nullptr;
SemaphoreHandle_t ModelManagement::mutex = nullptr;

ModelManagement::ModelManagement() :
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
		sensorModel(new SensorModel()), testModeModel(new TestModeModel()) {
 80013b8:	2010      	movs	r0, #16
 80013ba:	f012 fa97 	bl	80138ec <_Znwj>
 80013be:	4603      	mov	r3, r0
 80013c0:	461c      	mov	r4, r3
 80013c2:	4620      	mov	r0, r4
 80013c4:	f000 f854 	bl	8001470 <_ZN11SensorModelC1Ev>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601c      	str	r4, [r3, #0]
 80013cc:	2048      	movs	r0, #72	@ 0x48
 80013ce:	f012 fa8d 	bl	80138ec <_Znwj>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
 80013d6:	4620      	mov	r0, r4
 80013d8:	f002 fcf4 	bl	8003dc4 <_ZN13TestModeModelC1Ev>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605c      	str	r4, [r3, #4]

}
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
	...

080013ec <_ZN15ModelManagement11getInstanceEv>:
ModelManagement::~ModelManagement() {

}

ModelManagement& ModelManagement::getInstance() {
 80013ec:	b598      	push	{r3, r4, r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <_ZN15ModelManagement11getInstanceEv+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d126      	bne.n	8001446 <_ZN15ModelManagement11getInstanceEv+0x5a>
		if (mutex == nullptr) {
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <_ZN15ModelManagement11getInstanceEv+0x68>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <_ZN15ModelManagement11getInstanceEv+0x20>
			mutex = xSemaphoreCreateMutex();
 8001400:	2001      	movs	r0, #1
 8001402:	f00e ff54 	bl	80102ae <xQueueCreateMutex>
 8001406:	4603      	mov	r3, r0
 8001408:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_ZN15ModelManagement11getInstanceEv+0x68>)
 800140a:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdPASS) {
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <_ZN15ModelManagement11getInstanceEv+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	4618      	mov	r0, r3
 8001416:	f00f fa75 	bl	8010904 <xQueueSemaphoreTake>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <_ZN15ModelManagement11getInstanceEv+0x5a>
			if (instance == nullptr) {
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <_ZN15ModelManagement11getInstanceEv+0x64>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <_ZN15ModelManagement11getInstanceEv+0x5a>
				instance = new ModelManagement();
 8001432:	2008      	movs	r0, #8
 8001434:	f012 fa5a 	bl	80138ec <_Znwj>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ffb7 	bl	80013b0 <_ZN15ModelManagementC1Ev>
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <_ZN15ModelManagement11getInstanceEv+0x64>)
 8001444:	601c      	str	r4, [r3, #0]
			}
		}
	}
	return *instance;
 8001446:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <_ZN15ModelManagement11getInstanceEv+0x64>)
 8001448:	681b      	ldr	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd98      	pop	{r3, r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	200002e8 	.word	0x200002e8
 8001454:	200002ec 	.word	0x200002ec

08001458 <_ZN15ModelManagement14getSensorModelEv>:

SensorModel* ModelManagement::getSensorModel() {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	return sensorModel;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_ZN11SensorModelC1Ev>:
 *      Author: Admin
 */

#include "Model/SensorModel.h"

SensorModel::SensorModel() :
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
		nt(false), np(false), cm(false), at(false), pt(false), t1(false), t2(
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	709a      	strb	r2, [r3, #2]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	70da      	strb	r2, [r3, #3]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	711a      	strb	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	715a      	strb	r2, [r3, #5]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	719a      	strb	r2, [r3, #6]
				false), t3(false), gear(0), rpm(0), encodeModel(nullptr) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	71da      	strb	r2, [r3, #7]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	721a      	strb	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	815a      	strh	r2, [r3, #10]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
}
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN11SensorModel13resetDistanceEv>:

void SensorModel::setDistance(float distance){
	this->encodeModel->setDistance(distance);
}

void SensorModel::resetDistance(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	this->encodeModel->resetDistance();
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <_ZN11EncodeModel13resetDistanceEv>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN11SensorModel5setAtEb>:

void SensorModel::setAt(bool at) {
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70fb      	strb	r3, [r7, #3]
	this->at = at;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	70da      	strb	r2, [r3, #3]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZNK11SensorModel14getEncodeModelEv>:

EncodeModel& SensorModel::getEncodeModel() const {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	return *(this->encodeModel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZN11SensorModel14setEncodeModelEP11EncodeModel>:

void SensorModel::setEncodeModel(EncodeModel *encodeModel) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	this->encodeModel = encodeModel;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	60da      	str	r2, [r3, #12]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_ZNK11SensorModel4isCmEv>:

bool SensorModel::isCm() const {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	return cm;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	789b      	ldrb	r3, [r3, #2]
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZN11SensorModel5setCmEb>:

void SensorModel::setCm(bool cm) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
	this->cm = cm;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	709a      	strb	r2, [r3, #2]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN11SensorModel7setGearEh>:

uint8_t SensorModel::getGear() const {
	return gear;
}

void SensorModel::setGear(uint8_t gear) {
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
	this->gear = gear;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	721a      	strb	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_ZNK11SensorModel4isNpEv>:

bool SensorModel::isNp() const {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	return np;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_ZN11SensorModel5setNpEb>:

void SensorModel::setNp(bool np) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
	this->np = np;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	705a      	strb	r2, [r3, #1]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZNK11SensorModel4isNtEv>:

bool SensorModel::isNt() const {
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return nt;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_ZN11SensorModel5setNtEb>:

void SensorModel::setNt(bool nt) {
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	70fb      	strb	r3, [r7, #3]
	this->nt = nt;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN11SensorModel5setPtEb>:

bool SensorModel::isPt() const {
	return pt;
}

void SensorModel::setPt(bool pt) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
	this->pt = pt;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	711a      	strb	r2, [r3, #4]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZNK11SensorModel6getRpmEv>:

uint16_t SensorModel::getRpm() const {
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return rpm;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	895b      	ldrh	r3, [r3, #10]
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN11SensorModel6setRpmEt>:

void SensorModel::setRpm(uint16_t rpm) {
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
	this->rpm = rpm;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	815a      	strh	r2, [r3, #10]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZN11SensorModel5setT1Eb>:

bool SensorModel::isT1() const {
	return t1;
}

void SensorModel::setT1(bool t1) {
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	this->t1 = t1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	715a      	strb	r2, [r3, #5]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_ZN11SensorModel5setT2Eb>:

bool SensorModel::isT2() const {
	return t2;
}

void SensorModel::setT2(bool t2) {
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
	this->t2 = t2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	719a      	strb	r2, [r3, #6]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZN11SensorModel5setT3Eb>:

bool SensorModel::isT3() const {
	return t3;
}

void SensorModel::setT3(bool t3) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	this->t3 = t3;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	71da      	strb	r2, [r3, #7]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
    return malloc(size);
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f012 fa31 	bl	8013b14 <malloc>
 80016b2:	4603      	mov	r3, r0
  }
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    free(ptr);
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f012 fa2c 	bl	8013b24 <free>
  }
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	68b8      	ldr	r0, [r7, #8]
 80016e4:	f012 fad4 	bl	8013c90 <realloc>
 80016e8:	4603      	mov	r3, r0
  }
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80016f8:	4b02      	ldr	r3, [pc, #8]	@ (8001704 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	20000000 	.word	0x20000000

08001708 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>:
 public:
  enum Ownership { Copied, Linked };

  JsonString() : data_(0), size_(0), ownership_(Linked) {}

  JsonString(const char* data, Ownership ownership = Linked)
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	71fb      	strb	r3, [r7, #7]
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE+0x24>
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f7fe fdac 	bl	8000280 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	e000      	b.n	800172e <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE+0x26>
 800172c:	2300      	movs	r3, #0
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6053      	str	r3, [r2, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	721a      	strb	r2, [r3, #8]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>:

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	721a      	strb	r2, [r3, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    return data_;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
  }
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>:
  bool isLinked() const {
    return ownership_ == Linked;
  }

  // Returns length of the string.
  size_t size() const {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    return size_;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
  }
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>:
    if (!collection)
      return;
    collection->clear(resources);
  }

  SlotId head() const {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    return head_;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	881b      	ldrh	r3, [r3, #0]
  }
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	4013      	ands	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_ZN11ArduinoJson8V721HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>:
    return p;
  }

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffed 	bl	80017e6 <_ZN11ArduinoJson8V721HB226detail14VariantContentC1Ev>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	711a      	strb	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001818:	80da      	strh	r2, [r3, #6]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    return next_;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	88db      	ldrh	r3, [r3, #6]
  }
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_ZN11ArduinoJson8V721HB226detail10StringPoolC1Ev>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringPool {
 public:
  StringPool() = default;
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	621a      	str	r2, [r3, #32]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001878:	851a      	strh	r2, [r3, #40]	@ 0x28
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZN11ArduinoJson8V721HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	711a      	strb	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3308      	adds	r3, #8
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ffca 	bl	800183c <_ZN11ArduinoJson8V721HB226detail10StringPoolC1Ev>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	330c      	adds	r3, #12
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ffd3 	bl	8001858 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
    return data_;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
  }
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_ZNK11ArduinoJson8V721HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    return resources_;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
  }
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ffb1 	bl	8001888 <_ZN11ArduinoJson8V721HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3338      	adds	r3, #56	@ 0x38
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff66 	bl	80017fc <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZNK11ArduinoJson8V721HB2212JsonDocumentcvNS0_16JsonVariantConstEEv>:

  operator JsonVariant() {
    return getVariant();
  }

  operator JsonVariantConst() const {
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
    return getVariant();
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f805 	bl	8001958 <_ZNK11ArduinoJson8V721HB2212JsonDocument10getVariantEv>
 800194e:	bf00      	nop
  }
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_ZNK11ArduinoJson8V721HB2212JsonDocument10getVariantEv>:
 private:
  JsonVariant getVariant() {
    return JsonVariant(&data_, &resources_);
  }

  JsonVariantConst getVariant() const {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    return JsonVariantConst(&data_, &resources_);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3338      	adds	r3, #56	@ 0x38
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa6 	bl	80018bc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>:
inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
  variant->clear(this);
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
}

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	330c      	adds	r3, #12
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f9a9 	bl	8001ce4 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>:
inline void ResourceManager::freeExtension(SlotId id) {
  auto p = getExtension(id);
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
}

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	330c      	adds	r3, #12
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f997 	bl	8001ce4 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80019b6:	4603      	mov	r3, r0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f000 f816 	bl	80019fc <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb>
 80019d0:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 80019d2:	e002      	b.n	80019da <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3302      	adds	r3, #2
 80019d8:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x2e>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d1f2      	bne.n	80019d4 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	781b      	ldrb	r3, [r3, #0]
  }
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb>:
      p += 2;
    }
  }

 private:
  static const char* escapeTable(bool isSerializing) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x14>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	e000      	b.n	8001a12 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x16>
 8001a10:	2300      	movs	r3, #0
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8001a14:	4413      	add	r3, r2
  }
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	08016880 	.word	0x08016880

08001a28 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <_ZN11ArduinoJson8V721HB226detail5pow10Ei+0x24>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fff4 	bl	8001a28 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	e000      	b.n	8001a4e <_ZN11ArduinoJson8V721HB226detail5pow10Ei+0x26>
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	ed87 0b00 	vstr	d0, [r7]
 8001a64:	460b      	mov	r3, r1
 8001a66:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8001a68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ffdb 	bl	8001a28 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>
 8001a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8001a74:	463b      	mov	r3, r7
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f95a 	bl	8001d30 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8001a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f896 	bl	8000bb8 <__aeabi_d2uiz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	e011      	b.n	8001aba <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x62>
    maxDecimalPart /= 10;
 8001a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a98:	4a4b      	ldr	r2, [pc, #300]	@ (8001bc8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8001aa2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d8ea      	bhi.n	8001a96 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x3e>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8001ac0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ac6:	f7fe fd25 	bl	8000514 <__aeabi_ui2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbe1 	bl	8000298 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4614      	mov	r4, r2
 8001adc:	461d      	mov	r5, r3
 8001ade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ae0:	f7fe fd18 	bl	8000514 <__aeabi_ui2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
  JsonFloat remainder =
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4629      	mov	r1, r5
 8001aec:	f7fe fd8c 	bl	8000608 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9c7 2304 	strd	r2, r3, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8001af8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afc:	f7ff f85c 	bl	8000bb8 <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8001b04:	69f8      	ldr	r0, [r7, #28]
 8001b06:	f7fe fd05 	bl	8000514 <__aeabi_ui2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b12:	f7fe fbc1 	bl	8000298 <__aeabi_dsub>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8001b1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	f7fe fbb9 	bl	800029c <__adddf3>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f841 	bl	8000bb8 <__aeabi_d2uiz>
 8001b36:	4602      	mov	r2, r0
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d320      	bcc.n	8001b88 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
    decimal = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    integral++;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8001b50:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	d914      	bls.n	8001b88 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
      exponent++;
 8001b5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8001b6e:	e00b      	b.n	8001b88 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
    decimal /= 10;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8001b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8001b88:	69f9      	ldr	r1, [r7, #28]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001b8c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	1aca      	subs	r2, r1, r3
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d103      	bne.n	8001ba8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x150>
 8001ba0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dce3      	bgt.n	8001b70 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x118>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001bb8:	811a      	strh	r2, [r3, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	7afa      	ldrb	r2, [r7, #11]
 8001bbe:	729a      	strb	r2, [r3, #10]
}
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	3730      	adds	r7, #48	@ 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc8:	cccccccd 	.word	0xcccccccd

08001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:
  type_ = VariantType::Null;
}

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	791b      	ldrb	r3, [r3, #4]
 8001bda:	2110      	movs	r1, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fdeb 	bl	80017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8001be2:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f7ff fed4 	bl	800199c <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>
 8001bf4:	4603      	mov	r3, r0
             : nullptr;
 8001bf6:	e000      	b.n	8001bfa <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <_ZN9BaseModelC1Ev>:
 *  Created on: Dec 15, 2024
 *      Author: Admin
 */
#include "Model/Process/BaseModel.h"

BaseModel::BaseModel() :
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
		data() {
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <_ZN9BaseModelC1Ev+0x2c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1d1c      	adds	r4, r3, #4
 8001c16:	f7ff fd6d 	bl	80016f4 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff fe77 	bl	8001912 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>

}
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08016b10 	.word	0x08016b10

08001c34 <_ZNK9BaseModel6toJsonEv>:

const JsonDocument& BaseModel::toJson() const{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	return this->data;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_ZNK9BaseModel8toStringB5cxx11Ev>:

std::string BaseModel::toString() const {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	std::string jsonString;
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f011 fea9 	bl	80139ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	serializeJson(this->data, jsonString);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	1d1a      	adds	r2, r3, #4
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe67 	bl	800193a <_ZNK11ArduinoJson8V721HB2212JsonDocumentcvNS0_16JsonVariantConstEEv>
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c76:	f000 f939 	bl	8001eec <_ZN11ArduinoJson8V721HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_6detail9enable_ifIXntsrNS8_10is_pointerIT_EE5valueEjE4typeENS0_16JsonVariantConstERSB_>
	return jsonString;
 8001c7a:	bf00      	nop
}
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    return client.getData();
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe28 	bl	80018e2 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst7getDataEv>
 8001c92:	4603      	mov	r3, r0
  }
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fe28 	bl	80018fa <_ZNK11ArduinoJson8V721HB2216JsonVariantConst18getResourceManagerEv>
 8001caa:	4603      	mov	r3, r0
  }
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    return size_;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
  }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    return data_;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
  }
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  void freeSlot(Slot<T> slot) {
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
    freeList_ = slot.id();
  }

  T* getSlot(SlotId id) const {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e012      	b.n	8001d24 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	09db      	lsrs	r3, r3, #7
 8001d02:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d0a:	81bb      	strh	r3, [r7, #12]
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	89ba      	ldrh	r2, [r7, #12]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8fa 	bl	8001f14 <_ZNK11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	bf00      	nop
  }
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 8001d40:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d44:	2201      	movs	r2, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d52:	a362      	add	r3, pc, #392	@ (adr r3, 8001edc <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1ac>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fedc 	bl	8000b14 <__aeabi_dcmpge>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04a      	beq.n	8001df8 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xc8>
    for (; index >= 0; index--) {
 8001d62:	e045      	b.n	8001df0 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xc0>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d6a:	f000 f8e5 	bl	8001f38 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f8eb 	bl	8001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001d82:	ec53 2b10 	vmov	r2, r3, d0
 8001d86:	2101      	movs	r1, #1
 8001d88:	460e      	mov	r6, r1
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f7fe fec1 	bl	8000b14 <__aeabi_dcmpge>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x6c>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	461e      	mov	r6, r3
 8001d9c:	b2f3      	uxtb	r3, r6
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01d      	beq.n	8001dde <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xae>
        value *= traits::negativeBinaryPowersOfTen()[index];
 8001da2:	f000 f8f1 	bl	8001f88 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8001da6:	4603      	mov	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f8cf 	bl	8001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001dba:	ec51 0b10 	vmov	r0, r1, d0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc20 	bl	8000608 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
        powersOf10 = int16_t(powersOf10 + bit);
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	8bfb      	ldrh	r3, [r7, #30]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	105b      	asrs	r3, r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8001de4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	777b      	strb	r3, [r7, #29]
 8001df0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dab5      	bge.n	8001d64 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x34>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f7fe fe8f 	bl	8000b28 <__aeabi_dcmpgt>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d05c      	beq.n	8001eca <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x19a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e16:	a333      	add	r3, pc, #204	@ (adr r3, 8001ee4 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1b4>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fe70 	bl	8000b00 <__aeabi_dcmple>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d051      	beq.n	8001eca <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x19a>
    for (; index >= 0; index--) {
 8001e26:	e04c      	b.n	8001ec2 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x192>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e2e:	f000 f8ab 	bl	8001f88 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f889 	bl	8001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001e46:	ec51 0b10 	vmov	r0, r1, d0
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1a8>)
 8001e50:	f7fe fbda 	bl	8000608 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	2101      	movs	r1, #1
 8001e5a:	460e      	mov	r6, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fe44 	bl	8000aec <__aeabi_dcmplt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x13e>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	461e      	mov	r6, r3
 8001e6e:	b2f3      	uxtb	r3, r6
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01d      	beq.n	8001eb0 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x180>
        value *= traits::positiveBinaryPowersOfTen()[index];
 8001e74:	f000 f860 	bl	8001f38 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f866 	bl	8001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001e8c:	ec51 0b10 	vmov	r0, r1, d0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbb7 	bl	8000608 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	e9c1 2300 	strd	r2, r3, [r1]
        powersOf10 = int16_t(powersOf10 - bit);
 8001ea4:	8bfa      	ldrh	r2, [r7, #30]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	105b      	asrs	r3, r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8001eb6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	777b      	strb	r3, [r7, #29]
 8001ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	daae      	bge.n	8001e28 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xf8>
  return powersOf10;
 8001eca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40240000 	.word	0x40240000
 8001edc:	00000000 	.word	0x00000000
 8001ee0:	416312d0 	.word	0x416312d0
 8001ee4:	88e368f1 	.word	0x88e368f1
 8001ee8:	3ee4f8b5 	.word	0x3ee4f8b5

08001eec <_ZN11ArduinoJson8V721HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_6detail9enable_ifIXntsrNS8_10is_pointerIT_EE5valueEjE4typeENS0_16JsonVariantConstERSB_>:

// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <typename TDestination>
detail::enable_if_t<!detail::is_pointer<TDestination>::value, size_t>
serializeJson(JsonVariantConst source, TDestination& destination) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001efa:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f06:	f000 f84f 	bl	8001fa8 <_ZN11ArduinoJson8V721HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 8001f0a:	4603      	mov	r3, r0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_ZNK11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
      return {};
    auto index = usage_++;
    return {slots_ + index, SlotId(index)};
  }

  T* getSlot(SlotId id) const {
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
    ARDUINOJSON_ASSERT(id < usage_);
    return slots_ + id;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
  }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
      (mantissa_type(1) << mantissa_bits) - 1;

  using exponent_type = int16_t;
  static const exponent_type exponent_max = 308;

  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
            0x4693B8B5B5056E17,  // 1e32
            0x4D384F03E93FF9F5,  // 1e64
            0x5A827748F9301D32,  // 1e128
            0x75154FDD7F73BF3C,  // 1e256
        });
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4904      	ldr	r1, [pc, #16]	@ (8001f54 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f84a 	bl	8001fdc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>
 8001f48:	687b      	ldr	r3, [r7, #4]
  }
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	08016a78 	.word	0x08016a78

08001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f844 	bl	8001ffa <_ZN11ArduinoJson8V721HB226detail8pgm_readIdEET_PKS3_>
 8001f72:	eeb0 7a40 	vmov.f32	s14, s0
 8001f76:	eef0 7a60 	vmov.f32	s15, s1
  }
 8001f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7e:	eef0 0a67 	vmov.f32	s1, s15
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:

  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
            0x3949F623D5A8A733,  // 1e-32
            0x32A50FFD44F4A73D,  // 1e-64
            0x255BBA08CF8C979D,  // 1e-128
            0x0AC8062864AC6F43   // 1e-256
        });
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4904      	ldr	r1, [pc, #16]	@ (8001fa4 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f822 	bl	8001fdc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>
 8001f98:	687b      	ldr	r3, [r7, #4]
  }
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	08016ac0 	.word	0x08016ac0

08001fa8 <_ZN11ArduinoJson8V721HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fb6:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f82d 	bl	800201e <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fce:	f000 f836 	bl	800203e <_ZN11ArduinoJson8V721HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8001fd2:	4603      	mov	r3, r0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_ZN11ArduinoJson8V721HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return *p;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	ec43 2b17 	vmov	d7, r2, r3
}
 800200c:	eeb0 0a47 	vmov.f32	s0, s14
 8002010:	eef0 0a67 	vmov.f32	s1, s15
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
    str.clear();
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f011 fd05 	bl	8013a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN11ArduinoJson8V721HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800203e:	b580      	push	{r7, lr}
 8002040:	b08a      	sub	sp, #40	@ 0x28
 8002042:	af00      	add	r7, sp, #0
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	e883 0003 	stmia.w	r3, {r0, r1}
 800204c:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe16 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8002058:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe1c 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8002064:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f81f 	bl	80020b2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	461a      	mov	r2, r3
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800207e:	f000 f82b 	bl	80020d8 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8002082:	4603      	mov	r3, r0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f822 	bl	800210c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
        return visit.visit(nullptr);
    }
  }

  template <typename TVisitor>
  static typename TVisitor::result_type accept(const VariantData* var,
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
                                               const ResourceManager* resources,
                                               TVisitor& visit) {
    if (var != 0)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f81c 	bl	800212c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 80020f4:	4603      	mov	r3, r0
 80020f6:	e005      	b.n	8002104 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
    else
      return visit.visit(nullptr);
 80020f8:	2100      	movs	r1, #0
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f948 	bl	8002390 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8002100:	4603      	mov	r3, r0
 8002102:	bf00      	nop
  }
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	463a      	mov	r2, r7
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f94b 	bl	80023b8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 800212c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002130:	b08e      	sub	sp, #56	@ 0x38
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fd45 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8002142:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	3b03      	subs	r3, #3
 800214a:	2b3d      	cmp	r3, #61	@ 0x3d
 800214c:	f200 8114 	bhi.w	8002378 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x24c>
 8002150:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	080022e3 	.word	0x080022e3
 800215c:	08002299 	.word	0x08002299
 8002160:	080022b9 	.word	0x080022b9
 8002164:	0800235f 	.word	0x0800235f
 8002168:	08002379 	.word	0x08002379
 800216c:	08002379 	.word	0x08002379
 8002170:	08002379 	.word	0x08002379
 8002174:	08002327 	.word	0x08002327
 8002178:	08002379 	.word	0x08002379
 800217c:	0800230f 	.word	0x0800230f
 8002180:	08002379 	.word	0x08002379
 8002184:	08002251 	.word	0x08002251
 8002188:	08002379 	.word	0x08002379
 800218c:	08002379 	.word	0x08002379
 8002190:	08002379 	.word	0x08002379
 8002194:	08002379 	.word	0x08002379
 8002198:	08002379 	.word	0x08002379
 800219c:	08002379 	.word	0x08002379
 80021a0:	08002379 	.word	0x08002379
 80021a4:	08002379 	.word	0x08002379
 80021a8:	08002379 	.word	0x08002379
 80021ac:	08002379 	.word	0x08002379
 80021b0:	08002379 	.word	0x08002379
 80021b4:	0800234f 	.word	0x0800234f
 80021b8:	08002379 	.word	0x08002379
 80021bc:	0800233f 	.word	0x0800233f
 80021c0:	08002379 	.word	0x08002379
 80021c4:	08002265 	.word	0x08002265
 80021c8:	08002379 	.word	0x08002379
 80021cc:	0800228b 	.word	0x0800228b
 80021d0:	08002379 	.word	0x08002379
 80021d4:	08002379 	.word	0x08002379
 80021d8:	08002379 	.word	0x08002379
 80021dc:	08002379 	.word	0x08002379
 80021e0:	08002379 	.word	0x08002379
 80021e4:	08002379 	.word	0x08002379
 80021e8:	08002379 	.word	0x08002379
 80021ec:	08002379 	.word	0x08002379
 80021f0:	08002379 	.word	0x08002379
 80021f4:	08002379 	.word	0x08002379
 80021f8:	08002379 	.word	0x08002379
 80021fc:	08002379 	.word	0x08002379
 8002200:	08002379 	.word	0x08002379
 8002204:	08002379 	.word	0x08002379
 8002208:	08002379 	.word	0x08002379
 800220c:	08002379 	.word	0x08002379
 8002210:	08002379 	.word	0x08002379
 8002214:	08002379 	.word	0x08002379
 8002218:	08002379 	.word	0x08002379
 800221c:	08002379 	.word	0x08002379
 8002220:	08002379 	.word	0x08002379
 8002224:	08002379 	.word	0x08002379
 8002228:	08002379 	.word	0x08002379
 800222c:	08002379 	.word	0x08002379
 8002230:	08002379 	.word	0x08002379
 8002234:	08002379 	.word	0x08002379
 8002238:	08002379 	.word	0x08002379
 800223c:	08002379 	.word	0x08002379
 8002240:	08002379 	.word	0x08002379
 8002244:	08002379 	.word	0x08002379
 8002248:	08002379 	.word	0x08002379
 800224c:	0800227d 	.word	0x0800227d
        return visit.visit(content_.asFloat);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f000 f8bf 	bl	80023de <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8002260:	4603      	mov	r3, r0
 8002262:	e08f      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asDouble);
 8002264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002266:	ed93 7b00 	vldr	d7, [r3]
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f000 f8c7 	bl	8002406 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8002278:	4603      	mov	r3, r0
 800227a:	e083      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asArray);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4619      	mov	r1, r3
 8002280:	68b8      	ldr	r0, [r7, #8]
 8002282:	f000 f8d4 	bl	800242e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 8002286:	4603      	mov	r3, r0
 8002288:	e07c      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asObject);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4619      	mov	r1, r3
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	f000 f90b 	bl	80024aa <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 8002294:	4603      	mov	r3, r0
 8002296:	e075      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(JsonString(content_.asLinkedString));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2201      	movs	r2, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa30 	bl	8001708 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f000 f945 	bl	800253e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80022b4:	4603      	mov	r3, r0
 80022b6:	e065      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80022c6:	461a      	mov	r2, r3
 80022c8:	f107 0020 	add.w	r0, r7, #32
 80022cc:	2300      	movs	r3, #0
 80022ce:	f7ff fa38 	bl	8001742 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d8:	68b8      	ldr	r0, [r7, #8]
 80022da:	f000 f930 	bl	800253e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80022de:	4603      	mov	r3, r0
                                      JsonString::Copied));
 80022e0:	e050      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(RawString(content_.asOwnedString->data,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 80022f0:	461a      	mov	r2, r3
 80022f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fec8 	bl	800208c <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>
 80022fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002300:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002304:	68b8      	ldr	r0, [r7, #8]
 8002306:	f000 f939 	bl	800257c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 800230a:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 800230c:	e03a      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	17da      	asrs	r2, r3, #31
 8002314:	4698      	mov	r8, r3
 8002316:	4691      	mov	r9, r2
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f000 f94c 	bl	80025ba <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 8002322:	4603      	mov	r3, r0
 8002324:	e02e      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	461c      	mov	r4, r3
 800232e:	4615      	mov	r5, r2
 8002330:	4622      	mov	r2, r4
 8002332:	462b      	mov	r3, r5
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f000 f954 	bl	80025e2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 800233a:	4603      	mov	r3, r0
 800233c:	e022      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asInt64);
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f000 f938 	bl	80025ba <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 800234a:	4603      	mov	r3, r0
 800234c:	e01a      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asUint64);
 800234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	f000 f944 	bl	80025e2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 800235a:	4603      	mov	r3, r0
 800235c:	e012      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asBoolean != 0);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	68b8      	ldr	r0, [r7, #8]
 8002370:	f000 f94b 	bl	800260a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 8002374:	4603      	mov	r3, r0
 8002376:	e005      	b.n	8002384 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(nullptr);
 8002378:	2100      	movs	r1, #0
 800237a:	68b8      	ldr	r0, [r7, #8]
 800237c:	f000 f808 	bl	8002390 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8002380:	4603      	mov	r3, r0
 8002382:	bf00      	nop
  }
 8002384:	4618      	mov	r0, r3
 8002386:	3738      	adds	r7, #56	@ 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800238e:	bf00      	nop

08002390 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4905      	ldr	r1, [pc, #20]	@ (80023b4 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f947 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f957 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80023aa:	4603      	mov	r3, r0
  }
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08016894 	.word	0x08016894

080023b8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	ed97 0a00 	vldr	s0, [r7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f97b 	bl	80026ec <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f92e 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80023fc:	4603      	mov	r3, r0
  }
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	ed97 0b00 	vldr	d0, [r7]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f97c 	bl	8002716 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f91a 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002424:	4603      	mov	r3, r0
  }
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
    write('[');
 8002438:	215b      	movs	r1, #91	@ 0x5b
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f97b 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9ac 	bl	80017a0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>
 8002448:	4603      	mov	r3, r0
 800244a:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 800244c:	e01c      	b.n	8002488 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	89fa      	ldrh	r2, [r7, #14]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa8e 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 800245c:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	461a      	mov	r2, r3
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f7ff fe60 	bl	800212c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	f7ff f9d9 	bl	8001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8002472:	4603      	mov	r3, r0
 8002474:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 8002480:	212c      	movs	r1, #44	@ 0x2c
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f957 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800248e:	4293      	cmp	r3, r2
 8002490:	d1dd      	bne.n	800244e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 8002492:	215d      	movs	r1, #93	@ 0x5d
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f94e 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8dc 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80024a0:	4603      	mov	r3, r0
  }
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
    write('{');
 80024b4:	217b      	movs	r1, #123	@ 0x7b
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f93d 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f96e 	bl	80017a0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 80024c8:	2301      	movs	r3, #1
 80024ca:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 80024cc:	e026      	b.n	800251c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	89fa      	ldrh	r2, [r7, #14]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fa4e 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 80024dc:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	68b8      	ldr	r0, [r7, #8]
 80024e8:	f7ff fe20 	bl	800212c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 80024ec:	68b8      	ldr	r0, [r7, #8]
 80024ee:	f7ff f999 	bl	8001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 80024f2:	4603      	mov	r3, r0
 80024f4:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d009      	beq.n	8002514 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8002500:	7b7b      	ldrb	r3, [r7, #13]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8002506:	233a      	movs	r3, #58	@ 0x3a
 8002508:	e000      	b.n	800250c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 800250a:	232c      	movs	r3, #44	@ 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f911 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8002514:	7b7b      	ldrb	r3, [r7, #13]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002522:	4293      	cmp	r3, r2
 8002524:	d1d3      	bne.n	80024ce <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8002526:	217d      	movs	r1, #125	@ 0x7d
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f904 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f892 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002534:	4603      	mov	r3, r0
  }
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 800253e:	b5b0      	push	{r4, r5, r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	4638      	mov	r0, r7
 8002548:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 800254c:	68fc      	ldr	r4, [r7, #12]
 800254e:	463b      	mov	r3, r7
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f90d 	bl	8001770 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 8002556:	4605      	mov	r5, r0
 8002558:	463b      	mov	r3, r7
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f914 	bl	8001788 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	4629      	mov	r1, r5
 8002566:	4620      	mov	r0, r4
 8002568:	f000 f8f5 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f873 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002572:	4603      	mov	r3, r0
  }
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bdb0      	pop	{r4, r5, r7, pc}

0800257c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 800258a:	68fc      	ldr	r4, [r7, #12]
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb9c 	bl	8001ccc <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4dataEv>
 8002594:	4605      	mov	r5, r0
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fb8b 	bl	8001cb4 <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4sizeEv>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4629      	mov	r1, r5
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 f8fb 	bl	80027a0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f854 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80025b0:	4603      	mov	r3, r0
  }
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}

080025ba <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 80025c6:	68f9      	ldr	r1, [r7, #12]
 80025c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025cc:	4608      	mov	r0, r1
 80025ce:	f000 f8f7 	bl	80027c0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f840 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80025d8:	4603      	mov	r3, r0
  }
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 80025ee:	68f9      	ldr	r1, [r7, #12]
 80025f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025f4:	4608      	mov	r0, r1
 80025f6:	f000 f907 	bl	8002808 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f82c 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002600:	4603      	mov	r3, r0
  }
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f929 	bl	8002874 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f818 	bl	8002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002628:	4603      	mov	r3, r0
  }
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 800263c:	687c      	ldr	r4, [r7, #4]
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	f7fd fe1e 	bl	8000280 <strlen>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	4620      	mov	r0, r4
 800264c:	f000 f92c 	bl	80028a8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f936 	bl	80028d4 <_ZNK11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002668:	4603      	mov	r3, r0
  }
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 800267c:	2301      	movs	r3, #1
 800267e:	461c      	mov	r4, r3
 8002680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002688:	f7fe fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_+0x24>
 8002692:	2300      	movs	r3, #0
 8002694:	461c      	mov	r4, r3
 8002696:	b2e3      	uxtb	r3, r4
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}

080026a0 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026b6:	f7fe fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d110      	bne.n	80026e2 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x42>
 80026c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	f7fd fde8 	bl	800029c <__adddf3>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d4:	f7fe fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x42>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x44>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f7fd ff2d 	bl	8000558 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	2106      	movs	r1, #6
 8002704:	ec43 2b10 	vmov	d0, r2, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8f1 	bl	80028f0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8002722:	2109      	movs	r1, #9
 8002724:	ed97 0b00 	vldr	d0, [r7]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f8e1 	bl	80028f0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f933 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8002762:	2122      	movs	r1, #34	@ 0x22
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f925 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 800276a:	e007      	b.n	800277c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f92c 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ed      	bne.n	800276c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 8002790:	2122      	movs	r1, #34	@ 0x22
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f90e 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f878 	bl	80028a8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 80027cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da0c      	bge.n	80027ee <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 80027d4:	212d      	movs	r1, #45	@ 0x2d
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8ec 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80027dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4254      	negs	r4, r2
 80027e4:	eb61 0503 	sbc.w	r5, r1, r3
 80027e8:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80027ec:	e003      	b.n	80027f6 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 80027ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 80027f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f804 	bl	8002808 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bdb0      	pop	{r4, r5, r7, pc}

08002808 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	3316      	adds	r3, #22
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 800281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8002820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002824:	f04f 020a 	mov.w	r2, #10
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	f7fe fb42 	bl	8000eb4 <__aeabi_uldivmod>
 8002830:	b2d3      	uxtb	r3, r2
 8002832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002834:	3a01      	subs	r2, #1
 8002836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002838:	3330      	adds	r3, #48	@ 0x30
 800283a:	b2da      	uxtb	r2, r3
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002844:	f04f 020a 	mov.w	r2, #10
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f7fe fb32 	bl	8000eb4 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8002858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285c:	4313      	orrs	r3, r2
 800285e:	d1df      	bne.n	8002820 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8002860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f8e1 	bl	8002a2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800286a:	bf00      	nop
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
    if (value)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 8002886:	4906      	ldr	r1, [pc, #24]	@ (80028a0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fed2 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800288e:	e003      	b.n	8002898 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 8002890:	4904      	ldr	r1, [pc, #16]	@ (80028a4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fecd 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0801689c 	.word	0x0801689c
 80028a4:	080168a4 	.word	0x080168a4

080028a8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f8c8 	bl	8002a50 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	441a      	add	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
  }
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZNK11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
    return writer_.count();
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f8c8 	bl	8002a74 <_ZNK11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 80028e4:	4603      	mov	r3, r0
  }
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	ed87 0b00 	vstr	d0, [r7]
 80028fc:	460b      	mov	r3, r1
 80028fe:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8002900:	ed97 0b00 	vldr	d0, [r7]
 8002904:	f7ff feb5 	bl	8002672 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 800290e:	4928      	ldr	r1, [pc, #160]	@ (80029b0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xc0>)
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fe8e 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8002916:	e048      	b.n	80029aa <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
    if (isinf(value))
 8002918:	ed97 0b00 	vldr	d0, [r7]
 800291c:	f7ff fec0 	bl	80026a0 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 8002926:	4922      	ldr	r1, [pc, #136]	@ (80029b0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xc0>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fe82 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800292e:	e03c      	b.n	80029aa <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
    if (value < 0.0) {
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800293c:	f7fe f8d6 	bl	8000aec <__aeabi_dcmplt>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x6a>
      writeRaw('-');
 8002946:	212d      	movs	r1, #45	@ 0x2d
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f833 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 800294e:	683c      	ldr	r4, [r7, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002956:	e9c7 4500 	strd	r4, r5, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002962:	4611      	mov	r1, r2
 8002964:	ed97 0b00 	vldr	d0, [r7]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f875 	bl	8001a58 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4619      	mov	r1, r3
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f88a 	bl	8002a8c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 8002978:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x9e>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8002986:	4619      	mov	r1, r3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f8b1 	bl	8002af0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 800298e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
      writeRaw('e');
 8002996:	2165      	movs	r1, #101	@ 0x65
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f80b 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 800299e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029a2:	4619      	mov	r1, r3
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f8e7 	bl	8002b78 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	08016894 	.word	0x08016894

080029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f8f3 	bl	8002bb2 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe ffec 	bl	80019c0 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc>
 80029e8:	4603      	mov	r3, r0
 80029ea:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 80029f2:	215c      	movs	r1, #92	@ 0x5c
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffdd 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffd8 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8002a04:	e00c      	b.n	8002a20 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffcf 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8002a16:	e003      	b.n	8002a20 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fe09 	bl	8002632 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	080168ac 	.word	0x080168ac

08002a2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a38:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a40:	461a      	mov	r2, r3
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	f7ff ff30 	bl	80028a8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f011 f82d 	bl	8013ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8002a6a:	687b      	ldr	r3, [r7, #4]
  }
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZNK11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    return count_;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
  }
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	@ 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	3316      	adds	r3, #22
 8002a9c:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8002aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aaa:	08da      	lsrs	r2, r3, #3
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	1aca      	subs	r2, r1, r3
 8002ab6:	b2d3      	uxtb	r3, r2
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	3a01      	subs	r2, #1
 8002abc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002abe:	3330      	adds	r3, #48	@ 0x30
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	603b      	str	r3, [r7, #0]
    } while (value);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e4      	bne.n	8002aa2 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ffa5 	bl	8002a2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	@ 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	cccccccd 	.word	0xcccccccd

08002af0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	3310      	adds	r3, #16
 8002b04:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 8002b0a:	e017      	b.n	8002b3c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8002b10:	fba3 2301 	umull	r2, r3, r3, r1
 8002b14:	08da      	lsrs	r2, r3, #3
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	1aca      	subs	r2, r1, r3
 8002b20:	b2d3      	uxtb	r3, r2
 8002b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b24:	3a01      	subs	r2, #1
 8002b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b28:	3330      	adds	r3, #48	@ 0x30
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4a10      	ldr	r2, [pc, #64]	@ (8002b74 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	3a01      	subs	r2, #1
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	71fa      	strb	r2, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1da      	bne.n	8002b0c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	222e      	movs	r2, #46	@ 0x2e
 8002b60:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8002b62:	6a3a      	ldr	r2, [r7, #32]
 8002b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ff60 	bl	8002a2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	@ 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	cccccccd 	.word	0xcccccccd

08002b78 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8002b84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da07      	bge.n	8002b9c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8002b8c:	212d      	movs	r1, #45	@ 0x2d
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff10 	bl	80029b4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	425b      	negs	r3, r3
 8002b98:	81fb      	strh	r3, [r7, #14]
 8002b9a:	e001      	b.n	8002ba0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f81b 	bl	8002be0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f83f 	bl	8002c48 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]
  }
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	3316      	adds	r3, #22
 8002bf2:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	08d9      	lsrs	r1, r3, #3
 8002c02:	460b      	mov	r3, r1
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c12:	3a01      	subs	r2, #1
 8002c14:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c16:	3330      	adds	r3, #48	@ 0x30
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	807b      	strh	r3, [r7, #2]
    } while (value);
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e3      	bne.n	8002bf8 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fef9 	bl	8002a2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	@ 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	cccccccd 	.word	0xcccccccd

08002c48 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f010 fef3 	bl	8013a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8002c62:	2301      	movs	r3, #1
  }
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_ZN11ArduinoJson8V721HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3309      	adds	r3, #9
  }
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c94:	d301      	bcc.n	8002c9a <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e01b      	b.n	8002cd2 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffe6 	bl	8002c6c <_ZN11ArduinoJson8V721HB226detail10StringNode13sizeForLengthEj>
 8002ca0:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d201      	bcs.n	8002cae <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002caa:	2300      	movs	r3, #0
 8002cac:	e011      	b.n	8002cd2 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	4798      	blx	r3
 8002cba:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  }
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:
    else
      allocator->deallocate(node);
    return newNode;
  }

  static void destroy(StringNode* node, Allocator* allocator) {
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	4798      	blx	r3
  }
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringC1EPKc>:
  ZeroTerminatedRamString(const char* str) : str_(str) {}
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>:
  bool isNull() const {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    return !str_;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
  }
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString4dataEv>:
  const char* data() const {
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
    return str_;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
  }
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_ZN11ArduinoJson8V721HB226detail19StaticStringAdapterC1EPKc>:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ffca 	bl	8002cfa <_ZN11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringC1EPKc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZNK11ArduinoJson8V721HB226detail19StaticStringAdapter8isLinkedEv>:
  bool isLinked() const {
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    return true;
 8002d78:	2301      	movs	r3, #1
  }
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_ZN11ArduinoJson8V721HB226detail13StringAdapterIPKcvE5adaptES4_>:
  static AdaptedString adapt(const char* p) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ffdc 	bl	8002d52 <_ZN11ArduinoJson8V721HB226detail19StaticStringAdapterC1EPKc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
  }
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>:
  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>:
  size_t size() const {
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
    return size_;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
  }
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_ZN11ArduinoJson8V721HB2210JsonStringC1Ev>:
  JsonString() : data_(0), size_(0), ownership_(Linked) {}
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	721a      	strb	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_ZNK11ArduinoJson8V721HB2210JsonString8isLinkedEv>:
  bool isLinked() const {
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7a1b      	ldrb	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
  }
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_ZN11ArduinoJson8V721HB226detail17JsonStringAdapterC1ERKNS0_10JsonStringE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class JsonStringAdapter : public SizedRamString {
 public:
  JsonStringAdapter(const JsonString& s)
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
      : SizedRamString(s.c_str(), s.size()), linked_(s.isLinked()) {}
 8002e36:	687c      	ldr	r4, [r7, #4]
 8002e38:	6838      	ldr	r0, [r7, #0]
 8002e3a:	f7fe fc99 	bl	8001770 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 8002e3e:	4605      	mov	r5, r0
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f7fe fca1 	bl	8001788 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ffa9 	bl	8002da4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f7ff ffd9 	bl	8002e0a <_ZNK11ArduinoJson8V721HB2210JsonString8isLinkedEv>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	721a      	strb	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdb0      	pop	{r4, r5, r7, pc}

08002e6a <_ZN11ArduinoJson8V721HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:

template <>
struct StringAdapter<JsonString> {
  using AdaptedString = JsonStringAdapter;

  static AdaptedString adapt(const JsonString& s) {
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
    return AdaptedString(s);
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffd8 	bl	8002e2c <_ZN11ArduinoJson8V721HB226detail17JsonStringAdapterC1ERKNS0_10JsonStringE>
  }
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]
  }
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e029      	b.n	8002f14 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d11f      	bne.n	8002f0a <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	889b      	ldrh	r3, [r3, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	809a      	strh	r2, [r3, #4]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d019      	beq.n	8002f1c <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e003      	b.n	8002f00 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6938      	ldr	r0, [r7, #16]
 8002f04:	f7ff fee9 	bl	8002cda <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002f08:	e008      	b.n	8002f1c <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d2      	bne.n	8002ec0 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 8002f1a:	e000      	b.n	8002f1e <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8002f1c:	bf00      	nop
    }
  }
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f38:	809a      	strh	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>:
  bool done() const {
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
  }
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>:
  VariantData* operator->() {
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    return data();
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f805 	bl	8002f82 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 8002f78:	4603      	mov	r3, r0
  }
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>:
  VariantData* data() {
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
  }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_ZN11ArduinoJson8V721HB226detail14CollectionDatanwEjPv>:
  static void* operator new(size_t, void* p) noexcept {
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
    return p;
 8002fa4:	683b      	ldr	r3, [r7, #0]
  }
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_ZN11ArduinoJson8V721HB226detail11VariantDatanwEjPv>:
  static void* operator new(size_t, void* p) noexcept {
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
    return p;
 8002fbc:	683b      	ldr	r3, [r7, #0]
  }
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>:
  void setNext(SlotId slot) {
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	80da      	strh	r2, [r3, #6]
  }
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f84f 	bl	8003094 <_ZNK11ArduinoJson8V721HB226detail11VariantData12isCollectionEv>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv+0x18>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	e000      	b.n	8003002 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv+0x1a>
 8003000:	2300      	movs	r3, #0
  }
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f86d 	bl	80030f2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isObjectEv>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv+0x18>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	e000      	b.n	8003024 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv+0x1a>
 8003022:	2300      	movs	r3, #0
  }
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ffe8 	bl	800300a <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 800303a:	4603      	mov	r3, r0
  }
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    switch (type_) {
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d002      	beq.n	800305c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x18>
 8003056:	2b05      	cmp	r3, #5
 8003058:	d008      	beq.n	800306c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x28>
 800305a:	e014      	b.n	8003086 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x42>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, JsonString::Linked);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fe fb4f 	bl	8001708 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 800306a:	e00f      	b.n	800308c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x48>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length, JsonString::Copied);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	88db      	ldrh	r3, [r3, #6]
 800307a:	461a      	mov	r2, r3
 800307c:	2300      	movs	r3, #0
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fb5f 	bl	8001742 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 8003084:	e002      	b.n	800308c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x48>
      default:
        return JsonString();
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff feab 	bl	8002de2 <_ZN11ArduinoJson8V721HB2210JsonStringC1Ev>
    }
  }
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZNK11ArduinoJson8V721HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	791b      	ldrb	r3, [r3, #4]
 80030a0:	2160      	movs	r1, #96	@ 0x60
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fb88 	bl	80017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80030a8:	4603      	mov	r3, r0
  }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZNK11ArduinoJson8V721HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	791b      	ldrb	r3, [r3, #4]
 80030be:	2108      	movs	r1, #8
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fb79 	bl	80017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80030c6:	4603      	mov	r3, r0
  }
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>:
      default:
        return false;
    }
  }

  bool isNull() const {
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
  }
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	791b      	ldrb	r3, [r3, #4]
 80030fe:	2b20      	cmp	r3, #32
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
  }
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv>:

  bool isString() const {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 8003128:	2b05      	cmp	r3, #5
 800312a:	d101      	bne.n	8003130 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x1c>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x1e>
 8003130:	2300      	movs	r3, #0
  }
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_ZN11ArduinoJson8V721HB226detail11VariantData15setLinkedStringEPKc>:
      return;
    var->clear(resources);
    var->setString(value, resources);
  }

  void setLinkedString(const char* s) {
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2204      	movs	r2, #4
 800314c:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	601a      	str	r2, [r3, #0]
  }
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <_ZN11ArduinoJson8V721HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:

  void setOwnedString(StringNode* s) {
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2205      	movs	r2, #5
 800316e:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	601a      	str	r2, [r3, #0]
  }
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_ZN11ArduinoJson8V721HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003198:	805a      	strh	r2, [r3, #2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <_ZN11ArduinoJson8V721HB226detail10ObjectDataC1Ev>:

#include <Json/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffe5 	bl	8003182 <_ZN11ArduinoJson8V721HB226detail14CollectionDataC1Ev>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4619      	mov	r1, r3
 80031d4:	2004      	movs	r0, #4
 80031d6:	f7ff fee0 	bl	8002f9a <_ZN11ArduinoJson8V721HB226detail14CollectionDatanwEjPv>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv+0x2c>
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	805a      	strh	r2, [r3, #2]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ffdd 	bl	80031a8 <_ZN11ArduinoJson8V721HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 80031ee:	687b      	ldr	r3, [r7, #4]
  }
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>:

  size_t size() const {
    return variantPools_.size() + stringPool_.size();
  }

  bool overflowed() const {
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    return overflowed_;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	791b      	ldrb	r3, [r3, #4]
  }
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZN11ArduinoJson8V721HB226detail15ResourceManager17dereferenceStringEPKc>:

  void destroyString(StringNode* node) {
    StringNode::destroy(node, allocator_);
  }

  void dereferenceString(const char* s) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f103 0008 	add.w	r0, r3, #8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	f7ff fe3e 	bl	8002ea8 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <_ZNK11ArduinoJson8V721HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
    return resources_;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
  }
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_ZNK11ArduinoJson8V721HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
    return data_;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
  }
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>:

  // Creates an unbound reference.
  JsonArrayConst() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonArrayConst(const detail::ArrayData* data,
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
                 const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>:

  // Creates an unbound reference.
  JsonObjectConst() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonObjectConst(const detail::ObjectData* data,
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
                  const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_ZN11ArduinoJson8V721HB2212JsonDocument18getResourceManagerEv>:

  detail::ResourceManager* getResourceManager() {
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
    return &resources_;
 80032de:	687b      	ldr	r3, [r7, #4]
  }
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_ZN11ArduinoJson8V721HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    return &data_;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3338      	adds	r3, #56	@ 0x38
  }
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>:
    return ComparerBase::visit(lhs);
  }
};

struct NullComparer : ComparerBase {
  CompareResult visit(nullptr_t) {
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    return COMPARE_RESULT_EQUAL;
 800330e:	2301      	movs	r3, #1
  }
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_ZN11ArduinoJson8V721HB226detail8ComparerIDnvEC1EDn>:
  using ComparerBase::visit;
};

template <>
struct Comparer<nullptr_t, void> : NullComparer {
  explicit Comparer(nullptr_t) : NullComparer() {}
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <Json/Variant/VariantCompare.hpp>
#include <Json/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fa62 	bl	8001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	e001      	b.n	800336a <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	80da      	strh	r2, [r3, #6]
}
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	88db      	ldrh	r3, [r3, #6]
 8003386:	4619      	mov	r1, r3
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f7fe faf5 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	88da      	ldrh	r2, [r3, #6]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	809a      	strh	r2, [r3, #4]
  if (slot_)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fa3b 	bl	8001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	80da      	strh	r2, [r3, #6]
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fe fad1 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 80033d6:	4601      	mov	r1, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff ffa8 	bl	8003334 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:
  }
}

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 80033ec:	b082      	sub	sp, #8
 80033ee:	b590      	push	{r4, r7, lr}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	1d38      	adds	r0, r7, #4
 80033f8:	e880 0006 	stmia.w	r0, {r1, r2}
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fed0 	bl	80041a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8003406:	4604      	mov	r4, r0
 8003408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800340c:	4618      	mov	r0, r3
 800340e:	f000 febe 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003412:	4603      	mov	r3, r0
 8003414:	4619      	mov	r1, r3
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff fdd7 	bl	8002fca <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	885b      	ldrh	r3, [r3, #2]
 8003420:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003424:	4293      	cmp	r3, r2
 8003426:	d01a      	beq.n	800345e <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	885b      	ldrh	r3, [r3, #2]
 800342c:	4619      	mov	r1, r3
 800342e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003430:	f7fe faa2 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003434:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003436:	697c      	ldr	r4, [r7, #20]
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fea7 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003440:	4603      	mov	r3, r0
 8003442:	4619      	mov	r1, r3
 8003444:	4620      	mov	r0, r4
 8003446:	f7ff fdc0 	bl	8002fca <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 800344a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fe9d 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 800345c:	e010      	b.n	8003480 <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fe94 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 800346e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe8b 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	805a      	strh	r2, [r3, #2]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800348a:	b002      	add	sp, #8
 800348c:	4770      	bx	lr

0800348e <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 800349e:	e01b      	b.n	80034d8 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 80034a0:	8afb      	ldrh	r3, [r7, #22]
 80034a2:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	4619      	mov	r1, r3
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f7fe fa65 	bl	8001978 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 80034ae:	6138      	str	r0, [r7, #16]
    next = slot->next();
 80034b0:	6938      	ldr	r0, [r7, #16]
 80034b2:	f7fe f9b7 	bl	8001824 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 80034ba:	683c      	ldr	r4, [r7, #0]
 80034bc:	8aba      	ldrh	r2, [r7, #20]
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fe7a 	bl	80041be <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 f851 	bl	800357a <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 80034d8:	8afb      	ldrh	r3, [r7, #22]
 80034da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034de:	4293      	cmp	r3, r2
 80034e0:	d1de      	bne.n	80034a0 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034e8:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034f0:	805a      	strh	r2, [r3, #2]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}

080034fa <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>:
inline Slot<VariantData> ResourceManager::allocVariant() {
 80034fa:	b590      	push	{r4, r7, lr}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f103 010c 	add.w	r1, r3, #12
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f107 0308 	add.w	r3, r7, #8
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fe79 	bl	800420a <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 feb7 	bl	8004290 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003522:	4603      	mov	r3, r0
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	711a      	strb	r2, [r3, #4]
    return {};
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fe56 	bl	80041e6 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1Ev>
 800353a:	e01a      	b.n	8003572 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x78>
  return {new (&p->variant) VariantData, p.id()};
 800353c:	f107 0308 	add.w	r3, r7, #8
 8003540:	4618      	mov	r0, r3
 8003542:	f000 feb6 	bl	80042b2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8003546:	4603      	mov	r3, r0
 8003548:	4619      	mov	r1, r3
 800354a:	2008      	movs	r0, #8
 800354c:	f7ff fd31 	bl	8002fb2 <_ZN11ArduinoJson8V721HB226detail11VariantDatanwEjPv>
 8003550:	4604      	mov	r4, r0
 8003552:	2c00      	cmp	r4, #0
 8003554:	d002      	beq.n	800355c <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x62>
 8003556:	4620      	mov	r0, r4
 8003558:	f7fe f950 	bl	80017fc <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	4618      	mov	r0, r3
 8003562:	f000 feb2 	bl	80042ca <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	4621      	mov	r1, r4
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fe26 	bl	80041be <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}

0800357a <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:
inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 800357a:	b5b0      	push	{r4, r5, r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fe0b 	bl	80041a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8003590:	4603      	mov	r3, r0
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f8d4 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f103 040c 	add.w	r4, r3, #12
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fde7 	bl	8004176 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe99 	bl	80042e2 <_ZN11ArduinoJson8V721HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 80035b0:	4605      	mov	r5, r0
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fdea 	bl	800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	4629      	mov	r1, r5
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fe99 	bl	80042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035d2:	4620      	mov	r0, r4
 80035d4:	f000 fea6 	bl	8004324 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bdb0      	pop	{r4, r5, r7, pc}

080035e0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>:
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f103 010c 	add.w	r1, r3, #12
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f107 0308 	add.w	r3, r7, #8
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fe06 	bl	800420a <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fe44 	bl	8004290 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003608:	4603      	mov	r3, r0
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	711a      	strb	r2, [r3, #4]
    return {};
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fe9d 	bl	800435a <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8003620:	e011      	b.n	8003646 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv+0x66>
  return {&p->extension, p.id()};
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fe43 	bl	80042b2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800362c:	4603      	mov	r3, r0
 800362e:	461c      	mov	r4, r3
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fe48 	bl	80042ca <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	4621      	mov	r1, r4
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fe9c 	bl	800437e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bd90      	pop	{r4, r7, pc}

0800364e <_ZN11ArduinoJson8V721HB226detail15ResourceManager13freeExtensionEt>:
inline void ResourceManager::freeExtension(SlotId id) {
 800364e:	b590      	push	{r4, r7, lr}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f99c 	bl	800199c <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>
 8003664:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 040c 	add.w	r4, r3, #12
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	6979      	ldr	r1, [r7, #20]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fe41 	bl	80042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003682:	4620      	mov	r0, r4
 8003684:	f000 fe4e 	bl	8004324 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}

08003690 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 8003690:	b5b0      	push	{r4, r5, r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	e883 0006 	stmia.w	r3, {r1, r2}
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fd4b 	bl	800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80036a6:	4604      	mov	r4, r0
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fe99 	bl	80043e0 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80036ae:	4605      	mov	r5, r0
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe88 	bl	80043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4629      	mov	r1, r5
 80036be:	4620      	mov	r0, r4
 80036c0:	f000 fe9a 	bl	80043f8 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>
                                   getResourceManager(dst));
  }
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}

080036cc <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:

  static const char* fromJson(JsonVariantConst src) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	463b      	mov	r3, r7
 80036d4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80036d8:	463b      	mov	r3, r7
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fad2 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80036e0:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00c      	beq.n	8003702 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	6979      	ldr	r1, [r7, #20]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fca8 	bl	8003044 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe f839 	bl	8001770 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	e000      	b.n	8003704 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8003702:	2300      	movs	r3, #0
  }
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:

  static bool checkJson(JsonVariantConst src) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	463b      	mov	r3, r7
 8003714:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8003718:	463b      	mov	r3, r7
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fab2 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003720:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fcf3 	bl	8003114 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8003738:	2300      	movs	r3, #0
  }
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
inline void VariantData::clear(ResourceManager* resources) {
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	791b      	ldrb	r3, [r3, #4]
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe f830 	bl	80017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	4619      	mov	r1, r3
 8003766:	6838      	ldr	r0, [r7, #0]
 8003768:	f7ff fd52 	bl	8003210 <_ZN11ArduinoJson8V721HB226detail15ResourceManager17dereferenceStringEPKc>
  if (type_ & VariantTypeBits::ExtensionBit)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	791b      	ldrb	r3, [r3, #4]
 8003770:	2110      	movs	r1, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe f820 	bl	80017b8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	f7ff ff62 	bl	800364e <_ZN11ArduinoJson8V721HB226detail15ResourceManager13freeExtensionEt>
  auto collection = asCollection();
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fc2c 	bl	8002fe8 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv>
 8003790:	60f8      	str	r0, [r7, #12]
  if (collection)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fe77 	bl	800348e <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>
  type_ = VariantType::Null;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	711a      	strb	r2, [r3, #4]
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>:
#include <Json/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80037bc:	d904      	bls.n	80037c8 <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1a>
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b39      	cmp	r3, #57	@ 0x39
 80037c2:	d801      	bhi.n	80037c8 <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1a>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1c>
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	ed87 0a00 	vstr	s0, [r7]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	e9c7 2300 	strd	r2, r3, [r7]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800381e:	e9c1 2300 	strd	r2, r3, [r1]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	e9c7 2300 	strd	r2, r3, [r7]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003842:	e9c1 2300 	strd	r2, r3, [r1]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	ed87 0b00 	vstr	d0, [r7]
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003866:	e9c1 2300 	strd	r2, r3, [r1]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3308      	adds	r3, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ffa3 	bl	80037d6 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ev>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	ed87 0a00 	vstr	s0, [r7]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3308      	adds	r3, #8
 80038b0:	ed97 0a00 	vldr	s0, [r7]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff99 	bl	80037ec <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ef>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	e9c7 2300 	strd	r2, r3, [r7]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f103 0108 	add.w	r1, r3, #8
 80038dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e0:	4608      	mov	r0, r1
 80038e2:	f7ff ff93 	bl	800380c <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ex>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	e9c7 2300 	strd	r2, r3, [r7]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2203      	movs	r2, #3
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f103 0108 	add.w	r1, r3, #8
 8003908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390c:	4608      	mov	r0, r1
 800390e:	f7ff ff8f 	bl	8003830 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ey>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	ed87 0b00 	vstr	d0, [r7]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3308      	adds	r3, #8
 8003932:	ed97 0b00 	vldr	d0, [r7]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff8c 	bl	8003854 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ed>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>:
    return value_.asDouble;
  }
#endif
};

inline Number parseNumber(const char* s) {
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	ed2d 8b02 	vpush	{d8}
 8003950:	b0a8      	sub	sp, #160	@ 0xa0
 8003952:	af00      	add	r7, sp, #0
 8003954:	6578      	str	r0, [r7, #84]	@ 0x54
 8003956:	6539      	str	r1, [r7, #80]	@ 0x50
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  switch (*s) {
 800395e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b2b      	cmp	r3, #43	@ 0x2b
 8003964:	d008      	beq.n	8003978 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x30>
 8003966:	2b2d      	cmp	r3, #45	@ 0x2d
 8003968:	d10a      	bne.n	8003980 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x38>
    case '-':
      is_negative = true;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
      s++;
 8003970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003972:	3301      	adds	r3, #1
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
      break;
 8003976:	e003      	b.n	8003980 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x38>
    case '+':
      s++;
 8003978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800397a:	3301      	adds	r3, #1
 800397c:	653b      	str	r3, [r7, #80]	@ 0x50
      break;
 800397e:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8003980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff12 	bl	80037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 800398a:	4603      	mov	r3, r0
 800398c:	f083 0301 	eor.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5a>
 8003996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b2e      	cmp	r3, #46	@ 0x2e
 800399c:	d001      	beq.n	80039a2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5a>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5c>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x68>
    return Number();
 80039a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80039aa:	f7ff ff65 	bl	8003878 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>
 80039ae:	e201      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>

  mantissa_t mantissa = 0;
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  exponent_t exponent_offset = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  const mantissa_t maxUint = JsonUInt(-1);
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

  while (isdigit(*s)) {
 80039ce:	e054      	b.n	8003a7a <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x132>
    uint8_t digit = uint8_t(*s - '0');
 80039d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3b30      	subs	r3, #48	@ 0x30
 80039d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (mantissa > maxUint / 10)
 80039da:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80039de:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 80039e2:	49b2      	ldr	r1, [pc, #712]	@ (8003cac <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x364>)
 80039e4:	418b      	sbcs	r3, r1
 80039e6:	d251      	bcs.n	8003a8c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa *= 10;
 80039e8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039ec:	4622      	mov	r2, r4
 80039ee:	462b      	mov	r3, r5
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0099      	lsls	r1, r3, #2
 80039fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80039fe:	0090      	lsls	r0, r2, #2
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	eb12 0804 	adds.w	r8, r2, r4
 8003a08:	eb43 0905 	adc.w	r9, r3, r5
 8003a0c:	eb18 0308 	adds.w	r3, r8, r8
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	eb49 0309 	adc.w	r3, r9, r9
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003a1c:	e9c7 8924 	strd	r8, r9, [r7, #144]	@ 0x90
    if (mantissa > maxUint - digit)
 8003a20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003a24:	2200      	movs	r2, #0
 8003a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a28:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a2a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a2e:	460b      	mov	r3, r1
 8003a30:	43db      	mvns	r3, r3
 8003a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a34:	4613      	mov	r3, r2
 8003a36:	43db      	mvns	r3, r3
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003a3e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003a42:	4621      	mov	r1, r4
 8003a44:	4291      	cmp	r1, r2
 8003a46:	4629      	mov	r1, r5
 8003a48:	eb71 0303 	sbcs.w	r3, r1, r3
 8003a4c:	d320      	bcc.n	8003a90 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x148>
      break;
    mantissa += digit;
 8003a4e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003a52:	2200      	movs	r2, #0
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a56:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a58:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003a5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a60:	4621      	mov	r1, r4
 8003a62:	1851      	adds	r1, r2, r1
 8003a64:	6139      	str	r1, [r7, #16]
 8003a66:	4629      	mov	r1, r5
 8003a68:	414b      	adcs	r3, r1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a70:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
    s++;
 8003a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a76:	3301      	adds	r3, #1
 8003a78:	653b      	str	r3, [r7, #80]	@ 0x50
  while (isdigit(*s)) {
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe95 	bl	80037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1a2      	bne.n	80039d0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x88>
 8003a8a:	e002      	b.n	8003a92 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x14a>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e000      	b.n	8003a92 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x14a>
      break;
 8003a90:	bf00      	nop
  }

  if (*s == '\0') {
 8003a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d136      	bne.n	8003b08 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1c0>
    if (is_negative) {
 8003a9a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x18e>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003aaa:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8003aae:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003ab2:	2a01      	cmp	r2, #1
 8003ab4:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8003ab8:	d226      	bcs.n	8003b08 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1c0>
        return Number(JsonInteger(~mantissa + 1));
 8003aba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4250      	negs	r0, r2
 8003ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003ac4:	eb61 0303 	sbc.w	r3, r1, r3
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ace:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003ad0:	f7ff fef8 	bl	80038c4 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ex>
 8003ad4:	e16e      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8003ad6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003ada:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003adc:	f7ff ff08 	bl	80038f0 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ey>
 8003ae0:	e168      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003ae2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003ae6:	f04f 020a 	mov.w	r2, #10
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f7fd f9e1 	bl	8000eb4 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    exponent_offset++;
 8003afa:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  while (mantissa > traits::mantissa_max) {
 8003b08:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003b0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b10:	d2e7      	bcs.n	8003ae2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8003b12:	e009      	b.n	8003b28 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1e0>
    exponent_offset++;
 8003b14:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    s++;
 8003b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b24:	3301      	adds	r3, #1
 8003b26:	653b      	str	r3, [r7, #80]	@ 0x50
  while (isdigit(*s)) {
 8003b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fe3e 	bl	80037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ed      	bne.n	8003b14 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1cc>
  }

  if (*s == '.') {
 8003b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b3e:	d14c      	bne.n	8003bda <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x292>
    s++;
 8003b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b42:	3301      	adds	r3, #1
 8003b44:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 8003b46:	e040      	b.n	8003bca <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 8003b48:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003b4c:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8003b50:	4957      	ldr	r1, [pc, #348]	@ (8003cb0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x368>)
 8003b52:	418b      	sbcs	r3, r1
 8003b54:	d236      	bcs.n	8003bc4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0099      	lsls	r1, r3, #2
 8003b68:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003b6c:	0090      	lsls	r0, r2, #2
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	eb12 0a04 	adds.w	sl, r2, r4
 8003b76:	eb43 0b05 	adc.w	fp, r3, r5
 8003b7a:	eb1a 030a 	adds.w	r3, sl, sl
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	eb4b 030b 	adc.w	r3, fp, fp
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b8a:	4652      	mov	r2, sl
 8003b8c:	465b      	mov	r3, fp
 8003b8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003b90:	7809      	ldrb	r1, [r1, #0]
 8003b92:	3930      	subs	r1, #48	@ 0x30
 8003b94:	b2c9      	uxtb	r1, r1
 8003b96:	b2c9      	uxtb	r1, r1
 8003b98:	2000      	movs	r0, #0
 8003b9a:	6239      	str	r1, [r7, #32]
 8003b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	1851      	adds	r1, r2, r1
 8003ba6:	6039      	str	r1, [r7, #0]
 8003ba8:	4629      	mov	r1, r5
 8003baa:	414b      	adcs	r3, r1
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003bb2:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
        exponent_offset--;
 8003bb6:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
      }
      s++;
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 8003bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fded 	bl	80037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1b6      	bne.n	8003b48 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x200>
    }
  }

  int exponent = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (*s == 'e' || *s == 'E') {
 8003be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b65      	cmp	r3, #101	@ 0x65
 8003be6:	d003      	beq.n	8003bf0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2a8>
 8003be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b45      	cmp	r3, #69	@ 0x45
 8003bee:	d179      	bne.n	8003ce4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x39c>
    s++;
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	653b      	str	r3, [r7, #80]	@ 0x50
    bool negative_exponent = false;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (*s == '-') {
 8003bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c02:	d106      	bne.n	8003c12 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2ca>
      negative_exponent = true;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      s++;
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	e057      	b.n	8003cc2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
    } else if (*s == '+') {
 8003c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c18:	d153      	bne.n	8003cc2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
      s++;
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    while (isdigit(*s)) {
 8003c20:	e04f      	b.n	8003cc2 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
      exponent = exponent * 10 + (*s - '0');
 8003c22:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	3b30      	subs	r3, #48	@ 0x30
 8003c36:	4413      	add	r3, r2
 8003c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      if (exponent + exponent_offset > traits::exponent_max) {
 8003c3c:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 8003c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c44:	4413      	add	r3, r2
 8003c46:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003c4a:	dd37      	ble.n	8003cbc <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x374>
        if (negative_exponent)
 8003c4c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x32a>
          return Number(is_negative ? -0.0f : 0.0f);
 8003c54:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x31a>
 8003c5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003cb4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x36c>
 8003c60:	e001      	b.n	8003c66 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x31e>
 8003c62:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003cb8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x370>
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003c6c:	f7ff fe15 	bl	800389a <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>
 8003c70:	e0a0      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8003c72:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x348>
 8003c7a:	f000 fbe5 	bl	8004448 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>
 8003c7e:	ec53 2b10 	vmov	r2, r3, d0
 8003c82:	ee08 2a10 	vmov	s16, r2
 8003c86:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003c8a:	ee08 3a90 	vmov	s17, r3
 8003c8e:	e005      	b.n	8003c9c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x354>
 8003c90:	f000 fbda 	bl	8004448 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>
 8003c94:	eeb0 8a40 	vmov.f32	s16, s0
 8003c98:	eef0 8a60 	vmov.f32	s17, s1
 8003c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8003ca0:	eef0 0a68 	vmov.f32	s1, s17
 8003ca4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003ca6:	f7ff fe39 	bl	800391c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>
 8003caa:	e083      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
 8003cac:	19999999 	.word	0x19999999
 8003cb0:	00019999 	.word	0x00019999
 8003cb4:	80000000 	.word	0x80000000
 8003cb8:	00000000 	.word	0x00000000
      }
      s++;
 8003cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fd71 	bl	80037ae <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1a7      	bne.n	8003c22 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2da>
    }
    if (negative_exponent)
 8003cd2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x39c>
      exponent = -exponent;
 8003cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cde:	425b      	negs	r3, r3
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  }
  exponent += exponent_offset;
 8003ce4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003ce8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003cec:	4413      	add	r3, r2
 8003cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3ba>
    return Number();
 8003cfa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003cfc:	f7ff fdbc 	bl	8003878 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>
 8003d00:	e058      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8003d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d06:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8003d0a:	db0a      	blt.n	8003d22 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3da>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d10:	2b26      	cmp	r3, #38	@ 0x26
 8003d12:	dc06      	bgt.n	8003d22 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3da>
                  exponent > FloatTraits<float>::exponent_max ||
 8003d14:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003d18:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8003d1c:	f173 0300 	sbcs.w	r3, r3, #0
 8003d20:	d301      	bcc.n	8003d26 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3de>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3e0>
 8003d26:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8003d28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8003d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d022      	beq.n	8003d7a <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x432>
    auto final_result = make_float(double(mantissa), exponent);
 8003d34:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003d38:	f7fc fc30 	bl	800059c <__aeabi_ul2d>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003d44:	ec43 2b10 	vmov	d0, r2, r3
 8003d48:	f000 fb90 	bl	800446c <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_>
 8003d4c:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8003d50:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x41e>
 8003d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d5e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d64:	e003      	b.n	8003d6e <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x426>
 8003d66:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8003d6a:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8003d6e:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8003d72:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003d74:	f7ff fdd2 	bl	800391c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>
 8003d78:	e01c      	b.n	8003db4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8003d7a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003d7e:	f7fd f853 	bl	8000e28 <__aeabi_ul2f>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003d88:	ee00 3a10 	vmov	s0, r3
 8003d8c:	f000 fbb3 	bl	80044f6 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_>
 8003d90:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    return Number(is_negative ? -final_result : final_result);
 8003d94:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x45e>
 8003d9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003da0:	eef1 7a67 	vneg.f32	s15, s15
 8003da4:	e001      	b.n	8003daa <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x462>
 8003da6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003db0:	f7ff fd73 	bl	800389a <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>
  }
}
 8003db4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003db6:	37a0      	adds	r7, #160	@ 0xa0
 8003db8:	46bd      	mov	sp, r7
 8003dba:	ecbd 8b02 	vpop	{d8}
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop

08003dc4 <_ZN13TestModeModelC1Ev>:
 *  Created on: Dec 15, 2024
 *      Author: Admin
 */
#include "Model/Process/TestModeModel.h"

TestModeModel::TestModeModel() :
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
		UserModel(), mutex(xSemaphoreCreateMutex()) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fbe4 	bl	800759c <_ZN9UserModelC1Ev>
 8003dd4:	4a06      	ldr	r2, [pc, #24]	@ (8003df0 <_ZN13TestModeModelC1Ev+0x2c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f00c fa67 	bl	80102ae <xQueueCreateMutex>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08016b68 	.word	0x08016b68

08003df4 <_ZN13TestModeModel8setCarIdEPKc>:

void TestModeModel::setCarId(const char *carId) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	this->data[CAR_ID] = carId;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	1d19      	adds	r1, r3, #4
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	4a07      	ldr	r2, [pc, #28]	@ (8003e24 <_ZN13TestModeModel8setCarIdEPKc+0x30>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fbb4 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fbbd 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	080168b4 	.word	0x080168b4

08003e28 <_ZN13TestModeModel12setStartTimeEPKc>:

void TestModeModel::setStartTime(const char *startTime) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	this->data[START_TIME] = startTime;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1d19      	adds	r1, r3, #4
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4a07      	ldr	r2, [pc, #28]	@ (8003e58 <_ZN13TestModeModel12setStartTimeEPKc+0x30>)
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fb9a 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fba3 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	080168bc 	.word	0x080168bc

08003e5c <_ZN13TestModeModel10setEndTimeEPKc>:

void TestModeModel::setEndTime(const char *endTime) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	this->data[END_TIME] = endTime;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	f107 0308 	add.w	r3, r7, #8
 8003e6e:	4a07      	ldr	r2, [pc, #28]	@ (8003e8c <_ZN13TestModeModel10setEndTimeEPKc+0x30>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb80 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fb89 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	080168c8 	.word	0x080168c8

08003e90 <_ZN13TestModeModel8setScoreEa>:

void TestModeModel::setScore(int8_t score) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
	if (score < 0) {
 8003e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da02      	bge.n	8003eaa <_ZN13TestModeModel8setScoreEa+0x1a>
		score = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	e005      	b.n	8003eb6 <_ZN13TestModeModel8setScoreEa+0x26>
	} else if (score > 100) {
 8003eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eae:	2b64      	cmp	r3, #100	@ 0x64
 8003eb0:	dd01      	ble.n	8003eb6 <_ZN13TestModeModel8setScoreEa+0x26>
		score = 100;
 8003eb2:	2364      	movs	r3, #100	@ 0x64
 8003eb4:	70fb      	strb	r3, [r7, #3]
	}
	this->data[SCORE] = score;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	1d19      	adds	r1, r3, #4
 8003eba:	f107 0308 	add.w	r3, r7, #8
 8003ebe:	4a07      	ldr	r2, [pc, #28]	@ (8003edc <_ZN13TestModeModel8setScoreEa+0x4c>)
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fb58 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003ec6:	1cfa      	adds	r2, r7, #3
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fb6e 	bl	80045b0 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	080168d0 	.word	0x080168d0

08003ee0 <_ZN13TestModeModel16setContestResultEa>:

void TestModeModel::setContestResult(int8_t contestResult) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
	if (contestResult < -1) {
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	da02      	bge.n	8003efc <_ZN13TestModeModel16setContestResultEa+0x1c>
		contestResult = -1;
 8003ef6:	23ff      	movs	r3, #255	@ 0xff
 8003ef8:	70fb      	strb	r3, [r7, #3]
 8003efa:	e005      	b.n	8003f08 <_ZN13TestModeModel16setContestResultEa+0x28>
	} else if (contestResult > 1) {
 8003efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	dd01      	ble.n	8003f08 <_ZN13TestModeModel16setContestResultEa+0x28>
		contestResult = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	70fb      	strb	r3, [r7, #3]
	}
	this->data[CONTESTS_RESULT] = contestResult;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1d19      	adds	r1, r3, #4
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <_ZN13TestModeModel16setContestResultEa+0x50>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fb2f 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003f18:	1cfa      	adds	r2, r7, #3
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fb45 	bl	80045b0 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	080168d8 	.word	0x080168d8

08003f34 <_ZN13TestModeModel11setDistanceEd>:

void TestModeModel::setDistance(double distance) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	ed87 0b00 	vstr	d0, [r7]
	this->data[DISTANCE] = distance;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1d19      	adds	r1, r3, #4
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	4a07      	ldr	r2, [pc, #28]	@ (8003f68 <_ZN13TestModeModel11setDistanceEd+0x34>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fb13 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003f50:	463a      	mov	r2, r7
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb37 	bl	80045cc <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	080168e8 	.word	0x080168e8

08003f6c <_ZN13TestModeModel12setCycleTimeEm>:

void TestModeModel::setCycleTime(unsigned long cycleTime) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	this->data[CYCLE_TIME] = cycleTime;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	1d19      	adds	r1, r3, #4
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <_ZN13TestModeModel12setCycleTimeEm+0x30>)
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 faf8 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8003f86:	463a      	mov	r2, r7
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fb2a 	bl	80045e8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSImEERS7_RKT_>
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	080168f4 	.word	0x080168f4

08003fa0 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>:

//const LocationModel* TestModeModel::getLocation() {
//	this->getOrDefault<const JsonDocument*>(CYCLE_TIME, TEST_RUNNING);
//}

void TestModeModel::updateModel(const JsonDocument *json) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b09a      	sub	sp, #104	@ 0x68
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
	if (json == nullptr) {
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80af 	beq.w	8004110 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x170>
		return;
	}
	UserModel::updateModel(json);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f003 fc08 	bl	80077cc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>
	const JsonDocument &jsonData = *json;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	667b      	str	r3, [r7, #100]	@ 0x64
	this->setCarId(getFormJsonVariant<const char*>(jsonData[CAR_ID], "0"));
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4a54      	ldr	r2, [pc, #336]	@ (8004118 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x178>)
 8003fc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb29 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8003fce:	4b53      	ldr	r3, [pc, #332]	@ (800411c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x17c>)
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	f107 0210 	add.w	r2, r7, #16
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb3b 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff04 	bl	8003df4 <_ZN13TestModeModel8setCarIdEPKc>
	this->setStartTime(
			getFormJsonVariant<const char*>(jsonData[START_TIME], ""));
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8004120 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x180>)
 8003ff2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fb13 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x184>)
 8003ffc:	61fb      	str	r3, [r7, #28]
	this->setStartTime(
 8003ffe:	f107 021c 	add.w	r2, r7, #28
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fb25 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800400e:	4603      	mov	r3, r0
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff08 	bl	8003e28 <_ZN13TestModeModel12setStartTimeEPKc>
	this->setEndTime(getFormJsonVariant<const char*>(jsonData[END_TIME], ""));
 8004018:	f107 0320 	add.w	r3, r7, #32
 800401c:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x188>)
 800401e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fafd 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8004026:	4b3f      	ldr	r3, [pc, #252]	@ (8004124 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x184>)
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800402e:	f107 0320 	add.w	r3, r7, #32
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fb0f 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800403a:	4603      	mov	r3, r0
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff0c 	bl	8003e5c <_ZN13TestModeModel10setEndTimeEPKc>
	this->setCycleTime(
			getFormJsonVariant<unsigned long>(jsonData[CYCLE_TIME], 0));
 8004044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004048:	4a38      	ldr	r2, [pc, #224]	@ (800412c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x18c>)
 800404a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fae7 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
	this->setCycleTime(
 8004056:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800405a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fb1f 	bl	80046a4 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8004066:	4603      	mov	r3, r0
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff7e 	bl	8003f6c <_ZN13TestModeModel12setCycleTimeEm>
	this->setScore(getFormJsonVariant<uint8_t>(jsonData[SCORE], 0));
 8004070:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004074:	4a2e      	ldr	r2, [pc, #184]	@ (8004130 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x190>)
 8004076:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fad1 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004084:	f107 0243 	add.w	r2, r7, #67	@ 0x43
 8004088:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb2e 	bl	80046f0 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8004094:	4603      	mov	r3, r0
 8004096:	b25b      	sxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fef8 	bl	8003e90 <_ZN13TestModeModel8setScoreEa>
	this->setContestResult(
			getFormJsonVariant<int8_t>(jsonData[CONTESTS_RESULT], 0));
 80040a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040a4:	4a23      	ldr	r2, [pc, #140]	@ (8004134 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x194>)
 80040a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fab9 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	this->setContestResult(
 80040b4:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 80040b8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fb3c 	bl	800473c <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff09 	bl	8003ee0 <_ZN13TestModeModel16setContestResultEa>
	this->setDistance(getFormJsonVariant<double>(jsonData[DISTANCE], 0));
 80040ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80040d2:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x198>)
 80040d4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 faa2 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80040e8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80040ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb4a 	bl	800478c <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 80040f8:	eeb0 7a40 	vmov.f32	s14, s0
 80040fc:	eef0 7a60 	vmov.f32	s15, s1
 8004100:	eeb0 0a47 	vmov.f32	s0, s14
 8004104:	eef0 0a67 	vmov.f32	s1, s15
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff13 	bl	8003f34 <_ZN13TestModeModel11setDistanceEd>
 800410e:	e000      	b.n	8004112 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x172>
		return;
 8004110:	bf00      	nop
}
 8004112:	3768      	adds	r7, #104	@ 0x68
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	080168b4 	.word	0x080168b4
 800411c:	08016924 	.word	0x08016924
 8004120:	080168bc 	.word	0x080168bc
 8004124:	08016928 	.word	0x08016928
 8004128:	080168c8 	.word	0x080168c8
 800412c:	080168f4 	.word	0x080168f4
 8004130:	080168d0 	.word	0x080168d0
 8004134:	080168d8 	.word	0x080168d8
 8004138:	080168e8 	.word	0x080168e8

0800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff f894 	bl	8003272 <_ZNK11ArduinoJson8V721HB2211JsonVariant7getDataEv>
 800414a:	4603      	mov	r3, r0
  }
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  explicit operator bool() const {
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
  }
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>:
  T* ptr() const {
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
    return ptr_;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
  }
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
    return id_;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	889b      	ldrh	r3, [r3, #4]
  }
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>:
  T* operator->() const {
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
    return ptr_;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
  }
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	809a      	strh	r2, [r3, #4]
  }
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041fa:	809a      	strh	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 800420a:	b580      	push	{r7, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800421e:	4293      	cmp	r3, r2
 8004220:	d005      	beq.n	800422e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 faeb 	bl	8004802 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 800422c:	e02c      	b.n	8004288 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fafd 	bl	800483c <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f822 	bl	8004290 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	461a      	mov	r2, r3
 8004256:	f107 0314 	add.w	r3, r7, #20
 800425a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800425e:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004262:	e011      	b.n	8004288 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	68b8      	ldr	r0, [r7, #8]
 8004268:	f000 fb25 	bl	80048b6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 800426c:	61f8      	str	r0, [r7, #28]
    if (!pool)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fb5a 	bl	800492e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800427a:	e005      	b.n	8004288 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fadb 	bl	800483c <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004286:	bf00      	nop
  }
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
  }
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
    return ptr_;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
  }
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
    return id_;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	889b      	ldrh	r3, [r3, #4]
  }
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_ZN11ArduinoJson8V721HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	809a      	strh	r2, [r3, #4]
  }
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb0c 	bl	8004952 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	8013      	strh	r3, [r2, #0]
    freeList_ = slot.id();
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ffc0 	bl	80042ca <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800436e:	809a      	strh	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	809a      	strh	r2, [r3, #4]
  }
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fad6 	bl	800496a <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 80043be:	bf00      	nop
}
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe ff42 	bl	800325a <_ZNK11ArduinoJson8V721HB2211JsonVariant18getResourceManagerEv>
 80043d6:	4603      	mov	r3, r0
  }
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fe fccc 	bl	8002d86 <_ZN11ArduinoJson8V721HB226detail13StringAdapterIPKcvE5adaptES4_>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>:
  static void setString(VariantData* var, TAdaptedString value,
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
    if (!var)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x28>
    var->clear(resources);
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff f998 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    var->setString(value, resources);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fab5 	bl	8004988 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>
 800441e:	e000      	b.n	8004422 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x2a>
      return;
 8004420:	bf00      	nop
  }
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>:
typename StringAdapter<TString>::AdaptedString adaptString(const TString& s) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  return StringAdapter<TString>::adapt(s);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fd17 	bl	8002e6a <_ZN11ArduinoJson8V721HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800443c:	bf00      	nop
}
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 800444c:	f04f 0000 	mov.w	r0, #0
 8004450:	4905      	ldr	r1, [pc, #20]	@ (8004468 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv+0x20>)
 8004452:	f000 fad1 	bl	80049f8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004456:	eeb0 7a40 	vmov.f32	s14, s0
 800445a:	eef0 7a60 	vmov.f32	s15, s1
  }
 800445e:	eeb0 0a47 	vmov.f32	s0, s14
 8004462:	eef0 0a67 	vmov.f32	s1, s15
 8004466:	bd80      	pop	{r7, pc}
 8004468:	7ff00000 	.word	0x7ff00000

0800446c <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	ed87 0b02 	vstr	d0, [r7, #8]
 8004476:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd04      	ble.n	8004488 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800447e:	f7fd fd5b 	bl	8001f38 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004482:	4603      	mov	r3, r0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e003      	b.n	8004490 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004488:	f7fd fd7e 	bl	8001f88 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800448c:	4603      	mov	r3, r0
 800448e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	dc02      	bgt.n	800449c <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	425b      	negs	r3, r3
 800449a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
 80044a0:	e01b      	b.n	80044da <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d010      	beq.n	80044ce <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 80044ac:	7dfa      	ldrb	r2, [r7, #23]
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fd4f 	bl	8001f58 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 80044ba:	ec53 2b10 	vmov	r2, r3, d0
 80044be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c2:	f7fc f8a1 	bl	8000608 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	105b      	asrs	r3, r3, #1
 80044d2:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	3301      	adds	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e0      	bne.n	80044a2 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80044e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80044e8:	eeb0 0a47 	vmov.f32	s0, s14
 80044ec:	eef0 0a67 	vmov.f32	s1, s15
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8004500:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dd04      	ble.n	8004512 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004508:	f000 fa8a 	bl	8004a20 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 800450c:	4603      	mov	r3, r0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e003      	b.n	800451a <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004512:	f000 fa95 	bl	8004a40 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004516:	4603      	mov	r3, r0
 8004518:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	dc02      	bgt.n	8004526 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	425b      	negs	r3, r3
 8004524:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e019      	b.n	8004560 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	f107 0308 	add.w	r3, r7, #8
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa8e 	bl	8004a60 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIfEixEi>
 8004544:	eeb0 7a40 	vmov.f32	s14, s0
 8004548:	edd7 7a01 	vldr	s15, [r7, #4]
 800454c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004550:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	105b      	asrs	r3, r3, #1
 8004558:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3301      	adds	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e2      	bne.n	800452c <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	ee07 3a90 	vmov	s15, r3
}
 800456c:	eeb0 0a67 	vmov.f32	s0, s15
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>:
  operator[](TChar* key) {
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
    return {*this, key};
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa7e 	bl	8004a88 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEC1ES4_S6_>
  }
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>:
    this->set(src);
    return *this;
  }

  template <typename T>
  MemberProxy& operator=(T* src) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
    this->set(src);
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa84 	bl	8004aae <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS6_EEbPT_>
    return *this;
 80045a6:	687b      	ldr	r3, [r7, #4]
  }
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    this->set(src);
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa85 	bl	8004acc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIaEEbRKT_>
    return *this;
 80045c2:	687b      	ldr	r3, [r7, #4]
  }
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
    this->set(src);
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa85 	bl	8004ae8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIdEEbRKT_>
    return *this;
 80045de:	687b      	ldr	r3, [r7, #4]
  }
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
    this->set(src);
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fa85 	bl	8004b04 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setImEEbRKT_>
    return *this;
 80045fa:	687b      	ldr	r3, [r7, #4]
  }
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
    this->set(src);
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 faa5 	bl	8004b60 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIiEEbRKT_>
    return *this;
 8004616:	687b      	ldr	r3, [r7, #4]
  }
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>:
  operator[](TChar* key) const {
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
        data_.getMember(detail::adaptString(key), &resources_), &resources_);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fed4 	bl	80043e0 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8004638:	4601      	mov	r1, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	461a      	mov	r2, r3
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fb2e 	bl	8004ca0 <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>
 8004644:	4601      	mov	r1, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	461a      	mov	r2, r3
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7fd f936 	bl	80018bc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bd90      	pop	{r4, r7, pc}

08004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>:
	JsonDocument data;
	BaseModel();
public:
	BaseModel(const BaseModel&) = delete;
	template<typename T>
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
			const T &defaultValue) {
		if (jsonVariant == nullptr) {
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	f107 020c 	add.w	r2, r7, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004670:	f000 fb2a 	bl	8004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x28>
			return defaultValue;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	e00d      	b.n	800469c <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x44>
		}
		return jsonVariant.template is<T>() ?
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fa7b 	bl	8004b7c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIPKcEENS0_6detail9enable_ifIXsrNS5_7is_sameINS5_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fa83 	bl	8004b98 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIPKcLb1EEET_v>
 8004692:	4603      	mov	r3, r0
 8004694:	e001      	b.n	800469a <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x42>
		return jsonVariant.template is<T>() ?
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 800469a:	bf00      	nop
	}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	f107 020c 	add.w	r2, r7, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046bc:	f000 fb04 	bl	8004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x28>
			return defaultValue;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e00d      	b.n	80046e8 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x44>
		return jsonVariant.template is<T>() ?
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 facb 	bl	8004c68 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isImEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fad3 	bl	8004c84 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asImLb1EEET_v>
 80046de:	4603      	mov	r3, r0
 80046e0:	e001      	b.n	80046e6 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x42>
		return jsonVariant.template is<T>() ?
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 80046e6:	bf00      	nop
	}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	f107 020c 	add.w	r2, r7, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004708:	f000 fade 	bl	8004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x28>
			return defaultValue;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	e00d      	b.n	8004734 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x44>
		return jsonVariant.template is<T>() ?
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa4b 	bl	8004bb4 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIhEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa53 	bl	8004bd0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIhLb1EEET_v>
 800472a:	4603      	mov	r3, r0
 800472c:	e001      	b.n	8004732 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x42>
		return jsonVariant.template is<T>() ?
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 8004732:	bf00      	nop
	}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	f107 020c 	add.w	r2, r7, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004754:	f000 fab8 	bl	8004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x2a>
			return defaultValue;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f993 3000 	ldrsb.w	r3, [r3]
 8004764:	e00e      	b.n	8004784 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x48>
		return jsonVariant.template is<T>() ?
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa40 	bl	8004bec <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIaEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x40>
				jsonVariant.template as<T>() : defaultValue;
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa48 	bl	8004c08 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIaLb1EEET_v>
 8004778:	4603      	mov	r3, r0
 800477a:	e002      	b.n	8004782 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x46>
		return jsonVariant.template is<T>() ?
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f993 3000 	ldrsb.w	r3, [r3]
				jsonVariant.template as<T>() : defaultValue;
 8004782:	bf00      	nop
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	f107 020c 	add.w	r2, r7, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047a4:	f000 fa90 	bl	8004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x2a>
			return defaultValue;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	ed93 7b00 	vldr	d7, [r3]
 80047b4:	e011      	b.n	80047da <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x4e>
		return jsonVariant.template is<T>() ?
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa34 	bl	8004c24 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIdEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x46>
				jsonVariant.template as<T>() : defaultValue;
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa3c 	bl	8004c40 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIdLb1EEET_v>
 80047c8:	eeb0 7a40 	vmov.f32	s14, s0
 80047cc:	eef0 7a60 	vmov.f32	s15, s1
 80047d0:	e002      	b.n	80047d8 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x4c>
		return jsonVariant.template is<T>() ?
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	ed93 7b00 	vldr	d7, [r3]
				jsonVariant.template as<T>() : defaultValue;
 80047d8:	bf00      	nop
	}
 80047da:	eeb0 0a47 	vmov.f32	s0, s14
 80047de:	eef0 0a67 	vmov.f32	s1, s15
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	00db      	lsls	r3, r3, #3
  }
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:
      capacity_ = count_;
    }
  }

 private:
  Slot<T> allocFromFreeList() {
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004816:	4619      	mov	r1, r3
 8004818:	6838      	ldr	r0, [r7, #0]
 800481a:	f7fd fa63 	bl	8001ce4 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800481e:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	881a      	ldrh	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8004828:	89fb      	ldrh	r3, [r7, #14]
 800482a:	461a      	mov	r2, r3
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fd64 	bl	80042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800484a:	3b01      	subs	r3, #1
 800484c:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6a1a      	ldr	r2, [r3, #32]
 8004852:	8afb      	ldrh	r3, [r7, #22]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	441a      	add	r2, r3
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa4b 	bl	8004cfa <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fd11 	bl	8004290 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800486e:	4603      	mov	r3, r0
 8004870:	f083 0301 	eor.w	r3, r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f857 	bl	800492e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004880:	e015      	b.n	80048ae <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f863 	bl	8004952 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800488c:	4605      	mov	r5, r0
 800488e:	8afb      	ldrh	r3, [r7, #22]
 8004890:	01db      	lsls	r3, r3, #7
 8004892:	b29c      	uxth	r4, r3
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fd16 	bl	80042ca <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800489e:	4603      	mov	r3, r0
 80048a0:	4423      	add	r3, r4
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4629      	mov	r1, r5
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fd27 	bl	80042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bdb0      	pop	{r4, r5, r7, pc}

080048b6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d10b      	bne.n	80048e4 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa3f 	bl	8004d52 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e01b      	b.n	8004926 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	b288      	uxth	r0, r1
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	8488      	strh	r0, [r1, #36]	@ 0x24
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8004904:	2380      	movs	r3, #128	@ 0x80
 8004906:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800490c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004910:	d102      	bne.n	8004918 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	3b01      	subs	r3, #1
 8004916:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f000 fa5c 	bl	8004ddc <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8004924:	68bb      	ldr	r3, [r7, #8]
  }
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004942:	809a      	strh	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
    return ptr_;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
  }
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = SizedRamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7fe fa12 	bl	8002da4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>
  }
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>:
inline bool VariantData::setString(TAdaptedString value,
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  if (value.isNull())
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe f9bd 	bl	8002d18 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e023      	b.n	80049f0 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  if (value.isLinked()) {
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe f9df 	bl	8002d70 <_ZNK11ArduinoJson8V721HB226detail19StaticStringAdapter8isLinkedEv>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x48>
    setLinkedString(value.data());
 80049b8:	f107 0308 	add.w	r3, r7, #8
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe f9bc 	bl	8002d3a <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString4dataEv>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4619      	mov	r1, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7fe fbb9 	bl	800313e <_ZN11ArduinoJson8V721HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e00f      	b.n	80049f0 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  auto dup = resources->saveString(value);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fa27 	bl	8004e28 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_>
 80049da:	6178      	str	r0, [r7, #20]
  if (dup) {
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x66>
    setOwnedString(dup);
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fe fbbb 	bl	8003160 <_ZN11ArduinoJson8V721HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  return false;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8004a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a06:	f000 fa32 	bl	8004e6e <_ZN11ArduinoJson8V721HB226detail10alias_castIdyEET_T0_>
 8004a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a0e:	eef0 7a60 	vmov.f32	s15, s1
  }
 8004a12:	eeb0 0a47 	vmov.f32	s0, s14
 8004a16:	eef0 0a67 	vmov.f32	s1, s15
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	4904      	ldr	r1, [pc, #16]	@ (8004a3c <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fa35 	bl	8004e9a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>
 8004a30:	687b      	ldr	r3, [r7, #4]
  }
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	08016b30 	.word	0x08016b30

08004a40 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	4904      	ldr	r1, [pc, #16]	@ (8004a5c <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa25 	bl	8004e9a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>
 8004a50:	687b      	ldr	r3, [r7, #4]
  }
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08016b48 	.word	0x08016b48

08004a60 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fa1f 	bl	8004eb8 <_ZN11ArduinoJson8V721HB226detail8pgm_readIfEET_PKS3_>
 8004a7a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8004a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEC1ES4_S6_>:
  MemberProxy(TUpstream upstream, TStringRef key)
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
      : upstream_(upstream), key_(key) {}
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS6_EEbPT_>:
  }

  // Copies the specified value.
  // https://arduinojson.org/v7/api/jsonvariant/set/
  template <typename T>
  bool set(T* value) const {
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
    return doSet<Converter<T*>>(value);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa0a 	bl	8004ed6 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_>
 8004ac2:	4603      	mov	r3, r0
  }
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIaEEbRKT_>:
  bool set(const T& value) const {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fa0f 	bl	8004efc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_>
 8004ade:	4603      	mov	r3, r0
  }
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIdEEbRKT_>:
  bool set(const T& value) const {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa14 	bl	8004f22 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>
 8004afa:	4603      	mov	r3, r0
  }
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa19 	bl	8004f48 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_>
 8004b16:	4603      	mov	r3, r0
  }
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE15getOrCreateDataEv>:

  VariantData* getData() const {
    return VariantAttorney::getData(derived());
  }

  VariantData* getOrCreateData() const {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fa20 	bl	8004f6e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa27 	bl	8004f84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEPNS1_11VariantDataERT_>
 8004b36:	4603      	mov	r3, r0
  }
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa10 	bl	8004f6e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fa23 	bl	8004f9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_18getResourceManagerEERT_>
 8004b56:	4603      	mov	r3, r0
  }
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIiEEbRKT_>:
  bool set(const T& value) const {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa21 	bl	8004fb4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_>
 8004b72:	4603      	mov	r3, r0
  }
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIPKcEENS0_6detail9enable_ifIXsrNS5_7is_sameINS5_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b8a:	f7fe fdbf 	bl	800370c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8004b8e:	4603      	mov	r3, r0
  }
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIPKcLb1EEET_v>:
  T as() const {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ba6:	f7fe fd91 	bl	80036cc <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8004baa:	4603      	mov	r3, r0
  }
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIhEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bc2:	f000 fa0a 	bl	8004fda <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE>
 8004bc6:	4603      	mov	r3, r0
  }
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIhLb1EEET_v>:
  T as() const {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bde:	f000 fa1d 	bl	800501c <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 8004be2:	4603      	mov	r3, r0
  }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIaEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bfa:	f000 fa2d 	bl	8005058 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE>
 8004bfe:	4603      	mov	r3, r0
  }
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIaLb1EEET_v>:
  T as() const {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c16:	f000 fa40 	bl	800509a <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE>
 8004c1a:	4603      	mov	r3, r0
  }
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIdEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c32:	f000 fa50 	bl	80050d6 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE>
 8004c36:	4603      	mov	r3, r0
  }
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIdLb1EEET_v>:
  T as() const {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c4e:	f000 fa5f 	bl	8005110 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE>
 8004c52:	eeb0 7a40 	vmov.f32	s14, s0
 8004c56:	eef0 7a60 	vmov.f32	s15, s1
  }
 8004c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c5e:	eef0 0a67 	vmov.f32	s1, s15
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isImEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c76:	f000 fa77 	bl	8005168 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE>
 8004c7a:	4603      	mov	r3, r0
  }
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asImLb1EEET_v>:
  T as() const {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c92:	f000 fa8a 	bl	80051aa <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8004c96:	4603      	mov	r3, r0
  }
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
    return ObjectData::getMember(asObject(), key, resources);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7fe f9bd 	bl	800302c <_ZNK11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fa94 	bl	80051e6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8004cbe:	4603      	mov	r3, r0
  }
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>:
  friend bool operator==(TVariant lhs, T* rhs) {
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend enable_if_t<!is_base_of<VariantOperatorTag, T>::value, bool>
  operator==(TVariant lhs, const T& rhs) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004cd6:	607a      	str	r2, [r7, #4]
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ce2:	f000 fa97 	bl	8005214 <_ZN11ArduinoJson8V721HB226detail7compareIDnEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
  }
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
    if (!slots_)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fe0e 	bl	800492e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004d12:	e01a      	b.n	8004d4a <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	885a      	ldrh	r2, [r3, #2]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d303      	bcc.n	8004d28 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fe04 	bl	800492e <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004d26:	e010      	b.n	8004d4a <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	885b      	ldrh	r3, [r3, #2]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	b291      	uxth	r1, r2
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	8051      	strh	r1, [r2, #2]
 8004d34:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	89fb      	ldrh	r3, [r7, #14]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	89fa      	ldrh	r2, [r7, #14]
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fad9 	bl	80042fc <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d64:	d101      	bne.n	8004d6a <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e034      	b.n	8004dd4 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d114      	bne.n	8004da6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	897a      	ldrh	r2, [r7, #10]
 8004d84:	00d2      	lsls	r2, r2, #3
 8004d86:	4611      	mov	r1, r2
 8004d88:	6838      	ldr	r0, [r7, #0]
 8004d8a:	4798      	blx	r3
 8004d8c:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e01d      	b.n	8004dd4 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f00f fe6d 	bl	8014a7e <memcpy>
 8004da4:	e00f      	b.n	8004dc6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3308      	adds	r3, #8
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6a11      	ldr	r1, [r2, #32]
 8004db2:	897a      	ldrh	r2, [r7, #10]
 8004db4:	00d2      	lsls	r2, r2, #3
 8004db6:	6838      	ldr	r0, [r7, #0]
 8004db8:	4798      	blx	r3
 8004dba:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e006      	b.n	8004dd4 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	897a      	ldrh	r2, [r7, #10]
 8004dd0:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8004dd2:	2301      	movs	r3, #1
  }
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	460b      	mov	r3, r1
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8004dea:	687d      	ldr	r5, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681c      	ldr	r4, [r3, #0]
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fcf7 	bl	80047e8 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47a0      	blx	r4
 8004e02:	4602      	mov	r2, r0
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8004e10:	897a      	ldrh	r2, [r7, #10]
 8004e12:	e000      	b.n	8004e16 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 8004e14:	2200      	movs	r2, #0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	805a      	strh	r2, [r3, #2]
  }
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bdb0      	pop	{r4, r5, r7, pc}

08004e28 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
    if (str.isNull())
 8004e32:	463b      	mov	r3, r7
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd ff6f 	bl	8002d18 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x1c>
      return 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e010      	b.n	8004e66 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x3e>
    auto node = stringPool_.add(str, allocator_);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 0008 	add.w	r0, r3, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	f000 f9fb 	bl	800524c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 8004e56:	60f8      	str	r0, [r7, #12]
    if (!node)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x3c>
      overflowed_ = true;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	711a      	strb	r2, [r3, #4]
    return node;
 8004e64:	68fb      	ldr	r3, [r7, #12]
  }
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZN11ArduinoJson8V721HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8004e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8004e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e84:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e88:	eeb0 0a47 	vmov.f32	s0, s14
 8004e8c:	eef0 0a67 	vmov.f32	s1, s15
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <_ZN11ArduinoJson8V721HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return *p;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	ee07 3a90 	vmov	s15, r3
}
 8004ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_>:
      const {
    return getVariant();
  }

  template <typename TConverter, typename T>
  bool doSet(T&& value) const {
 8004ed6:	b590      	push	{r4, r7, lr}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f000 f9f7 	bl	80052d4 <_ZN11ArduinoJson8V721HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9fc 	bl	80052ea <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8004ef2:	4603      	mov	r3, r0
        detail::forward<T>(value),
        is_same<typename function_traits<
                    decltype(&TConverter::toJson)>::return_type,
                bool>{});
  }
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}

08004efc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_>:
  bool doSet(T&& value) const {
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f000 fa1b 	bl	8005342 <_ZN11ArduinoJson8V721HB226detail7forwardIRKaEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa20 	bl	8005358 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_NS1_17integral_constantIbLb1EEE>
 8004f18:	4603      	mov	r3, r0
  }
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}

08004f22 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>:
  bool doSet(T&& value) const {
 8004f22:	b590      	push	{r4, r7, lr}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f000 fa2e 	bl	800538e <_ZN11ArduinoJson8V721HB226detail7forwardIRKdEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004f32:	4603      	mov	r3, r0
 8004f34:	4622      	mov	r2, r4
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa33 	bl	80053a4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>
 8004f3e:	4603      	mov	r3, r0
  }
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}

08004f48 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_>:
  bool doSet(T&& value) const {
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f000 fa48 	bl	80053e8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKmEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa4d 	bl	80053fe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_NS1_17integral_constantIbLb1EEE>
 8004f64:	4603      	mov	r3, r0
  }
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}

08004f6e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8004f76:	687b      	ldr	r3, [r7, #4]
  }
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa50 	bl	8005432 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv>
 8004f92:	4603      	mov	r3, r0
  }
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa6b 	bl	8005480 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE18getResourceManagerEv>
 8004faa:	4603      	mov	r3, r0
  }
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_>:
  bool doSet(T&& value) const {
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8004fbe:	6838      	ldr	r0, [r7, #0]
 8004fc0:	f000 fa6c 	bl	800549c <_ZN11ArduinoJson8V721HB226detail7forwardIRKiEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa71 	bl	80054b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_NS1_17integral_constantIbLb1EEE>
 8004fd0:	4603      	mov	r3, r0
  }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd90      	pop	{r4, r7, pc}

08004fda <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fc fe4b 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8004fee:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fc fe52 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8004ff8:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x38>
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fa70 	bl	80054e8 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x38>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8005012:	2300      	movs	r3, #0
  }
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	463b      	mov	r3, r7
 8005024:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005028:	463b      	mov	r3, r7
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc fe2a 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005030:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005032:	463b      	mov	r3, r7
 8005034:	4618      	mov	r0, r3
 8005036:	f7fc fe31 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800503a:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 faad 	bl	80055a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 800504a:	4603      	mov	r3, r0
 800504c:	e000      	b.n	8005050 <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 800504e:	2300      	movs	r3, #0
  }
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	463b      	mov	r3, r7
 8005060:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005064:	463b      	mov	r3, r7
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fe0c 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800506c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800506e:	463b      	mov	r3, r7
 8005070:	4618      	mov	r0, r3
 8005072:	f7fc fe13 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005076:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x38>
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fb23 	bl	80056cc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x38>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8005090:	2300      	movs	r3, #0
  }
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	463b      	mov	r3, r7
 80050a2:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80050a6:	463b      	mov	r3, r7
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fc fdeb 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80050ae:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80050b0:	463b      	mov	r3, r7
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fc fdf2 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80050b8:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE+0x32>
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fb60 	bl	8005788 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE>
 80050c8:	4603      	mov	r3, r0
 80050ca:	e000      	b.n	80050ce <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE+0x34>
 80050cc:	2300      	movs	r3, #0
  }
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	463b      	mov	r3, r7
 80050de:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80050e2:	463b      	mov	r3, r7
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fdcd 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80050ea:	60f8      	str	r0, [r7, #12]
    return data && data->isFloat();
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7fd ffdd 	bl	80030b2 <_ZNK11ArduinoJson8V721HB226detail11VariantData7isFloatEv>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8005102:	2300      	movs	r3, #0
  }
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	0000      	movs	r0, r0
	...

08005110 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	463b      	mov	r3, r7
 8005118:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800511c:	463b      	mov	r3, r7
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc fdb0 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005124:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005126:	463b      	mov	r3, r7
 8005128:	4618      	mov	r0, r3
 800512a:	f7fc fdb7 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800512e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fbb9 	bl	80058b0 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE>
 800513e:	eeb0 7a40 	vmov.f32	s14, s0
 8005142:	eef0 7a60 	vmov.f32	s15, s1
 8005146:	e001      	b.n	800514c <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x3c>
 8005148:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8005160 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x50>
  }
 800514c:	eeb0 0a47 	vmov.f32	s0, s14
 8005150:	eef0 0a67 	vmov.f32	s1, s15
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w
	...

08005168 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	463b      	mov	r3, r7
 8005170:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005174:	463b      	mov	r3, r7
 8005176:	4618      	mov	r0, r3
 8005178:	f7fc fd84 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800517c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800517e:	463b      	mov	r3, r7
 8005180:	4618      	mov	r0, r3
 8005182:	f7fc fd8b 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005186:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x38>
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fc23 	bl	80059dc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x38>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x3a>
 80051a0:	2300      	movs	r3, #0
  }
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	463b      	mov	r3, r7
 80051b2:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80051b6:	463b      	mov	r3, r7
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fc fd63 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80051be:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80051c0:	463b      	mov	r3, r7
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fc fd6a 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80051c8:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fc60 	bl	8005a98 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80051d8:	4603      	mov	r3, r0
 80051da:	e000      	b.n	80051de <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80051dc:	2300      	movs	r3, #0
  }
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
                                const ResourceManager* resources) {
    if (!object)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x16>
      return nullptr;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e007      	b.n	800520c <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x26>
    return object->getMember(key, resources);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fcdc 	bl	8005bc0 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8005208:	4603      	mov	r3, r0
 800520a:	bf00      	nop
  }
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZN11ArduinoJson8V721HB226detail7compareIDnEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(static_cast<JsonVariantConst>(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005222:	607a      	str	r2, [r7, #4]
  Comparer<T> comparer(rhs);
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe f876 	bl	800331c <_ZN11ArduinoJson8V721HB226detail8ComparerIDnvEC1EDn>
  return accept(lhs, comparer);
 8005230:	f107 0314 	add.w	r3, r7, #20
 8005234:	461a      	mov	r2, r3
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800523e:	f000 fce7 	bl	8005c10 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
    auto node = get(str);
 8005258:	f107 0308 	add.w	r3, r7, #8
 800525c:	4619      	mov	r1, r3
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fd73 	bl	8005d4a <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_>
 8005264:	6178      	str	r0, [r7, #20]
    if (node) {
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	889b      	ldrh	r3, [r3, #4]
 8005270:	3301      	adds	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	809a      	strh	r2, [r3, #4]
      return node;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e027      	b.n	80052cc <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x80>
    return str_ ? ::strlen(str_) : 0;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x42>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fa fffb 	bl	8000280 <strlen>
 800528a:	4603      	mov	r3, r0
 800528c:	e001      	b.n	8005292 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x46>
 800528e:	2300      	movs	r3, #0
 8005290:	bf00      	nop
    size_t n = str.size();
 8005292:	613b      	str	r3, [r7, #16]
    node = StringNode::create(n, allocator);
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	6938      	ldr	r0, [r7, #16]
 8005298:	f7fd fcf4 	bl	8002c84 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800529c:	6178      	str	r0, [r7, #20]
    if (!node)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x5c>
      return nullptr;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e011      	b.n	80052cc <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x80>
    stringGetChars(str, node->data, n);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3308      	adds	r3, #8
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4619      	mov	r1, r3
 80052b0:	68b8      	ldr	r0, [r7, #8]
 80052b2:	f000 fd75 	bl	8005da0 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	3308      	adds	r3, #8
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
    add(node);
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7fd fddd 	bl	8002e84 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 80052ca:	697b      	ldr	r3, [r7, #20]
  }
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_ZN11ArduinoJson8V721HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80052dc:	687b      	ldr	r3, [r7, #4]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
  return MemberProxy<TDerived, TString>(derived(), key);
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 80052ea:	b590      	push	{r4, r7, lr}
 80052ec:	b089      	sub	sp, #36	@ 0x24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	681c      	ldr	r4, [r3, #0]
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fd6d 	bl	8005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800530e:	4620      	mov	r0, r4
 8005310:	f7fe f9be 	bl	8003690 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fc13 	bl	8004b40 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 800531a:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4e>
 8005322:	69f8      	ldr	r0, [r7, #28]
 8005324:	f7fd ff68 	bl	80031f8 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8005328:	4603      	mov	r3, r0
 800532a:	f083 0301 	eor.w	r3, r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4e>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x50>
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	@ 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd90      	pop	{r4, r7, pc}

08005342 <_ZN11ArduinoJson8V721HB226detail7forwardIRKaEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800534a:	687b      	ldr	r3, [r7, #4]
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_NS1_17integral_constantIbLb1EEE>:

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f993 4000 	ldrsb.w	r4, [r3]
 800536a:	f107 0310 	add.w	r3, r7, #16
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fd35 	bl	8005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8005376:	f107 0310 	add.w	r3, r7, #16
 800537a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fd44 	bl	8005e0c <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE>
 8005384:	4603      	mov	r3, r0
}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd90      	pop	{r4, r7, pc}

0800538e <_ZN11ArduinoJson8V721HB226detail7forwardIRKdEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005396:	687b      	ldr	r3, [r7, #4]
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	ed2d 8b02 	vpush	{d8}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	ed93 8b00 	vldr	d8, [r3]
 80053ba:	f107 0310 	add.w	r3, r7, #16
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fd0d 	bl	8005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053ce:	eeb0 0a48 	vmov.f32	s0, s16
 80053d2:	eef0 0a68 	vmov.f32	s1, s17
 80053d6:	f000 fd41 	bl	8005e5c <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	ecbd 8b02 	vpop	{d8}
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKmEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80053f0:	687b      	ldr	r3, [r7, #4]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 80053fe:	b590      	push	{r4, r7, lr}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	681c      	ldr	r4, [r3, #0]
 800540e:	f107 0310 	add.w	r3, r7, #16
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fce3 	bl	8005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 800541a:	f107 0310 	add.w	r3, r7, #16
 800541e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fd41 	bl	8005eaa <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 8005428:	4603      	mov	r3, r0
}
 800542a:	4618      	mov	r0, r3
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}

08005432 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv>:
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), adaptString(key_),
        VariantAttorney::getResourceManager(upstream_));
  }

  VariantData* getOrCreateData() const {
 8005432:	b5b0      	push	{r4, r5, r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd58 	bl	8005ef4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005444:	60f8      	str	r0, [r7, #12]
    if (!data)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv+0x1e>
      return nullptr;
 800544c:	2300      	movs	r3, #0
 800544e:	e013      	b.n	8005478 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv+0x46>
    return data->getOrAddMember(adaptString(key_),
 8005450:	68fc      	ldr	r4, [r7, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe ffc2 	bl	80043e0 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800545c:	4605      	mov	r5, r0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fd52 	bl	8005f0c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	4629      	mov	r1, r5
 800546e:	4620      	mov	r0, r4
 8005470:	f000 fd58 	bl	8005f24 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>
 8005474:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 8005476:	bf00      	nop
  }
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bdb0      	pop	{r4, r5, r7, pc}

08005480 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fd3d 	bl	8005f0c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005492:	4603      	mov	r3, r0
  }
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_ZN11ArduinoJson8V721HB226detail7forwardIRKiEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054a4:	687b      	ldr	r3, [r7, #4]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 80054b2:	b590      	push	{r4, r7, lr}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	681c      	ldr	r4, [r3, #0]
 80054c2:	f107 0310 	add.w	r3, r7, #16
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fc89 	bl	8005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fd55 	bl	8005f86 <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE>
 80054dc:	4603      	mov	r3, r0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
	...

080054e8 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fc fb69 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80054fa:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	3b0a      	subs	r3, #10
 8005502:	2b12      	cmp	r3, #18
 8005504:	d848      	bhi.n	8005598 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb0>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0x24>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005559 	.word	0x08005559
 8005510:	08005599 	.word	0x08005599
 8005514:	08005567 	.word	0x08005567
 8005518:	08005599 	.word	0x08005599
 800551c:	08005599 	.word	0x08005599
 8005520:	08005599 	.word	0x08005599
 8005524:	08005599 	.word	0x08005599
 8005528:	08005599 	.word	0x08005599
 800552c:	08005599 	.word	0x08005599
 8005530:	08005599 	.word	0x08005599
 8005534:	08005599 	.word	0x08005599
 8005538:	08005599 	.word	0x08005599
 800553c:	08005599 	.word	0x08005599
 8005540:	08005599 	.word	0x08005599
 8005544:	08005599 	.word	0x08005599
 8005548:	08005599 	.word	0x08005599
 800554c:	08005575 	.word	0x08005575
 8005550:	08005599 	.word	0x08005599
 8005554:	08005587 	.word	0x08005587
        return canConvertNumber<T>(content_.asUint32);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fd37 	bl	8005fd0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005562:	4603      	mov	r3, r0
 8005564:	e019      	b.n	800559a <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd42 	bl	8005ff4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005570:	4603      	mov	r3, r0
 8005572:	e012      	b.n	800559a <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	f000 fd50 	bl	8006022 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005582:	4603      	mov	r3, r0
 8005584:	e009      	b.n	800559a <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	4610      	mov	r0, r2
 800558e:	4619      	mov	r1, r3
 8005590:	f000 fd60 	bl	8006054 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005594:	4603      	mov	r3, r0
 8005596:	e000      	b.n	800559a <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8005598:	2300      	movs	r3, #0
  }
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop

080055a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fc fb0b 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80055b6:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	791b      	ldrb	r3, [r3, #4]
 80055bc:	3b04      	subs	r3, #4
 80055be:	2b1a      	cmp	r3, #26
 80055c0:	d87e      	bhi.n	80056c0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11c>
 80055c2:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	0800567b 	.word	0x0800567b
 80055cc:	08005689 	.word	0x08005689
 80055d0:	08005635 	.word	0x08005635
 80055d4:	080056c1 	.word	0x080056c1
 80055d8:	080056c1 	.word	0x080056c1
 80055dc:	080056c1 	.word	0x080056c1
 80055e0:	0800563b 	.word	0x0800563b
 80055e4:	080056c1 	.word	0x080056c1
 80055e8:	08005649 	.word	0x08005649
 80055ec:	080056c1 	.word	0x080056c1
 80055f0:	08005699 	.word	0x08005699
 80055f4:	080056c1 	.word	0x080056c1
 80055f8:	080056c1 	.word	0x080056c1
 80055fc:	080056c1 	.word	0x080056c1
 8005600:	080056c1 	.word	0x080056c1
 8005604:	080056c1 	.word	0x080056c1
 8005608:	080056c1 	.word	0x080056c1
 800560c:	080056c1 	.word	0x080056c1
 8005610:	080056c1 	.word	0x080056c1
 8005614:	080056c1 	.word	0x080056c1
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056c1 	.word	0x080056c1
 8005620:	08005657 	.word	0x08005657
 8005624:	080056c1 	.word	0x080056c1
 8005628:	08005669 	.word	0x08005669
 800562c:	080056c1 	.word	0x080056c1
 8005630:	080056ab 	.word	0x080056ab
        return content_.asBoolean;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	e043      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fd27 	bl	8006092 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_>
 8005644:	4603      	mov	r3, r0
 8005646:	e03c      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fd32 	bl	80060b6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_>
 8005652:	4603      	mov	r3, r0
 8005654:	e035      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f000 fd3b 	bl	80060da <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>
 8005664:	4603      	mov	r3, r0
 8005666:	e02c      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	f000 fd45 	bl	8006100 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>
 8005676:	4603      	mov	r3, r0
 8005678:	e023      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fd51 	bl	8006126 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>
 8005684:	4603      	mov	r3, r0
 8005686:	e01c      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fd49 	bl	8006126 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>
 8005694:	4603      	mov	r3, r0
 8005696:	e014      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	edd3 7a00 	vldr	s15, [r3]
 800569e:	eeb0 0a67 	vmov.f32	s0, s15
 80056a2:	f000 fd54 	bl	800614e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>
 80056a6:	4603      	mov	r3, r0
 80056a8:	e00b      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	ed93 7b00 	vldr	d7, [r3]
 80056b0:	eeb0 0a47 	vmov.f32	s0, s14
 80056b4:	eef0 0a67 	vmov.f32	s1, s15
 80056b8:	f000 fd63 	bl	8006182 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>
 80056bc:	4603      	mov	r3, r0
 80056be:	e000      	b.n	80056c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 80056c0:	2300      	movs	r3, #0
  }
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fc fa77 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80056de:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	3b0a      	subs	r3, #10
 80056e6:	2b12      	cmp	r3, #18
 80056e8:	d848      	bhi.n	800577c <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb0>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0x24>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	0800573d 	.word	0x0800573d
 80056f4:	0800577d 	.word	0x0800577d
 80056f8:	0800574b 	.word	0x0800574b
 80056fc:	0800577d 	.word	0x0800577d
 8005700:	0800577d 	.word	0x0800577d
 8005704:	0800577d 	.word	0x0800577d
 8005708:	0800577d 	.word	0x0800577d
 800570c:	0800577d 	.word	0x0800577d
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800577d 	.word	0x0800577d
 8005718:	0800577d 	.word	0x0800577d
 800571c:	0800577d 	.word	0x0800577d
 8005720:	0800577d 	.word	0x0800577d
 8005724:	0800577d 	.word	0x0800577d
 8005728:	0800577d 	.word	0x0800577d
 800572c:	0800577d 	.word	0x0800577d
 8005730:	08005759 	.word	0x08005759
 8005734:	0800577d 	.word	0x0800577d
 8005738:	0800576b 	.word	0x0800576b
        return canConvertNumber<T>(content_.asUint32);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fd36 	bl	80061b2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005746:	4603      	mov	r3, r0
 8005748:	e019      	b.n	800577e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fd41 	bl	80061d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005754:	4603      	mov	r3, r0
 8005756:	e012      	b.n	800577e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	f000 fd51 	bl	8006208 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005766:	4603      	mov	r3, r0
 8005768:	e009      	b.n	800577e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f000 fd61 	bl	800623a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005778:	4603      	mov	r3, r0
 800577a:	e000      	b.n	800577e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 800577c:	2300      	movs	r3, #0
  }
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc fa19 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800579a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	791b      	ldrb	r3, [r3, #4]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	2b1a      	cmp	r3, #26
 80057a4:	d87f      	bhi.n	80058a6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x11e>
 80057a6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x24>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	08005861 	.word	0x08005861
 80057b0:	0800586f 	.word	0x0800586f
 80057b4:	08005819 	.word	0x08005819
 80057b8:	080058a7 	.word	0x080058a7
 80057bc:	080058a7 	.word	0x080058a7
 80057c0:	080058a7 	.word	0x080058a7
 80057c4:	08005821 	.word	0x08005821
 80057c8:	080058a7 	.word	0x080058a7
 80057cc:	0800582f 	.word	0x0800582f
 80057d0:	080058a7 	.word	0x080058a7
 80057d4:	0800587f 	.word	0x0800587f
 80057d8:	080058a7 	.word	0x080058a7
 80057dc:	080058a7 	.word	0x080058a7
 80057e0:	080058a7 	.word	0x080058a7
 80057e4:	080058a7 	.word	0x080058a7
 80057e8:	080058a7 	.word	0x080058a7
 80057ec:	080058a7 	.word	0x080058a7
 80057f0:	080058a7 	.word	0x080058a7
 80057f4:	080058a7 	.word	0x080058a7
 80057f8:	080058a7 	.word	0x080058a7
 80057fc:	080058a7 	.word	0x080058a7
 8005800:	080058a7 	.word	0x080058a7
 8005804:	0800583d 	.word	0x0800583d
 8005808:	080058a7 	.word	0x080058a7
 800580c:	0800584f 	.word	0x0800584f
 8005810:	080058a7 	.word	0x080058a7
 8005814:	08005891 	.word	0x08005891
        return content_.asBoolean;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b25b      	sxtb	r3, r3
 800581e:	e043      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asUint32);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fd30 	bl	800628a <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_>
 800582a:	4603      	mov	r3, r0
 800582c:	e03c      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asInt32);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fd3b 	bl	80062ae <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_>
 8005838:	4603      	mov	r3, r0
 800583a:	e035      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asUint64);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	f000 fd44 	bl	80062d2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>
 800584a:	4603      	mov	r3, r0
 800584c:	e02c      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asInt64);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	f000 fd4f 	bl	80062fa <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>
 800585c:	4603      	mov	r3, r0
 800585e:	e023      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return parseNumber<T>(content_.asLinkedString);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fd5c 	bl	8006322 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>
 800586a:	4603      	mov	r3, r0
 800586c:	e01c      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return parseNumber<T>(content_.asOwnedString->data);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fd54 	bl	8006322 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>
 800587a:	4603      	mov	r3, r0
 800587c:	e014      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asFloat);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	edd3 7a00 	vldr	s15, [r3]
 8005884:	eeb0 0a67 	vmov.f32	s0, s15
 8005888:	f000 fd5f 	bl	800634a <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>
 800588c:	4603      	mov	r3, r0
 800588e:	e00b      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asDouble);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	ed93 7b00 	vldr	d7, [r3]
 8005896:	eeb0 0a47 	vmov.f32	s0, s14
 800589a:	eef0 0a67 	vmov.f32	s1, s15
 800589e:	f000 fd6e 	bl	800637e <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>
 80058a2:	4603      	mov	r3, r0
 80058a4:	e000      	b.n	80058a8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return 0;
 80058a6:	2300      	movs	r3, #0
  }
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc f985 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80058c2:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	791b      	ldrb	r3, [r3, #4]
 80058c8:	3b04      	subs	r3, #4
 80058ca:	2b1a      	cmp	r3, #26
 80058cc:	d879      	bhi.n	80059c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x112>
 80058ce:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x24>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	08005999 	.word	0x08005999
 80058d8:	08005999 	.word	0x08005999
 80058dc:	08005941 	.word	0x08005941
 80058e0:	080059c3 	.word	0x080059c3
 80058e4:	080059c3 	.word	0x080059c3
 80058e8:	080059c3 	.word	0x080059c3
 80058ec:	08005951 	.word	0x08005951
 80058f0:	080059c3 	.word	0x080059c3
 80058f4:	08005961 	.word	0x08005961
 80058f8:	080059c3 	.word	0x080059c3
 80058fc:	080059ab 	.word	0x080059ab
 8005900:	080059c3 	.word	0x080059c3
 8005904:	080059c3 	.word	0x080059c3
 8005908:	080059c3 	.word	0x080059c3
 800590c:	080059c3 	.word	0x080059c3
 8005910:	080059c3 	.word	0x080059c3
 8005914:	080059c3 	.word	0x080059c3
 8005918:	080059c3 	.word	0x080059c3
 800591c:	080059c3 	.word	0x080059c3
 8005920:	080059c3 	.word	0x080059c3
 8005924:	080059c3 	.word	0x080059c3
 8005928:	080059c3 	.word	0x080059c3
 800592c:	08005971 	.word	0x08005971
 8005930:	080059c3 	.word	0x080059c3
 8005934:	08005985 	.word	0x08005985
 8005938:	080059c3 	.word	0x080059c3
 800593c:	080059bb 	.word	0x080059bb
        return static_cast<T>(content_.asBoolean);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7fa fde5 	bl	8000514 <__aeabi_ui2d>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	e03c      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asUint32);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fddd 	bl	8000514 <__aeabi_ui2d>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	e034      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asInt32);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7fa fde5 	bl	8000534 <__aeabi_i2d>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	e02c      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asUint64);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fa fe0f 	bl	800059c <__aeabi_ul2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	e022      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asInt64);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	f7fa fe0d 	bl	80005ac <__aeabi_l2d>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e018      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd05 	bl	80063ae <_ZN11ArduinoJson8V721HB226detail11parseNumberIdEET_PKc>
 80059a4:	ec53 2b10 	vmov	r2, r3, d0
 80059a8:	e00f      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asFloat);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fa fdd2 	bl	8000558 <__aeabi_f2d>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	e007      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asDouble);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	e003      	b.n	80059ca <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
  }
 80059ca:	ec43 2b17 	vmov	d7, r2, r3
 80059ce:	eeb0 0a47 	vmov.f32	s0, s14
 80059d2:	eef0 0a67 	vmov.f32	s1, s15
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fc f8ef 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80059ee:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	3b0a      	subs	r3, #10
 80059f6:	2b12      	cmp	r3, #18
 80059f8:	d848      	bhi.n	8005a8c <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb0>
 80059fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0x24>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a4d 	.word	0x08005a4d
 8005a04:	08005a8d 	.word	0x08005a8d
 8005a08:	08005a5b 	.word	0x08005a5b
 8005a0c:	08005a8d 	.word	0x08005a8d
 8005a10:	08005a8d 	.word	0x08005a8d
 8005a14:	08005a8d 	.word	0x08005a8d
 8005a18:	08005a8d 	.word	0x08005a8d
 8005a1c:	08005a8d 	.word	0x08005a8d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a8d 	.word	0x08005a8d
 8005a30:	08005a8d 	.word	0x08005a8d
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a8d 	.word	0x08005a8d
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a8d 	.word	0x08005a8d
 8005a48:	08005a7b 	.word	0x08005a7b
        return canConvertNumber<T>(content_.asUint32);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fcc6 	bl	80063e2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005a56:	4603      	mov	r3, r0
 8005a58:	e019      	b.n	8005a8e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fcd0 	bl	8006404 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8005a64:	4603      	mov	r3, r0
 8005a66:	e012      	b.n	8005a8e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f000 fcdd 	bl	8006430 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005a76:	4603      	mov	r3, r0
 8005a78:	e009      	b.n	8005a8e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f000 fcec 	bl	8006460 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	e000      	b.n	8005a8e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8005a8c:	2300      	movs	r3, #0
  }
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop

08005a98 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc f891 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005aaa:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	791b      	ldrb	r3, [r3, #4]
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	2b1a      	cmp	r3, #26
 8005ab4:	d87e      	bhi.n	8005bb4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11c>
 8005ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005b6f 	.word	0x08005b6f
 8005ac0:	08005b7d 	.word	0x08005b7d
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005bb5 	.word	0x08005bb5
 8005acc:	08005bb5 	.word	0x08005bb5
 8005ad0:	08005bb5 	.word	0x08005bb5
 8005ad4:	08005b2f 	.word	0x08005b2f
 8005ad8:	08005bb5 	.word	0x08005bb5
 8005adc:	08005b3d 	.word	0x08005b3d
 8005ae0:	08005bb5 	.word	0x08005bb5
 8005ae4:	08005b8d 	.word	0x08005b8d
 8005ae8:	08005bb5 	.word	0x08005bb5
 8005aec:	08005bb5 	.word	0x08005bb5
 8005af0:	08005bb5 	.word	0x08005bb5
 8005af4:	08005bb5 	.word	0x08005bb5
 8005af8:	08005bb5 	.word	0x08005bb5
 8005afc:	08005bb5 	.word	0x08005bb5
 8005b00:	08005bb5 	.word	0x08005bb5
 8005b04:	08005bb5 	.word	0x08005bb5
 8005b08:	08005bb5 	.word	0x08005bb5
 8005b0c:	08005bb5 	.word	0x08005bb5
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005b4b 	.word	0x08005b4b
 8005b18:	08005bb5 	.word	0x08005bb5
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005bb5 	.word	0x08005bb5
 8005b24:	08005b9f 	.word	0x08005b9f
        return content_.asBoolean;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	e043      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fcb2 	bl	800649c <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	e03c      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fcbc 	bl	80064be <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_>
 8005b46:	4603      	mov	r3, r0
 8005b48:	e035      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f000 fcc4 	bl	80064e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	e02c      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f000 fcce 	bl	8006506 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e023      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fcda 	bl	800652c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e01c      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fcd2 	bl	800652c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	e014      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	edd3 7a00 	vldr	s15, [r3]
 8005b92:	eeb0 0a67 	vmov.f32	s0, s15
 8005b96:	f000 fcdd 	bl	8006554 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	e00b      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	ed93 7b00 	vldr	d7, [r3]
 8005ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ba8:	eef0 0a67 	vmov.f32	s1, s15
 8005bac:	f000 fcea 	bl	8006584 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	e000      	b.n	8005bb6 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 8005bb4:	2300      	movs	r3, #0
  }
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop

08005bc0 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <Json/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8005bcc:	f107 0010 	add.w	r0, r7, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	68f9      	ldr	r1, [r7, #12]
 8005bd6:	f000 fcec 	bl	80065b2 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 8005bda:	f107 0310 	add.w	r3, r7, #16
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fd f9b2 	bl	8002f48 <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x2e>
    return nullptr;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e00c      	b.n	8005c08 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x48>
  it.next(resources);
 8005bee:	f107 0310 	add.w	r3, r7, #16
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fd fbbf 	bl	8003378 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 8005bfa:	f107 0310 	add.w	r3, r7, #16
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fd f9bf 	bl	8002f82 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	bf00      	nop
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_>:
  TVisitor* visitor_;
  const ResourceManager* resources_;
};

template <typename TVisitor>
typename TVisitor::result_type accept(JsonVariantConst variant,
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	f107 0308 	add.w	r3, r7, #8
 8005c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c1e:	607a      	str	r2, [r7, #4]
                                      TVisitor& visit) {
  auto data = VariantAttorney::getData(variant);
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fc f82d 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005c2a:	61f8      	str	r0, [r7, #28]
  if (!data)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_+0x2e>
    return visit.visit(nullptr);
 8005c32:	2100      	movs	r1, #0
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fd fb65 	bl	8003304 <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	e015      	b.n	8005c6a <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_+0x5a>
  auto resources = VariantAttorney::getResourceManager(variant);
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fc f82a 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005c48:	61b8      	str	r0, [r7, #24]
  VisitorAdapter<TVisitor> adapter(visit, resources);
 8005c4a:	f107 0310 	add.w	r3, r7, #16
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fd17 	bl	8006686 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEEC1ERS4_PKNS1_15ResourceManagerE>
  return data->accept(adapter, resources);
 8005c58:	f107 0310 	add.w	r3, r7, #16
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	69f8      	ldr	r0, [r7, #28]
 8005c62:	f000 fd23 	bl	80066ac <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE>
 8005c66:	4603      	mov	r3, r0
 8005c68:	bf00      	nop
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIfEES3_RKT_>:
  TResult visit(const T&) {
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
    return TResult();
 8005c7c:	2300      	movs	r3, #0
  }
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIdEES3_RKT_>:
  TResult visit(const T&) {
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
    return TResult();
 8005c94:	2300      	movs	r3, #0
  }
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15JsonObjectConstEEES3_RKT_>:
  TResult visit(const T&) {
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
    return TResult();
 8005cac:	2300      	movs	r3, #0
  }
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_10JsonStringEEES3_RKT_>:
  TResult visit(const T&) {
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
    return TResult();
 8005cc4:	2300      	movs	r3, #0
  }
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15SerializedValueIPKcEEEES3_RKT_>:
  TResult visit(const T&) {
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
    return TResult();
 8005cdc:	2300      	movs	r3, #0
  }
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIxEES3_RKT_>:
  TResult visit(const T&) {
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
    return TResult();
 8005cf4:	2300      	movs	r3, #0
  }
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIyEES3_RKT_>:
  TResult visit(const T&) {
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
    return TResult();
 8005d0c:	2300      	movs	r3, #0
  }
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIbEES3_RKT_>:
  TResult visit(const T&) {
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
    return TResult();
 8005d24:	2300      	movs	r3, #0
  }
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_14JsonArrayConstEEES3_RKT_>:
  TResult visit(const T&) {
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
    return TResult();
 8005d3c:	2300      	movs	r3, #0
  }
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e019      	b.n	8005d90 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x46>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f103 0108 	add.w	r1, r3, #8
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	88db      	ldrh	r3, [r3, #6]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fb1a 	bl	80043a6 <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	f107 020c 	add.w	r2, r7, #12
 8005d78:	ca06      	ldmia	r2, {r1, r2}
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	f000 fdca 	bl	8006914 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x40>
        return node;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	e006      	b.n	8005d98 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x4e>
    for (auto node = strings_; node; node = node->next) {
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e2      	bne.n	8005d5c <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005d96:	2300      	movs	r3, #0
  }
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e00d      	b.n	8005dce <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj+0x2e>
    p[i] = s[i];
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	18d4      	adds	r4, r2, r3
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fb fa67 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d3ed      	bcc.n	8005db2 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj+0x12>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd90      	pop	{r4, r7, pc}

08005de0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 8005dea:	6838      	ldr	r0, [r7, #0]
 8005dec:	f7fe fe98 	bl	8004b20 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE15getOrCreateDataEv>
 8005df0:	4604      	mov	r4, r0
 8005df2:	6838      	ldr	r0, [r7, #0]
 8005df4:	f7fe fea4 	bl	8004b40 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fd fa18 	bl	8003234 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd90      	pop	{r4, r7, pc}

08005e0c <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	e883 0006 	stmia.w	r3, {r1, r2}
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
    auto data = getData(dst);
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe f98c 	bl	800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005e24:	6178      	str	r0, [r7, #20]
    if (!data)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE+0x24>
      return false;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e011      	b.n	8005e54 <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE+0x48>
    auto resources = getResourceManager(dst);
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fac8 	bl	80043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005e38:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8005e3a:	6939      	ldr	r1, [r7, #16]
 8005e3c:	6978      	ldr	r0, [r7, #20]
 8005e3e:	f7fd fc80 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8005e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f000 fd74 	bl	8006938 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8005e50:	4603      	mov	r3, r0
 8005e52:	bf00      	nop
  }
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	ed87 0b02 	vstr	d0, [r7, #8]
 8005e66:	463b      	mov	r3, r7
 8005e68:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(dst);
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe f964 	bl	800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005e74:	6178      	str	r0, [r7, #20]
    if (!data)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE+0x24>
      return false;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e010      	b.n	8005ea2 <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE+0x46>
    auto resources = getResourceManager(dst);
 8005e80:	463b      	mov	r3, r7
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe faa0 	bl	80043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005e88:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8005e8a:	6939      	ldr	r1, [r7, #16]
 8005e8c:	6978      	ldr	r0, [r7, #20]
 8005e8e:	f7fd fc58 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setFloat(src, resources);
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	ed97 0b02 	vldr	d0, [r7, #8]
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	f000 fd95 	bl	80069c8 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	bf00      	nop
  }
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe f93e 	bl	800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005ec0:	6178      	str	r0, [r7, #20]
    if (!data)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e00f      	b.n	8005eec <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fa7a 	bl	80043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005ed4:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8005ed6:	6939      	ldr	r1, [r7, #16]
 8005ed8:	6978      	ldr	r0, [r7, #20]
 8005eda:	f7fd fc32 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	6978      	ldr	r0, [r7, #20]
 8005ee4:	f000 fdbe 	bl	8006a64 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	bf00      	nop
  }
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd f9f5 	bl	80032ec <_ZN11ArduinoJson8V721HB2212JsonDocument15getOrCreateDataEv>
 8005f02:	4603      	mov	r3, r0
  }
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fd f9de 	bl	80032d6 <_ZN11ArduinoJson8V721HB2212JsonDocument18getResourceManagerEv>
 8005f1a:	4603      	mov	r3, r0
  }
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
    if (key.isNull())
 8005f30:	f107 0308 	add.w	r3, r7, #8
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fc feef 	bl	8002d18 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e01c      	b.n	8005f7e <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5a>
    auto obj = isNull() ? &toObject() : asObject();
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7fd f8c3 	bl	80030d0 <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7fd f936 	bl	80031c2 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>
 8005f56:	4603      	mov	r3, r0
 8005f58:	e003      	b.n	8005f62 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7fd f855 	bl	800300a <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8005f60:	4603      	mov	r3, r0
 8005f62:	617b      	str	r3, [r7, #20]
    if (!obj)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e007      	b.n	8005f7e <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5a>
    return obj->getOrAddMember(key, resources);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fdb8 	bl	8006aea <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	bf00      	nop
  }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe f8d0 	bl	800413c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005f9c:	6178      	str	r0, [r7, #20]
    if (!data)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE+0x22>
      return false;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e00f      	b.n	8005fc8 <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fa0c 	bl	80043c8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005fb0:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f7fd fbc4 	bl	8003742 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	6978      	ldr	r0, [r7, #20]
 8005fc0:	f000 fdaf 	bl	8006b22 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	bf00      	nop
  }
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
// uint64 -> int32
template <typename TOut, typename TIn>
enable_if_t<is_integral<TIn>::value && is_unsigned<TIn>::value &&
                is_integral<TOut>::value && sizeof(TOut) <= sizeof(TIn),
            bool>
canConvertNumber(TIn value) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8005fd8:	f000 fde6 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	bf94      	ite	ls
 8005fe6:	2301      	movls	r3, #1
 8005fe8:	2300      	movhi	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
template <typename TOut, typename TIn>
enable_if_t<is_integral<TIn>::value && is_signed<TIn>::value &&
                is_integral<TOut>::value && is_unsigned<TOut>::value &&
                sizeof(TOut) < sizeof(TIn),
            bool>
canConvertNumber(TIn value) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da01      	bge.n	8006006 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8006002:	2300      	movs	r3, #0
 8006004:	e009      	b.n	800601a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006006:	f000 fdcf 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 800600a:	4603      	mov	r3, r0
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4293      	cmp	r3, r2
 8006012:	bfd4      	ite	le
 8006014:	2301      	movle	r3, #1
 8006016:	2300      	movgt	r3, #0
 8006018:	b2db      	uxtb	r3, r3
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006022:	b5b0      	push	{r4, r5, r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800602c:	f000 fdbc 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 8006030:	4603      	mov	r3, r0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2200      	movs	r2, #0
 8006036:	461c      	mov	r4, r3
 8006038:	4615      	mov	r5, r2
 800603a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603e:	4294      	cmp	r4, r2
 8006040:	eb75 0303 	sbcs.w	r3, r5, r3
 8006044:	bf2c      	ite	cs
 8006046:	2301      	movcs	r3, #1
 8006048:	2300      	movcc	r3, #0
 800604a:	b2db      	uxtb	r3, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bdb0      	pop	{r4, r5, r7, pc}

08006054 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006054:	b5b0      	push	{r4, r5, r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800605e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da01      	bge.n	800606a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8006066:	2300      	movs	r3, #0
 8006068:	e00f      	b.n	800608a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 800606a:	f000 fd9d 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 800606e:	4603      	mov	r3, r0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2200      	movs	r2, #0
 8006074:	461c      	mov	r4, r3
 8006076:	4615      	mov	r5, r2
 8006078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607c:	4294      	cmp	r4, r2
 800607e:	eb75 0303 	sbcs.w	r3, r5, r3
 8006082:	bfac      	ite	ge
 8006084:	2301      	movge	r3, #1
 8006086:	2300      	movlt	r3, #0
 8006088:	b2db      	uxtb	r3, r3
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bdb0      	pop	{r4, r5, r7, pc}

08006092 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ff98 	bl	8005fd0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_+0x1a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e000      	b.n	80060ae <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_+0x1c>
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff98 	bl	8005ff4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_+0x1a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e000      	b.n	80060d2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_+0x1c>
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e8:	f7ff ff9b 	bl	8006022 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_+0x1c>
 80060f2:	783b      	ldrb	r3, [r7, #0]
 80060f4:	e000      	b.n	80060f8 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_+0x1e>
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800610a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800610e:	f7ff ffa1 	bl	8006054 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_+0x1c>
 8006118:	783b      	ldrb	r3, [r7, #0]
 800611a:	e000      	b.n	800611e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_+0x1e>
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800612e:	f107 0308 	add.w	r3, r7, #8
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd fc07 	bl	8003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fd3a 	bl	8006bb8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v>
 8006144:	4603      	mov	r3, r0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006158:	ed97 0a01 	vldr	s0, [r7, #4]
 800615c:	f000 fd74 	bl	8006c48 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_+0x2a>
 8006166:	edd7 7a01 	vldr	s15, [r7, #4]
 800616a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800616e:	edc7 7a00 	vstr	s15, [r7]
 8006172:	783b      	ldrb	r3, [r7, #0]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e000      	b.n	800617a <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_+0x2c>
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800618c:	ed97 0b00 	vldr	d0, [r7]
 8006190:	f000 fd82 	bl	8006c98 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d006      	beq.n	80061a8 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_+0x26>
 800619a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619e:	f7fa fd0b 	bl	8000bb8 <__aeabi_d2uiz>
 80061a2:	4603      	mov	r3, r0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e000      	b.n	80061aa <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_+0x28>
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80061ba:	f000 fd97 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf94      	ite	ls
 80061c8:	2301      	movls	r3, #1
 80061ca:	2300      	movhi	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80061de:	f000 fd8e 	bl	8006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	db08      	blt.n	80061fe <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x28>
         value <= TIn(numeric_limits<TOut>::highest());
 80061ec:	f000 fd7e 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4293      	cmp	r3, r2
 80061f8:	dc01      	bgt.n	80061fe <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x28>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x2a>
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006208:	b5b0      	push	{r4, r5, r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006212:	f000 fd6b 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 8006216:	4603      	mov	r3, r0
 8006218:	b25b      	sxtb	r3, r3
 800621a:	17da      	asrs	r2, r3, #31
 800621c:	461c      	mov	r4, r3
 800621e:	4615      	mov	r5, r2
 8006220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006224:	4294      	cmp	r4, r2
 8006226:	eb75 0303 	sbcs.w	r3, r5, r3
 800622a:	bf2c      	ite	cs
 800622c:	2301      	movcs	r3, #1
 800622e:	2300      	movcc	r3, #0
 8006230:	b2db      	uxtb	r3, r3
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bdb0      	pop	{r4, r5, r7, pc}

0800623a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800623a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8006246:	f000 fd5a 	bl	8006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800624a:	4603      	mov	r3, r0
 800624c:	b25b      	sxtb	r3, r3
 800624e:	17da      	asrs	r2, r3, #31
 8006250:	4698      	mov	r8, r3
 8006252:	4691      	mov	r9, r2
 8006254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006258:	4542      	cmp	r2, r8
 800625a:	eb73 0309 	sbcs.w	r3, r3, r9
 800625e:	db0e      	blt.n	800627e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x44>
         value <= TIn(numeric_limits<TOut>::highest());
 8006260:	f000 fd44 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 8006264:	4603      	mov	r3, r0
 8006266:	b25b      	sxtb	r3, r3
 8006268:	17da      	asrs	r2, r3, #31
 800626a:	461c      	mov	r4, r3
 800626c:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800626e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006272:	4294      	cmp	r4, r2
 8006274:	eb75 0303 	sbcs.w	r3, r5, r3
 8006278:	db01      	blt.n	800627e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x44>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x46>
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800628a <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_>:
TOut convertNumber(TIn value) {
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff ff8d 	bl	80061b2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_+0x1a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	e000      	b.n	80062a6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_+0x1c>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_>:
TOut convertNumber(TIn value) {
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff8d 	bl	80061d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_+0x1a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	e000      	b.n	80062ca <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_+0x1c>
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>:
TOut convertNumber(TIn value) {
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80062dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e0:	f7ff ff92 	bl	8006208 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_+0x1e>
 80062ea:	f997 3000 	ldrsb.w	r3, [r7]
 80062ee:	e000      	b.n	80062f2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_+0x20>
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>:
TOut convertNumber(TIn value) {
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006308:	f7ff ff97 	bl	800623a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_+0x1e>
 8006312:	f997 3000 	ldrsb.w	r3, [r7]
 8006316:	e000      	b.n	800631a <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_+0x20>
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>:
inline T parseNumber(const char* s) {
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fd fb09 	bl	8003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fce8 	bl	8006d10 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v>
 8006340:	4603      	mov	r3, r0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>:
TOut convertNumber(TIn value) {
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006354:	ed97 0a01 	vldr	s0, [r7, #4]
 8006358:	f000 fd1a 	bl	8006d90 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_+0x2a>
 8006362:	edd7 7a01 	vldr	s15, [r7, #4]
 8006366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800636a:	edc7 7a00 	vstr	s15, [r7]
 800636e:	783b      	ldrb	r3, [r7, #0]
 8006370:	b25b      	sxtb	r3, r3
 8006372:	e000      	b.n	8006376 <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_+0x2c>
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>:
TOut convertNumber(TIn value) {
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006388:	ed97 0b00 	vldr	d0, [r7]
 800638c:	f000 fd28 	bl	8006de0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d006      	beq.n	80063a4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_+0x26>
 8006396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639a:	f7fa fbe5 	bl	8000b68 <__aeabi_d2iz>
 800639e:	4603      	mov	r3, r0
 80063a0:	b25b      	sxtb	r3, r3
 80063a2:	e000      	b.n	80063a6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_+0x28>
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <_ZN11ArduinoJson8V721HB226detail11parseNumberIdEET_PKc>:
inline T parseNumber(const char* s) {
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd fac3 	bl	8003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fd36 	bl	8006e38 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v>
 80063cc:	eeb0 7a40 	vmov.f32	s14, s0
 80063d0:	eef0 7a60 	vmov.f32	s15, s1
}
 80063d4:	eeb0 0a47 	vmov.f32	s0, s14
 80063d8:	eef0 0a67 	vmov.f32	s1, s15
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80063ea:	f000 fd79 	bl	8006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 80063ee:	4602      	mov	r2, r0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bf94      	ite	ls
 80063f6:	2301      	movls	r3, #1
 80063f8:	2300      	movhi	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if (value < 0)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da01      	bge.n	8006416 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8006412:	2300      	movs	r3, #0
 8006414:	e008      	b.n	8006428 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006416:	f000 fd63 	bl	8006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	bf2c      	ite	cs
 8006422:	2301      	movcs	r3, #1
 8006424:	2300      	movcc	r3, #0
 8006426:	b2db      	uxtb	r3, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800643a:	f000 fd51 	bl	8006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800643e:	4603      	mov	r3, r0
 8006440:	2200      	movs	r2, #0
 8006442:	461c      	mov	r4, r3
 8006444:	4615      	mov	r5, r2
 8006446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644a:	4294      	cmp	r4, r2
 800644c:	eb75 0303 	sbcs.w	r3, r5, r3
 8006450:	bf2c      	ite	cs
 8006452:	2301      	movcs	r3, #1
 8006454:	2300      	movcc	r3, #0
 8006456:	b2db      	uxtb	r3, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bdb0      	pop	{r4, r5, r7, pc}

08006460 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800646a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646e:	2b00      	cmp	r3, #0
 8006470:	da01      	bge.n	8006476 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8006472:	2300      	movs	r3, #0
 8006474:	e00e      	b.n	8006494 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006476:	f000 fd33 	bl	8006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800647a:	4603      	mov	r3, r0
 800647c:	2200      	movs	r2, #0
 800647e:	461c      	mov	r4, r3
 8006480:	4615      	mov	r5, r2
 8006482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006486:	4294      	cmp	r4, r2
 8006488:	eb75 0303 	sbcs.w	r3, r5, r3
 800648c:	bfac      	ite	ge
 800648e:	2301      	movge	r3, #1
 8006490:	2300      	movlt	r3, #0
 8006492:	b2db      	uxtb	r3, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bdb0      	pop	{r4, r5, r7, pc}

0800649c <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_>:
TOut convertNumber(TIn value) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff9c 	bl	80063e2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_+0x18>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	e000      	b.n	80064b6 <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_+0x1a>
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ff9c 	bl	8006404 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_+0x18>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	e000      	b.n	80064d8 <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_+0x1a>
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80064ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ee:	f7ff ff9f 	bl	8006430 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_+0x1c>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	e000      	b.n	80064fe <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_+0x1e>
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006514:	f7ff ffa4 	bl	8006460 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_+0x1c>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	e000      	b.n	8006524 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_+0x1e>
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>:
inline T parseNumber(const char* s) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fa04 	bl	8003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 8006540:	f107 0308 	add.w	r3, r7, #8
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fcd5 	bl	8006ef4 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800655e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006562:	f000 fd0f 	bl	8006f84 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_+0x26>
 800656c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006574:	ee17 3a90 	vmov	r3, s15
 8006578:	e000      	b.n	800657c <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_+0x28>
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800658e:	ed97 0b00 	vldr	d0, [r7]
 8006592:	f000 fd1c 	bl	8006fce <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_+0x24>
 800659c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a0:	f7fa fb0a 	bl	8000bb8 <__aeabi_d2uiz>
 80065a4:	4603      	mov	r3, r0
 80065a6:	e000      	b.n	80065aa <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_+0x26>
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b08e      	sub	sp, #56	@ 0x38
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fc fba8 	bl	8002d18 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x24>
    return iterator();
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fc fca8 	bl	8002f24 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
 80065d4:	e053      	b.n	800667e <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xcc>
  bool isKey = true;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	f107 0314 	add.w	r3, r7, #20
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fc feea 	bl	80033be <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80065ea:	e03a      	b.n	8006662 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xb0>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 80065ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01e      	beq.n	8006632 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x80>
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fc fcb6 	bl	8002f6a <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>
 80065fe:	4602      	mov	r2, r0
 8006600:	f107 031c 	add.w	r3, r7, #28
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7fc fd1c 	bl	8003044 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 800660c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006610:	f107 021c 	add.w	r2, r7, #28
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd ff06 	bl	8004428 <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
 800661c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fcfd 	bl	8007022 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_17JsonStringAdapterEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x80>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x82>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x98>
      return it;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	461a      	mov	r2, r3
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006644:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8006648:	e019      	b.n	800667e <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xcc>
    isKey = !isKey;
 800664a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800664e:	f083 0301 	eor.w	r3, r3, #1
 8006652:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc fe8b 	bl	8003378 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8006662:	f107 0314 	add.w	r3, r7, #20
 8006666:	4618      	mov	r0, r3
 8006668:	f7fc fc6e 	bl	8002f48 <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 800666c:	4603      	mov	r3, r0
 800666e:	f083 0301 	eor.w	r3, r3, #1
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1b9      	bne.n	80065ec <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x3a>
  return iterator();
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7fc fc53 	bl	8002f24 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
}
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	3738      	adds	r7, #56	@ 0x38
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEEC1ERS4_PKNS1_15ResourceManagerE>:
  VisitorAdapter(TVisitor& visitor, const ResourceManager* resources)
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
      : visitor_(&visitor), resources_(resources) {}
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 80066ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066b0:	b094      	sub	sp, #80	@ 0x50
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7fb fa85 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80066c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
    switch (type_) {
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	3b03      	subs	r3, #3
 80066ca:	2b3d      	cmp	r3, #61	@ 0x3d
 80066cc:	f200 8113 	bhi.w	80068f6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x24a>
 80066d0:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x2c>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006853 	.word	0x08006853
 80066dc:	08006809 	.word	0x08006809
 80066e0:	08006829 	.word	0x08006829
 80066e4:	080068d5 	.word	0x080068d5
 80066e8:	080068f7 	.word	0x080068f7
 80066ec:	080068f7 	.word	0x080068f7
 80066f0:	080068f7 	.word	0x080068f7
 80066f4:	0800689b 	.word	0x0800689b
 80066f8:	080068f7 	.word	0x080068f7
 80066fc:	0800687d 	.word	0x0800687d
 8006700:	080068f7 	.word	0x080068f7
 8006704:	080067d1 	.word	0x080067d1
 8006708:	080068f7 	.word	0x080068f7
 800670c:	080068f7 	.word	0x080068f7
 8006710:	080068f7 	.word	0x080068f7
 8006714:	080068f7 	.word	0x080068f7
 8006718:	080068f7 	.word	0x080068f7
 800671c:	080068f7 	.word	0x080068f7
 8006720:	080068f7 	.word	0x080068f7
 8006724:	080068f7 	.word	0x080068f7
 8006728:	080068f7 	.word	0x080068f7
 800672c:	080068f7 	.word	0x080068f7
 8006730:	080068f7 	.word	0x080068f7
 8006734:	080068c7 	.word	0x080068c7
 8006738:	080068f7 	.word	0x080068f7
 800673c:	080068b9 	.word	0x080068b9
 8006740:	080068f7 	.word	0x080068f7
 8006744:	080067df 	.word	0x080067df
 8006748:	080068f7 	.word	0x080068f7
 800674c:	080067fb 	.word	0x080067fb
 8006750:	080068f7 	.word	0x080068f7
 8006754:	080068f7 	.word	0x080068f7
 8006758:	080068f7 	.word	0x080068f7
 800675c:	080068f7 	.word	0x080068f7
 8006760:	080068f7 	.word	0x080068f7
 8006764:	080068f7 	.word	0x080068f7
 8006768:	080068f7 	.word	0x080068f7
 800676c:	080068f7 	.word	0x080068f7
 8006770:	080068f7 	.word	0x080068f7
 8006774:	080068f7 	.word	0x080068f7
 8006778:	080068f7 	.word	0x080068f7
 800677c:	080068f7 	.word	0x080068f7
 8006780:	080068f7 	.word	0x080068f7
 8006784:	080068f7 	.word	0x080068f7
 8006788:	080068f7 	.word	0x080068f7
 800678c:	080068f7 	.word	0x080068f7
 8006790:	080068f7 	.word	0x080068f7
 8006794:	080068f7 	.word	0x080068f7
 8006798:	080068f7 	.word	0x080068f7
 800679c:	080068f7 	.word	0x080068f7
 80067a0:	080068f7 	.word	0x080068f7
 80067a4:	080068f7 	.word	0x080068f7
 80067a8:	080068f7 	.word	0x080068f7
 80067ac:	080068f7 	.word	0x080068f7
 80067b0:	080068f7 	.word	0x080068f7
 80067b4:	080068f7 	.word	0x080068f7
 80067b8:	080068f7 	.word	0x080068f7
 80067bc:	080068f7 	.word	0x080068f7
 80067c0:	080068f7 	.word	0x080068f7
 80067c4:	080068f7 	.word	0x080068f7
 80067c8:	080068f7 	.word	0x080068f7
 80067cc:	080067ed 	.word	0x080067ed
        return visit.visit(content_.asFloat);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4619      	mov	r1, r3
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	f000 fc35 	bl	8007044 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIfEENS1_13CompareResultERKT_>
 80067da:	4603      	mov	r3, r0
 80067dc:	e095      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asDouble);
 80067de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e0:	4619      	mov	r1, r3
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f000 fc3e 	bl	8007064 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIdEENS1_13CompareResultERKT_>
 80067e8:	4603      	mov	r3, r0
 80067ea:	e08e      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asArray);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4619      	mov	r1, r3
 80067f0:	68b8      	ldr	r0, [r7, #8]
 80067f2:	f000 fc47 	bl	8007084 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_9ArrayDataE>
 80067f6:	4603      	mov	r3, r0
 80067f8:	e087      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asObject);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4619      	mov	r1, r3
 80067fe:	68b8      	ldr	r0, [r7, #8]
 8006800:	f000 fc5a 	bl	80070b8 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_10ObjectDataE>
 8006804:	4603      	mov	r3, r0
 8006806:	e080      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asLinkedString));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	f107 0310 	add.w	r3, r7, #16
 8006810:	2201      	movs	r2, #1
 8006812:	4618      	mov	r0, r3
 8006814:	f7fa ff78 	bl	8001708 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	4619      	mov	r1, r3
 800681e:	68b8      	ldr	r0, [r7, #8]
 8006820:	f000 fc64 	bl	80070ec <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>
 8006824:	4603      	mov	r3, r0
 8006826:	e070      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asOwnedString->data,
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length,
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(JsonString(content_.asOwnedString->data,
 8006836:	461a      	mov	r2, r3
 8006838:	f107 001c 	add.w	r0, r7, #28
 800683c:	2300      	movs	r3, #0
 800683e:	f7fa ff80 	bl	8001742 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 8006842:	f107 031c 	add.w	r3, r7, #28
 8006846:	4619      	mov	r1, r3
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	f000 fc4f 	bl	80070ec <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>
 800684e:	4603      	mov	r3, r0
                                      JsonString::Copied));
 8006850:	e05b      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(RawString(content_.asOwnedString->data,
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 8006860:	461a      	mov	r2, r3
 8006862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006866:	4618      	mov	r0, r3
 8006868:	f7fb fc10 	bl	800208c <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>
 800686c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006870:	4619      	mov	r1, r3
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 fc4a 	bl	800710c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_15SerializedValueIPKcEEEENS1_13CompareResultERKT_>
 8006878:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 800687a:	e046      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	17da      	asrs	r2, r3, #31
 8006882:	4698      	mov	r8, r3
 8006884:	4691      	mov	r9, r2
 8006886:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 800688a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800688e:	4619      	mov	r1, r3
 8006890:	68b8      	ldr	r0, [r7, #8]
 8006892:	f000 fc4b 	bl	800712c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>
 8006896:	4603      	mov	r3, r0
 8006898:	e037      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2200      	movs	r2, #0
 80068a0:	461c      	mov	r4, r3
 80068a2:	4615      	mov	r5, r2
 80068a4:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 80068a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068ac:	4619      	mov	r1, r3
 80068ae:	68b8      	ldr	r0, [r7, #8]
 80068b0:	f000 fc4c 	bl	800714c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>
 80068b4:	4603      	mov	r3, r0
 80068b6:	e028      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asInt64);
 80068b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ba:	4619      	mov	r1, r3
 80068bc:	68b8      	ldr	r0, [r7, #8]
 80068be:	f000 fc35 	bl	800712c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>
 80068c2:	4603      	mov	r3, r0
 80068c4:	e021      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asUint64);
 80068c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c8:	4619      	mov	r1, r3
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f000 fc3e 	bl	800714c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e01a      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asBoolean != 0);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80068e6:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80068ea:	4619      	mov	r1, r3
 80068ec:	68b8      	ldr	r0, [r7, #8]
 80068ee:	f000 fc3d 	bl	800716c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIbEENS1_13CompareResultERKT_>
 80068f2:	4603      	mov	r3, r0
 80068f4:	e009      	b.n	800690a <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(nullptr);
 80068f6:	2300      	movs	r3, #0
 80068f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80068fe:	4619      	mov	r1, r3
 8006900:	68b8      	ldr	r0, [r7, #8]
 8006902:	f000 fc43 	bl	800718c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIDnEENS1_13CompareResultERKT_>
 8006906:	4603      	mov	r3, r0
 8006908:	bf00      	nop
  }
 800690a:	4618      	mov	r0, r3
 800690c:	3750      	adds	r7, #80	@ 0x50
 800690e:	46bd      	mov	sp, r7
 8006910:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006914 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	e883 0006 	stmia.w	r3, {r1, r2}
  return stringEquals(s2, s1);
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	e893 0003 	ldmia.w	r3, {r0, r1}
 800692a:	f000 fc3f 	bl	80071ac <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 800692e:	4603      	mov	r3, r0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8006938:	b5b0      	push	{r4, r5, r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	460b      	mov	r3, r1
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	72fb      	strb	r3, [r7, #11]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<int32_t>(value)) {
 8006946:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fc82 	bl	8007254 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlaEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x2e>
    type_ = VariantType::Int32;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	220c      	movs	r2, #12
 800695a:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 800695c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e02b      	b.n	80069be <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x86>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4618      	mov	r0, r3
 800696e:	f7fc fe37 	bl	80035e0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fc78 	bl	800726c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800697c:	4603      	mov	r3, r0
 800697e:	f083 0301 	eor.w	r3, r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x54>
      return false;
 8006988:	2300      	movs	r3, #0
 800698a:	e019      	b.n	80069c0 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x88>
    type_ = VariantType::Int64;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	221c      	movs	r2, #28
 8006990:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8006992:	f107 0310 	add.w	r3, r7, #16
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fc79 	bl	800728e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fc7c 	bl	80072a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80069ae:	4602      	mov	r2, r0
 80069b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80069b4:	17d9      	asrs	r1, r3, #31
 80069b6:	461c      	mov	r4, r3
 80069b8:	460d      	mov	r5, r1
 80069ba:	e9c2 4500 	strd	r4, r5, [r2]
  }
#endif
  return true;
 80069be:	2301      	movs	r3, #1
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bdb0      	pop	{r4, r5, r7, pc}

080069c8 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	ed87 0b00 	vstr	d0, [r7]
 80069d4:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 80069d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069da:	f7fa f90d 	bl	8000bf8 <__aeabi_d2f>
 80069de:	4603      	mov	r3, r0
 80069e0:	61fb      	str	r3, [r7, #28]
  if (value == valueAsFloat) {
 80069e2:	69f8      	ldr	r0, [r7, #28]
 80069e4:	f7f9 fdb8 	bl	8000558 <__aeabi_f2d>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069f0:	f7fa f872 	bl	8000ad8 <__aeabi_dcmpeq>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d006      	beq.n	8006a08 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x40>
    type_ = VariantType::Float;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	220e      	movs	r2, #14
 80069fe:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e028      	b.n	8006a5a <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    auto extension = resources->allocExtension();
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc fde6 	bl	80035e0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8006a14:	f107 0314 	add.w	r3, r7, #20
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fc27 	bl	800726c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f083 0301 	eor.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x66>
      return false;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e016      	b.n	8006a5c <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x94>
    type_ = VariantType::Double;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	221e      	movs	r2, #30
 8006a32:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fc28 	bl	800728e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fc2b 	bl	80072a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8006a50:	4601      	mov	r1, r0
 8006a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a56:	e9c1 2300 	strd	r2, r3, [r1]
  return true;
 8006a5a:	2301      	movs	r3, #1
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8006a64:	b5b0      	push	{r4, r5, r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8006a70:	68b8      	ldr	r0, [r7, #8]
 8006a72:	f7ff fcb6 	bl	80063e2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	220a      	movs	r2, #10
 8006a80:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e02a      	b.n	8006ae0 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fc fda5 	bl	80035e0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8006a96:	f107 0310 	add.w	r3, r7, #16
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fbe6 	bl	800726c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f083 0301 	eor.w	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e018      	b.n	8006ae2 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	221a      	movs	r2, #26
 8006ab4:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8006ab6:	f107 0310 	add.w	r3, r7, #16
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fbe7 	bl	800728e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8006ac8:	f107 0310 	add.w	r3, r7, #16
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fbea 	bl	80072a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4614      	mov	r4, r2
 8006ada:	460d      	mov	r5, r1
 8006adc:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8006ae0:	2301      	movs	r3, #1
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bdb0      	pop	{r4, r5, r7, pc}

08006aea <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  auto data = getMember(key, resources);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff f860 	bl	8005bc0 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006b00:	6178      	str	r0, [r7, #20]
  if (data)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x22>
    return data;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	e006      	b.n	8006b1a <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x30>
  return addMember(key, resources);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fbd4 	bl	80072be <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8006b16:	4603      	mov	r3, r0
 8006b18:	bf00      	nop
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8006b22:	b5b0      	push	{r4, r5, r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
  if (canConvertNumber<int32_t>(value)) {
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f000 fc1a 	bl	8007368 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIliEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Int32;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e02a      	b.n	8006b9e <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    auto extension = resources->allocExtension();
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fc fd46 	bl	80035e0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fb87 	bl	800726c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f083 0301 	eor.w	r3, r3, #1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e018      	b.n	8006ba0 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Int64;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	221c      	movs	r2, #28
 8006b72:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8006b74:	f107 0310 	add.w	r3, r7, #16
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fb88 	bl	800728e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8006b86:	f107 0310 	add.w	r3, r7, #16
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fb8b 	bl	80072a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	17d9      	asrs	r1, r3, #31
 8006b96:	461c      	mov	r4, r3
 8006b98:	460d      	mov	r5, r1
 8006b9a:	e9c2 4500 	strd	r4, r5, [r2]
  return true;
 8006b9e:	2301      	movs	r3, #1
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bdb0      	pop	{r4, r5, r7, pc}

08006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>:
template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
    return 0;
  }
  static constexpr T highest() {
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
    return T(-1);
 8006bac:	23ff      	movs	r3, #255	@ 0xff
  }
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d830      	bhi.n	8006c2c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x74>
 8006bca:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x18>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006bf3 	.word	0x08006bf3
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006c17 	.word	0x08006c17
        return convertNumber<T>(value_.asFloat);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006be6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bea:	f7ff fab0 	bl	800614e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	e01d      	b.n	8006c2e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7ff fa80 	bl	8006100 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>
 8006c00:	4603      	mov	r3, r0
 8006c02:	e014      	b.n	8006c2e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f7ff fa64 	bl	80060da <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>
 8006c12:	4603      	mov	r3, r0
 8006c14:	e00b      	b.n	8006c2e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8006c20:	eef0 0a67 	vmov.f32	s1, s15
 8006c24:	f7ff faad 	bl	8006182 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	e000      	b.n	8006c2e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return T();
 8006c2c:	2300      	movs	r3, #0
  }
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
    return 0;
 8006c3c:	2300      	movs	r3, #0
  }
 8006c3e:	4618      	mov	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8006c52:	f7ff fff1 	bl	8006c38 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>
 8006c56:	4603      	mov	r3, r0
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c60:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	db0f      	blt.n	8006c8e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8006c6e:	f7ff ff9b 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 8006c72:	4603      	mov	r3, r0
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8006c7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c88:	d801      	bhi.n	8006c8e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8006ca2:	f7ff ffc9 	bl	8006c38 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7f9 fc43 	bl	8000534 <__aeabi_i2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb6:	f7f9 ff2d 	bl	8000b14 <__aeabi_dcmpge>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d010      	beq.n	8006ce2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 8006cc0:	f7ff ff72 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7f9 fc34 	bl	8000534 <__aeabi_i2d>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 8006cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd4:	f7f9 ff14 	bl	8000b00 <__aeabi_dcmple>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>:
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
    return T(T(1) << (sizeof(T) * 8 - 1));
  }
  static constexpr T highest() {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
    return T(~lowest());
 8006cf0:	f000 f805 	bl	8006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	b25b      	sxtb	r3, r3
  }
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>:
  static constexpr T lowest() {
 8006cfe:	b480      	push	{r7}
 8006d00:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8006d02:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  }
 8006d06:	4618      	mov	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v>:
  T convertTo() const {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d830      	bhi.n	8006d84 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x74>
 8006d22:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x18>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d4b 	.word	0x08006d4b
 8006d30:	08006d5d 	.word	0x08006d5d
 8006d34:	08006d6f 	.word	0x08006d6f
        return convertNumber<T>(value_.asFloat);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d42:	f7ff fb02 	bl	800634a <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>
 8006d46:	4603      	mov	r3, r0
 8006d48:	e01d      	b.n	8006d86 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d50:	4610      	mov	r0, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	f7ff fad1 	bl	80062fa <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	e014      	b.n	8006d86 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7ff fab4 	bl	80062d2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	e00b      	b.n	8006d86 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d74:	eeb0 0a47 	vmov.f32	s0, s14
 8006d78:	eef0 0a67 	vmov.f32	s1, s15
 8006d7c:	f7ff faff 	bl	800637e <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>
 8006d80:	4603      	mov	r3, r0
 8006d82:	e000      	b.n	8006d86 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return T();
 8006d84:	2300      	movs	r3, #0
  }
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop

08006d90 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8006d9a:	f7ff ffb0 	bl	8006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006da8:	ed97 7a01 	vldr	s14, [r7, #4]
 8006dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db4:	db0f      	blt.n	8006dd6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8006db6:	f7ff ff99 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8006dc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8006dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd0:	d801      	bhi.n	8006dd6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8006dea:	f7ff ff88 	bl	8006cfe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 8006dee:	4603      	mov	r3, r0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7f9 fb9f 	bl	8000534 <__aeabi_i2d>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfe:	f7f9 fe89 	bl	8000b14 <__aeabi_dcmpge>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 8006e08:	f7ff ff70 	bl	8006cec <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7f9 fb90 	bl	8000534 <__aeabi_i2d>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 8006e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e1c:	f7f9 fe70 	bl	8000b00 <__aeabi_dcmple>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	0000      	movs	r0, r0
	...

08006e38 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v>:
  T convertTo() const {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d83c      	bhi.n	8006ec4 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x8c>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x18>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e91 	.word	0x08006e91
 8006e5c:	08006ea9 	.word	0x08006ea9
        return convertNumber<T>(value_.asFloat);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e66:	eeb0 0a67 	vmov.f32	s0, s15
 8006e6a:	f000 fa88 	bl	800737e <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_>
 8006e6e:	eeb0 7a40 	vmov.f32	s14, s0
 8006e72:	eef0 7a60 	vmov.f32	s15, s1
 8006e76:	e027      	b.n	8006ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asSignedInteger);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	f000 fa9b 	bl	80073bc <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_>
 8006e86:	eeb0 7a40 	vmov.f32	s14, s0
 8006e8a:	eef0 7a60 	vmov.f32	s15, s1
 8006e8e:	e01b      	b.n	8006ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asUnsignedInteger);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006e96:	4610      	mov	r0, r2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f000 faaf 	bl	80073fc <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_>
 8006e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8006ea2:	eef0 7a60 	vmov.f32	s15, s1
 8006ea6:	e00f      	b.n	8006ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asDouble);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	ed93 7b02 	vldr	d7, [r3, #8]
 8006eae:	eeb0 0a47 	vmov.f32	s0, s14
 8006eb2:	eef0 0a67 	vmov.f32	s1, s15
 8006eb6:	f000 fac1 	bl	800743c <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_>
 8006eba:	eeb0 7a40 	vmov.f32	s14, s0
 8006ebe:	eef0 7a60 	vmov.f32	s15, s1
 8006ec2:	e001      	b.n	8006ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return T();
 8006ec4:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8006ed8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0xa0>
  }
 8006ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8006ecc:	eef0 0a67 	vmov.f32	s1, s15
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
	...

08006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
    return T(-1);
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006ee8:	4618      	mov	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d830      	bhi.n	8006f68 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x74>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x18>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f2f 	.word	0x08006f2f
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f53 	.word	0x08006f53
        return convertNumber<T>(value_.asFloat);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f22:	eeb0 0a67 	vmov.f32	s0, s15
 8006f26:	f7ff fb15 	bl	8006554 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	e01d      	b.n	8006f6a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f7ff fae5 	bl	8006506 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	e014      	b.n	8006f6a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f7ff fac9 	bl	80064e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	e00b      	b.n	8006f6a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f58:	eeb0 0a47 	vmov.f32	s0, s14
 8006f5c:	eef0 0a67 	vmov.f32	s1, s15
 8006f60:	f7ff fb10 	bl	8006584 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>
 8006f64:	4603      	mov	r3, r0
 8006f66:	e000      	b.n	8006f6a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return T();
 8006f68:	2300      	movs	r3, #0
  }
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop

08006f74 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>:
  static constexpr T lowest() {
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
    return 0;
 8006f78:	2300      	movs	r3, #0
  }
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8006f8e:	f7ff fff1 	bl	8006f74 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>
 8006f92:	ee07 0a90 	vmov	s15, r0
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa6:	db0d      	blt.n	8006fc4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f000 fa63 	bl	8007474 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8006fae:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8006fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbe:	d801      	bhi.n	8006fc4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8006fd8:	f7ff ffcc 	bl	8006f74 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7f9 fa98 	bl	8000514 <__aeabi_ui2d>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fec:	f7f9 fd92 	bl	8000b14 <__aeabi_dcmpge>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 8006ff6:	f7ff ff73 	bl	8006ee0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7f9 fa89 	bl	8000514 <__aeabi_ui2d>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 8007006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700a:	f7f9 fd79 	bl	8000b00 <__aeabi_dcmple>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_17JsonStringAdapterEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	4638      	mov	r0, r7
 800702c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  return stringEquals(s2, s1);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	463a      	mov	r2, r7
 8007034:	ca07      	ldmia	r2, {r0, r1, r2}
 8007036:	f000 fa2d 	bl	8007494 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIfEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fe0c 	bl	8005c72 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIfEES3_RKT_>
 800705a:	4603      	mov	r3, r0
  }
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIdEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fe08 	bl	8005c8a <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIdEES3_RKT_>
 800707a:	4603      	mov	r3, r0
  }
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_9ArrayDataE>:
  result_type visit(const ArrayData& value) {
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonArrayConst(&value, resources_));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681c      	ldr	r4, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	f107 0308 	add.w	r3, r7, #8
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fc f8f4 	bl	800328a <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	4619      	mov	r1, r3
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7fe fe42 	bl	8005d32 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_14JsonArrayConstEEES3_RKT_>
 80070ae:	4603      	mov	r3, r0
  }
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd90      	pop	{r4, r7, pc}

080070b8 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_10ObjectDataE>:
  result_type visit(const ObjectData& value) {
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonObjectConst(&value, resources_));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681c      	ldr	r4, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	f107 0308 	add.w	r3, r7, #8
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fc f8ed 	bl	80032b0 <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>
 80070d6:	f107 0308 	add.w	r3, r7, #8
 80070da:	4619      	mov	r1, r3
 80070dc:	4620      	mov	r0, r4
 80070de:	f7fe fde0 	bl	8005ca2 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15JsonObjectConstEEES3_RKT_>
 80070e2:	4603      	mov	r3, r0
  }
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}

080070ec <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fddc 	bl	8005cba <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_10JsonStringEEES3_RKT_>
 8007102:	4603      	mov	r3, r0
  }
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_15SerializedValueIPKcEEEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fdd8 	bl	8005cd2 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15SerializedValueIPKcEEEES3_RKT_>
 8007122:	4603      	mov	r3, r0
  }
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fdd4 	bl	8005cea <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIxEES3_RKT_>
 8007142:	4603      	mov	r3, r0
  }
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fdd0 	bl	8005d02 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIyEES3_RKT_>
 8007162:	4603      	mov	r3, r0
  }
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIbEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fdcc 	bl	8005d1a <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIbEES3_RKT_>
 8007182:	4603      	mov	r3, r0
  }
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIDnEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc f8b1 	bl	8003304 <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>
 80071a2:	4603      	mov	r3, r0
  }
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b089      	sub	sp, #36	@ 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80071ba:	607a      	str	r2, [r7, #4]
  size_t size1 = s1.size();
 80071bc:	f107 0308 	add.w	r3, r7, #8
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fb fe02 	bl	8002dca <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 80071c6:	61b8      	str	r0, [r7, #24]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f855 	bl	8000280 <strlen>
 80071d6:	4603      	mov	r3, r0
 80071d8:	e001      	b.n	80071de <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x32>
 80071da:	2300      	movs	r3, #0
 80071dc:	bf00      	nop
  size_t size2 = s2.size();
 80071de:	617b      	str	r3, [r7, #20]
  if (size1 != size2)
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x40>
    return false;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e021      	b.n	8007230 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x84>
  for (size_t i = 0; i < size1; i++) {
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e019      	b.n	8007226 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7a>
    if (s1[i] != s2[i])
 80071f2:	f107 0308 	add.w	r3, r7, #8
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fa f85a 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 80071fe:	4603      	mov	r3, r0
 8007200:	461c      	mov	r4, r3
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	69f9      	ldr	r1, [r7, #28]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa f843 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 800720c:	4603      	mov	r3, r0
 800720e:	429c      	cmp	r4, r3
 8007210:	bf14      	ite	ne
 8007212:	2301      	movne	r3, #1
 8007214:	2300      	moveq	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x74>
      return false;
 800721c:	2300      	movs	r3, #0
 800721e:	e007      	b.n	8007230 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x84>
  for (size_t i = 0; i < size1; i++) {
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	3301      	adds	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d3e1      	bcc.n	80071f2 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x46>
  return true;
 800722e:	2301      	movs	r3, #1
}
 8007230:	4618      	mov	r0, r3
 8007232:	3724      	adds	r7, #36	@ 0x24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd90      	pop	{r4, r7, pc}

08007238 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f96a 	bl	800751a <_ZN11ArduinoJson8V721HB226detail10alias_castIfmEET_T0_>
 8007246:	eef0 7a40 	vmov.f32	s15, s0
  }
 800724a:	eeb0 0a67 	vmov.f32	s0, s15
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlaEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  return true;
 800725e:	2301      	movs	r3, #1
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
  }
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
    return id_;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	889b      	ldrh	r3, [r3, #4]
  }
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
    return ptr_;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
  }
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08a      	sub	sp, #40	@ 0x28
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 80072ca:	f107 0318 	add.w	r3, r7, #24
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fc f912 	bl	80034fa <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 80072d6:	f107 0318 	add.w	r3, r7, #24
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc ff3a 	bl	8004154 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f083 0301 	eor.w	r3, r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80072ec:	2300      	movs	r3, #0
 80072ee:	e037      	b.n	8007360 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80072f0:	f107 0310 	add.w	r3, r7, #16
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fc f8ff 	bl	80034fa <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80072fc:	f107 0310 	add.w	r3, r7, #16
 8007300:	4618      	mov	r0, r3
 8007302:	f7fc ff27 	bl	8004154 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8007306:	4603      	mov	r3, r0
 8007308:	f083 0301 	eor.w	r3, r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8007312:	2300      	movs	r3, #0
 8007314:	e024      	b.n	8007360 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8007316:	f107 0318 	add.w	r3, r7, #24
 800731a:	4618      	mov	r0, r3
 800731c:	f7fc ff43 	bl	80041a6 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8007320:	4603      	mov	r3, r0
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f7fd fb2e 	bl	8004988 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>
 800732c:	4603      	mov	r3, r0
 800732e:	f083 0301 	eor.w	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8007338:	2300      	movs	r3, #0
 800733a:	e011      	b.n	8007360 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f107 0218 	add.w	r2, r7, #24
 800734c:	ca06      	ldmia	r2, {r1, r2}
 800734e:	f7fc f84d 	bl	80033ec <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007352:	f107 0310 	add.w	r3, r7, #16
 8007356:	4618      	mov	r0, r3
 8007358:	f7fc ff0d 	bl	8004176 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800735c:	4603      	mov	r3, r0
 800735e:	bf00      	nop
}
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIliEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  return true;
 8007370:	2301      	movs	r3, #1
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_>:
TOut convertNumber(TIn value) {
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8007388:	ed97 0a01 	vldr	s0, [r7, #4]
 800738c:	f000 f8d5 	bl	800753a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdfEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_+0x24>
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7f9 f8de 	bl	8000558 <__aeabi_f2d>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e003      	b.n	80073aa <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_+0x2c>
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80073ae:	eeb0 0a47 	vmov.f32	s0, s14
 80073b2:	eef0 0a67 	vmov.f32	s1, s15
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_>:
TOut convertNumber(TIn value) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80073c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ca:	f000 f8c2 	bl	8007552 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_+0x26>
 80073d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d8:	f7f9 f8e8 	bl	80005ac <__aeabi_l2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e003      	b.n	80073ea <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_+0x2e>
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80073ee:	eeb0 0a47 	vmov.f32	s0, s14
 80073f2:	eef0 0a67 	vmov.f32	s1, s15
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_>:
TOut convertNumber(TIn value) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8007406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800740a:	f000 f8ae 	bl	800756a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_+0x26>
 8007414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007418:	f7f9 f8c0 	bl	800059c <__aeabi_ul2d>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	e003      	b.n	800742a <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_+0x2e>
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	ec43 2b17 	vmov	d7, r2, r3
}
 800742e:	eeb0 0a47 	vmov.f32	s0, s14
 8007432:	eef0 0a67 	vmov.f32	s1, s15
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_>:
TOut convertNumber(TIn value) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8007446:	ed97 0b00 	vldr	d0, [r7]
 800744a:	f000 f89a 	bl	8007582 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIddEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_+0x1e>
 8007454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007458:	e003      	b.n	8007462 <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_+0x26>
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	ec43 2b17 	vmov	d7, r2, r3
}
 8007466:	eeb0 0a47 	vmov.f32	s0, s14
 800746a:	eef0 0a67 	vmov.f32	s1, s15
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 800747c:	4804      	ldr	r0, [pc, #16]	@ (8007490 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 800747e:	f7ff fedb 	bl	8007238 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8007482:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007486:	eeb0 0a67 	vmov.f32	s0, s15
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	4f7fffff 	.word	0x4f7fffff

08007494 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b089      	sub	sp, #36	@ 0x24
 8007498:	af00      	add	r7, sp, #0
 800749a:	1d3c      	adds	r4, r7, #4
 800749c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074a0:	603b      	str	r3, [r7, #0]
  size_t size1 = s1.size();
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fb fc90 	bl	8002dca <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 80074aa:	61b8      	str	r0, [r7, #24]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f8 fee3 	bl	8000280 <strlen>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e001      	b.n	80074c2 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2e>
 80074be:	2300      	movs	r3, #0
 80074c0:	bf00      	nop
  size_t size2 = s2.size();
 80074c2:	617b      	str	r3, [r7, #20]
  if (size1 != size2)
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d001      	beq.n	80074d0 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x3c>
    return false;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e020      	b.n	8007512 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7e>
  for (size_t i = 0; i < size1; i++) {
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	e018      	b.n	8007508 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x74>
    if (s1[i] != s2[i])
 80074d6:	1d3b      	adds	r3, r7, #4
 80074d8:	69f9      	ldr	r1, [r7, #28]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f9 fee9 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461c      	mov	r4, r3
 80074e4:	463b      	mov	r3, r7
 80074e6:	69f9      	ldr	r1, [r7, #28]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7f9 fed2 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 80074ee:	4603      	mov	r3, r0
 80074f0:	429c      	cmp	r4, r3
 80074f2:	bf14      	ite	ne
 80074f4:	2301      	movne	r3, #1
 80074f6:	2300      	moveq	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x6e>
      return false;
 80074fe:	2300      	movs	r3, #0
 8007500:	e007      	b.n	8007512 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7e>
  for (size_t i = 0; i < size1; i++) {
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d3e2      	bcc.n	80074d6 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x42>
  return true;
 8007510:	2301      	movs	r3, #1
}
 8007512:	4618      	mov	r0, r3
 8007514:	3724      	adds	r7, #36	@ 0x24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd90      	pop	{r4, r7, pc}

0800751a <_ZN11ArduinoJson8V721HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	ee07 3a90 	vmov	s15, r3
}
 800752c:	eeb0 0a67 	vmov.f32	s0, s15
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdfEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 8007544:	2301      	movs	r3, #1
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 800755c:	2301      	movs	r3, #1
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8007574:	2301      	movs	r3, #1
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIddEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	ed87 0b00 	vstr	d0, [r7]
  return true;
 800758c:	2301      	movs	r3, #1
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <_ZN9UserModelC1Ev>:
 *      Author: Admin
 */

#include "Model/Process/UserModel.h"

UserModel::UserModel() :
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
		BaseModel() {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fa fb2c 	bl	8001c04 <_ZN9BaseModelC1Ev>
 80075ac:	4a03      	ldr	r2, [pc, #12]	@ (80075bc <_ZN9UserModelC1Ev+0x20>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]

}
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08016b7c 	.word	0x08016b7c

080075c0 <_ZN9UserModel5setIdEPKc>:

void UserModel::setId(const char *id) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	this->data[ID] = id;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	1d19      	adds	r1, r3, #4
 80075ce:	f107 0308 	add.w	r3, r7, #8
 80075d2:	4a07      	ldr	r2, [pc, #28]	@ (80075f0 <_ZN9UserModel5setIdEPKc+0x30>)
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fc ffce 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fc ffd7 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	0801692c 	.word	0x0801692c

080075f4 <_ZN9UserModel7setNameEPKc>:
void UserModel::setName(const char *name) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	this->data[NAME] = name;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	1d19      	adds	r1, r3, #4
 8007602:	f107 0308 	add.w	r3, r7, #8
 8007606:	4a07      	ldr	r2, [pc, #28]	@ (8007624 <_ZN9UserModel7setNameEPKc+0x30>)
 8007608:	4618      	mov	r0, r3
 800760a:	f7fc ffb4 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f7fc ffbd 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	08016930 	.word	0x08016930

08007628 <_ZN9UserModel13setExamStatusEPKc>:
void UserModel::setExamStatus(const char *examStatus) {
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	this->data[EXAM_STATUS] = examStatus;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	1d19      	adds	r1, r3, #4
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4a07      	ldr	r2, [pc, #28]	@ (8007658 <_ZN9UserModel13setExamStatusEPKc+0x30>)
 800763c:	4618      	mov	r0, r3
 800763e:	f7fc ff9a 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f7fc ffa3 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	08016938 	.word	0x08016938

0800765c <_ZN9UserModel9setMobileEPKc>:
void UserModel::setMobile(const char *mobile) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
	this->data[MOBILE] = mobile;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	1d19      	adds	r1, r3, #4
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4a07      	ldr	r2, [pc, #28]	@ (800768c <_ZN9UserModel9setMobileEPKc+0x30>)
 8007670:	4618      	mov	r0, r3
 8007672:	f7fc ff80 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc ff89 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08016944 	.word	0x08016944

08007690 <_ZN9UserModel9setExamIdEPKc>:
void UserModel::setExamId(const char *examId) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	this->data[EXAM_ID] = examId;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1d19      	adds	r1, r3, #4
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4a07      	ldr	r2, [pc, #28]	@ (80076c0 <_ZN9UserModel9setExamIdEPKc+0x30>)
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fc ff66 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80076aa:	f107 0308 	add.w	r3, r7, #8
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fc ff6f 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	0801694c 	.word	0x0801694c

080076c4 <_ZN9UserModel11setModeNameEPKc>:
void UserModel::setModeName(const char *modeName) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	this->data[MODE_NAME] = modeName;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	1d19      	adds	r1, r3, #4
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4a07      	ldr	r2, [pc, #28]	@ (80076f4 <_ZN9UserModel11setModeNameEPKc+0x30>)
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc ff4c 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fc ff55 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	08016954 	.word	0x08016954

080076f8 <_ZN9UserModel7setRankEPKc>:
void UserModel::setRank(const char *rank) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	this->data[RANK] = rank;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	4a07      	ldr	r2, [pc, #28]	@ (8007728 <_ZN9UserModel7setRankEPKc+0x30>)
 800770c:	4618      	mov	r0, r3
 800770e:	f7fc ff32 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f7fc ff3b 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	08016960 	.word	0x08016960

0800772c <_ZN9UserModel14setDateOfBirthEPKc>:
void UserModel::setDateOfBirth(const char *dateOfBirth) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	this->data[DATE_OF_BIRTH] = dateOfBirth;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1d19      	adds	r1, r3, #4
 800773a:	f107 0308 	add.w	r3, r7, #8
 800773e:	4a07      	ldr	r2, [pc, #28]	@ (800775c <_ZN9UserModel14setDateOfBirthEPKc+0x30>)
 8007740:	4618      	mov	r0, r3
 8007742:	f7fc ff18 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007746:	f107 0308 	add.w	r3, r7, #8
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f7fc ff21 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	08016968 	.word	0x08016968

08007760 <_ZN9UserModel16setPlaceOfOriginEPKc>:
void UserModel::setPlaceOfOrigin(const char *placeOfOrigin) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	this->data[PLACE_OF_ORIGIN] = placeOfOrigin;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1d19      	adds	r1, r3, #4
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	4a07      	ldr	r2, [pc, #28]	@ (8007790 <_ZN9UserModel16setPlaceOfOriginEPKc+0x30>)
 8007774:	4618      	mov	r0, r3
 8007776:	f7fc fefe 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fc ff07 	bl	8004594 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	08016974 	.word	0x08016974

08007794 <_ZN9UserModel6setSexEa>:
void UserModel::setSex(int8_t sex) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
	this->data[SEX] = sex;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1d19      	adds	r1, r3, #4
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	4a07      	ldr	r2, [pc, #28]	@ (80077c8 <_ZN9UserModel6setSexEa+0x34>)
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fc fee3 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80077b0:	1cfa      	adds	r2, r7, #3
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fc fef9 	bl	80045b0 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08016984 	.word	0x08016984

080077cc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>:
}
int8_t UserModel::getSex() const {
	return this->data[SEX].as<int8_t>();
}

void UserModel::updateModel(const JsonDocument *json) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b0a2      	sub	sp, #136	@ 0x88
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
	if (json == nullptr) {
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80eb 	beq.w	80079b4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1e8>
		return;
	}
	const JsonDocument &jsonData = *json;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	this->setId(UserModel::getFormJsonVariant<const char*>(jsonData[ID], ""));
 80077e4:	f107 030c 	add.w	r3, r7, #12
 80077e8:	4a74      	ldr	r2, [pc, #464]	@ (80079bc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f0>)
 80077ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fc ff16 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80077f4:	4b72      	ldr	r3, [pc, #456]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	f107 0214 	add.w	r2, r7, #20
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fc ff28 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8007808:	4603      	mov	r3, r0
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fed7 	bl	80075c0 <_ZN9UserModel5setIdEPKc>
	this->setName(
			UserModel::getFormJsonVariant<const char*>(jsonData[NAME], ""));
 8007812:	f107 0318 	add.w	r3, r7, #24
 8007816:	4a6b      	ldr	r2, [pc, #428]	@ (80079c4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f8>)
 8007818:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800781c:	4618      	mov	r0, r3
 800781e:	f7fc feff 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8007822:	4b67      	ldr	r3, [pc, #412]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 8007824:	623b      	str	r3, [r7, #32]
	this->setName(
 8007826:	f107 0220 	add.w	r2, r7, #32
 800782a:	f107 0318 	add.w	r3, r7, #24
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fc ff11 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8007836:	4603      	mov	r3, r0
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff feda 	bl	80075f4 <_ZN9UserModel7setNameEPKc>
	this->setExamId(
			UserModel::getFormJsonVariant<const char*>(jsonData[EXAM_ID], ""));
 8007840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007844:	4a60      	ldr	r2, [pc, #384]	@ (80079c8 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1fc>)
 8007846:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800784a:	4618      	mov	r0, r3
 800784c:	f7fc fee8 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8007850:	4b5b      	ldr	r3, [pc, #364]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 8007852:	62fb      	str	r3, [r7, #44]	@ 0x2c
	this->setExamId(
 8007854:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc fefa 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8007864:	4603      	mov	r3, r0
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff11 	bl	8007690 <_ZN9UserModel9setExamIdEPKc>
	this->setExamStatus(
			UserModel::getFormJsonVariant<const char*>(jsonData[EXAM_STATUS],
 800786e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007872:	4a56      	ldr	r2, [pc, #344]	@ (80079cc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x200>)
 8007874:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007878:	4618      	mov	r0, r3
 800787a:	f7fc fed1 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 800787e:	4b50      	ldr	r3, [pc, #320]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 8007880:	63bb      	str	r3, [r7, #56]	@ 0x38
	this->setExamStatus(
 8007882:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8007886:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800788a:	4611      	mov	r1, r2
 800788c:	4618      	mov	r0, r3
 800788e:	f7fc fee3 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8007892:	4603      	mov	r3, r0
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fec6 	bl	8007628 <_ZN9UserModel13setExamStatusEPKc>
	this->setModeName(
			UserModel::getFormJsonVariant<const char*>(jsonData[MODE_NAME],
 800789c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80078a0:	4a4b      	ldr	r2, [pc, #300]	@ (80079d0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x204>)
 80078a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fc feba 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 80078ac:	4b44      	ldr	r3, [pc, #272]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 80078ae:	647b      	str	r3, [r7, #68]	@ 0x44
	this->setModeName(
 80078b0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80078b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fc fecc 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fefd 	bl	80076c4 <_ZN9UserModel11setModeNameEPKc>
	this->setRank(
			UserModel::getFormJsonVariant<const char*>(jsonData[RANK], ""));
 80078ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80078ce:	4a41      	ldr	r2, [pc, #260]	@ (80079d4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x208>)
 80078d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fc fea3 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80078da:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 80078dc:	653b      	str	r3, [r7, #80]	@ 0x50
	this->setRank(
 80078de:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80078e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fc feb5 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 80078ee:	4603      	mov	r3, r0
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff ff00 	bl	80076f8 <_ZN9UserModel7setRankEPKc>
	this->setMobile(
			UserModel::getFormJsonVariant<const char*>(jsonData[MOBILE], ""));
 80078f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80078fc:	4a36      	ldr	r2, [pc, #216]	@ (80079d8 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x20c>)
 80078fe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007902:	4618      	mov	r0, r3
 8007904:	f7fc fe8c 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8007908:	4b2d      	ldr	r3, [pc, #180]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800790a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	this->setMobile(
 800790c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007910:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f7fc fe9e 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800791c:	4603      	mov	r3, r0
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fe9b 	bl	800765c <_ZN9UserModel9setMobileEPKc>
	this->setPlaceOfOrigin(
			UserModel::getFormJsonVariant<const char*>(
					jsonData[PLACE_OF_ORIGIN], ""));
 8007926:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800792a:	4a2c      	ldr	r2, [pc, #176]	@ (80079dc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x210>)
 800792c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc fe75 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8007936:	4b22      	ldr	r3, [pc, #136]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 8007938:	66bb      	str	r3, [r7, #104]	@ 0x68
	this->setPlaceOfOrigin(
 800793a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800793e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f7fc fe87 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800794a:	4603      	mov	r3, r0
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff06 	bl	8007760 <_ZN9UserModel16setPlaceOfOriginEPKc>
	this->setDateOfBirth(
			UserModel::getFormJsonVariant<const char*>(jsonData[DATE_OF_BIRTH],
 8007954:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007958:	4a21      	ldr	r2, [pc, #132]	@ (80079e0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x214>)
 800795a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800795e:	4618      	mov	r0, r3
 8007960:	f7fc fe5e 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 8007964:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 8007966:	677b      	str	r3, [r7, #116]	@ 0x74
	this->setDateOfBirth(
 8007968:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800796c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f7fc fe70 	bl	8004658 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8007978:	4603      	mov	r3, r0
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fed5 	bl	800772c <_ZN9UserModel14setDateOfBirthEPKc>
	this->setSex(UserModel::getFormJsonVariant<int8_t>(jsonData[SEX], 0));
 8007982:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007986:	4a17      	ldr	r2, [pc, #92]	@ (80079e4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x218>)
 8007988:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800798c:	4618      	mov	r0, r3
 800798e:	f7fc fe47 	bl	8004620 <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8007992:	2300      	movs	r3, #0
 8007994:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8007998:	f107 0283 	add.w	r2, r7, #131	@ 0x83
 800799c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fc feca 	bl	800473c <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fef1 	bl	8007794 <_ZN9UserModel6setSexEa>
 80079b2:	e000      	b.n	80079b6 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1ea>
		return;
 80079b4:	bf00      	nop

}
 80079b6:	3788      	adds	r7, #136	@ 0x88
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	0801692c 	.word	0x0801692c
 80079c0:	08016988 	.word	0x08016988
 80079c4:	08016930 	.word	0x08016930
 80079c8:	0801694c 	.word	0x0801694c
 80079cc:	08016938 	.word	0x08016938
 80079d0:	08016954 	.word	0x08016954
 80079d4:	08016960 	.word	0x08016960
 80079d8:	08016944 	.word	0x08016944
 80079dc:	08016974 	.word	0x08016974
 80079e0:	08016968 	.word	0x08016968
 80079e4:	08016984 	.word	0x08016984

080079e8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>:
 *      Author: Admin
 */

#include "MyRTOSTask.h"

MyRTOSTask::MyRTOSTask(const char *name, void (*runFunction)(void*),
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
		void *params, uint16_t size, UBaseType_t priority) :
		taskName(name), runFunction(runFunction), params(params), stackSize(
				size), priority(priority) {
 80079f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a34 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm+0x4c>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	601a      	str	r2, [r3, #0]
		taskName(name), runFunction(runFunction), params(params), stackSize(
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	609a      	str	r2, [r3, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	611a      	str	r2, [r3, #16]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8b3a      	ldrh	r2, [r7, #24]
 8007a12:	829a      	strh	r2, [r3, #20]
				size), priority(priority) {
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	619a      	str	r2, [r3, #24]
	this->taskHandle = nullptr;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]
	this->stopTask = false;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	771a      	strb	r2, [r3, #28]
}
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	08016b90 	.word	0x08016b90

08007a38 <_ZN10MyRTOSTaskD1Ev>:
MyRTOSTask::~MyRTOSTask() {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	4a0b      	ldr	r2, [pc, #44]	@ (8007a70 <_ZN10MyRTOSTaskD1Ev+0x38>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	if (taskHandle != nullptr) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <_ZN10MyRTOSTaskD1Ev+0x26>
		vTaskDelete(taskHandle);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f009 fbaa 	bl	80111ac <vTaskDelete>
		taskHandle = nullptr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
	}
	runFunction = nullptr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	60da      	str	r2, [r3, #12]
}
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	08016b90 	.word	0x08016b90

08007a74 <_ZN10MyRTOSTaskD0Ev>:
MyRTOSTask::~MyRTOSTask() {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
}
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ffdb 	bl	8007a38 <_ZN10MyRTOSTaskD1Ev>
 8007a82:	2120      	movs	r1, #32
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f00b ff2f 	bl	80138e8 <_ZdlPvj>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <_ZN10MyRTOSTask5delayEm>:

void MyRTOSTask::delay(TickType_t timeMs) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	vTaskDelay(pdMS_TO_TICKS(timeMs));
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
 8007aa8:	4a05      	ldr	r2, [pc, #20]	@ (8007ac0 <_ZN10MyRTOSTask5delayEm+0x2c>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f009 fbef 	bl	8011294 <vTaskDelay>
}
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	10624dd3 	.word	0x10624dd3

08007ac4 <_ZN10MyRTOSTask3runEv>:

void MyRTOSTask::run() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <_ZN10MyRTOSTask3runEv+0x1c>
		this->runFunction(this->params);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6912      	ldr	r2, [r2, #16]
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <_ZN10MyRTOSTask12taskFunctionEPv>:

bool MyRTOSTask::isRunning() {
	return taskHandle != nullptr;
}

void MyRTOSTask::taskFunction(void *params) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	MyRTOSTask *task = static_cast<MyRTOSTask*>(params);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60fb      	str	r3, [r7, #12]
	task->run();
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3
	vTaskDelete(NULL);
 8007afe:	2000      	movs	r0, #0
 8007b00:	f009 fb54 	bl	80111ac <vTaskDelete>
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <_ZN10MyRTOSTask5startEv>:

bool MyRTOSTask::start() {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
	stopTask = false;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	771a      	strb	r2, [r3, #28]
	BaseType_t result = xTaskCreate(taskFunction, taskName, stackSize, this,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6899      	ldr	r1, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8a98      	ldrh	r0, [r3, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	3204      	adds	r2, #4
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4602      	mov	r2, r0
 8007b32:	4807      	ldr	r0, [pc, #28]	@ (8007b50 <_ZN10MyRTOSTask5startEv+0x44>)
 8007b34:	f009 f9dc 	bl	8010ef0 <xTaskCreate>
 8007b38:	60f8      	str	r0, [r7, #12]
			priority, &taskHandle);
	return result == pdPASS;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	08007ae9 	.word	0x08007ae9

08007b54 <_ZN10MyRTOSTask4stopEv>:

void MyRTOSTask::stop() {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	stopTask = true;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	771a      	strb	r2, [r3, #28]
	if (taskHandle != nullptr) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <_ZN10MyRTOSTask4stopEv+0x26>
		vTaskDelete(taskHandle);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f009 fb1c 	bl	80111ac <vTaskDelete>
		taskHandle = nullptr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	605a      	str	r2, [r3, #4]
	}
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <_ZN11ArduinoJson8V721HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  }
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE>:
  void clear(Allocator* allocator) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
    while (strings_) {
 8007ba2:	e00a      	b.n	8007bba <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7fb f890 	bl	8002cda <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
  }
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_ZN11ArduinoJson8V721HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f103 0208 	add.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7ff ffd9 	bl	8007b98 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 020c 	add.w	r2, r3, #12
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f000 fa43 	bl	800807e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fa33 	bl	8008068 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3308      	adds	r3, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ffbb 	bl	8007b82 <_ZN11ArduinoJson8V721HB226detail10StringPoolD1Ev>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <_ZN11ArduinoJson8V721HB2212JsonDocumentD1Ev>:
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff ffd3 	bl	8007bcc <_ZN11ArduinoJson8V721HB226detail15ResourceManagerD1Ev>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <_ZN11ArduinoJson8V721HB2212JsonDocument7getDataEv>:
  detail::VariantData* getData() {
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
    return &data_;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3338      	adds	r3, #56	@ 0x38
  }
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007c4c:	f001 fe2c 	bl	80098a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007c50:	f000 f820 	bl	8007c94 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007c54:	f000 f894 	bl	8007d80 <_ZL12MX_GPIO_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8007c58:	f007 ffea 	bl	800fc30 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8007c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c88 <main+0x40>)
 8007c5e:	2100      	movs	r1, #0
 8007c60:	480a      	ldr	r0, [pc, #40]	@ (8007c8c <main+0x44>)
 8007c62:	f008 f82f 	bl	800fcc4 <osThreadNew>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4a09      	ldr	r2, [pc, #36]	@ (8007c90 <main+0x48>)
 8007c6a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
	SensorReader::getInstance().start();
 8007c6c:	f001 fc4e 	bl	800950c <_ZN12SensorReader11getInstanceEv>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	6813      	ldr	r3, [r2, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8007c7e:	f007 fffb 	bl	800fc78 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <main+0x3a>
 8007c86:	bf00      	nop
 8007c88:	08016ba4 	.word	0x08016ba4
 8007c8c:	08007ec5 	.word	0x08007ec5
 8007c90:	200002f0 	.word	0x200002f0

08007c94 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b094      	sub	sp, #80	@ 0x50
 8007c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007c9a:	f107 0320 	add.w	r3, r7, #32
 8007c9e:	2230      	movs	r2, #48	@ 0x30
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f00c fdc1 	bl	801482a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007ca8:	f107 030c 	add.w	r3, r7, #12
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8007d78 <_Z18SystemClock_Configv+0xe4>)
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <_Z18SystemClock_Configv+0xe4>)
 8007cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007d78 <_Z18SystemClock_Configv+0xe4>)
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	4b28      	ldr	r3, [pc, #160]	@ (8007d7c <_Z18SystemClock_Configv+0xe8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007ce0:	4a26      	ldr	r2, [pc, #152]	@ (8007d7c <_Z18SystemClock_Configv+0xe8>)
 8007ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	4b24      	ldr	r3, [pc, #144]	@ (8007d7c <_Z18SystemClock_Configv+0xe8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007cf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007cfc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8007d08:	2319      	movs	r3, #25
 8007d0a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8007d0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007d12:	2304      	movs	r3, #4
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8007d16:	2307      	movs	r3, #7
 8007d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007d1a:	f107 0320 	add.w	r3, r7, #32
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f003 fb44 	bl	800b3ac <HAL_RCC_OscConfig>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 8007d34:	f000 f992 	bl	800805c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007d38:	230f      	movs	r3, #15
 8007d3a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8007d4e:	f107 030c 	add.w	r3, r7, #12
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f003 fda1 	bl	800b89c <HAL_RCC_ClockConfig>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf14      	ite	ne
 8007d60:	2301      	movne	r3, #1
 8007d62:	2300      	moveq	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 8007d6a:	f000 f977 	bl	800805c <Error_Handler>
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3750      	adds	r7, #80	@ 0x50
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	40007000 	.word	0x40007000

08007d80 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007d86:	f107 0314 	add.w	r3, r7, #20
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	605a      	str	r2, [r3, #4]
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	4b46      	ldr	r3, [pc, #280]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9e:	4a45      	ldr	r2, [pc, #276]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007da0:	f043 0304 	orr.w	r3, r3, #4
 8007da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007da6:	4b43      	ldr	r3, [pc, #268]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	4b3f      	ldr	r3, [pc, #252]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	4a3e      	ldr	r2, [pc, #248]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	4b38      	ldr	r3, [pc, #224]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd6:	4a37      	ldr	r2, [pc, #220]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dde:	4b35      	ldr	r3, [pc, #212]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	60bb      	str	r3, [r7, #8]
 8007de8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	4b31      	ldr	r3, [pc, #196]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	4a30      	ldr	r2, [pc, #192]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007df4:	f043 0302 	orr.w	r3, r3, #2
 8007df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8007eb4 <_ZL12MX_GPIO_Initv+0x134>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007e06:	2200      	movs	r2, #0
 8007e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007e0c:	482a      	ldr	r0, [pc, #168]	@ (8007eb8 <_ZL12MX_GPIO_Initv+0x138>)
 8007e0e:	f002 f82f 	bl	8009e70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e20:	2300      	movs	r3, #0
 8007e22:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4823      	ldr	r0, [pc, #140]	@ (8007eb8 <_ZL12MX_GPIO_Initv+0x138>)
 8007e2c:	f001 fe84 	bl	8009b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8007e30:	23fe      	movs	r3, #254	@ 0xfe
 8007e32:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3c:	f107 0314 	add.w	r3, r7, #20
 8007e40:	4619      	mov	r1, r3
 8007e42:	481e      	ldr	r0, [pc, #120]	@ (8007ebc <_ZL12MX_GPIO_Initv+0x13c>)
 8007e44:	f001 fe78 	bl	8009b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8007e48:	2307      	movs	r3, #7
 8007e4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007e50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e52:	2301      	movs	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e56:	f107 0314 	add.w	r3, r7, #20
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4818      	ldr	r0, [pc, #96]	@ (8007ec0 <_ZL12MX_GPIO_Initv+0x140>)
 8007e5e:	f001 fe6b 	bl	8009b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8007e62:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 8007e66:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	4619      	mov	r1, r3
 8007e76:	4812      	ldr	r0, [pc, #72]	@ (8007ec0 <_ZL12MX_GPIO_Initv+0x140>)
 8007e78:	f001 fe5e 	bl	8009b38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2105      	movs	r1, #5
 8007e80:	2006      	movs	r0, #6
 8007e82:	f001 fe2f 	bl	8009ae4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007e86:	2006      	movs	r0, #6
 8007e88:	f001 fe48 	bl	8009b1c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2105      	movs	r1, #5
 8007e90:	2007      	movs	r0, #7
 8007e92:	f001 fe27 	bl	8009ae4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007e96:	2007      	movs	r0, #7
 8007e98:	f001 fe40 	bl	8009b1c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2105      	movs	r1, #5
 8007ea0:	2008      	movs	r0, #8
 8007ea2:	f001 fe1f 	bl	8009ae4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007ea6:	2008      	movs	r0, #8
 8007ea8:	f001 fe38 	bl	8009b1c <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8007eac:	bf00      	nop
 8007eae:	3728      	adds	r7, #40	@ 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	40020800 	.word	0x40020800
 8007ebc:	40020000 	.word	0x40020000
 8007ec0:	40020400 	.word	0x40020400

08007ec4 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8007ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	b0b5      	sub	sp, #212	@ 0xd4
 8007eca:	af08      	add	r7, sp, #32
 8007ecc:	60f8      	str	r0, [r7, #12]
	/* init code for USB_DEVICE */
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8007ece:	f00a fffb 	bl	8012ec8 <MX_USB_DEVICE_Init>
	uint8_t data[100];
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	SensorModel &sensorModel =
			*ModelManagement::getInstance().getSensorModel();
 8007ed2:	f7f9 fa8b 	bl	80013ec <_ZN15ModelManagement11getInstanceEv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7f9 fabd 	bl	8001458 <_ZN15ModelManagement14getSensorModelEv>
 8007ede:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	EncodeModel &encodeModel = sensorModel.getEncodeModel();
 8007ee2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007ee6:	f7f9 fb0b 	bl	8001500 <_ZNK11SensorModel14getEncodeModelEv>
 8007eea:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	TimeTicker timer(5000);
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f9 f954 	bl	80011a4 <_ZN10TimeTickerC1Em>
	doc["test"] = 0;
 8007efc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8007f00:	4a4a      	ldr	r2, [pc, #296]	@ (800802c <_Z16StartDefaultTaskPv+0x168>)
 8007f02:	494b      	ldr	r1, [pc, #300]	@ (8008030 <_Z16StartDefaultTaskPv+0x16c>)
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc fb36 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f10:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8007f14:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fb72 	bl	8004604 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>
	for (;;) {
		doc["test"] = 1;
 8007f20:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8007f24:	4a41      	ldr	r2, [pc, #260]	@ (800802c <_Z16StartDefaultTaskPv+0x168>)
 8007f26:	4942      	ldr	r1, [pc, #264]	@ (8008030 <_Z16StartDefaultTaskPv+0x16c>)
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fc fb24 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f34:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8007f38:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fc fb60 	bl	8004604 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>
		int t = doc["test"].as<int>();
 8007f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007f48:	4a38      	ldr	r2, [pc, #224]	@ (800802c <_Z16StartDefaultTaskPv+0x168>)
 8007f4a:	4939      	ldr	r1, [pc, #228]	@ (8008030 <_Z16StartDefaultTaskPv+0x16c>)
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fc fb12 	bl	8004576 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8007f52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f8c9 	bl	80080ee <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2asIiEET_v>
 8007f5c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		sprintf((char*) data,
				"%d, Speed: %.3f, Distance: %.3f, RPM: %d , NT: %d, NP: %d, CM: %d\n\r", t,
				encodeModel.getSpeed(), encodeModel.getDistance(),
 8007f60:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8007f64:	f7f9 f9da 	bl	800131c <_ZNK11EncodeModel8getSpeedEv>
 8007f68:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data,
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7f8 faf3 	bl	8000558 <__aeabi_f2d>
 8007f72:	4604      	mov	r4, r0
 8007f74:	460d      	mov	r5, r1
				encodeModel.getSpeed(), encodeModel.getDistance(),
 8007f76:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8007f7a:	f7f9 f9c0 	bl	80012fe <_ZNK11EncodeModel11getDistanceEv>
 8007f7e:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data,
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f8 fae8 	bl	8000558 <__aeabi_f2d>
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4689      	mov	r9, r1
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 8007f8c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007f90:	f7f9 fb3f 	bl	8001612 <_ZNK11SensorModel6getRpmEv>
 8007f94:	4603      	mov	r3, r0
		sprintf((char*) data,
 8007f96:	461e      	mov	r6, r3
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 8007f98:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007f9c:	f7f9 fb0f 	bl	80015be <_ZNK11SensorModel4isNtEv>
 8007fa0:	4603      	mov	r3, r0
		sprintf((char*) data,
 8007fa2:	60bb      	str	r3, [r7, #8]
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 8007fa4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007fa8:	f7f9 faee 	bl	8001588 <_ZNK11SensorModel4isNpEv>
 8007fac:	4603      	mov	r3, r0
		sprintf((char*) data,
 8007fae:	607b      	str	r3, [r7, #4]
				sensorModel.isCm());
 8007fb0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007fb4:	f7f9 fabe 	bl	8001534 <_ZNK11SensorModel4isCmEv>
 8007fb8:	4603      	mov	r3, r0
		sprintf((char*) data,
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f107 0320 	add.w	r3, r7, #32
 8007fc0:	9207      	str	r2, [sp, #28]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	9206      	str	r2, [sp, #24]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	9205      	str	r2, [sp, #20]
 8007fca:	9604      	str	r6, [sp, #16]
 8007fcc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007fd0:	e9cd 4500 	strd	r4, r5, [sp]
 8007fd4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007fd8:	4916      	ldr	r1, [pc, #88]	@ (8008034 <_Z16StartDefaultTaskPv+0x170>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f00c fba8 	bl	8014730 <siprintf>
		CDC_Transmit_FS(data, strlen((char*) data));
 8007fe0:	f107 0320 	add.w	r3, r7, #32
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f8 f94b 	bl	8000280 <strlen>
 8007fea:	4603      	mov	r3, r0
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	f107 0320 	add.w	r3, r7, #32
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f00b f825 	bl	8013044 <CDC_Transmit_FS>
		if (!timer.onTime()) {
 8007ffa:	f107 0314 	add.w	r3, r7, #20
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f9 f934 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 8008004:	4603      	mov	r3, r0
 8008006:	f083 0301 	eor.w	r3, r3, #1
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <_Z16StartDefaultTaskPv+0x15e>
			timer.reset();
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	4618      	mov	r0, r3
 8008016:	f7f9 f919 	bl	800124c <_ZN10TimeTicker5resetEv>
//			sensorModel.setDistance(0);
			sensorModel.resetDistance();
 800801a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800801e:	f7f9 fa53 	bl	80014c8 <_ZN11SensorModel13resetDistanceEv>
		}
		osDelay(100);
 8008022:	2064      	movs	r0, #100	@ 0x64
 8008024:	f007 fee0 	bl	800fde8 <osDelay>
	}
 8008028:	e77a      	b.n	8007f20 <_Z16StartDefaultTaskPv+0x5c>
 800802a:	bf00      	nop
 800802c:	08016998 	.word	0x08016998
 8008030:	200002f4 	.word	0x200002f4
 8008034:	080169a0 	.word	0x080169a0

08008038 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a04      	ldr	r2, [pc, #16]	@ (8008058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d101      	bne.n	800804e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800804a:	f001 fc4f 	bl	80098ec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000

0800805c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008060:	b672      	cpsid	i
}
 8008062:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <Error_Handler+0x8>

08008068 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  }
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
  void clear(Allocator* allocator) {
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8008088:	2300      	movs	r3, #0
 800808a:	81fb      	strh	r3, [r7, #14]
 800808c:	e00b      	b.n	80080a6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	4413      	add	r3, r2
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f849 	bl	8008132 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 80080a0:	89fb      	ldrh	r3, [r7, #14]
 80080a2:	3301      	adds	r3, #1
 80080a4:	81fb      	strh	r3, [r7, #14]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80080aa:	89fa      	ldrh	r2, [r7, #14]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d3ee      	bcc.n	800808e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d00e      	beq.n	80080e6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3304      	adds	r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6a12      	ldr	r2, [r2, #32]
 80080d4:	4611      	mov	r1, r2
 80080d6:	6838      	ldr	r0, [r7, #0]
 80080d8:	4798      	blx	r3
      pools_ = preallocatedPools_;
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2204      	movs	r2, #4
 80080e4:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2asIiEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80080ee:	b590      	push	{r4, r7, lr}
 80080f0:	b087      	sub	sp, #28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80080fe:	6938      	ldr	r0, [r7, #16]
 8008100:	f000 f8e8 	bl	80082d4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7getDataEv>
 8008104:	4604      	mov	r4, r0
 8008106:	6938      	ldr	r0, [r7, #16]
 8008108:	f7fc fd1a 	bl	8004b40 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 800810c:	4602      	mov	r2, r0
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	4621      	mov	r1, r4
 8008114:	4618      	mov	r0, r3
 8008116:	f7f9 fbd1 	bl	80018bc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800811a:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800811c:	f107 0308 	add.w	r3, r7, #8
 8008120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008124:	f000 f824 	bl	8008170 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}

08008132 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
  void destroy(Allocator* allocator) {
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
    if (slots_)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d008      	beq.n	8008156 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3304      	adds	r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6852      	ldr	r2, [r2, #4]
 8008150:	4611      	mov	r1, r2
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	4798      	blx	r3
    slots_ = nullptr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	805a      	strh	r2, [r3, #2]
  }
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	463b      	mov	r3, r7
 8008178:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800817c:	463b      	mov	r3, r7
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 fd80 	bl	8001c84 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8008184:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8008186:	463b      	mov	r3, r7
 8008188:	4618      	mov	r0, r3
 800818a:	f7f9 fd87 	bl	8001c9c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800818e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f807 	bl	80081ac <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800819e:	4603      	mov	r3, r0
 80081a0:	e000      	b.n	80081a4 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 80081a2:	2300      	movs	r3, #0
  }
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7f9 fd07 	bl	8001bcc <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80081be:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	2b1a      	cmp	r3, #26
 80081c8:	d87e      	bhi.n	80082c8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11c>
 80081ca:	a201      	add	r2, pc, #4	@ (adr r2, 80081d0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	08008283 	.word	0x08008283
 80081d4:	08008291 	.word	0x08008291
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	080082c9 	.word	0x080082c9
 80081e0:	080082c9 	.word	0x080082c9
 80081e4:	080082c9 	.word	0x080082c9
 80081e8:	08008243 	.word	0x08008243
 80081ec:	080082c9 	.word	0x080082c9
 80081f0:	08008251 	.word	0x08008251
 80081f4:	080082c9 	.word	0x080082c9
 80081f8:	080082a1 	.word	0x080082a1
 80081fc:	080082c9 	.word	0x080082c9
 8008200:	080082c9 	.word	0x080082c9
 8008204:	080082c9 	.word	0x080082c9
 8008208:	080082c9 	.word	0x080082c9
 800820c:	080082c9 	.word	0x080082c9
 8008210:	080082c9 	.word	0x080082c9
 8008214:	080082c9 	.word	0x080082c9
 8008218:	080082c9 	.word	0x080082c9
 800821c:	080082c9 	.word	0x080082c9
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082c9 	.word	0x080082c9
 8008228:	0800825f 	.word	0x0800825f
 800822c:	080082c9 	.word	0x080082c9
 8008230:	08008271 	.word	0x08008271
 8008234:	080082c9 	.word	0x080082c9
 8008238:	080082b3 	.word	0x080082b3
        return content_.asBoolean;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	e043      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f854 	bl	80082f4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_>
 800824c:	4603      	mov	r3, r0
 800824e:	e03c      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 f85e 	bl	8008316 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_>
 800825a:	4603      	mov	r3, r0
 800825c:	e035      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	4610      	mov	r0, r2
 8008266:	4619      	mov	r1, r3
 8008268:	f000 f866 	bl	8008338 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>
 800826c:	4603      	mov	r3, r0
 800826e:	e02c      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4610      	mov	r0, r2
 8008278:	4619      	mov	r1, r3
 800827a:	f000 f870 	bl	800835e <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>
 800827e:	4603      	mov	r3, r0
 8008280:	e023      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f87c 	bl	8008384 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>
 800828c:	4603      	mov	r3, r0
 800828e:	e01c      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f874 	bl	8008384 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>
 800829c:	4603      	mov	r3, r0
 800829e:	e014      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	edd3 7a00 	vldr	s15, [r3]
 80082a6:	eeb0 0a67 	vmov.f32	s0, s15
 80082aa:	f000 f87f 	bl	80083ac <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>
 80082ae:	4603      	mov	r3, r0
 80082b0:	e00b      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	ed93 7b00 	vldr	d7, [r3]
 80082b8:	eeb0 0a47 	vmov.f32	s0, s14
 80082bc:	eef0 0a67 	vmov.f32	s1, s15
 80082c0:	f000 f88c 	bl	80083dc <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>
 80082c4:	4603      	mov	r3, r0
 80082c6:	e000      	b.n	80082ca <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 80082c8:	2300      	movs	r3, #0
  }
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7getDataEv>:
  VariantData* getData() const {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7fc fe46 	bl	8004f6e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f890 	bl	800840a <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_7getDataEERT_>
 80082ea:	4603      	mov	r3, r0
  }
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f890 	bl	8008422 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_+0x18>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	e000      	b.n	800830e <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_+0x1a>
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f891 	bl	8008446 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_+0x18>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	e000      	b.n	8008330 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_+0x1a>
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008346:	f000 f889 	bl	800845c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_+0x1c>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	e000      	b.n	8008356 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_+0x1e>
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800836c:	f000 f88e 	bl	800848c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_+0x1c>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	e000      	b.n	800837c <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_+0x1e>
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800838c:	f107 0308 	add.w	r3, r7, #8
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fb fad8 	bl	8003948 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 8008398:	f107 0308 	add.w	r3, r7, #8
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f89b 	bl	80084d8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v>
 80083a2:	4603      	mov	r3, r0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80083b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80083ba:	f000 f8d6 	bl	800856a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d006      	beq.n	80083d2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_+0x26>
 80083c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80083c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083cc:	ee17 3a90 	vmov	r3, s15
 80083d0:	e000      	b.n	80083d4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_+0x28>
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80083e6:	ed97 0b00 	vldr	d0, [r7]
 80083ea:	f000 f8eb 	bl	80085c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_+0x24>
 80083f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f8:	f7f8 fbb6 	bl	8000b68 <__aeabi_d2iz>
 80083fc:	4603      	mov	r3, r0
 80083fe:	e000      	b.n	8008402 <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_+0x26>
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f900 	bl	8008618 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE7getDataEv>
 8008418:	4603      	mov	r3, r0
  }
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800842a:	f000 f8c3 	bl	80085b4 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4293      	cmp	r3, r2
 8008436:	bf94      	ite	ls
 8008438:	2301      	movls	r3, #1
 800843a:	2300      	movhi	r3, #0
 800843c:	b2db      	uxtb	r3, r3
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  return true;
 800844e:	2301      	movs	r3, #1
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800845c:	b5b0      	push	{r4, r5, r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008466:	f000 f8a5 	bl	80085b4 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800846a:	4603      	mov	r3, r0
 800846c:	17da      	asrs	r2, r3, #31
 800846e:	461c      	mov	r4, r3
 8008470:	4615      	mov	r5, r2
 8008472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008476:	4294      	cmp	r4, r2
 8008478:	eb75 0303 	sbcs.w	r3, r5, r3
 800847c:	bf2c      	ite	cs
 800847e:	2301      	movcs	r3, #1
 8008480:	2300      	movcc	r3, #0
 8008482:	b2db      	uxtb	r3, r3
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bdb0      	pop	{r4, r5, r7, pc}

0800848c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800848c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8008498:	f000 f85e 	bl	8008558 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 800849c:	4603      	mov	r3, r0
 800849e:	17da      	asrs	r2, r3, #31
 80084a0:	4698      	mov	r8, r3
 80084a2:	4691      	mov	r9, r2
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	4542      	cmp	r2, r8
 80084aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80084ae:	db0d      	blt.n	80084cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 80084b0:	f000 f880 	bl	80085b4 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 80084b4:	4603      	mov	r3, r0
 80084b6:	17da      	asrs	r2, r3, #31
 80084b8:	461c      	mov	r4, r3
 80084ba:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80084bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c0:	4294      	cmp	r4, r2
 80084c2:	eb75 0303 	sbcs.w	r3, r5, r3
 80084c6:	db01      	blt.n	80084cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080084d8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d830      	bhi.n	800854c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x74>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x18>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008513 	.word	0x08008513
 80084f8:	08008525 	.word	0x08008525
 80084fc:	08008537 	.word	0x08008537
        return convertNumber<T>(value_.asFloat);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	edd3 7a02 	vldr	s15, [r3, #8]
 8008506:	eeb0 0a67 	vmov.f32	s0, s15
 800850a:	f7ff ff4f 	bl	80083ac <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>
 800850e:	4603      	mov	r3, r0
 8008510:	e01d      	b.n	800854e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	f7ff ff1f 	bl	800835e <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>
 8008520:	4603      	mov	r3, r0
 8008522:	e014      	b.n	800854e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800852a:	4610      	mov	r0, r2
 800852c:	4619      	mov	r1, r3
 800852e:	f7ff ff03 	bl	8008338 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>
 8008532:	4603      	mov	r3, r0
 8008534:	e00b      	b.n	800854e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	ed93 7b02 	vldr	d7, [r3, #8]
 800853c:	eeb0 0a47 	vmov.f32	s0, s14
 8008540:	eef0 0a67 	vmov.f32	s1, s15
 8008544:	f7ff ff4a 	bl	80083dc <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>
 8008548:	4603      	mov	r3, r0
 800854a:	e000      	b.n	800854e <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return T();
 800854c:	2300      	movs	r3, #0
  }
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800855c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8008560:	4618      	mov	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8008574:	f7ff fff0 	bl	8008558 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 8008578:	ee07 0a90 	vmov	s15, r0
 800857c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008580:	ed97 7a01 	vldr	s14, [r7, #4]
 8008584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	db0d      	blt.n	80085aa <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800858e:	2000      	movs	r0, #0
 8008590:	f000 f862 	bl	8008658 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 8008594:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8008598:	edd7 7a01 	vldr	s15, [r7, #4]
 800859c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a4:	d801      	bhi.n	80085aa <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
    return T(~lowest());
 80085b8:	f7ff ffce 	bl	8008558 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 80085bc:	4603      	mov	r3, r0
 80085be:	43db      	mvns	r3, r3
  }
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 80085ce:	f7ff ffc3 	bl	8008558 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7f7 ffad 	bl	8000534 <__aeabi_i2d>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085e2:	f7f8 fa97 	bl	8000b14 <__aeabi_dcmpge>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d010      	beq.n	800860e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 80085ec:	f7ff ffe2 	bl	80085b4 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 80085f0:	4603      	mov	r3, r0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7f7 ff9e 	bl	8000534 <__aeabi_i2d>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 80085fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008600:	f7f8 fa7e 	bl	8000b00 <__aeabi_dcmple>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE7getDataEv>:
  VariantData* getData() const {
 8008618:	b5b0      	push	{r4, r5, r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), adaptString(key_),
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f826 	bl	8008676 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 800862a:	4604      	mov	r4, r0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
    return VariantData::getMember(
 8008630:	4618      	mov	r0, r3
 8008632:	f7fb fed5 	bl	80043e0 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8008636:	4605      	mov	r5, r0
        VariantAttorney::getResourceManager(upstream_));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fc65 	bl	8005f0c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008642:	4603      	mov	r3, r0
    return VariantData::getMember(
 8008644:	461a      	mov	r2, r3
 8008646:	4629      	mov	r1, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 f820 	bl	800868e <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800864e:	4603      	mov	r3, r0
  }
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bdb0      	pop	{r4, r5, r7, pc}

08008658 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 8008660:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 8008664:	f7fe fde8 	bl	8007238 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8008668:	eef0 7a40 	vmov.f32	s15, s0
  }
 800866c:	eeb0 0a67 	vmov.f32	s0, s15
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fad6 	bl	8007c30 <_ZN11ArduinoJson8V721HB2212JsonDocument7getDataEv>
 8008684:	4603      	mov	r3, r0
  }
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
    if (!var)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x16>
      return 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e007      	b.n	80086b4 <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x26>
    return var->getMember(key, resources);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fc faf8 	bl	8004ca0 <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>
 80086b0:	4603      	mov	r3, r0
 80086b2:	bf00      	nop
  }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d10b      	bne.n	80086e4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d106      	bne.n	80086e4 <_Z41__static_initialization_and_destruction_0ii+0x28>
JsonDocument doc;
 80086d6:	f7f9 f80d 	bl	80016f4 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>
 80086da:	4603      	mov	r3, r0
 80086dc:	4619      	mov	r1, r3
 80086de:	4809      	ldr	r0, [pc, #36]	@ (8008704 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80086e0:	f7f9 f917 	bl	8001912 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d107      	bne.n	80086fa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d102      	bne.n	80086fa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80086f4:	4803      	ldr	r0, [pc, #12]	@ (8008704 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80086f6:	f7ff fa8e 	bl	8007c16 <_ZN11ArduinoJson8V721HB2212JsonDocumentD1Ev>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	200002f4 	.word	0x200002f4

08008708 <_GLOBAL__sub_I_defaultTaskHandle>:
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
 800870c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008710:	2001      	movs	r0, #1
 8008712:	f7ff ffd3 	bl	80086bc <_Z41__static_initialization_and_destruction_0ii>
 8008716:	bd80      	pop	{r7, pc}

08008718 <_GLOBAL__sub_D_defaultTaskHandle>:
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
 800871c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008720:	2000      	movs	r0, #0
 8008722:	f7ff ffcb 	bl	80086bc <_Z41__static_initialization_and_destruction_0ii>
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	4b12      	ldr	r3, [pc, #72]	@ (800877c <HAL_MspInit+0x54>)
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	4a11      	ldr	r2, [pc, #68]	@ (800877c <HAL_MspInit+0x54>)
 8008738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800873c:	6453      	str	r3, [r2, #68]	@ 0x44
 800873e:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <HAL_MspInit+0x54>)
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800874a:	2300      	movs	r3, #0
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <HAL_MspInit+0x54>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008752:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <HAL_MspInit+0x54>)
 8008754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008758:	6413      	str	r3, [r2, #64]	@ 0x40
 800875a:	4b08      	ldr	r3, [pc, #32]	@ (800877c <HAL_MspInit+0x54>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008766:	2200      	movs	r2, #0
 8008768:	210f      	movs	r1, #15
 800876a:	f06f 0001 	mvn.w	r0, #1
 800876e:	f001 f9b9 	bl	8009ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40023800 	.word	0x40023800

08008780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	@ 0x30
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008790:	2300      	movs	r3, #0
 8008792:	60bb      	str	r3, [r7, #8]
 8008794:	4b30      	ldr	r3, [pc, #192]	@ (8008858 <HAL_InitTick+0xd8>)
 8008796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008798:	4a2f      	ldr	r2, [pc, #188]	@ (8008858 <HAL_InitTick+0xd8>)
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	6453      	str	r3, [r2, #68]	@ 0x44
 80087a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008858 <HAL_InitTick+0xd8>)
 80087a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80087ac:	f107 020c 	add.w	r2, r7, #12
 80087b0:	f107 0310 	add.w	r3, r7, #16
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f003 fa3c 	bl	800bc34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80087bc:	f003 fa26 	bl	800bc0c <HAL_RCC_GetPCLK2Freq>
 80087c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	4a25      	ldr	r2, [pc, #148]	@ (800885c <HAL_InitTick+0xdc>)
 80087c6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ca:	0c9b      	lsrs	r3, r3, #18
 80087cc:	3b01      	subs	r3, #1
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80087d0:	4b23      	ldr	r3, [pc, #140]	@ (8008860 <HAL_InitTick+0xe0>)
 80087d2:	4a24      	ldr	r2, [pc, #144]	@ (8008864 <HAL_InitTick+0xe4>)
 80087d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80087d6:	4b22      	ldr	r3, [pc, #136]	@ (8008860 <HAL_InitTick+0xe0>)
 80087d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80087dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80087de:	4a20      	ldr	r2, [pc, #128]	@ (8008860 <HAL_InitTick+0xe0>)
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80087e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008860 <HAL_InitTick+0xe0>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <HAL_InitTick+0xe0>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <HAL_InitTick+0xe0>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80087f6:	481a      	ldr	r0, [pc, #104]	@ (8008860 <HAL_InitTick+0xe0>)
 80087f8:	f003 fa4e 	bl	800bc98 <HAL_TIM_Base_Init>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8008802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008806:	2b00      	cmp	r3, #0
 8008808:	d11b      	bne.n	8008842 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800880a:	4815      	ldr	r0, [pc, #84]	@ (8008860 <HAL_InitTick+0xe0>)
 800880c:	f003 faaa 	bl	800bd64 <HAL_TIM_Base_Start_IT>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8008816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800881a:	2b00      	cmp	r3, #0
 800881c:	d111      	bne.n	8008842 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800881e:	2019      	movs	r0, #25
 8008820:	f001 f97c 	bl	8009b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b0f      	cmp	r3, #15
 8008828:	d808      	bhi.n	800883c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800882a:	2200      	movs	r2, #0
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	2019      	movs	r0, #25
 8008830:	f001 f958 	bl	8009ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008834:	4a0c      	ldr	r2, [pc, #48]	@ (8008868 <HAL_InitTick+0xe8>)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e002      	b.n	8008842 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8008842:	4a0a      	ldr	r2, [pc, #40]	@ (800886c <HAL_InitTick+0xec>)
 8008844:	210e      	movs	r1, #14
 8008846:	4806      	ldr	r0, [pc, #24]	@ (8008860 <HAL_InitTick+0xe0>)
 8008848:	f003 fc58 	bl	800c0fc <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 800884c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008850:	4618      	mov	r0, r3
 8008852:	3730      	adds	r7, #48	@ 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40023800 	.word	0x40023800
 800885c:	431bde83 	.word	0x431bde83
 8008860:	20000334 	.word	0x20000334
 8008864:	40010000 	.word	0x40010000
 8008868:	20000008 	.word	0x20000008
 800886c:	08008871 	.word	0x08008871

08008870 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8008878:	f001 f838 	bl	80098ec <HAL_IncTick>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <NMI_Handler+0x4>

0800888c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <HardFault_Handler+0x4>

08008894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <MemManage_Handler+0x4>

0800889c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <BusFault_Handler+0x4>

080088a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <UsageFault_Handler+0x4>

080088ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80088be:	2001      	movs	r0, #1
 80088c0:	f001 fb0a 	bl	8009ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80088cc:	2002      	movs	r0, #2
 80088ce:	f001 fb03 	bl	8009ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80088da:	2004      	movs	r0, #4
 80088dc:	f001 fafc 	bl	8009ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80088e0:	bf00      	nop
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80088e8:	4802      	ldr	r0, [pc, #8]	@ (80088f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80088ea:	f003 fa9d 	bl	800be28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80088ee:	bf00      	nop
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000334 	.word	0x20000334

080088f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80088fc:	4802      	ldr	r0, [pc, #8]	@ (8008908 <OTG_FS_IRQHandler+0x10>)
 80088fe:	f001 fc47 	bl	800a190 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008902:	bf00      	nop
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20005ac0 	.word	0x20005ac0

0800890c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  return 1;
 8008910:	2301      	movs	r3, #1
}
 8008912:	4618      	mov	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <_kill>:

int _kill(int pid, int sig)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008926:	f00c f87d 	bl	8014a24 <__errno>
 800892a:	4603      	mov	r3, r0
 800892c:	2216      	movs	r2, #22
 800892e:	601a      	str	r2, [r3, #0]
  return -1;
 8008930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <_exit>:

void _exit (int status)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008944:	f04f 31ff 	mov.w	r1, #4294967295
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ffe7 	bl	800891c <_kill>
  while (1) {}    /* Make sure we hang here */
 800894e:	bf00      	nop
 8008950:	e7fd      	b.n	800894e <_exit+0x12>

08008952 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e00a      	b.n	800897a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008964:	f3af 8000 	nop.w
 8008968:	4601      	mov	r1, r0
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	60ba      	str	r2, [r7, #8]
 8008970:	b2ca      	uxtb	r2, r1
 8008972:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	dbf0      	blt.n	8008964 <_read+0x12>
  }

  return len;
 8008982:	687b      	ldr	r3, [r7, #4]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
 800899c:	e009      	b.n	80089b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	60ba      	str	r2, [r7, #8]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3301      	adds	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	dbf1      	blt.n	800899e <_write+0x12>
  }
  return len;
 80089ba:	687b      	ldr	r3, [r7, #4]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <_close>:

int _close(int file)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80089ec:	605a      	str	r2, [r3, #4]
  return 0;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_isatty>:

int _isatty(int file)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a04:	2301      	movs	r3, #1
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a34:	4a14      	ldr	r2, [pc, #80]	@ (8008a88 <_sbrk+0x5c>)
 8008a36:	4b15      	ldr	r3, [pc, #84]	@ (8008a8c <_sbrk+0x60>)
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a40:	4b13      	ldr	r3, [pc, #76]	@ (8008a90 <_sbrk+0x64>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a48:	4b11      	ldr	r3, [pc, #68]	@ (8008a90 <_sbrk+0x64>)
 8008a4a:	4a12      	ldr	r2, [pc, #72]	@ (8008a94 <_sbrk+0x68>)
 8008a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a4e:	4b10      	ldr	r3, [pc, #64]	@ (8008a90 <_sbrk+0x64>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d207      	bcs.n	8008a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a5c:	f00b ffe2 	bl	8014a24 <__errno>
 8008a60:	4603      	mov	r3, r0
 8008a62:	220c      	movs	r2, #12
 8008a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6a:	e009      	b.n	8008a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a6c:	4b08      	ldr	r3, [pc, #32]	@ (8008a90 <_sbrk+0x64>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a72:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <_sbrk+0x64>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4413      	add	r3, r2
 8008a7a:	4a05      	ldr	r2, [pc, #20]	@ (8008a90 <_sbrk+0x64>)
 8008a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20010000 	.word	0x20010000
 8008a8c:	00000400 	.word	0x00000400
 8008a90:	200003e8 	.word	0x200003e8
 8008a94:	20006318 	.word	0x20006318

08008a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008a9c:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <SystemInit+0x20>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa2:	4a05      	ldr	r2, [pc, #20]	@ (8008ab8 <SystemInit+0x20>)
 8008aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008aac:	bf00      	nop
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <_ZN7IRQTaskD1Ev>:

#ifndef INC_READER_IRQ_IRQTASK_H_
#define INC_READER_IRQ_IRQTASK_H_
#include "MyRTOSTask.h"
#include "semphr.h"
class IRQTask: public MyRTOSTask {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	4a05      	ldr	r2, [pc, #20]	@ (8008adc <_ZN7IRQTaskD1Ev+0x20>)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe ffb3 	bl	8007a38 <_ZN10MyRTOSTaskD1Ev>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08016c0c 	.word	0x08016c0c

08008ae0 <_ZN7IRQTaskD0Ev>:
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ffe7 	bl	8008abc <_ZN7IRQTaskD1Ev>
 8008aee:	2124      	movs	r1, #36	@ 0x24
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f00a fef9 	bl	80138e8 <_ZdlPvj>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <_ZN11EncoderTaskC1Ed>:
#include "Reader/IRQ/EncoderTash.h"

EncoderTask::EncoderTask(double scala) :
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	ed87 0b00 	vstr	d0, [r7]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	2301      	movs	r3, #1
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	2340      	movs	r3, #64	@ 0x40
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4920      	ldr	r1, [pc, #128]	@ (8008b9c <_ZN11EncoderTaskC1Ed+0x9c>)
 8008b1c:	f000 f9d2 	bl	8008ec4 <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 8008b20:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <_ZN11EncoderTaskC1Ed+0xa0>)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2201      	movs	r2, #1
 8008b30:	491c      	ldr	r1, [pc, #112]	@ (8008ba4 <_ZN11EncoderTaskC1Ed+0xa4>)
 8008b32:	f000 fb2f 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2202      	movs	r2, #2
 8008b40:	4918      	ldr	r1, [pc, #96]	@ (8008ba4 <_ZN11EncoderTaskC1Ed+0xa4>)
 8008b42:	f000 fb27 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b52:	f7f7 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <_ZN11EncoderTaskC1Ed+0x62>
 8008b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b60:	e002      	b.n	8008b68 <_ZN11EncoderTaskC1Ed+0x68>
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <_ZN11EncoderTaskC1Ed+0xa8>)
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
				scala == 0 ? 1.0f : scala), encoderModel(), timer(200) {
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3360      	adds	r3, #96	@ 0x60
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f8 fbad 	bl	80012d2 <_ZN11EncodeModelC1Ev>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	336c      	adds	r3, #108	@ 0x6c
 8008b7c:	21c8      	movs	r1, #200	@ 0xc8
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f8 fb10 	bl	80011a4 <_ZN10TimeTickerC1Em>
	this->count = 0;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->hasCallA = false;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	080169e4 	.word	0x080169e4
 8008ba0:	08016be8 	.word	0x08016be8
 8008ba4:	40020400 	.word	0x40020400
 8008ba8:	3ff00000 	.word	0x3ff00000

08008bac <_ZN11EncoderTask9isExactlyEt>:

bool EncoderTask::isExactly(uint16_t pin) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
	if (this->aPin.equalPin(pin) && this->aPin.readValue()) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3324      	adds	r3, #36	@ 0x24
 8008bbc:	887a      	ldrh	r2, [r7, #2]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fb00 	bl	80091c6 <_ZN5MyPin8equalPinEt>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d009      	beq.n	8008be0 <_ZN11EncoderTask9isExactlyEt+0x34>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3324      	adds	r3, #36	@ 0x24
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 fb2e 	bl	8009232 <_ZN5MyPin9readValueEv>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <_ZN11EncoderTask9isExactlyEt+0x34>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <_ZN11EncoderTask9isExactlyEt+0x36>
 8008be0:	2300      	movs	r3, #0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <_ZN11EncoderTask9isExactlyEt+0x46>
		this->hasCallA = true;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e01d      	b.n	8008c2e <_ZN11EncoderTask9isExactlyEt+0x82>
	} else if (this->bPin.equalPin(pin) && bPin.readValue()) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3338      	adds	r3, #56	@ 0x38
 8008bf6:	887a      	ldrh	r2, [r7, #2]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fae3 	bl	80091c6 <_ZN5MyPin8equalPinEt>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <_ZN11EncoderTask9isExactlyEt+0x6e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3338      	adds	r3, #56	@ 0x38
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fb11 	bl	8009232 <_ZN5MyPin9readValueEv>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <_ZN11EncoderTask9isExactlyEt+0x6e>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <_ZN11EncoderTask9isExactlyEt+0x70>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <_ZN11EncoderTask9isExactlyEt+0x80>
		this->hasCallA = false;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <_ZN11EncoderTask9isExactlyEt+0x82>
	}
	return false;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <_ZN11EncoderTask12taskCallbackEv>:

void EncoderTask::setScale(double scala) {
	this->scala = scala == 0 ? 1.0f : scala;
}

void EncoderTask::taskCallback() {
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
	if (this->hasCallA) {
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d012      	beq.n	8008c6e <_ZN11EncoderTask12taskCallbackEv+0x38>
		if (this->bPin.readValue()) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3338      	adds	r3, #56	@ 0x38
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 faf0 	bl	8009232 <_ZN5MyPin9readValueEv>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf14      	ite	ne
 8008c58:	2301      	movne	r3, #1
 8008c5a:	2300      	moveq	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d017      	beq.n	8008c92 <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count += 1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
	} else {
		if (this->aPin.readValue()) {
			this->count -= 1;
		}
	}
}
 8008c6c:	e011      	b.n	8008c92 <_ZN11EncoderTask12taskCallbackEv+0x5c>
		if (this->aPin.readValue()) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3324      	adds	r3, #36	@ 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fadd 	bl	8009232 <_ZN5MyPin9readValueEv>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bf14      	ite	ne
 8008c7e:	2301      	movne	r3, #1
 8008c80:	2300      	moveq	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count -= 1;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c8c:	1e5a      	subs	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	0000      	movs	r0, r0
 8008c9c:	0000      	movs	r0, r0
	...

08008ca0 <_ZN11EncoderTask15getEncoderModelEv>:

EncodeModel* EncoderTask::getEncoderModel() {
 8008ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	336c      	adds	r3, #108	@ 0x6c
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f8 fadc 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f083 0301 	eor.w	r3, r3, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80cc 	beq.w	8008e5a <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
		int32_t tempCount = this->count;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc6:	60fb      	str	r3, [r7, #12]
		float deltaTimeS = this->timer.getDelta() / 1000.0;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	336c      	adds	r3, #108	@ 0x6c
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f8 fa97 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f7 fc1d 	bl	8000514 <__aeabi_ui2d>
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	4b66      	ldr	r3, [pc, #408]	@ (8008e78 <_ZN11EncoderTask15getEncoderModelEv+0x1d8>)
 8008ce0:	f7f7 fdbc 	bl	800085c <__aeabi_ddiv>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	f7f7 ff84 	bl	8000bf8 <__aeabi_d2f>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
		this->timer.reset();
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	336c      	adds	r3, #108	@ 0x6c
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f8 faa4 	bl	800124c <_ZN10TimeTicker5resetEv>
		if (tempCount == 0 || deltaTimeS == 0) {
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d006      	beq.n	8008d18 <_ZN11EncoderTask15getEncoderModelEv+0x78>
 8008d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d16:	d10d      	bne.n	8008d34 <_ZN11EncoderTask15getEncoderModelEv+0x94>
			this->encoderModel.setSpeed(0);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3360      	adds	r3, #96	@ 0x60
 8008d1c:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8008e7c <_ZN11EncoderTask15getEncoderModelEv+0x1dc>
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7f8 fb19 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
			this->encoderModel.setCarStatus(CAR_STOP);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3360      	adds	r3, #96	@ 0x60
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f8 fb22 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
 8008d32:	e092      	b.n	8008e5a <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
		} else {
			this->encoderModel.setDistance(
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 0660 	add.w	r6, r3, #96	@ 0x60
					this->encoderModel.getDistance() + tempCount / this->scala);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3360      	adds	r3, #96	@ 0x60
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f8 fadd 	bl	80012fe <_ZNK11EncodeModel11getDistanceEv>
 8008d44:	ee10 3a10 	vmov	r3, s0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7f7 fc05 	bl	8000558 <__aeabi_f2d>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	460d      	mov	r5, r1
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7f7 fbee 	bl	8000534 <__aeabi_i2d>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8008d5e:	f7f7 fd7d 	bl	800085c <__aeabi_ddiv>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fa97 	bl	800029c <__adddf3>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
			this->encoderModel.setDistance(
 8008d72:	4610      	mov	r0, r2
 8008d74:	4619      	mov	r1, r3
 8008d76:	f7f7 ff3f 	bl	8000bf8 <__aeabi_d2f>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	ee00 3a10 	vmov	s0, r3
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7f8 fada 	bl	800133a <_ZN11EncodeModel11setDistanceEf>
			if (tempCount > 0) {
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dd33      	ble.n	8008df4 <_ZN11EncoderTask15getEncoderModelEv+0x154>
				this->encoderModel.setSpeed(
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f103 0460 	add.w	r4, r3, #96	@ 0x60
						tempCount * 3.6 / this->scala / deltaTimeS);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7f7 fbce 	bl	8000534 <__aeabi_i2d>
 8008d98:	a333      	add	r3, pc, #204	@ (adr r3, 8008e68 <_ZN11EncoderTask15getEncoderModelEv+0x1c8>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fc33 	bl	8000608 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8008db0:	f7f7 fd54 	bl	800085c <__aeabi_ddiv>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4690      	mov	r8, r2
 8008dba:	4699      	mov	r9, r3
 8008dbc:	68b8      	ldr	r0, [r7, #8]
 8008dbe:	f7f7 fbcb 	bl	8000558 <__aeabi_f2d>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fd47 	bl	800085c <__aeabi_ddiv>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
				this->encoderModel.setSpeed(
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f7f7 ff0f 	bl	8000bf8 <__aeabi_d2f>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	ee00 3a10 	vmov	s0, r3
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7f8 fab9 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel.setCarStatus(CAR_FORWARD);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3360      	adds	r3, #96	@ 0x60
 8008dea:	2101      	movs	r1, #1
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f8 fac2 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
 8008df2:	e032      	b.n	8008e5a <_ZN11EncoderTask15getEncoderModelEv+0x1ba>
			} else {
				this->encoderModel.setSpeed(
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f103 0460 	add.w	r4, r3, #96	@ 0x60
						tempCount * -3.6 / this->scala / deltaTimeS);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7f7 fb9a 	bl	8000534 <__aeabi_i2d>
 8008e00:	a31b      	add	r3, pc, #108	@ (adr r3, 8008e70 <_ZN11EncoderTask15getEncoderModelEv+0x1d0>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fbff 	bl	8000608 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8008e18:	f7f7 fd20 	bl	800085c <__aeabi_ddiv>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4690      	mov	r8, r2
 8008e22:	4699      	mov	r9, r3
 8008e24:	68b8      	ldr	r0, [r7, #8]
 8008e26:	f7f7 fb97 	bl	8000558 <__aeabi_f2d>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fd13 	bl	800085c <__aeabi_ddiv>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
				this->encoderModel.setSpeed(
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f7f7 fedb 	bl	8000bf8 <__aeabi_d2f>
 8008e42:	4603      	mov	r3, r0
 8008e44:	ee00 3a10 	vmov	s0, r3
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f7f8 fa85 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel.setCarStatus(CAR_BACKWARD);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3360      	adds	r3, #96	@ 0x60
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f8 fa8e 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
			}
		}
	}
	return &this->encoderModel;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3360      	adds	r3, #96	@ 0x60
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e68:	cccccccd 	.word	0xcccccccd
 8008e6c:	400ccccc 	.word	0x400ccccc
 8008e70:	cccccccd 	.word	0xcccccccd
 8008e74:	c00ccccc 	.word	0xc00ccccc
 8008e78:	408f4000 	.word	0x408f4000
 8008e7c:	00000000 	.word	0x00000000

08008e80 <_ZN11EncoderTaskD1Ev>:
#include <Model/EncodeModel.h>
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"

class EncoderTask: public IRQTask {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	4a05      	ldr	r2, [pc, #20]	@ (8008ea0 <_ZN11EncoderTaskD1Ev+0x20>)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fe13 	bl	8008abc <_ZN7IRQTaskD1Ev>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	08016be8 	.word	0x08016be8

08008ea4 <_ZN11EncoderTaskD0Ev>:
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff ffe7 	bl	8008e80 <_ZN11EncoderTaskD1Ev>
 8008eb2:	2178      	movs	r1, #120	@ 0x78
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f00a fd17 	bl	80138e8 <_ZdlPvj>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZN7IRQTaskC1EPKcPFvPvES2_tm>:
 *  Created on: Dec 9, 2024
 *      Author: Admin
 */
#include "Reader/IRQ/IRQTask.h"

IRQTask::IRQTask(const char *name, void (*runFunction)(void *), void *params, uint16_t stackSize,
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
		UBaseType_t priority) :
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
				xSemaphoreCreateBinary()) {
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	8b3b      	ldrh	r3, [r7, #24]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	f7fe fd81 	bl	80079e8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 8008ee6:	4a08      	ldr	r2, [pc, #32]	@ (8008f08 <_ZN7IRQTaskC1EPKcPFvPvES2_tm+0x44>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	2203      	movs	r2, #3
 8008eee:	2100      	movs	r1, #0
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	f007 f964 	bl	80101be <xQueueGenericCreate>
 8008ef6:	4602      	mov	r2, r0
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	621a      	str	r2, [r3, #32]

}
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	08016c0c 	.word	0x08016c0c

08008f0c <_ZN7IRQTask17interruptCallbackEt>:
void IRQTask::interruptCallback(uint16_t pin) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFAIL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
	if(isExactly(pin)){
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3318      	adds	r3, #24
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	887a      	ldrh	r2, [r7, #2]
 8008f26:	4611      	mov	r1, r2
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <_ZN7IRQTask17interruptCallbackEt+0x36>
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f107 020c 	add.w	r2, r7, #12
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f007 fb6f 	bl	8010620 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <_ZN7IRQTask17interruptCallbackEt+0x4c>
 8008f48:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <_ZN7IRQTask17interruptCallbackEt+0x54>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <_ZN7IRQTask12taskCallbackEv>:

void IRQTask::taskCallback() {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <_ZN7IRQTask12taskCallbackEv+0x1c>
		this->runFunction(this->params);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6912      	ldr	r2, [r2, #16]
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
	}
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <_ZN7IRQTask3runEv>:

void IRQTask::run() {
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f04f 31ff 	mov.w	r1, #4294967295
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f007 fcb3 	bl	8010904 <xQueueSemaphoreTake>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0f0      	beq.n	8008f90 <_ZN7IRQTask3runEv+0x8>
			this->taskCallback();
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 8008fba:	e7e9      	b.n	8008f90 <_ZN7IRQTask3runEv+0x8>

08008fbc <_ZN7RpmTaskC1Et>:
 *      Author: Admin
 */

#include "Reader/IRQ/RpmTask.h"

RpmTask::RpmTask(uint16_t scala) :
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	807b      	strh	r3, [r7, #2]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	2340      	movs	r3, #64	@ 0x40
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4914      	ldr	r1, [pc, #80]	@ (8009028 <_ZN7RpmTaskC1Et+0x6c>)
 8008fd8:	f7ff ff74 	bl	8008ec4 <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 8008fdc:	4a13      	ldr	r2, [pc, #76]	@ (800902c <_ZN7RpmTaskC1Et+0x70>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	601a      	str	r2, [r3, #0]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2204      	movs	r2, #4
 8008fec:	4910      	ldr	r1, [pc, #64]	@ (8009030 <_ZN7RpmTaskC1Et+0x74>)
 8008fee:	f000 f8d1 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 8008ff2:	887b      	ldrh	r3, [r7, #2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <_ZN7RpmTaskC1Et+0x40>
 8008ff8:	887a      	ldrh	r2, [r7, #2]
 8008ffa:	e000      	b.n	8008ffe <_ZN7RpmTaskC1Et+0x42>
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3344      	adds	r3, #68	@ 0x44
 8009008:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800900c:	4618      	mov	r0, r3
 800900e:	f7f8 f8c9 	bl	80011a4 <_ZN10TimeTickerC1Em>
	this->count = 0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	639a      	str	r2, [r3, #56]	@ 0x38
	this->rmp = 0;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	080169f0 	.word	0x080169f0
 800902c:	08016c30 	.word	0x08016c30
 8009030:	40020400 	.word	0x40020400

08009034 <_ZN7RpmTask9isExactlyEt>:

bool RpmTask::isExactly(uint16_t pin) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	807b      	strh	r3, [r7, #2]
	return this->rpmPin.equalPin(pin) && this->rpmPin.readValue();
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3324      	adds	r3, #36	@ 0x24
 8009044:	887a      	ldrh	r2, [r7, #2]
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f8bc 	bl	80091c6 <_ZN5MyPin8equalPinEt>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d009      	beq.n	8009068 <_ZN7RpmTask9isExactlyEt+0x34>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3324      	adds	r3, #36	@ 0x24
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f8ea 	bl	8009232 <_ZN5MyPin9readValueEv>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <_ZN7RpmTask9isExactlyEt+0x34>
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <_ZN7RpmTask9isExactlyEt+0x36>
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	0000      	movs	r0, r0
 8009074:	0000      	movs	r0, r0
	...

08009078 <_ZN7RpmTask8getValueEv>:

uint16_t RpmTask::getValue() {
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3344      	adds	r3, #68	@ 0x44
 8009084:	4618      	mov	r0, r3
 8009086:	f7f8 f8f1 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800908a:	4603      	mov	r3, r0
 800908c:	f083 0301 	eor.w	r3, r3, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d03e      	beq.n	8009114 <_ZN7RpmTask8getValueEv+0x9c>
		int32_t tempCount = this->count;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909a:	60fb      	str	r3, [r7, #12]
		float deltaTimeM = this->timer.getDelta() / 60000.0;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3344      	adds	r3, #68	@ 0x44
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f8 f8ad 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 fa33 	bl	8000514 <__aeabi_ui2d>
 80090ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8009128 <_ZN7RpmTask8getValueEv+0xb0>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 fbd2 	bl	800085c <__aeabi_ddiv>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4610      	mov	r0, r2
 80090be:	4619      	mov	r1, r3
 80090c0:	f7f7 fd9a 	bl	8000bf8 <__aeabi_d2f>
 80090c4:	4603      	mov	r3, r0
 80090c6:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	639a      	str	r2, [r3, #56]	@ 0x38
		this->timer.reset();
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3344      	adds	r3, #68	@ 0x44
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7f8 f8ba 	bl	800124c <_ZN10TimeTicker5resetEv>
		if (deltaTimeM == 0) {
 80090d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80090dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	d101      	bne.n	80090ea <_ZN7RpmTask8getValueEv+0x72>
			return 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e017      	b.n	800911a <_ZN7RpmTask8getValueEv+0xa2>
		}
		rmp = tempCount / this->scala / deltaTimeM;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80090f0:	461a      	mov	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f8:	ee07 3a90 	vmov	s15, r3
 80090fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009100:	ed97 7a02 	vldr	s14, [r7, #8]
 8009104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800910c:	ee17 2a90 	vmov	r2, s15
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	return rmp;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009118:	b29b      	uxth	r3, r3
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	f3af 8000 	nop.w
 8009128:	00000000 	.word	0x00000000
 800912c:	40ed4c00 	.word	0x40ed4c00

08009130 <_ZN7RpmTask12taskCallbackEv>:

void RpmTask::setScale(uint16_t scala) {
	this->scala = scala == 0 ? 1 : scala;
}

void RpmTask::taskCallback() {
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	this->count += 1;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <_ZN7RpmTaskD1Ev>:
#ifndef INC_READER_IRQ_RPMTASK_H_
#define INC_READER_IRQ_RPMTASK_H_
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"
class RpmTask: public IRQTask {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	4a05      	ldr	r2, [pc, #20]	@ (8009170 <_ZN7RpmTaskD1Ev+0x20>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff fcab 	bl	8008abc <_ZN7IRQTaskD1Ev>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	08016c30 	.word	0x08016c30

08009174 <_ZN7RpmTaskD0Ev>:
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff ffe7 	bl	8009150 <_ZN7RpmTaskD1Ev>
 8009182:	2150      	movs	r1, #80	@ 0x50
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f00a fbaf 	bl	80138e8 <_ZdlPvj>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>:
 *      Author: Admin
 */

#include "Reader/MyPin.h"

MyPin::MyPin(GPIO_TypeDef *port, uint16_t pin, TickType_t holdTime) :
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
		port(port), pin(pin), timer(holdTime) {
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	809a      	strh	r2, [r3, #4]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3308      	adds	r3, #8
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f7 fff4 	bl	80011a4 <_ZN10TimeTickerC1Em>
}
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <_ZN5MyPin8equalPinEt>:

bool MyPin::equalPin(uint16_t pin) {
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	807b      	strh	r3, [r7, #2]
	return pin == this->pin;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	889b      	ldrh	r3, [r3, #4]
 80091d6:	887a      	ldrh	r2, [r7, #2]
 80091d8:	429a      	cmp	r2, r3
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <_ZN5MyPin21isValueWithHoldSignalEb>:

GPIO_PinState MyPin::isValueWithHoldSignal(bool value) {
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
	if (value == false) {
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10e      	bne.n	800921e <_ZN5MyPin21isValueWithHoldSignalEb+0x30>
		if (!this->timer.onTime()) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3308      	adds	r3, #8
 8009204:	4618      	mov	r0, r3
 8009206:	f7f8 f831 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800920a:	4603      	mov	r3, r0
 800920c:	f083 0301 	eor.w	r3, r3, #1
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <_ZN5MyPin21isValueWithHoldSignalEb+0x2c>
			return GPIO_PIN_RESET;
 8009216:	2300      	movs	r3, #0
 8009218:	e007      	b.n	800922a <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		} else {
			return GPIO_PIN_SET;
 800921a:	2301      	movs	r3, #1
 800921c:	e005      	b.n	800922a <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		}
	} else {
		this->timer.reset();
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3308      	adds	r3, #8
 8009222:	4618      	mov	r0, r3
 8009224:	f7f8 f812 	bl	800124c <_ZN10TimeTicker5resetEv>
		return GPIO_PIN_SET;
 8009228:	2301      	movs	r3, #1
	}
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <_ZN5MyPin9readValueEv>:

void MyPin::setHoldSignalTime(TickType_t holdTime) {
	this->timer.setDelayTime(holdTime);
}

GPIO_PinState MyPin::readValue() {
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
	if (!port) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <_ZN5MyPin9readValueEv+0x14>
		return GPIO_PIN_RESET;
 8009242:	2300      	movs	r3, #0
 8009244:	e013      	b.n	800926e <_ZN5MyPin9readValueEv+0x3c>
	}
	return isValueWithHoldSignal(HAL_GPIO_ReadPin(port, pin));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f000 fdf5 	bl	8009e40 <HAL_GPIO_ReadPin>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ffc2 	bl	80091ee <_ZN5MyPin21isValueWithHoldSignalEb>
 800926a:	4603      	mov	r3, r0
 800926c:	bf00      	nop
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <_ZN5MyPin21readValueWithDebounceEb>:

GPIO_PinState MyPin::readValueWithDebounce(bool reverse) {
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
	if (!port) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <_ZN5MyPin21readValueWithDebounceEb+0x18>
		return GPIO_PIN_RESET;
 800928a:	2300      	movs	r3, #0
 800928c:	e040      	b.n	8009310 <_ZN5MyPin21readValueWithDebounceEb+0x9a>
	}
	GPIO_PinState rs = GPIO_PIN_RESET;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f000 fdcf 	bl	8009e40 <HAL_GPIO_ReadPin>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	bf14      	ite	ne
 80092ac:	2301      	movne	r3, #1
 80092ae:	2300      	moveq	r3, #0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <_ZN5MyPin21readValueWithDebounceEb+0x6e>
		vTaskDelay(pdMS_TO_TICKS(30));
 80092b6:	201e      	movs	r0, #30
 80092b8:	f007 ffec 	bl	8011294 <vTaskDelay>
		if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	889b      	ldrh	r3, [r3, #4]
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f000 fdba 	bl	8009e40 <HAL_GPIO_ReadPin>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	bf14      	ite	ne
 80092d6:	2301      	movne	r3, #1
 80092d8:	2300      	moveq	r3, #0
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <_ZN5MyPin21readValueWithDebounceEb+0x6e>
			rs = GPIO_PIN_SET;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return this->timer.getDelayTime() > 0 ? isValueWithHoldSignal(rs) : rs;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3308      	adds	r3, #8
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7f7 ffa3 	bl	8001234 <_ZNK10TimeTicker12getDelayTimeEv>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <_ZN5MyPin21readValueWithDebounceEb+0x96>
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff ff73 	bl	80091ee <_ZN5MyPin21isValueWithHoldSignalEb>
 8009308:	4603      	mov	r3, r0
 800930a:	e000      	b.n	800930e <_ZN5MyPin21readValueWithDebounceEb+0x98>
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	bf00      	nop
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_ZN12SensorReaderC1Ev>:
 */

#include <Reader/SensorReader.h>
SensorReader *SensorReader::instance = nullptr;
SemaphoreHandle_t SensorReader::mtx = nullptr;
SensorReader::SensorReader() :
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
				MyPin(GPIOA, GPIO_PIN_5, 666)), s1Pin(MyPin(GPIOA, GPIO_PIN_6)), s2Pin(
				MyPin(GPIOA, GPIO_PIN_7)), s3Pin(MyPin(GPIOA, GPIO_PIN_8)), s4Pin(
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)),
				sensorModel(ModelManagement::getInstance().getSensorModel()), encoderTask(
				EncoderTask(100.5)), rpmTask(RpmTask(1)) {
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	2301      	movs	r3, #1
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	2380      	movs	r3, #128	@ 0x80
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	2300      	movs	r3, #0
 800932c:	2200      	movs	r2, #0
 800932e:	494e      	ldr	r1, [pc, #312]	@ (8009468 <_ZN12SensorReaderC1Ev+0x150>)
 8009330:	f7fe fb5a 	bl	80079e8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 8009334:	4a4d      	ldr	r2, [pc, #308]	@ (800946c <_ZN12SensorReaderC1Ev+0x154>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
		MyRTOSTask("SensorReader", nullptr, nullptr, 128, 1), atPin(
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f103 0020 	add.w	r0, r3, #32
 8009340:	2300      	movs	r3, #0
 8009342:	2202      	movs	r2, #2
 8009344:	494a      	ldr	r1, [pc, #296]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 8009346:	f7ff ff25 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_1)), ptPin(MyPin(GPIOA, GPIO_PIN_2)), cmPin(
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009350:	2300      	movs	r3, #0
 8009352:	2204      	movs	r2, #4
 8009354:	4946      	ldr	r1, [pc, #280]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 8009356:	f7ff ff1d 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8009360:	2300      	movs	r3, #0
 8009362:	2208      	movs	r2, #8
 8009364:	4942      	ldr	r1, [pc, #264]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 8009366:	f7ff ff15 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4, 666)), npPin(
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 8009370:	f240 239a 	movw	r3, #666	@ 0x29a
 8009374:	2210      	movs	r2, #16
 8009376:	493e      	ldr	r1, [pc, #248]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 8009378:	f7ff ff0c 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8009382:	f240 239a 	movw	r3, #666	@ 0x29a
 8009386:	2220      	movs	r2, #32
 8009388:	4939      	ldr	r1, [pc, #228]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 800938a:	f7ff ff03 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_5, 666)), s1Pin(MyPin(GPIOA, GPIO_PIN_6)), s2Pin(
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 8009394:	2300      	movs	r3, #0
 8009396:	2240      	movs	r2, #64	@ 0x40
 8009398:	4935      	ldr	r1, [pc, #212]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 800939a:	f7ff fefb 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 80093a4:	2300      	movs	r3, #0
 80093a6:	2280      	movs	r2, #128	@ 0x80
 80093a8:	4931      	ldr	r1, [pc, #196]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 80093aa:	f7ff fef3 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_7)), s3Pin(MyPin(GPIOA, GPIO_PIN_8)), s4Pin(
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 80093b4:	2300      	movs	r3, #0
 80093b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093ba:	492d      	ldr	r1, [pc, #180]	@ (8009470 <_ZN12SensorReaderC1Ev+0x158>)
 80093bc:	f7ff feea 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80093c6:	2300      	movs	r3, #0
 80093c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80093cc:	4929      	ldr	r1, [pc, #164]	@ (8009474 <_ZN12SensorReaderC1Ev+0x15c>)
 80093ce:	f7ff fee1 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f103 00d4 	add.w	r0, r3, #212	@ 0xd4
 80093d8:	2300      	movs	r3, #0
 80093da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80093de:	4925      	ldr	r1, [pc, #148]	@ (8009474 <_ZN12SensorReaderC1Ev+0x15c>)
 80093e0:	f7ff fed8 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80093ea:	2300      	movs	r3, #0
 80093ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80093f0:	4920      	ldr	r1, [pc, #128]	@ (8009474 <_ZN12SensorReaderC1Ev+0x15c>)
 80093f2:	f7ff fecf 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)),
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 80093fc:	2300      	movs	r3, #0
 80093fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009402:	491c      	ldr	r1, [pc, #112]	@ (8009474 <_ZN12SensorReaderC1Ev+0x15c>)
 8009404:	f7ff fec6 	bl	8009194 <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				sensorModel(ModelManagement::getInstance().getSensorModel()), encoderTask(
 8009408:	f7f7 fff0 	bl	80013ec <_ZN15ModelManagement11getInstanceEv>
 800940c:	4603      	mov	r3, r0
 800940e:	4618      	mov	r0, r3
 8009410:	f7f8 f822 	bl	8001458 <_ZN15ModelManagement14getSensorModelEv>
 8009414:	4602      	mov	r2, r0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8009422:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8009460 <_ZN12SensorReaderC1Ev+0x148>
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff fb6a 	bl	8008b00 <_ZN11EncoderTaskC1Ed>
				EncoderTask(100.5)), rpmTask(RpmTask(1)) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009432:	2101      	movs	r1, #1
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff fdc1 	bl	8008fbc <_ZN7RpmTaskC1Et>
	EncodeModel *enncoderModel = this->encoderTask.getEncoderModel();
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fc2d 	bl	8008ca0 <_ZN11EncoderTask15getEncoderModelEv>
 8009446:	60f8      	str	r0, [r7, #12]
	this->sensorModel->setEncodeModel(enncoderModel);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4618      	mov	r0, r3
 8009452:	f7f8 f861 	bl	8001518 <_ZN11SensorModel14setEncodeModelEP11EncodeModel>
}
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	00000000 	.word	0x00000000
 8009464:	40592000 	.word	0x40592000
 8009468:	080169f8 	.word	0x080169f8
 800946c:	08016c54 	.word	0x08016c54
 8009470:	40020000 	.word	0x40020000
 8009474:	40020400 	.word	0x40020400

08009478 <_ZN12SensorReaderD1Ev>:

SensorReader::~SensorReader() {
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	4a0b      	ldr	r2, [pc, #44]	@ (80094b0 <_ZN12SensorReaderD1Ev+0x38>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
}
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fe5f 	bl	8009150 <_ZN7RpmTaskD1Ev>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fcf1 	bl	8008e80 <_ZN11EncoderTaskD1Ev>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fac9 	bl	8007a38 <_ZN10MyRTOSTaskD1Ev>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	08016c54 	.word	0x08016c54

080094b4 <_ZN12SensorReaderD0Ev>:
SensorReader::~SensorReader() {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
}
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ffdb 	bl	8009478 <_ZN12SensorReaderD1Ev>
 80094c2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f00a fa0e 	bl	80138e8 <_ZdlPvj>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <_ZN12SensorReader15handleInterruptEt>:

void SensorReader::handleInterrupt(uint16_t pin) {
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	807b      	strh	r3, [r7, #2]
	this->encoderTask.interruptCallback(pin);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80094e8:	887a      	ldrh	r2, [r7, #2]
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff fd0d 	bl	8008f0c <_ZN7IRQTask17interruptCallbackEt>
	this->rpmTask.interruptCallback(pin);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80094f8:	887a      	ldrh	r2, [r7, #2]
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fd05 	bl	8008f0c <_ZN7IRQTask17interruptCallbackEt>
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <_ZN12SensorReader11getInstanceEv>:

SensorModel* SensorReader::getSensorModel() {
	return this->sensorModel;
}

SensorReader& SensorReader::getInstance() {
 800950c:	b598      	push	{r3, r4, r7, lr}
 800950e:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 8009510:	4b1b      	ldr	r3, [pc, #108]	@ (8009580 <_ZN12SensorReader11getInstanceEv+0x74>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d12e      	bne.n	8009576 <_ZN12SensorReader11getInstanceEv+0x6a>
		if (mtx == nullptr) {
 8009518:	4b1a      	ldr	r3, [pc, #104]	@ (8009584 <_ZN12SensorReader11getInstanceEv+0x78>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d105      	bne.n	800952c <_ZN12SensorReader11getInstanceEv+0x20>
			mtx = xSemaphoreCreateMutex();
 8009520:	2001      	movs	r0, #1
 8009522:	f006 fec4 	bl	80102ae <xQueueCreateMutex>
 8009526:	4603      	mov	r3, r0
 8009528:	4a16      	ldr	r2, [pc, #88]	@ (8009584 <_ZN12SensorReader11getInstanceEv+0x78>)
 800952a:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mtx, portMAX_DELAY) == pdTRUE) {
 800952c:	4b15      	ldr	r3, [pc, #84]	@ (8009584 <_ZN12SensorReader11getInstanceEv+0x78>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f04f 31ff 	mov.w	r1, #4294967295
 8009534:	4618      	mov	r0, r3
 8009536:	f007 f9e5 	bl	8010904 <xQueueSemaphoreTake>
 800953a:	4603      	mov	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	bf0c      	ite	eq
 8009540:	2301      	moveq	r3, #1
 8009542:	2300      	movne	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d015      	beq.n	8009576 <_ZN12SensorReader11getInstanceEv+0x6a>
			if (instance == nullptr) {
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <_ZN12SensorReader11getInstanceEv+0x74>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <_ZN12SensorReader11getInstanceEv+0x5c>
				instance = new SensorReader();
 8009552:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8009556:	f00a f9c9 	bl	80138ec <_Znwj>
 800955a:	4603      	mov	r3, r0
 800955c:	461c      	mov	r4, r3
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff feda 	bl	8009318 <_ZN12SensorReaderC1Ev>
 8009564:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <_ZN12SensorReader11getInstanceEv+0x74>)
 8009566:	601c      	str	r4, [r3, #0]
			}
			xSemaphoreGive(mtx);
 8009568:	4b06      	ldr	r3, [pc, #24]	@ (8009584 <_ZN12SensorReader11getInstanceEv+0x78>)
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	f006 feb5 	bl	80102e0 <xQueueGenericSend>
		}
	}
	return *instance;
 8009576:	4b02      	ldr	r3, [pc, #8]	@ (8009580 <_ZN12SensorReader11getInstanceEv+0x74>)
 8009578:	681b      	ldr	r3, [r3, #0]
}
 800957a:	4618      	mov	r0, r3
 800957c:	bd98      	pop	{r3, r4, r7, pc}
 800957e:	bf00      	nop
 8009580:	200003ec 	.word	0x200003ec
 8009584:	200003f0 	.word	0x200003f0

08009588 <_ZN12SensorReader13getGearNumberEv>:

int SensorReader::getGearNumber() {
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	bool s1 = this->s1Pin.readValueWithDebounce(), s2 =
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3384      	adds	r3, #132	@ 0x84
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fe6d 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bf14      	ite	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	2300      	moveq	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
			this->s2Pin.readValueWithDebounce(), s3 =
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3398      	adds	r3, #152	@ 0x98
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff fe61 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bf14      	ite	ne
 80095ba:	2301      	movne	r3, #1
 80095bc:	2300      	moveq	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]
			this->s3Pin.readValueWithDebounce(), s4 =
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	33ac      	adds	r3, #172	@ 0xac
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fe55 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf14      	ite	ne
 80095d2:	2301      	movne	r3, #1
 80095d4:	2300      	moveq	r3, #0
 80095d6:	737b      	strb	r3, [r7, #13]
			this->s4Pin.readValueWithDebounce();
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	33c0      	adds	r3, #192	@ 0xc0
 80095dc:	2100      	movs	r1, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fe49 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bf14      	ite	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	2300      	moveq	r3, #0
 80095ee:	733b      	strb	r3, [r7, #12]
	if (s3) {
 80095f0:	7b7b      	ldrb	r3, [r7, #13]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00e      	beq.n	8009614 <_ZN12SensorReader13getGearNumberEv+0x8c>
		if (s1) {
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <_ZN12SensorReader13getGearNumberEv+0x78>
			return 3;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e014      	b.n	800962a <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s2) {
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <_ZN12SensorReader13getGearNumberEv+0x82>
			return 4;
 8009606:	2304      	movs	r3, #4
 8009608:	e00f      	b.n	800962a <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s4) {
 800960a:	7b3b      	ldrb	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <_ZN12SensorReader13getGearNumberEv+0x8c>
			return 5;
 8009610:	2305      	movs	r3, #5
 8009612:	e00a      	b.n	800962a <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
	}
	if (s1) {
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <_ZN12SensorReader13getGearNumberEv+0x96>
		return 1;
 800961a:	2301      	movs	r3, #1
 800961c:	e005      	b.n	800962a <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	if (s2) {
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <_ZN12SensorReader13getGearNumberEv+0xa0>
		return 2;
 8009624:	2302      	movs	r3, #2
 8009626:	e000      	b.n	800962a <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	return 0;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <_ZN12SensorReader3runEv>:

void SensorReader::run() {
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	this->encoderTask.start();
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fa62 	bl	8007b0c <_ZN10MyRTOSTask5startEv>
	this->rpmTask.start();
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fa5c 	bl	8007b0c <_ZN10MyRTOSTask5startEv>
	this->stopTask = false;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	771a      	strb	r2, [r3, #28]
	while (!this->stopTask) {
 800965a:	e0c1      	b.n	80097e0 <_ZN12SensorReader3runEv+0x1ac>
		this->sensorModel->setAt(this->atPin.readValueWithDebounce());
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3320      	adds	r3, #32
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fe04 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	4619      	mov	r1, r3
 800967c:	4620      	mov	r0, r4
 800967e:	f7f7 ff30 	bl	80014e2 <_ZN11SensorModel5setAtEb>
		this->sensorModel->setPt(this->ptPin.readValueWithDebounce());
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3334      	adds	r3, #52	@ 0x34
 800968c:	2100      	movs	r1, #0
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fdf1 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	bf14      	ite	ne
 800969a:	2301      	movne	r3, #1
 800969c:	2300      	moveq	r3, #0
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	4619      	mov	r1, r3
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7f7 ffa6 	bl	80015f4 <_ZN11SensorModel5setPtEb>
		this->sensorModel->setCm(this->cmPin.readValueWithDebounce());
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3348      	adds	r3, #72	@ 0x48
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fdde 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	4619      	mov	r1, r3
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7f7 ff3f 	bl	800154c <_ZN11SensorModel5setCmEb>
		this->sensorModel->setNt(this->ntPin.readValueWithDebounce());
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	335c      	adds	r3, #92	@ 0x5c
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fdcb 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bf14      	ite	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	2300      	moveq	r3, #0
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7f7 ff71 	bl	80015d6 <_ZN11SensorModel5setNtEb>
		this->sensorModel->setNp(this->npPin.readValueWithDebounce());
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3370      	adds	r3, #112	@ 0x70
 80096fe:	2100      	movs	r1, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff fdb8 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	bf14      	ite	ne
 800970c:	2301      	movne	r3, #1
 800970e:	2300      	moveq	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	4620      	mov	r0, r4
 8009716:	f7f7 ff43 	bl	80015a0 <_ZN11SensorModel5setNpEb>
		this->sensorModel->setT1(this->t1Pin.readValueWithDebounce());
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	33d4      	adds	r3, #212	@ 0xd4
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fda5 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	bf14      	ite	ne
 8009732:	2301      	movne	r3, #1
 8009734:	2300      	moveq	r3, #0
 8009736:	b2db      	uxtb	r3, r3
 8009738:	4619      	mov	r1, r3
 800973a:	4620      	mov	r0, r4
 800973c:	f7f7 ff84 	bl	8001648 <_ZN11SensorModel5setT1Eb>
		this->sensorModel->setT2(this->t2Pin.readValueWithDebounce());
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	33e8      	adds	r3, #232	@ 0xe8
 800974a:	2100      	movs	r1, #0
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff fd92 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	bf14      	ite	ne
 8009758:	2301      	movne	r3, #1
 800975a:	2300      	moveq	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	4619      	mov	r1, r3
 8009760:	4620      	mov	r0, r4
 8009762:	f7f7 ff80 	bl	8001666 <_ZN11SensorModel5setT2Eb>
		this->sensorModel->setT3(this->t3Pin.readValueWithDebounce());
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	33fc      	adds	r3, #252	@ 0xfc
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fd7f 	bl	8009276 <_ZN5MyPin21readValueWithDebounceEb>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	bf14      	ite	ne
 800977e:	2301      	movne	r3, #1
 8009780:	2300      	moveq	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	4619      	mov	r1, r3
 8009786:	4620      	mov	r0, r4
 8009788:	f7f7 ff7c 	bl	8001684 <_ZN11SensorModel5setT3Eb>
		this->sensorModel->setGear(this->getGearNumber());
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fef8 	bl	8009588 <_ZN12SensorReader13getGearNumberEv>
 8009798:	4603      	mov	r3, r0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	4619      	mov	r1, r3
 800979e:	4620      	mov	r0, r4
 80097a0:	f7f7 fee3 	bl	800156a <_ZN11SensorModel7setGearEh>
		this->sensorModel->setRpm(this->rpmTask.getValue());
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fc61 	bl	8009078 <_ZN7RpmTask8getValueEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	4619      	mov	r1, r3
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7f7 ff35 	bl	800162a <_ZN11SensorModel6setRpmEt>
		this->encoderTask.getEncoderModel();
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff fa6a 	bl	8008ca0 <_ZN11EncoderTask15getEncoderModelEv>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80097cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80097d0:	480a      	ldr	r0, [pc, #40]	@ (80097fc <_ZN12SensorReader3runEv+0x1c8>)
 80097d2:	f000 fb66 	bl	8009ea2 <HAL_GPIO_TogglePin>
		delay(100);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2164      	movs	r1, #100	@ 0x64
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe f95a 	bl	8007a94 <_ZN10MyRTOSTask5delayEm>
	while (!this->stopTask) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7f1b      	ldrb	r3, [r3, #28]
 80097e4:	f083 0301 	eor.w	r3, r3, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f af36 	bne.w	800965c <_ZN12SensorReader3runEv+0x28>
	}
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd90      	pop	{r4, r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40020800 	.word	0x40020800

08009800 <_ZN12SensorReader4stopEv>:

void SensorReader::stop() {
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	this->encoderTask.stop();
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe f9a0 	bl	8007b54 <_ZN10MyRTOSTask4stopEv>
	this->rpmTask.stop();
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe f99a 	bl	8007b54 <_ZN10MyRTOSTask4stopEv>
	MyRTOSTask::stop();
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f996 	bl	8007b54 <_ZN10MyRTOSTask4stopEv>
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	80fb      	strh	r3, [r7, #6]
	SensorReader::getInstance().handleInterrupt(pin);
 800983a:	f7ff fe67 	bl	800950c <_ZN12SensorReader11getInstanceEv>
 800983e:	4602      	mov	r2, r0
 8009840:	88fb      	ldrh	r3, [r7, #6]
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7ff fe46 	bl	80094d6 <_ZN12SensorReader15handleInterruptEt>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800988c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009858:	f7ff f91e 	bl	8008a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800985c:	480c      	ldr	r0, [pc, #48]	@ (8009890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800985e:	490d      	ldr	r1, [pc, #52]	@ (8009894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009860:	4a0d      	ldr	r2, [pc, #52]	@ (8009898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009864:	e002      	b.n	800986c <LoopCopyDataInit>

08009866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800986a:	3304      	adds	r3, #4

0800986c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800986c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800986e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009870:	d3f9      	bcc.n	8009866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009872:	4a0a      	ldr	r2, [pc, #40]	@ (800989c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009874:	4c0a      	ldr	r4, [pc, #40]	@ (80098a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009878:	e001      	b.n	800987e <LoopFillZerobss>

0800987a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800987a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800987c:	3204      	adds	r2, #4

0800987e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800987e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009880:	d3fb      	bcc.n	800987a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009882:	f00b f8d5 	bl	8014a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009886:	f7fe f9df 	bl	8007c48 <main>
  bx  lr    
 800988a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800988c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009894:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8009898:	08017020 	.word	0x08017020
  ldr r2, =_sbss
 800989c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80098a0:	20006314 	.word	0x20006314

080098a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80098a4:	e7fe      	b.n	80098a4 <ADC_IRQHandler>
	...

080098a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098ac:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <HAL_Init+0x40>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0d      	ldr	r2, [pc, #52]	@ (80098e8 <HAL_Init+0x40>)
 80098b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80098b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80098b8:	4b0b      	ldr	r3, [pc, #44]	@ (80098e8 <HAL_Init+0x40>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a0a      	ldr	r2, [pc, #40]	@ (80098e8 <HAL_Init+0x40>)
 80098be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80098c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098c4:	4b08      	ldr	r3, [pc, #32]	@ (80098e8 <HAL_Init+0x40>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a07      	ldr	r2, [pc, #28]	@ (80098e8 <HAL_Init+0x40>)
 80098ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098d0:	2003      	movs	r0, #3
 80098d2:	f000 f8fc 	bl	8009ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098d6:	200f      	movs	r0, #15
 80098d8:	f7fe ff52 	bl	8008780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098dc:	f7fe ff24 	bl	8008728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	40023c00 	.word	0x40023c00

080098ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80098f0:	4b06      	ldr	r3, [pc, #24]	@ (800990c <HAL_IncTick+0x20>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b06      	ldr	r3, [pc, #24]	@ (8009910 <HAL_IncTick+0x24>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4413      	add	r3, r2
 80098fc:	4a04      	ldr	r2, [pc, #16]	@ (8009910 <HAL_IncTick+0x24>)
 80098fe:	6013      	str	r3, [r2, #0]
}
 8009900:	bf00      	nop
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	2000000c 	.word	0x2000000c
 8009910:	200003f4 	.word	0x200003f4

08009914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  return uwTick;
 8009918:	4b03      	ldr	r3, [pc, #12]	@ (8009928 <HAL_GetTick+0x14>)
 800991a:	681b      	ldr	r3, [r3, #0]
}
 800991c:	4618      	mov	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	200003f4 	.word	0x200003f4

0800992c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009934:	f7ff ffee 	bl	8009914 <HAL_GetTick>
 8009938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d005      	beq.n	8009952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009946:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <HAL_Delay+0x44>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009952:	bf00      	nop
 8009954:	f7ff ffde 	bl	8009914 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d8f7      	bhi.n	8009954 <HAL_Delay+0x28>
  {
  }
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	2000000c 	.word	0x2000000c

08009974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <__NVIC_SetPriorityGrouping+0x44>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009990:	4013      	ands	r3, r2
 8009992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800999c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80099a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099a6:	4a04      	ldr	r2, [pc, #16]	@ (80099b8 <__NVIC_SetPriorityGrouping+0x44>)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	60d3      	str	r3, [r2, #12]
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	e000ed00 	.word	0xe000ed00

080099bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099c0:	4b04      	ldr	r3, [pc, #16]	@ (80099d4 <__NVIC_GetPriorityGrouping+0x18>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	f003 0307 	and.w	r3, r3, #7
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	e000ed00 	.word	0xe000ed00

080099d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	db0b      	blt.n	8009a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f003 021f 	and.w	r2, r3, #31
 80099f0:	4907      	ldr	r1, [pc, #28]	@ (8009a10 <__NVIC_EnableIRQ+0x38>)
 80099f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	2001      	movs	r0, #1
 80099fa:	fa00 f202 	lsl.w	r2, r0, r2
 80099fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	e000e100 	.word	0xe000e100

08009a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	db0a      	blt.n	8009a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	490c      	ldr	r1, [pc, #48]	@ (8009a60 <__NVIC_SetPriority+0x4c>)
 8009a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a32:	0112      	lsls	r2, r2, #4
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	440b      	add	r3, r1
 8009a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a3c:	e00a      	b.n	8009a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	4908      	ldr	r1, [pc, #32]	@ (8009a64 <__NVIC_SetPriority+0x50>)
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	3b04      	subs	r3, #4
 8009a4c:	0112      	lsls	r2, r2, #4
 8009a4e:	b2d2      	uxtb	r2, r2
 8009a50:	440b      	add	r3, r1
 8009a52:	761a      	strb	r2, [r3, #24]
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	e000e100 	.word	0xe000e100
 8009a64:	e000ed00 	.word	0xe000ed00

08009a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b089      	sub	sp, #36	@ 0x24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f1c3 0307 	rsb	r3, r3, #7
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	bf28      	it	cs
 8009a86:	2304      	movcs	r3, #4
 8009a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	2b06      	cmp	r3, #6
 8009a90:	d902      	bls.n	8009a98 <NVIC_EncodePriority+0x30>
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	3b03      	subs	r3, #3
 8009a96:	e000      	b.n	8009a9a <NVIC_EncodePriority+0x32>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa6:	43da      	mvns	r2, r3
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	401a      	ands	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aba:	43d9      	mvns	r1, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ac0:	4313      	orrs	r3, r2
         );
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3724      	adds	r7, #36	@ 0x24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff ff4c 	bl	8009974 <__NVIC_SetPriorityGrouping>
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009af6:	f7ff ff61 	bl	80099bc <__NVIC_GetPriorityGrouping>
 8009afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	6978      	ldr	r0, [r7, #20]
 8009b02:	f7ff ffb1 	bl	8009a68 <NVIC_EncodePriority>
 8009b06:	4602      	mov	r2, r0
 8009b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff ff80 	bl	8009a14 <__NVIC_SetPriority>
}
 8009b14:	bf00      	nop
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff ff54 	bl	80099d8 <__NVIC_EnableIRQ>
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	@ 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61fb      	str	r3, [r7, #28]
 8009b52:	e159      	b.n	8009e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009b54:	2201      	movs	r2, #1
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4013      	ands	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	f040 8148 	bne.w	8009e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d005      	beq.n	8009b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d130      	bne.n	8009bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	2203      	movs	r2, #3
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	43db      	mvns	r3, r3
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	fa02 f303 	lsl.w	r3, r2, r3
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	43db      	mvns	r3, r3
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	091b      	lsrs	r3, r3, #4
 8009bd6:	f003 0201 	and.w	r2, r3, #1
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d017      	beq.n	8009c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	2203      	movs	r2, #3
 8009c04:	fa02 f303 	lsl.w	r3, r2, r3
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d123      	bne.n	8009c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	08da      	lsrs	r2, r3, #3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3208      	adds	r2, #8
 8009c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	f003 0307 	and.w	r3, r3, #7
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	220f      	movs	r2, #15
 8009c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c50:	43db      	mvns	r3, r3
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	4013      	ands	r3, r2
 8009c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f003 0307 	and.w	r3, r3, #7
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	08da      	lsrs	r2, r3, #3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3208      	adds	r2, #8
 8009c76:	69b9      	ldr	r1, [r7, #24]
 8009c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	2203      	movs	r2, #3
 8009c88:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8c:	43db      	mvns	r3, r3
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	4013      	ands	r3, r2
 8009c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f003 0203 	and.w	r2, r3, #3
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	005b      	lsls	r3, r3, #1
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	69ba      	ldr	r2, [r7, #24]
 8009cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a2 	beq.w	8009e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	4b57      	ldr	r3, [pc, #348]	@ (8009e20 <HAL_GPIO_Init+0x2e8>)
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc6:	4a56      	ldr	r2, [pc, #344]	@ (8009e20 <HAL_GPIO_Init+0x2e8>)
 8009cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009cce:	4b54      	ldr	r3, [pc, #336]	@ (8009e20 <HAL_GPIO_Init+0x2e8>)
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cda:	4a52      	ldr	r2, [pc, #328]	@ (8009e24 <HAL_GPIO_Init+0x2ec>)
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	089b      	lsrs	r3, r3, #2
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	220f      	movs	r2, #15
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	43db      	mvns	r3, r3
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a49      	ldr	r2, [pc, #292]	@ (8009e28 <HAL_GPIO_Init+0x2f0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d019      	beq.n	8009d3a <HAL_GPIO_Init+0x202>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a48      	ldr	r2, [pc, #288]	@ (8009e2c <HAL_GPIO_Init+0x2f4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d013      	beq.n	8009d36 <HAL_GPIO_Init+0x1fe>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a47      	ldr	r2, [pc, #284]	@ (8009e30 <HAL_GPIO_Init+0x2f8>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00d      	beq.n	8009d32 <HAL_GPIO_Init+0x1fa>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a46      	ldr	r2, [pc, #280]	@ (8009e34 <HAL_GPIO_Init+0x2fc>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d007      	beq.n	8009d2e <HAL_GPIO_Init+0x1f6>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a45      	ldr	r2, [pc, #276]	@ (8009e38 <HAL_GPIO_Init+0x300>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d101      	bne.n	8009d2a <HAL_GPIO_Init+0x1f2>
 8009d26:	2304      	movs	r3, #4
 8009d28:	e008      	b.n	8009d3c <HAL_GPIO_Init+0x204>
 8009d2a:	2307      	movs	r3, #7
 8009d2c:	e006      	b.n	8009d3c <HAL_GPIO_Init+0x204>
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e004      	b.n	8009d3c <HAL_GPIO_Init+0x204>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e002      	b.n	8009d3c <HAL_GPIO_Init+0x204>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <HAL_GPIO_Init+0x204>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	69fa      	ldr	r2, [r7, #28]
 8009d3e:	f002 0203 	and.w	r2, r2, #3
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	4093      	lsls	r3, r2
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d4c:	4935      	ldr	r1, [pc, #212]	@ (8009e24 <HAL_GPIO_Init+0x2ec>)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	089b      	lsrs	r3, r3, #2
 8009d52:	3302      	adds	r3, #2
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d5a:	4b38      	ldr	r3, [pc, #224]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	43db      	mvns	r3, r3
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	4013      	ands	r3, r2
 8009d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d84:	4b2d      	ldr	r3, [pc, #180]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	4013      	ands	r3, r2
 8009d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009da8:	4a24      	ldr	r2, [pc, #144]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009dae:	4b23      	ldr	r3, [pc, #140]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	43db      	mvns	r3, r3
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009dd8:	4b18      	ldr	r3, [pc, #96]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	43db      	mvns	r3, r3
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	4013      	ands	r3, r2
 8009de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8009e3c <HAL_GPIO_Init+0x304>)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	3301      	adds	r3, #1
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	2b0f      	cmp	r3, #15
 8009e0c:	f67f aea2 	bls.w	8009b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	3724      	adds	r7, #36	@ 0x24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40023800 	.word	0x40023800
 8009e24:	40013800 	.word	0x40013800
 8009e28:	40020000 	.word	0x40020000
 8009e2c:	40020400 	.word	0x40020400
 8009e30:	40020800 	.word	0x40020800
 8009e34:	40020c00 	.word	0x40020c00
 8009e38:	40021000 	.word	0x40021000
 8009e3c:	40013c00 	.word	0x40013c00

08009e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	887b      	ldrh	r3, [r7, #2]
 8009e52:	4013      	ands	r3, r2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e001      	b.n	8009e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	807b      	strh	r3, [r7, #2]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e80:	787b      	ldrb	r3, [r7, #1]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e86:	887a      	ldrh	r2, [r7, #2]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e8c:	e003      	b.n	8009e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e8e:	887b      	ldrh	r3, [r7, #2]
 8009e90:	041a      	lsls	r2, r3, #16
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	619a      	str	r2, [r3, #24]
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009eb4:	887a      	ldrh	r2, [r7, #2]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4013      	ands	r3, r2
 8009eba:	041a      	lsls	r2, r3, #16
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	43d9      	mvns	r1, r3
 8009ec0:	887b      	ldrh	r3, [r7, #2]
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	619a      	str	r2, [r3, #24]
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
	...

08009ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009ee2:	4b08      	ldr	r3, [pc, #32]	@ (8009f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ee4:	695a      	ldr	r2, [r3, #20]
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009eee:	4a05      	ldr	r2, [pc, #20]	@ (8009f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ef0:	88fb      	ldrh	r3, [r7, #6]
 8009ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff fc9a 	bl	8009830 <HAL_GPIO_EXTI_Callback>
  }
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40013c00 	.word	0x40013c00

08009f08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e101      	b.n	800a11e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f009 f9cd 	bl	80132d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f48:	d102      	bne.n	8009f50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f002 fc24 	bl	800c7a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7c1a      	ldrb	r2, [r3, #16]
 8009f62:	f88d 2000 	strb.w	r2, [sp]
 8009f66:	3304      	adds	r3, #4
 8009f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f6a:	f002 fb03 	bl	800c574 <USB_CoreInit>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e0ce      	b.n	800a11e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 fc1c 	bl	800c7c4 <USB_SetCurrentMode>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e0bf      	b.n	800a11e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	e04a      	b.n	800a03a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009fa4:	7bfa      	ldrb	r2, [r7, #15]
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	4413      	add	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	440b      	add	r3, r1
 8009fb2:	3315      	adds	r3, #21
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009fb8:	7bfa      	ldrb	r2, [r7, #15]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	3314      	adds	r3, #20
 8009fc8:	7bfa      	ldrb	r2, [r7, #15]
 8009fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009fcc:	7bfa      	ldrb	r2, [r7, #15]
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	b298      	uxth	r0, r3
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	332e      	adds	r3, #46	@ 0x2e
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009fe4:	7bfa      	ldrb	r2, [r7, #15]
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	3318      	adds	r3, #24
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ff8:	7bfa      	ldrb	r2, [r7, #15]
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	331c      	adds	r3, #28
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a00c:	7bfa      	ldrb	r2, [r7, #15]
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	3320      	adds	r3, #32
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a020:	7bfa      	ldrb	r2, [r7, #15]
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	3324      	adds	r3, #36	@ 0x24
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	3301      	adds	r3, #1
 800a038:	73fb      	strb	r3, [r7, #15]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	791b      	ldrb	r3, [r3, #4]
 800a03e:	7bfa      	ldrb	r2, [r7, #15]
 800a040:	429a      	cmp	r2, r3
 800a042:	d3af      	bcc.n	8009fa4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	e044      	b.n	800a0d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a04a:	7bfa      	ldrb	r2, [r7, #15]
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a060:	7bfa      	ldrb	r2, [r7, #15]
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	4613      	mov	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a072:	7bfa      	ldrb	r2, [r7, #15]
 800a074:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a076:	7bfa      	ldrb	r2, [r7, #15]
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	00db      	lsls	r3, r3, #3
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a08c:	7bfa      	ldrb	r2, [r7, #15]
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a0a2:	7bfa      	ldrb	r2, [r7, #15]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a0b8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	73fb      	strb	r3, [r7, #15]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	791b      	ldrb	r3, [r3, #4]
 800a0d8:	7bfa      	ldrb	r2, [r7, #15]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d3b5      	bcc.n	800a04a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	7c1a      	ldrb	r2, [r3, #16]
 800a0e6:	f88d 2000 	strb.w	r2, [sp]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0ee:	f002 fbb5 	bl	800c85c <USB_DevInit>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e00c      	b.n	800a11e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f003 fbff 	bl	800d91a <USB_DevDisconnect>

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_PCD_Start+0x1c>
 800a13e:	2302      	movs	r3, #2
 800a140:	e022      	b.n	800a188 <HAL_PCD_Start+0x62>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d009      	beq.n	800a16a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d105      	bne.n	800a16a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f002 fb06 	bl	800c780 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f003 fbad 	bl	800d8d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b08d      	sub	sp, #52	@ 0x34
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 fc6b 	bl	800da82 <USB_GetMode>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f040 848c 	bne.w	800aacc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 fbcf 	bl	800d95c <USB_ReadInterrupts>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 8482 	beq.w	800aaca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f003 fbbc 	bl	800d95c <USB_ReadInterrupts>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d107      	bne.n	800a1fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	695a      	ldr	r2, [r3, #20]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f002 0202 	and.w	r2, r2, #2
 800a1fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f003 fbaa 	bl	800d95c <USB_ReadInterrupts>
 800a208:	4603      	mov	r3, r0
 800a20a:	f003 0310 	and.w	r3, r3, #16
 800a20e:	2b10      	cmp	r3, #16
 800a210:	d161      	bne.n	800a2d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f022 0210 	bic.w	r2, r2, #16
 800a220:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	f003 020f 	and.w	r2, r3, #15
 800a22e:	4613      	mov	r3, r2
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	3304      	adds	r3, #4
 800a240:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	0c5b      	lsrs	r3, r3, #17
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d124      	bne.n	800a298 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a254:	4013      	ands	r3, r2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d035      	beq.n	800a2c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	091b      	lsrs	r3, r3, #4
 800a262:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a268:	b29b      	uxth	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	6a38      	ldr	r0, [r7, #32]
 800a26e:	f003 f9e1 	bl	800d634 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	091b      	lsrs	r3, r3, #4
 800a27a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a27e:	441a      	add	r2, r3
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	695a      	ldr	r2, [r3, #20]
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a290:	441a      	add	r2, r3
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	615a      	str	r2, [r3, #20]
 800a296:	e016      	b.n	800a2c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	0c5b      	lsrs	r3, r3, #17
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	2b06      	cmp	r3, #6
 800a2a2:	d110      	bne.n	800a2c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6a38      	ldr	r0, [r7, #32]
 800a2b0:	f003 f9c0 	bl	800d634 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	695a      	ldr	r2, [r3, #20]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	091b      	lsrs	r3, r3, #4
 800a2bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2c0:	441a      	add	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0210 	orr.w	r2, r2, #16
 800a2d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f003 fb3e 	bl	800d95c <USB_ReadInterrupts>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a2e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2ea:	f040 80a7 	bne.w	800a43c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f003 fb43 	bl	800d982 <USB_ReadDevAllOutEpInterrupt>
 800a2fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a2fe:	e099      	b.n	800a434 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 808e 	beq.w	800a428 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f003 fb67 	bl	800d9ea <USB_ReadDevOutEPInterrupt>
 800a31c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00c      	beq.n	800a342 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a334:	461a      	mov	r2, r3
 800a336:	2301      	movs	r3, #1
 800a338:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a33a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fea3 	bl	800b088 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f003 0308 	and.w	r3, r3, #8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00c      	beq.n	800a366 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a358:	461a      	mov	r2, r3
 800a35a:	2308      	movs	r3, #8
 800a35c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a35e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 ff79 	bl	800b258 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d008      	beq.n	800a382 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	461a      	mov	r2, r3
 800a37e:	2310      	movs	r3, #16
 800a380:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f003 0302 	and.w	r3, r3, #2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d030      	beq.n	800a3ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a394:	2b80      	cmp	r3, #128	@ 0x80
 800a396:	d109      	bne.n	800a3ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	69fa      	ldr	r2, [r7, #28]
 800a3a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a3aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a3ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	3304      	adds	r3, #4
 800a3c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	78db      	ldrb	r3, [r3, #3]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d108      	bne.n	800a3dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f009 f878 	bl	80134cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d008      	beq.n	800a40a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a404:	461a      	mov	r2, r3
 800a406:	2320      	movs	r3, #32
 800a408:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d009      	beq.n	800a428 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a420:	461a      	mov	r2, r3
 800a422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a426:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	3301      	adds	r3, #1
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	2b00      	cmp	r3, #0
 800a438:	f47f af62 	bne.w	800a300 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	f003 fa8b 	bl	800d95c <USB_ReadInterrupts>
 800a446:	4603      	mov	r3, r0
 800a448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a44c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a450:	f040 80db 	bne.w	800a60a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f003 faac 	bl	800d9b6 <USB_ReadDevAllInEpInterrupt>
 800a45e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a464:	e0cd      	b.n	800a602 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80c2 	beq.w	800a5f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a478:	b2d2      	uxtb	r2, r2
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f003 fad2 	bl	800da26 <USB_ReadDevInEPInterrupt>
 800a482:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d057      	beq.n	800a53e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	2201      	movs	r2, #1
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	43db      	mvns	r3, r3
 800a4a8:	69f9      	ldr	r1, [r7, #28]
 800a4aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	799b      	ldrb	r3, [r3, #6]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d132      	bne.n	800a532 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	3320      	adds	r3, #32
 800a4dc:	6819      	ldr	r1, [r3, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4403      	add	r3, r0
 800a4ec:	331c      	adds	r3, #28
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4419      	add	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4403      	add	r3, r0
 800a500:	3320      	adds	r3, #32
 800a502:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	2b00      	cmp	r3, #0
 800a508:	d113      	bne.n	800a532 <HAL_PCD_IRQHandler+0x3a2>
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a50e:	4613      	mov	r3, r2
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	3324      	adds	r3, #36	@ 0x24
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d108      	bne.n	800a532 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6818      	ldr	r0, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a52a:	461a      	mov	r2, r3
 800a52c:	2101      	movs	r1, #1
 800a52e:	f003 fad9 	bl	800dae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	b2db      	uxtb	r3, r3
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f008 ff4c 	bl	80133d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a554:	461a      	mov	r2, r3
 800a556:	2308      	movs	r3, #8
 800a558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d008      	beq.n	800a576 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a570:	461a      	mov	r2, r3
 800a572:	2310      	movs	r3, #16
 800a574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58c:	461a      	mov	r2, r3
 800a58e:	2340      	movs	r3, #64	@ 0x40
 800a590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d023      	beq.n	800a5e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a59c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a59e:	6a38      	ldr	r0, [r7, #32]
 800a5a0:	f002 fac0 	bl	800cb24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	3310      	adds	r3, #16
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	78db      	ldrb	r3, [r3, #3]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d108      	bne.n	800a5d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f008 ff8f 	bl	80134f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5de:	461a      	mov	r2, r3
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a5ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fcbd 	bl	800af70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	085b      	lsrs	r3, r3, #1
 800a600:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af2e 	bne.w	800a466 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f003 f9a4 	bl	800d95c <USB_ReadInterrupts>
 800a614:	4603      	mov	r3, r0
 800a616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a61a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a61e:	d122      	bne.n	800a666 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d108      	bne.n	800a650 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a646:	2100      	movs	r1, #0
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fea3 	bl	800b394 <HAL_PCDEx_LPM_Callback>
 800a64e:	e002      	b.n	800a656 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f008 ff2d 	bl	80134b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	695a      	ldr	r2, [r3, #20]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f003 f976 	bl	800d95c <USB_ReadInterrupts>
 800a670:	4603      	mov	r3, r0
 800a672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a67a:	d112      	bne.n	800a6a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d102      	bne.n	800a692 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f008 fee9 	bl	8013464 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	695a      	ldr	r2, [r3, #20]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a6a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f003 f958 	bl	800d95c <USB_ReadInterrupts>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6b6:	f040 80b7 	bne.w	800a828 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2110      	movs	r1, #16
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 fa25 	bl	800cb24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6de:	e046      	b.n	800a76e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a6f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a704:	0151      	lsls	r1, r2, #5
 800a706:	69fa      	ldr	r2, [r7, #28]
 800a708:	440a      	add	r2, r1
 800a70a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a70e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a712:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a720:	461a      	mov	r2, r3
 800a722:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a726:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a742:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a746:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a762:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a766:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76a:	3301      	adds	r3, #1
 800a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	791b      	ldrb	r3, [r3, #4]
 800a772:	461a      	mov	r2, r3
 800a774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a776:	4293      	cmp	r3, r2
 800a778:	d3b2      	bcc.n	800a6e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a788:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a78c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	7bdb      	ldrb	r3, [r3, #15]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d016      	beq.n	800a7c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7a6:	f043 030b 	orr.w	r3, r3, #11
 800a7aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7bc:	f043 030b 	orr.w	r3, r3, #11
 800a7c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7c2:	e015      	b.n	800a7f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	69fa      	ldr	r2, [r7, #28]
 800a7ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a7d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800a7da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ea:	f043 030b 	orr.w	r3, r3, #11
 800a7ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a802:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a812:	461a      	mov	r2, r3
 800a814:	f003 f966 	bl	800dae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	695a      	ldr	r2, [r3, #20]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f003 f895 	bl	800d95c <USB_ReadInterrupts>
 800a832:	4603      	mov	r3, r0
 800a834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a83c:	d123      	bne.n	800a886 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f003 f92b 	bl	800da9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f002 f9e2 	bl	800cc16 <USB_GetDevSpeed>
 800a852:	4603      	mov	r3, r0
 800a854:	461a      	mov	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	f001 f9c9 	bl	800bbf4 <HAL_RCC_GetHCLKFreq>
 800a862:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a868:	461a      	mov	r2, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 fee6 	bl	800c63c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f008 fdd8 	bl	8013426 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695a      	ldr	r2, [r3, #20]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a884:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f003 f866 	bl	800d95c <USB_ReadInterrupts>
 800a890:	4603      	mov	r3, r0
 800a892:	f003 0308 	and.w	r3, r3, #8
 800a896:	2b08      	cmp	r3, #8
 800a898:	d10a      	bne.n	800a8b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f008 fdb5 	bl	801340a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	695a      	ldr	r2, [r3, #20]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f002 0208 	and.w	r2, r2, #8
 800a8ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f003 f851 	bl	800d95c <USB_ReadInterrupts>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c0:	2b80      	cmp	r3, #128	@ 0x80
 800a8c2:	d123      	bne.n	800a90c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8d4:	e014      	b.n	800a900 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a8d6:	6879      	ldr	r1, [r7, #4]
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8da:	4613      	mov	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	440b      	add	r3, r1
 800a8e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d105      	bne.n	800a8fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fb0a 	bl	800af0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	791b      	ldrb	r3, [r3, #4]
 800a904:	461a      	mov	r2, r3
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	4293      	cmp	r3, r2
 800a90a:	d3e4      	bcc.n	800a8d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f003 f823 	bl	800d95c <USB_ReadInterrupts>
 800a916:	4603      	mov	r3, r0
 800a918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a91c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a920:	d13c      	bne.n	800a99c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a922:	2301      	movs	r3, #1
 800a924:	627b      	str	r3, [r7, #36]	@ 0x24
 800a926:	e02b      	b.n	800a980 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a93c:	4613      	mov	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	3318      	adds	r3, #24
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d115      	bne.n	800a97a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a94e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a950:	2b00      	cmp	r3, #0
 800a952:	da12      	bge.n	800a97a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a958:	4613      	mov	r3, r2
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	3317      	adds	r3, #23
 800a964:	2201      	movs	r2, #1
 800a966:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a970:	b2db      	uxtb	r3, r3
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 faca 	bl	800af0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97c:	3301      	adds	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	791b      	ldrb	r3, [r3, #4]
 800a984:	461a      	mov	r2, r3
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	4293      	cmp	r3, r2
 800a98a:	d3cd      	bcc.n	800a928 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	695a      	ldr	r2, [r3, #20]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800a99a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f002 ffdb 	bl	800d95c <USB_ReadInterrupts>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9b0:	d156      	bne.n	800aa60 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b6:	e045      	b.n	800aa44 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	00db      	lsls	r3, r3, #3
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	440b      	add	r3, r1
 800a9d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d12e      	bne.n	800aa3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a9e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	da2b      	bge.n	800aa3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a9f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d121      	bne.n	800aa3e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9fe:	4613      	mov	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4413      	add	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aa3a:	6053      	str	r3, [r2, #4]
            break;
 800aa3c:	e008      	b.n	800aa50 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	3301      	adds	r3, #1
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	791b      	ldrb	r3, [r3, #4]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d3b3      	bcc.n	800a9b8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695a      	ldr	r2, [r3, #20]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800aa5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f002 ff79 	bl	800d95c <USB_ReadInterrupts>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa74:	d10a      	bne.n	800aa8c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f008 fd4c 	bl	8013514 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	695a      	ldr	r2, [r3, #20]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800aa8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 ff63 	bl	800d95c <USB_ReadInterrupts>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d115      	bne.n	800aacc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f008 fd3c 	bl	8013530 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6859      	ldr	r1, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	605a      	str	r2, [r3, #4]
 800aac8:	e000      	b.n	800aacc <HAL_PCD_IRQHandler+0x93c>
      return;
 800aaca:	bf00      	nop
    }
  }
}
 800aacc:	3734      	adds	r7, #52	@ 0x34
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd90      	pop	{r4, r7, pc}

0800aad2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d101      	bne.n	800aaec <HAL_PCD_SetAddress+0x1a>
 800aae8:	2302      	movs	r3, #2
 800aaea:	e012      	b.n	800ab12 <HAL_PCD_SetAddress+0x40>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	78fa      	ldrb	r2, [r7, #3]
 800aaf8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	78fa      	ldrb	r2, [r7, #3]
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f002 fec2 	bl	800d88c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	461a      	mov	r2, r3
 800ab28:	4603      	mov	r3, r0
 800ab2a:	70fb      	strb	r3, [r7, #3]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	803b      	strh	r3, [r7, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da0f      	bge.n	800ab60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	f003 020f 	and.w	r2, r3, #15
 800ab46:	4613      	mov	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	3310      	adds	r3, #16
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	4413      	add	r3, r2
 800ab54:	3304      	adds	r3, #4
 800ab56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	705a      	strb	r2, [r3, #1]
 800ab5e:	e00f      	b.n	800ab80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	f003 020f 	and.w	r2, r3, #15
 800ab66:	4613      	mov	r3, r2
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	4413      	add	r3, r2
 800ab76:	3304      	adds	r3, #4
 800ab78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ab8c:	883b      	ldrh	r3, [r7, #0]
 800ab8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	78ba      	ldrb	r2, [r7, #2]
 800ab9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	785b      	ldrb	r3, [r3, #1]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	461a      	mov	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800abae:	78bb      	ldrb	r3, [r7, #2]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d102      	bne.n	800abba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d101      	bne.n	800abc8 <HAL_PCD_EP_Open+0xae>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e00e      	b.n	800abe6 <HAL_PCD_EP_Open+0xcc>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68f9      	ldr	r1, [r7, #12]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f002 f842 	bl	800cc60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800abe4:	7afb      	ldrb	r3, [r7, #11]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da0f      	bge.n	800ac22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	f003 020f 	and.w	r2, r3, #15
 800ac08:	4613      	mov	r3, r2
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	3310      	adds	r3, #16
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4413      	add	r3, r2
 800ac16:	3304      	adds	r3, #4
 800ac18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	705a      	strb	r2, [r3, #1]
 800ac20:	e00f      	b.n	800ac42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	f003 020f 	and.w	r2, r3, #15
 800ac28:	4613      	mov	r3, r2
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	3304      	adds	r3, #4
 800ac3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_PCD_EP_Close+0x6e>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e00e      	b.n	800ac7a <HAL_PCD_EP_Close+0x8c>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f002 f880 	bl	800cd70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b086      	sub	sp, #24
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	f003 020f 	and.w	r2, r3, #15
 800ac98:	4613      	mov	r3, r2
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4413      	add	r3, r2
 800aca8:	3304      	adds	r3, #4
 800acaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2200      	movs	r2, #0
 800acbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2200      	movs	r2, #0
 800acc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	b2da      	uxtb	r2, r3
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	799b      	ldrb	r3, [r3, #6]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d102      	bne.n	800acde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	799b      	ldrb	r3, [r3, #6]
 800ace6:	461a      	mov	r2, r3
 800ace8:	6979      	ldr	r1, [r7, #20]
 800acea:	f002 f91d 	bl	800cf28 <USB_EPStartXfer>

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	f003 020f 	and.w	r2, r3, #15
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ad1a:	681b      	ldr	r3, [r3, #0]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	460b      	mov	r3, r1
 800ad36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad38:	7afb      	ldrb	r3, [r7, #11]
 800ad3a:	f003 020f 	and.w	r2, r3, #15
 800ad3e:	4613      	mov	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	4413      	add	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	3310      	adds	r3, #16
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2201      	movs	r2, #1
 800ad66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad68:	7afb      	ldrb	r3, [r7, #11]
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	799b      	ldrb	r3, [r3, #6]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d102      	bne.n	800ad82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	799b      	ldrb	r3, [r3, #6]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	f002 f8cb 	bl	800cf28 <USB_EPStartXfer>

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	f003 030f 	and.w	r3, r3, #15
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	7912      	ldrb	r2, [r2, #4]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d901      	bls.n	800adba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e04f      	b.n	800ae5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800adba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	da0f      	bge.n	800ade2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	f003 020f 	and.w	r2, r3, #15
 800adc8:	4613      	mov	r3, r2
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	3310      	adds	r3, #16
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4413      	add	r3, r2
 800add6:	3304      	adds	r3, #4
 800add8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	705a      	strb	r2, [r3, #1]
 800ade0:	e00d      	b.n	800adfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	4413      	add	r3, r2
 800adf4:	3304      	adds	r3, #4
 800adf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2201      	movs	r2, #1
 800ae02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	f003 030f 	and.w	r3, r3, #15
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d101      	bne.n	800ae1e <HAL_PCD_EP_SetStall+0x82>
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e01d      	b.n	800ae5a <HAL_PCD_EP_SetStall+0xbe>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68f9      	ldr	r1, [r7, #12]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 fc59 	bl	800d6e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae32:	78fb      	ldrb	r3, [r7, #3]
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d109      	bne.n	800ae50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7999      	ldrb	r1, [r3, #6]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f002 fe4a 	bl	800dae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	7912      	ldrb	r2, [r2, #4]
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d901      	bls.n	800ae80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e042      	b.n	800af06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da0f      	bge.n	800aea8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	f003 020f 	and.w	r2, r3, #15
 800ae8e:	4613      	mov	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	3310      	adds	r3, #16
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	705a      	strb	r2, [r3, #1]
 800aea6:	e00f      	b.n	800aec8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	f003 020f 	and.w	r2, r3, #15
 800aeae:	4613      	mov	r3, r2
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	4413      	add	r3, r2
 800aebe:	3304      	adds	r3, #4
 800aec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	f003 030f 	and.w	r3, r3, #15
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_PCD_EP_ClrStall+0x86>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e00e      	b.n	800af06 <HAL_PCD_EP_ClrStall+0xa4>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68f9      	ldr	r1, [r7, #12]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 fc62 	bl	800d7c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800af1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da0c      	bge.n	800af3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	f003 020f 	and.w	r2, r3, #15
 800af28:	4613      	mov	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	3310      	adds	r3, #16
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	4413      	add	r3, r2
 800af36:	3304      	adds	r3, #4
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e00c      	b.n	800af56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	f003 020f 	and.w	r2, r3, #15
 800af42:	4613      	mov	r3, r2
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	4413      	add	r3, r2
 800af52:	3304      	adds	r3, #4
 800af54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fa81 	bl	800d464 <USB_EPStopXfer>
 800af62:	4603      	mov	r3, r0
 800af64:	72fb      	strb	r3, [r7, #11]

  return ret;
 800af66:	7afb      	ldrb	r3, [r7, #11]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08a      	sub	sp, #40	@ 0x28
 800af74:	af02      	add	r7, sp, #8
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	4613      	mov	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	3310      	adds	r3, #16
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	4413      	add	r3, r2
 800af94:	3304      	adds	r3, #4
 800af96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	695a      	ldr	r2, [r3, #20]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d901      	bls.n	800afa8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e06b      	b.n	800b080 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d902      	bls.n	800afc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	3303      	adds	r3, #3
 800afc8:	089b      	lsrs	r3, r3, #2
 800afca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afcc:	e02a      	b.n	800b024 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	695b      	ldr	r3, [r3, #20]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	69fa      	ldr	r2, [r7, #28]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d902      	bls.n	800afea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	3303      	adds	r3, #3
 800afee:	089b      	lsrs	r3, r3, #2
 800aff0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	68d9      	ldr	r1, [r3, #12]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4603      	mov	r3, r0
 800b006:	6978      	ldr	r0, [r7, #20]
 800b008:	f002 fad6 	bl	800d5b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	441a      	add	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	695a      	ldr	r2, [r3, #20]
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	441a      	add	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	429a      	cmp	r2, r3
 800b038:	d809      	bhi.n	800b04e <PCD_WriteEmptyTxFifo+0xde>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	695a      	ldr	r2, [r3, #20]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b042:	429a      	cmp	r2, r3
 800b044:	d203      	bcs.n	800b04e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1bf      	bne.n	800afce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	429a      	cmp	r2, r3
 800b058:	d811      	bhi.n	800b07e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	f003 030f 	and.w	r3, r3, #15
 800b060:	2201      	movs	r2, #1
 800b062:	fa02 f303 	lsl.w	r3, r2, r3
 800b066:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b06e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	43db      	mvns	r3, r3
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b07a:	4013      	ands	r3, r2
 800b07c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3720      	adds	r7, #32
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	333c      	adds	r3, #60	@ 0x3c
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	799b      	ldrb	r3, [r3, #6]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d17b      	bne.n	800b1b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d015      	beq.n	800b0f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	4a61      	ldr	r2, [pc, #388]	@ (800b250 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	f240 80b9 	bls.w	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80b3 	beq.w	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	015a      	lsls	r2, r3, #5
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0f0:	6093      	str	r3, [r2, #8]
 800b0f2:	e0a7      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	4413      	add	r3, r2
 800b106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b10a:	461a      	mov	r2, r3
 800b10c:	2320      	movs	r3, #32
 800b10e:	6093      	str	r3, [r2, #8]
 800b110:	e098      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f040 8093 	bne.w	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	4a4b      	ldr	r2, [pc, #300]	@ (800b250 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d90f      	bls.n	800b146 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b13c:	461a      	mov	r2, r3
 800b13e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b142:	6093      	str	r3, [r2, #8]
 800b144:	e07e      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4613      	mov	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	4413      	add	r3, r2
 800b158:	3304      	adds	r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	0159      	lsls	r1, r3, #5
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	440b      	add	r3, r1
 800b168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d114      	bne.n	800b1a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b190:	461a      	mov	r2, r3
 800b192:	2101      	movs	r1, #1
 800b194:	f002 fca6 	bl	800dae4 <USB_EP0_OutStart>
 800b198:	e006      	b.n	800b1a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	441a      	add	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f008 f8f6 	bl	80133a0 <HAL_PCD_DataOutStageCallback>
 800b1b4:	e046      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	4a26      	ldr	r2, [pc, #152]	@ (800b254 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d124      	bne.n	800b208 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1da:	6093      	str	r3, [r2, #8]
 800b1dc:	e032      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	2320      	movs	r3, #32
 800b1f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f008 f8cd 	bl	80133a0 <HAL_PCD_DataOutStageCallback>
 800b206:	e01d      	b.n	800b244 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d114      	bne.n	800b238 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	4613      	mov	r3, r2
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	440b      	add	r3, r1
 800b21c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d108      	bne.n	800b238 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b230:	461a      	mov	r2, r3
 800b232:	2100      	movs	r1, #0
 800b234:	f002 fc56 	bl	800dae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f008 f8ae 	bl	80133a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3720      	adds	r7, #32
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	4f54300a 	.word	0x4f54300a
 800b254:	4f54310a 	.word	0x4f54310a

0800b258 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	333c      	adds	r3, #60	@ 0x3c
 800b270:	3304      	adds	r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4a15      	ldr	r2, [pc, #84]	@ (800b2e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d90e      	bls.n	800b2ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f008 f865 	bl	801337c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a0a      	ldr	r2, [pc, #40]	@ (800b2e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d90c      	bls.n	800b2d4 <PCD_EP_OutSetupPacket_int+0x7c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	799b      	ldrb	r3, [r3, #6]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d108      	bne.n	800b2d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	f002 fc08 	bl	800dae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	4f54300a 	.word	0x4f54300a

0800b2e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b302:	883b      	ldrh	r3, [r7, #0]
 800b304:	0419      	lsls	r1, r3, #16
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	629a      	str	r2, [r3, #40]	@ 0x28
 800b310:	e028      	b.n	800b364 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
 800b324:	e00d      	b.n	800b342 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	3340      	adds	r3, #64	@ 0x40
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	0c1b      	lsrs	r3, r3, #16
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	4413      	add	r3, r2
 800b33a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	3301      	adds	r3, #1
 800b340:	73fb      	strb	r3, [r7, #15]
 800b342:	7bfa      	ldrb	r2, [r7, #15]
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	3b01      	subs	r3, #1
 800b348:	429a      	cmp	r2, r3
 800b34a:	d3ec      	bcc.n	800b326 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b34c:	883b      	ldrh	r3, [r7, #0]
 800b34e:	0418      	lsls	r0, r3, #16
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	3b01      	subs	r3, #1
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	4302      	orrs	r2, r0
 800b35c:	3340      	adds	r3, #64	@ 0x40
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	460b      	mov	r3, r1
 800b37c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	887a      	ldrh	r2, [r7, #2]
 800b384:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e267      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d075      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b3ca:	4b88      	ldr	r3, [pc, #544]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 030c 	and.w	r3, r3, #12
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d00c      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3d6:	4b85      	ldr	r3, [pc, #532]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d112      	bne.n	800b408 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3e2:	4b82      	ldr	r3, [pc, #520]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3ee:	d10b      	bne.n	800b408 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3f0:	4b7e      	ldr	r3, [pc, #504]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d05b      	beq.n	800b4b4 <HAL_RCC_OscConfig+0x108>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d157      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e242      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b410:	d106      	bne.n	800b420 <HAL_RCC_OscConfig+0x74>
 800b412:	4b76      	ldr	r3, [pc, #472]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a75      	ldr	r2, [pc, #468]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b41c:	6013      	str	r3, [r2, #0]
 800b41e:	e01d      	b.n	800b45c <HAL_RCC_OscConfig+0xb0>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b428:	d10c      	bne.n	800b444 <HAL_RCC_OscConfig+0x98>
 800b42a:	4b70      	ldr	r3, [pc, #448]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a6f      	ldr	r2, [pc, #444]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	4b6d      	ldr	r3, [pc, #436]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a6c      	ldr	r2, [pc, #432]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b43c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b440:	6013      	str	r3, [r2, #0]
 800b442:	e00b      	b.n	800b45c <HAL_RCC_OscConfig+0xb0>
 800b444:	4b69      	ldr	r3, [pc, #420]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a68      	ldr	r2, [pc, #416]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b44a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	4b66      	ldr	r3, [pc, #408]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a65      	ldr	r2, [pc, #404]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b45a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d013      	beq.n	800b48c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b464:	f7fe fa56 	bl	8009914 <HAL_GetTick>
 800b468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b46a:	e008      	b.n	800b47e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b46c:	f7fe fa52 	bl	8009914 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b64      	cmp	r3, #100	@ 0x64
 800b478:	d901      	bls.n	800b47e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e207      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b47e:	4b5b      	ldr	r3, [pc, #364]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f0      	beq.n	800b46c <HAL_RCC_OscConfig+0xc0>
 800b48a:	e014      	b.n	800b4b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b48c:	f7fe fa42 	bl	8009914 <HAL_GetTick>
 800b490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b492:	e008      	b.n	800b4a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b494:	f7fe fa3e 	bl	8009914 <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	2b64      	cmp	r3, #100	@ 0x64
 800b4a0:	d901      	bls.n	800b4a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e1f3      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4a6:	4b51      	ldr	r3, [pc, #324]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1f0      	bne.n	800b494 <HAL_RCC_OscConfig+0xe8>
 800b4b2:	e000      	b.n	800b4b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d063      	beq.n	800b58a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b4c2:	4b4a      	ldr	r3, [pc, #296]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f003 030c 	and.w	r3, r3, #12
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00b      	beq.n	800b4e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4ce:	4b47      	ldr	r3, [pc, #284]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b4d6:	2b08      	cmp	r3, #8
 800b4d8:	d11c      	bne.n	800b514 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4da:	4b44      	ldr	r3, [pc, #272]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d116      	bne.n	800b514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4e6:	4b41      	ldr	r3, [pc, #260]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d005      	beq.n	800b4fe <HAL_RCC_OscConfig+0x152>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d001      	beq.n	800b4fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e1c7      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4fe:	4b3b      	ldr	r3, [pc, #236]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	4937      	ldr	r1, [pc, #220]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b512:	e03a      	b.n	800b58a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d020      	beq.n	800b55e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b51c:	4b34      	ldr	r3, [pc, #208]	@ (800b5f0 <HAL_RCC_OscConfig+0x244>)
 800b51e:	2201      	movs	r2, #1
 800b520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b522:	f7fe f9f7 	bl	8009914 <HAL_GetTick>
 800b526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b528:	e008      	b.n	800b53c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b52a:	f7fe f9f3 	bl	8009914 <HAL_GetTick>
 800b52e:	4602      	mov	r2, r0
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	2b02      	cmp	r3, #2
 800b536:	d901      	bls.n	800b53c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b538:	2303      	movs	r3, #3
 800b53a:	e1a8      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b53c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0f0      	beq.n	800b52a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b548:	4b28      	ldr	r3, [pc, #160]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	4925      	ldr	r1, [pc, #148]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b558:	4313      	orrs	r3, r2
 800b55a:	600b      	str	r3, [r1, #0]
 800b55c:	e015      	b.n	800b58a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b55e:	4b24      	ldr	r3, [pc, #144]	@ (800b5f0 <HAL_RCC_OscConfig+0x244>)
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b564:	f7fe f9d6 	bl	8009914 <HAL_GetTick>
 800b568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b56a:	e008      	b.n	800b57e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b56c:	f7fe f9d2 	bl	8009914 <HAL_GetTick>
 800b570:	4602      	mov	r2, r0
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	2b02      	cmp	r3, #2
 800b578:	d901      	bls.n	800b57e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e187      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b57e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0302 	and.w	r3, r3, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1f0      	bne.n	800b56c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0308 	and.w	r3, r3, #8
 800b592:	2b00      	cmp	r3, #0
 800b594:	d036      	beq.n	800b604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d016      	beq.n	800b5cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b59e:	4b15      	ldr	r3, [pc, #84]	@ (800b5f4 <HAL_RCC_OscConfig+0x248>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5a4:	f7fe f9b6 	bl	8009914 <HAL_GetTick>
 800b5a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5aa:	e008      	b.n	800b5be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5ac:	f7fe f9b2 	bl	8009914 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d901      	bls.n	800b5be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e167      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5be:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ec <HAL_RCC_OscConfig+0x240>)
 800b5c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0f0      	beq.n	800b5ac <HAL_RCC_OscConfig+0x200>
 800b5ca:	e01b      	b.n	800b604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5cc:	4b09      	ldr	r3, [pc, #36]	@ (800b5f4 <HAL_RCC_OscConfig+0x248>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5d2:	f7fe f99f 	bl	8009914 <HAL_GetTick>
 800b5d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5d8:	e00e      	b.n	800b5f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5da:	f7fe f99b 	bl	8009914 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d907      	bls.n	800b5f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e150      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
 800b5ec:	40023800 	.word	0x40023800
 800b5f0:	42470000 	.word	0x42470000
 800b5f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5f8:	4b88      	ldr	r3, [pc, #544]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b5fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1ea      	bne.n	800b5da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8097 	beq.w	800b740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b612:	2300      	movs	r3, #0
 800b614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b616:	4b81      	ldr	r3, [pc, #516]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10f      	bne.n	800b642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]
 800b626:	4b7d      	ldr	r3, [pc, #500]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62a:	4a7c      	ldr	r2, [pc, #496]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b62c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b630:	6413      	str	r3, [r2, #64]	@ 0x40
 800b632:	4b7a      	ldr	r3, [pc, #488]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b63a:	60bb      	str	r3, [r7, #8]
 800b63c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b63e:	2301      	movs	r3, #1
 800b640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b642:	4b77      	ldr	r3, [pc, #476]	@ (800b820 <HAL_RCC_OscConfig+0x474>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d118      	bne.n	800b680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b64e:	4b74      	ldr	r3, [pc, #464]	@ (800b820 <HAL_RCC_OscConfig+0x474>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a73      	ldr	r2, [pc, #460]	@ (800b820 <HAL_RCC_OscConfig+0x474>)
 800b654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b65a:	f7fe f95b 	bl	8009914 <HAL_GetTick>
 800b65e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b660:	e008      	b.n	800b674 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b662:	f7fe f957 	bl	8009914 <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d901      	bls.n	800b674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e10c      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b674:	4b6a      	ldr	r3, [pc, #424]	@ (800b820 <HAL_RCC_OscConfig+0x474>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0f0      	beq.n	800b662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d106      	bne.n	800b696 <HAL_RCC_OscConfig+0x2ea>
 800b688:	4b64      	ldr	r3, [pc, #400]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b68a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b68c:	4a63      	ldr	r2, [pc, #396]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b68e:	f043 0301 	orr.w	r3, r3, #1
 800b692:	6713      	str	r3, [r2, #112]	@ 0x70
 800b694:	e01c      	b.n	800b6d0 <HAL_RCC_OscConfig+0x324>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	d10c      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x30c>
 800b69e:	4b5f      	ldr	r3, [pc, #380]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6a2:	4a5e      	ldr	r2, [pc, #376]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6a4:	f043 0304 	orr.w	r3, r3, #4
 800b6a8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6aa:	4b5c      	ldr	r3, [pc, #368]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ae:	4a5b      	ldr	r2, [pc, #364]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6b0:	f043 0301 	orr.w	r3, r3, #1
 800b6b4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6b6:	e00b      	b.n	800b6d0 <HAL_RCC_OscConfig+0x324>
 800b6b8:	4b58      	ldr	r3, [pc, #352]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6bc:	4a57      	ldr	r2, [pc, #348]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6be:	f023 0301 	bic.w	r3, r3, #1
 800b6c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6c4:	4b55      	ldr	r3, [pc, #340]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6c8:	4a54      	ldr	r2, [pc, #336]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6ca:	f023 0304 	bic.w	r3, r3, #4
 800b6ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d015      	beq.n	800b704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d8:	f7fe f91c 	bl	8009914 <HAL_GetTick>
 800b6dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6de:	e00a      	b.n	800b6f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6e0:	f7fe f918 	bl	8009914 <HAL_GetTick>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e0cb      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f6:	4b49      	ldr	r3, [pc, #292]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0ee      	beq.n	800b6e0 <HAL_RCC_OscConfig+0x334>
 800b702:	e014      	b.n	800b72e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b704:	f7fe f906 	bl	8009914 <HAL_GetTick>
 800b708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b70a:	e00a      	b.n	800b722 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b70c:	f7fe f902 	bl	8009914 <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d901      	bls.n	800b722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e0b5      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b722:	4b3e      	ldr	r3, [pc, #248]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1ee      	bne.n	800b70c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d105      	bne.n	800b740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b734:	4b39      	ldr	r3, [pc, #228]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b738:	4a38      	ldr	r2, [pc, #224]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b73a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b73e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 80a1 	beq.w	800b88c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b74a:	4b34      	ldr	r3, [pc, #208]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 030c 	and.w	r3, r3, #12
 800b752:	2b08      	cmp	r3, #8
 800b754:	d05c      	beq.n	800b810 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d141      	bne.n	800b7e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b75e:	4b31      	ldr	r3, [pc, #196]	@ (800b824 <HAL_RCC_OscConfig+0x478>)
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b764:	f7fe f8d6 	bl	8009914 <HAL_GetTick>
 800b768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b76c:	f7fe f8d2 	bl	8009914 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e087      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b77e:	4b27      	ldr	r3, [pc, #156]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1f0      	bne.n	800b76c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	69da      	ldr	r2, [r3, #28]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b798:	019b      	lsls	r3, r3, #6
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	085b      	lsrs	r3, r3, #1
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	041b      	lsls	r3, r3, #16
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	491b      	ldr	r1, [pc, #108]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b824 <HAL_RCC_OscConfig+0x478>)
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7ba:	f7fe f8ab 	bl	8009914 <HAL_GetTick>
 800b7be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7c0:	e008      	b.n	800b7d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7c2:	f7fe f8a7 	bl	8009914 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d901      	bls.n	800b7d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e05c      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7d4:	4b11      	ldr	r3, [pc, #68]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0f0      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x416>
 800b7e0:	e054      	b.n	800b88c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7e2:	4b10      	ldr	r3, [pc, #64]	@ (800b824 <HAL_RCC_OscConfig+0x478>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7e8:	f7fe f894 	bl	8009914 <HAL_GetTick>
 800b7ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7ee:	e008      	b.n	800b802 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7f0:	f7fe f890 	bl	8009914 <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d901      	bls.n	800b802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e045      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b802:	4b06      	ldr	r3, [pc, #24]	@ (800b81c <HAL_RCC_OscConfig+0x470>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f0      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x444>
 800b80e:	e03d      	b.n	800b88c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d107      	bne.n	800b828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	e038      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
 800b81c:	40023800 	.word	0x40023800
 800b820:	40007000 	.word	0x40007000
 800b824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b828:	4b1b      	ldr	r3, [pc, #108]	@ (800b898 <HAL_RCC_OscConfig+0x4ec>)
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d028      	beq.n	800b888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b840:	429a      	cmp	r2, r3
 800b842:	d121      	bne.n	800b888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b84e:	429a      	cmp	r2, r3
 800b850:	d11a      	bne.n	800b888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b858:	4013      	ands	r3, r2
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b85e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b860:	4293      	cmp	r3, r2
 800b862:	d111      	bne.n	800b888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	3b01      	subs	r3, #1
 800b872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b874:	429a      	cmp	r2, r3
 800b876:	d107      	bne.n	800b888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b884:	429a      	cmp	r2, r3
 800b886:	d001      	beq.n	800b88c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	40023800 	.word	0x40023800

0800b89c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e0cc      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8b0:	4b68      	ldr	r3, [pc, #416]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d90c      	bls.n	800b8d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8be:	4b65      	ldr	r3, [pc, #404]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8c6:	4b63      	ldr	r3, [pc, #396]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d001      	beq.n	800b8d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e0b8      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d020      	beq.n	800b926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b8f0:	4b59      	ldr	r3, [pc, #356]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	4a58      	ldr	r2, [pc, #352]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b8f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b8fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 0308 	and.w	r3, r3, #8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d005      	beq.n	800b914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b908:	4b53      	ldr	r3, [pc, #332]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	4a52      	ldr	r2, [pc, #328]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b90e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b914:	4b50      	ldr	r3, [pc, #320]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	494d      	ldr	r1, [pc, #308]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b922:	4313      	orrs	r3, r2
 800b924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d044      	beq.n	800b9bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d107      	bne.n	800b94a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b93a:	4b47      	ldr	r3, [pc, #284]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d119      	bne.n	800b97a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e07f      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d003      	beq.n	800b95a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b956:	2b03      	cmp	r3, #3
 800b958:	d107      	bne.n	800b96a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b95a:	4b3f      	ldr	r3, [pc, #252]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d109      	bne.n	800b97a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e06f      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b96a:	4b3b      	ldr	r3, [pc, #236]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0302 	and.w	r3, r3, #2
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e067      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b97a:	4b37      	ldr	r3, [pc, #220]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f023 0203 	bic.w	r2, r3, #3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	4934      	ldr	r1, [pc, #208]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b98c:	f7fd ffc2 	bl	8009914 <HAL_GetTick>
 800b990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b992:	e00a      	b.n	800b9aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b994:	f7fd ffbe 	bl	8009914 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d901      	bls.n	800b9aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e04f      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9aa:	4b2b      	ldr	r3, [pc, #172]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f003 020c 	and.w	r2, r3, #12
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d1eb      	bne.n	800b994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9bc:	4b25      	ldr	r3, [pc, #148]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0307 	and.w	r3, r3, #7
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d20c      	bcs.n	800b9e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ca:	4b22      	ldr	r3, [pc, #136]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9d2:	4b20      	ldr	r3, [pc, #128]	@ (800ba54 <HAL_RCC_ClockConfig+0x1b8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d001      	beq.n	800b9e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e032      	b.n	800ba4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9f0:	4b19      	ldr	r3, [pc, #100]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	4916      	ldr	r1, [pc, #88]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 0308 	and.w	r3, r3, #8
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d009      	beq.n	800ba22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba0e:	4b12      	ldr	r3, [pc, #72]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	490e      	ldr	r1, [pc, #56]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ba22:	f000 f821 	bl	800ba68 <HAL_RCC_GetSysClockFreq>
 800ba26:	4602      	mov	r2, r0
 800ba28:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <HAL_RCC_ClockConfig+0x1bc>)
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	091b      	lsrs	r3, r3, #4
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	490a      	ldr	r1, [pc, #40]	@ (800ba5c <HAL_RCC_ClockConfig+0x1c0>)
 800ba34:	5ccb      	ldrb	r3, [r1, r3]
 800ba36:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3a:	4a09      	ldr	r2, [pc, #36]	@ (800ba60 <HAL_RCC_ClockConfig+0x1c4>)
 800ba3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ba3e:	4b09      	ldr	r3, [pc, #36]	@ (800ba64 <HAL_RCC_ClockConfig+0x1c8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fc fe9c 	bl	8008780 <HAL_InitTick>

  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	40023c00 	.word	0x40023c00
 800ba58:	40023800 	.word	0x40023800
 800ba5c:	08016bc8 	.word	0x08016bc8
 800ba60:	20000004 	.word	0x20000004
 800ba64:	20000008 	.word	0x20000008

0800ba68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba6c:	b090      	sub	sp, #64	@ 0x40
 800ba6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba80:	4b59      	ldr	r3, [pc, #356]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f003 030c 	and.w	r3, r3, #12
 800ba88:	2b08      	cmp	r3, #8
 800ba8a:	d00d      	beq.n	800baa8 <HAL_RCC_GetSysClockFreq+0x40>
 800ba8c:	2b08      	cmp	r3, #8
 800ba8e:	f200 80a1 	bhi.w	800bbd4 <HAL_RCC_GetSysClockFreq+0x16c>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <HAL_RCC_GetSysClockFreq+0x34>
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	d003      	beq.n	800baa2 <HAL_RCC_GetSysClockFreq+0x3a>
 800ba9a:	e09b      	b.n	800bbd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ba9c:	4b53      	ldr	r3, [pc, #332]	@ (800bbec <HAL_RCC_GetSysClockFreq+0x184>)
 800ba9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800baa0:	e09b      	b.n	800bbda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800baa2:	4b53      	ldr	r3, [pc, #332]	@ (800bbf0 <HAL_RCC_GetSysClockFreq+0x188>)
 800baa4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800baa6:	e098      	b.n	800bbda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800baa8:	4b4f      	ldr	r3, [pc, #316]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bab2:	4b4d      	ldr	r3, [pc, #308]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d028      	beq.n	800bb10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800babe:	4b4a      	ldr	r3, [pc, #296]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	099b      	lsrs	r3, r3, #6
 800bac4:	2200      	movs	r2, #0
 800bac6:	623b      	str	r3, [r7, #32]
 800bac8:	627a      	str	r2, [r7, #36]	@ 0x24
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bad0:	2100      	movs	r1, #0
 800bad2:	4b47      	ldr	r3, [pc, #284]	@ (800bbf0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bad4:	fb03 f201 	mul.w	r2, r3, r1
 800bad8:	2300      	movs	r3, #0
 800bada:	fb00 f303 	mul.w	r3, r0, r3
 800bade:	4413      	add	r3, r2
 800bae0:	4a43      	ldr	r2, [pc, #268]	@ (800bbf0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bae2:	fba0 1202 	umull	r1, r2, r0, r2
 800bae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bae8:	460a      	mov	r2, r1
 800baea:	62ba      	str	r2, [r7, #40]	@ 0x28
 800baec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baee:	4413      	add	r3, r2
 800baf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf4:	2200      	movs	r2, #0
 800baf6:	61bb      	str	r3, [r7, #24]
 800baf8:	61fa      	str	r2, [r7, #28]
 800bafa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bafe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bb02:	f7f5 f9d7 	bl	8000eb4 <__aeabi_uldivmod>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb0e:	e053      	b.n	800bbb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb10:	4b35      	ldr	r3, [pc, #212]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	099b      	lsrs	r3, r3, #6
 800bb16:	2200      	movs	r2, #0
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	617a      	str	r2, [r7, #20]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bb22:	f04f 0b00 	mov.w	fp, #0
 800bb26:	4652      	mov	r2, sl
 800bb28:	465b      	mov	r3, fp
 800bb2a:	f04f 0000 	mov.w	r0, #0
 800bb2e:	f04f 0100 	mov.w	r1, #0
 800bb32:	0159      	lsls	r1, r3, #5
 800bb34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bb38:	0150      	lsls	r0, r2, #5
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	ebb2 080a 	subs.w	r8, r2, sl
 800bb42:	eb63 090b 	sbc.w	r9, r3, fp
 800bb46:	f04f 0200 	mov.w	r2, #0
 800bb4a:	f04f 0300 	mov.w	r3, #0
 800bb4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bb52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bb56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bb5a:	ebb2 0408 	subs.w	r4, r2, r8
 800bb5e:	eb63 0509 	sbc.w	r5, r3, r9
 800bb62:	f04f 0200 	mov.w	r2, #0
 800bb66:	f04f 0300 	mov.w	r3, #0
 800bb6a:	00eb      	lsls	r3, r5, #3
 800bb6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb70:	00e2      	lsls	r2, r4, #3
 800bb72:	4614      	mov	r4, r2
 800bb74:	461d      	mov	r5, r3
 800bb76:	eb14 030a 	adds.w	r3, r4, sl
 800bb7a:	603b      	str	r3, [r7, #0]
 800bb7c:	eb45 030b 	adc.w	r3, r5, fp
 800bb80:	607b      	str	r3, [r7, #4]
 800bb82:	f04f 0200 	mov.w	r2, #0
 800bb86:	f04f 0300 	mov.w	r3, #0
 800bb8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bb8e:	4629      	mov	r1, r5
 800bb90:	028b      	lsls	r3, r1, #10
 800bb92:	4621      	mov	r1, r4
 800bb94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bb98:	4621      	mov	r1, r4
 800bb9a:	028a      	lsls	r2, r1, #10
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba2:	2200      	movs	r2, #0
 800bba4:	60bb      	str	r3, [r7, #8]
 800bba6:	60fa      	str	r2, [r7, #12]
 800bba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbac:	f7f5 f982 	bl	8000eb4 <__aeabi_uldivmod>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bbb8:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	0c1b      	lsrs	r3, r3, #16
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bbc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bbd2:	e002      	b.n	800bbda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	@ (800bbec <HAL_RCC_GetSysClockFreq+0x184>)
 800bbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bbd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3740      	adds	r7, #64	@ 0x40
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40023800 	.word	0x40023800
 800bbec:	00f42400 	.word	0x00f42400
 800bbf0:	017d7840 	.word	0x017d7840

0800bbf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbf8:	4b03      	ldr	r3, [pc, #12]	@ (800bc08 <HAL_RCC_GetHCLKFreq+0x14>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	20000004 	.word	0x20000004

0800bc0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bc10:	f7ff fff0 	bl	800bbf4 <HAL_RCC_GetHCLKFreq>
 800bc14:	4602      	mov	r2, r0
 800bc16:	4b05      	ldr	r3, [pc, #20]	@ (800bc2c <HAL_RCC_GetPCLK2Freq+0x20>)
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	0b5b      	lsrs	r3, r3, #13
 800bc1c:	f003 0307 	and.w	r3, r3, #7
 800bc20:	4903      	ldr	r1, [pc, #12]	@ (800bc30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc22:	5ccb      	ldrb	r3, [r1, r3]
 800bc24:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	40023800 	.word	0x40023800
 800bc30:	08016bd8 	.word	0x08016bd8

0800bc34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	220f      	movs	r2, #15
 800bc42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bc44:	4b12      	ldr	r3, [pc, #72]	@ (800bc90 <HAL_RCC_GetClockConfig+0x5c>)
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f003 0203 	and.w	r2, r3, #3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bc50:	4b0f      	ldr	r3, [pc, #60]	@ (800bc90 <HAL_RCC_GetClockConfig+0x5c>)
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc90 <HAL_RCC_GetClockConfig+0x5c>)
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bc68:	4b09      	ldr	r3, [pc, #36]	@ (800bc90 <HAL_RCC_GetClockConfig+0x5c>)
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bc76:	4b07      	ldr	r3, [pc, #28]	@ (800bc94 <HAL_RCC_GetClockConfig+0x60>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0207 	and.w	r2, r3, #7
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	601a      	str	r2, [r3, #0]
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	40023800 	.word	0x40023800
 800bc94:	40023c00 	.word	0x40023c00

0800bc98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e04c      	b.n	800bd44 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d111      	bne.n	800bcda <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fbe2 	bl	800c488 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a1f      	ldr	r2, [pc, #124]	@ (800bd4c <HAL_TIM_Base_Init+0xb4>)
 800bcd0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f000 fb3f 	bl	800c370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	0800bd51 	.word	0x0800bd51

0800bd50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d001      	beq.n	800bd7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e044      	b.n	800be06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	@ (800be14 <HAL_TIM_Base_Start_IT+0xb0>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d018      	beq.n	800bdd0 <HAL_TIM_Base_Start_IT+0x6c>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d013      	beq.n	800bdd0 <HAL_TIM_Base_Start_IT+0x6c>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1a      	ldr	r2, [pc, #104]	@ (800be18 <HAL_TIM_Base_Start_IT+0xb4>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00e      	beq.n	800bdd0 <HAL_TIM_Base_Start_IT+0x6c>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a19      	ldr	r2, [pc, #100]	@ (800be1c <HAL_TIM_Base_Start_IT+0xb8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d009      	beq.n	800bdd0 <HAL_TIM_Base_Start_IT+0x6c>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a17      	ldr	r2, [pc, #92]	@ (800be20 <HAL_TIM_Base_Start_IT+0xbc>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d004      	beq.n	800bdd0 <HAL_TIM_Base_Start_IT+0x6c>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a16      	ldr	r2, [pc, #88]	@ (800be24 <HAL_TIM_Base_Start_IT+0xc0>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d111      	bne.n	800bdf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b06      	cmp	r3, #6
 800bde0:	d010      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0201 	orr.w	r2, r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf2:	e007      	b.n	800be04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0201 	orr.w	r2, r2, #1
 800be02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40010000 	.word	0x40010000
 800be18:	40000400 	.word	0x40000400
 800be1c:	40000800 	.word	0x40000800
 800be20:	40000c00 	.word	0x40000c00
 800be24:	40014000 	.word	0x40014000

0800be28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f003 0302 	and.w	r3, r3, #2
 800be46:	2b00      	cmp	r3, #0
 800be48:	d026      	beq.n	800be98 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b00      	cmp	r3, #0
 800be52:	d021      	beq.n	800be98 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0202 	mvn.w	r2, #2
 800be5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2201      	movs	r2, #1
 800be62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3
 800be7c:	e009      	b.n	800be92 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d026      	beq.n	800bef0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d021      	beq.n	800bef0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f06f 0204 	mvn.w	r2, #4
 800beb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2202      	movs	r2, #2
 800beba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
 800bed4:	e009      	b.n	800beea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d026      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d021      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0208 	mvn.w	r2, #8
 800bf0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2204      	movs	r2, #4
 800bf12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	e009      	b.n	800bf42 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 0310 	and.w	r3, r3, #16
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d026      	beq.n	800bfa0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f003 0310 	and.w	r3, r3, #16
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d021      	beq.n	800bfa0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f06f 0210 	mvn.w	r2, #16
 800bf64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2208      	movs	r2, #8
 800bf6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	4798      	blx	r3
 800bf84:	e009      	b.n	800bf9a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d009      	beq.n	800bfc8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0201 	mvn.w	r2, #1
 800bfbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00e      	beq.n	800bff0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d009      	beq.n	800bff0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bfe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00e      	beq.n	800c018 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f003 0320 	and.w	r3, r3, #32
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00e      	beq.n	800c040 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f003 0320 	and.w	r3, r3, #32
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d009      	beq.n	800c040 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0220 	mvn.w	r2, #32
 800c034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c040:	bf00      	nop
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b087      	sub	sp, #28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	460b      	mov	r3, r1
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e125      	b.n	800c364 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b01      	cmp	r3, #1
 800c122:	f040 80b9 	bne.w	800c298 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 800c126:	7afb      	ldrb	r3, [r7, #11]
 800c128:	2b1a      	cmp	r3, #26
 800c12a:	f200 80b2 	bhi.w	800c292 <HAL_TIM_RegisterCallback+0x196>
 800c12e:	a201      	add	r2, pc, #4	@ (adr r2, 800c134 <HAL_TIM_RegisterCallback+0x38>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c1a1 	.word	0x0800c1a1
 800c138:	0800c1a9 	.word	0x0800c1a9
 800c13c:	0800c1b1 	.word	0x0800c1b1
 800c140:	0800c1b9 	.word	0x0800c1b9
 800c144:	0800c1c1 	.word	0x0800c1c1
 800c148:	0800c1c9 	.word	0x0800c1c9
 800c14c:	0800c1d1 	.word	0x0800c1d1
 800c150:	0800c1d9 	.word	0x0800c1d9
 800c154:	0800c1e1 	.word	0x0800c1e1
 800c158:	0800c1e9 	.word	0x0800c1e9
 800c15c:	0800c1f1 	.word	0x0800c1f1
 800c160:	0800c1f9 	.word	0x0800c1f9
 800c164:	0800c201 	.word	0x0800c201
 800c168:	0800c209 	.word	0x0800c209
 800c16c:	0800c211 	.word	0x0800c211
 800c170:	0800c21b 	.word	0x0800c21b
 800c174:	0800c225 	.word	0x0800c225
 800c178:	0800c22f 	.word	0x0800c22f
 800c17c:	0800c239 	.word	0x0800c239
 800c180:	0800c243 	.word	0x0800c243
 800c184:	0800c24d 	.word	0x0800c24d
 800c188:	0800c257 	.word	0x0800c257
 800c18c:	0800c261 	.word	0x0800c261
 800c190:	0800c26b 	.word	0x0800c26b
 800c194:	0800c275 	.word	0x0800c275
 800c198:	0800c27f 	.word	0x0800c27f
 800c19c:	0800c289 	.word	0x0800c289
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800c1a6:	e0dc      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c1ae:	e0d8      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c1b6:	e0d4      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c1be:	e0d0      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c1c6:	e0cc      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c1ce:	e0c8      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c1d6:	e0c4      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c1de:	e0c0      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c1e6:	e0bc      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c1ee:	e0b8      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c1f6:	e0b4      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c1fe:	e0b0      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c206:	e0ac      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c20e:	e0a8      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c218:	e0a3      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c222:	e09e      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c22c:	e099      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c236:	e094      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c240:	e08f      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c24a:	e08a      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c254:	e085      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c25e:	e080      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c268:	e07b      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c272:	e076      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c27c:	e071      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c286:	e06c      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c290:	e067      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	75fb      	strb	r3, [r7, #23]
        break;
 800c296:	e064      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d15c      	bne.n	800c35e <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 800c2a4:	7afb      	ldrb	r3, [r7, #11]
 800c2a6:	2b0d      	cmp	r3, #13
 800c2a8:	d856      	bhi.n	800c358 <HAL_TIM_RegisterCallback+0x25c>
 800c2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b0 <HAL_TIM_RegisterCallback+0x1b4>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2e9 	.word	0x0800c2e9
 800c2b4:	0800c2f1 	.word	0x0800c2f1
 800c2b8:	0800c2f9 	.word	0x0800c2f9
 800c2bc:	0800c301 	.word	0x0800c301
 800c2c0:	0800c309 	.word	0x0800c309
 800c2c4:	0800c311 	.word	0x0800c311
 800c2c8:	0800c319 	.word	0x0800c319
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c329 	.word	0x0800c329
 800c2d4:	0800c331 	.word	0x0800c331
 800c2d8:	0800c339 	.word	0x0800c339
 800c2dc:	0800c341 	.word	0x0800c341
 800c2e0:	0800c349 	.word	0x0800c349
 800c2e4:	0800c351 	.word	0x0800c351
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800c2ee:	e038      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c2f6:	e034      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c2fe:	e030      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c306:	e02c      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c30e:	e028      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c316:	e024      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c31e:	e020      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c326:	e01c      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c32e:	e018      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c336:	e014      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c33e:	e010      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c346:	e00c      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c34e:	e008      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c356:	e004      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	75fb      	strb	r3, [r7, #23]
        break;
 800c35c:	e001      	b.n	800c362 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
}
 800c364:	4618      	mov	r0, r3
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a3a      	ldr	r2, [pc, #232]	@ (800c46c <TIM_Base_SetConfig+0xfc>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d00f      	beq.n	800c3a8 <TIM_Base_SetConfig+0x38>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38e:	d00b      	beq.n	800c3a8 <TIM_Base_SetConfig+0x38>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a37      	ldr	r2, [pc, #220]	@ (800c470 <TIM_Base_SetConfig+0x100>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d007      	beq.n	800c3a8 <TIM_Base_SetConfig+0x38>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a36      	ldr	r2, [pc, #216]	@ (800c474 <TIM_Base_SetConfig+0x104>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d003      	beq.n	800c3a8 <TIM_Base_SetConfig+0x38>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a35      	ldr	r2, [pc, #212]	@ (800c478 <TIM_Base_SetConfig+0x108>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d108      	bne.n	800c3ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a2b      	ldr	r2, [pc, #172]	@ (800c46c <TIM_Base_SetConfig+0xfc>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d01b      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3c8:	d017      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a28      	ldr	r2, [pc, #160]	@ (800c470 <TIM_Base_SetConfig+0x100>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d013      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a27      	ldr	r2, [pc, #156]	@ (800c474 <TIM_Base_SetConfig+0x104>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d00f      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a26      	ldr	r2, [pc, #152]	@ (800c478 <TIM_Base_SetConfig+0x108>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d00b      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a25      	ldr	r2, [pc, #148]	@ (800c47c <TIM_Base_SetConfig+0x10c>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d007      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a24      	ldr	r2, [pc, #144]	@ (800c480 <TIM_Base_SetConfig+0x110>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d003      	beq.n	800c3fa <TIM_Base_SetConfig+0x8a>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a23      	ldr	r2, [pc, #140]	@ (800c484 <TIM_Base_SetConfig+0x114>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d108      	bne.n	800c40c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	4313      	orrs	r3, r2
 800c418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	689a      	ldr	r2, [r3, #8]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a0e      	ldr	r2, [pc, #56]	@ (800c46c <TIM_Base_SetConfig+0xfc>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d103      	bne.n	800c440 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	691a      	ldr	r2, [r3, #16]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d105      	bne.n	800c45e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	f023 0201 	bic.w	r2, r3, #1
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	611a      	str	r2, [r3, #16]
  }
}
 800c45e:	bf00      	nop
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	40010000 	.word	0x40010000
 800c470:	40000400 	.word	0x40000400
 800c474:	40000800 	.word	0x40000800
 800c478:	40000c00 	.word	0x40000c00
 800c47c:	40014000 	.word	0x40014000
 800c480:	40014400 	.word	0x40014400
 800c484:	40014800 	.word	0x40014800

0800c488 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a1c      	ldr	r2, [pc, #112]	@ (800c504 <TIM_ResetCallback+0x7c>)
 800c494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a1b      	ldr	r2, [pc, #108]	@ (800c508 <TIM_ResetCallback+0x80>)
 800c49c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c50c <TIM_ResetCallback+0x84>)
 800c4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a19      	ldr	r2, [pc, #100]	@ (800c510 <TIM_ResetCallback+0x88>)
 800c4ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a18      	ldr	r2, [pc, #96]	@ (800c514 <TIM_ResetCallback+0x8c>)
 800c4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a17      	ldr	r2, [pc, #92]	@ (800c518 <TIM_ResetCallback+0x90>)
 800c4bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a16      	ldr	r2, [pc, #88]	@ (800c51c <TIM_ResetCallback+0x94>)
 800c4c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a15      	ldr	r2, [pc, #84]	@ (800c520 <TIM_ResetCallback+0x98>)
 800c4cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a14      	ldr	r2, [pc, #80]	@ (800c524 <TIM_ResetCallback+0x9c>)
 800c4d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a13      	ldr	r2, [pc, #76]	@ (800c528 <TIM_ResetCallback+0xa0>)
 800c4dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a12      	ldr	r2, [pc, #72]	@ (800c52c <TIM_ResetCallback+0xa4>)
 800c4e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a11      	ldr	r2, [pc, #68]	@ (800c530 <TIM_ResetCallback+0xa8>)
 800c4ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a10      	ldr	r2, [pc, #64]	@ (800c534 <TIM_ResetCallback+0xac>)
 800c4f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	08008039 	.word	0x08008039
 800c508:	0800c049 	.word	0x0800c049
 800c50c:	0800c0c1 	.word	0x0800c0c1
 800c510:	0800c0d5 	.word	0x0800c0d5
 800c514:	0800c071 	.word	0x0800c071
 800c518:	0800c085 	.word	0x0800c085
 800c51c:	0800c05d 	.word	0x0800c05d
 800c520:	0800c099 	.word	0x0800c099
 800c524:	0800c0ad 	.word	0x0800c0ad
 800c528:	0800c0e9 	.word	0x0800c0e9
 800c52c:	0800c539 	.word	0x0800c539
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c561 	.word	0x0800c561

0800c538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c574:	b084      	sub	sp, #16
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	f107 001c 	add.w	r0, r7, #28
 800c582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c586:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d123      	bne.n	800c5d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c592:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c5a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c5b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d105      	bne.n	800c5ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fae8 	bl	800dba0 <USB_CoreReset>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
 800c5d4:	e01b      	b.n	800c60e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 fadc 	bl	800dba0 <USB_CoreReset>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c5ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d106      	bne.n	800c602 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	639a      	str	r2, [r3, #56]	@ 0x38
 800c600:	e005      	b.n	800c60e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c606:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c60e:	7fbb      	ldrb	r3, [r7, #30]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d10b      	bne.n	800c62c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f043 0206 	orr.w	r2, r3, #6
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f043 0220 	orr.w	r2, r3, #32
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c638:	b004      	add	sp, #16
 800c63a:	4770      	bx	lr

0800c63c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d165      	bne.n	800c71c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	4a41      	ldr	r2, [pc, #260]	@ (800c758 <USB_SetTurnaroundTime+0x11c>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d906      	bls.n	800c666 <USB_SetTurnaroundTime+0x2a>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	4a40      	ldr	r2, [pc, #256]	@ (800c75c <USB_SetTurnaroundTime+0x120>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d202      	bcs.n	800c666 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c660:	230f      	movs	r3, #15
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	e062      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	4a3c      	ldr	r2, [pc, #240]	@ (800c75c <USB_SetTurnaroundTime+0x120>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d306      	bcc.n	800c67c <USB_SetTurnaroundTime+0x40>
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	4a3b      	ldr	r2, [pc, #236]	@ (800c760 <USB_SetTurnaroundTime+0x124>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d202      	bcs.n	800c67c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c676:	230e      	movs	r3, #14
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	e057      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	4a38      	ldr	r2, [pc, #224]	@ (800c760 <USB_SetTurnaroundTime+0x124>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d306      	bcc.n	800c692 <USB_SetTurnaroundTime+0x56>
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	4a37      	ldr	r2, [pc, #220]	@ (800c764 <USB_SetTurnaroundTime+0x128>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d202      	bcs.n	800c692 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c68c:	230d      	movs	r3, #13
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e04c      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	4a33      	ldr	r2, [pc, #204]	@ (800c764 <USB_SetTurnaroundTime+0x128>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d306      	bcc.n	800c6a8 <USB_SetTurnaroundTime+0x6c>
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	4a32      	ldr	r2, [pc, #200]	@ (800c768 <USB_SetTurnaroundTime+0x12c>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d802      	bhi.n	800c6a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c6a2:	230c      	movs	r3, #12
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	e041      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	4a2f      	ldr	r2, [pc, #188]	@ (800c768 <USB_SetTurnaroundTime+0x12c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d906      	bls.n	800c6be <USB_SetTurnaroundTime+0x82>
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4a2e      	ldr	r2, [pc, #184]	@ (800c76c <USB_SetTurnaroundTime+0x130>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d802      	bhi.n	800c6be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c6b8:	230b      	movs	r3, #11
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	e036      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	4a2a      	ldr	r2, [pc, #168]	@ (800c76c <USB_SetTurnaroundTime+0x130>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d906      	bls.n	800c6d4 <USB_SetTurnaroundTime+0x98>
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	4a29      	ldr	r2, [pc, #164]	@ (800c770 <USB_SetTurnaroundTime+0x134>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d802      	bhi.n	800c6d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c6ce:	230a      	movs	r3, #10
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e02b      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4a26      	ldr	r2, [pc, #152]	@ (800c770 <USB_SetTurnaroundTime+0x134>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d906      	bls.n	800c6ea <USB_SetTurnaroundTime+0xae>
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	4a25      	ldr	r2, [pc, #148]	@ (800c774 <USB_SetTurnaroundTime+0x138>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d202      	bcs.n	800c6ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c6e4:	2309      	movs	r3, #9
 800c6e6:	617b      	str	r3, [r7, #20]
 800c6e8:	e020      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	4a21      	ldr	r2, [pc, #132]	@ (800c774 <USB_SetTurnaroundTime+0x138>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d306      	bcc.n	800c700 <USB_SetTurnaroundTime+0xc4>
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	4a20      	ldr	r2, [pc, #128]	@ (800c778 <USB_SetTurnaroundTime+0x13c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d802      	bhi.n	800c700 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c6fa:	2308      	movs	r3, #8
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	e015      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4a1d      	ldr	r2, [pc, #116]	@ (800c778 <USB_SetTurnaroundTime+0x13c>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d906      	bls.n	800c716 <USB_SetTurnaroundTime+0xda>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4a1c      	ldr	r2, [pc, #112]	@ (800c77c <USB_SetTurnaroundTime+0x140>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d202      	bcs.n	800c716 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c710:	2307      	movs	r3, #7
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	e00a      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c716:	2306      	movs	r3, #6
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	e007      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c722:	2309      	movs	r3, #9
 800c724:	617b      	str	r3, [r7, #20]
 800c726:	e001      	b.n	800c72c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c728:	2309      	movs	r3, #9
 800c72a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68da      	ldr	r2, [r3, #12]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	029b      	lsls	r3, r3, #10
 800c740:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c744:	431a      	orrs	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	00d8acbf 	.word	0x00d8acbf
 800c75c:	00e4e1c0 	.word	0x00e4e1c0
 800c760:	00f42400 	.word	0x00f42400
 800c764:	01067380 	.word	0x01067380
 800c768:	011a499f 	.word	0x011a499f
 800c76c:	01312cff 	.word	0x01312cff
 800c770:	014ca43f 	.word	0x014ca43f
 800c774:	016e3600 	.word	0x016e3600
 800c778:	01a6ab1f 	.word	0x01a6ab1f
 800c77c:	01e84800 	.word	0x01e84800

0800c780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f043 0201 	orr.w	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f023 0201 	bic.w	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7e0:	78fb      	ldrb	r3, [r7, #3]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d115      	bne.n	800c812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c7f2:	200a      	movs	r0, #10
 800c7f4:	f7fd f89a 	bl	800992c <HAL_Delay>
      ms += 10U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	330a      	adds	r3, #10
 800c7fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f001 f93f 	bl	800da82 <USB_GetMode>
 800c804:	4603      	mov	r3, r0
 800c806:	2b01      	cmp	r3, #1
 800c808:	d01e      	beq.n	800c848 <USB_SetCurrentMode+0x84>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2bc7      	cmp	r3, #199	@ 0xc7
 800c80e:	d9f0      	bls.n	800c7f2 <USB_SetCurrentMode+0x2e>
 800c810:	e01a      	b.n	800c848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d115      	bne.n	800c844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c824:	200a      	movs	r0, #10
 800c826:	f7fd f881 	bl	800992c <HAL_Delay>
      ms += 10U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	330a      	adds	r3, #10
 800c82e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f926 	bl	800da82 <USB_GetMode>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <USB_SetCurrentMode+0x84>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2bc7      	cmp	r3, #199	@ 0xc7
 800c840:	d9f0      	bls.n	800c824 <USB_SetCurrentMode+0x60>
 800c842:	e001      	b.n	800c848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e005      	b.n	800c854 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2bc8      	cmp	r3, #200	@ 0xc8
 800c84c:	d101      	bne.n	800c852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c85c:	b084      	sub	sp, #16
 800c85e:	b580      	push	{r7, lr}
 800c860:	b086      	sub	sp, #24
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c876:	2300      	movs	r3, #0
 800c878:	613b      	str	r3, [r7, #16]
 800c87a:	e009      	b.n	800c890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3340      	adds	r3, #64	@ 0x40
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	2200      	movs	r2, #0
 800c888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	3301      	adds	r3, #1
 800c88e:	613b      	str	r3, [r7, #16]
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	2b0e      	cmp	r3, #14
 800c894:	d9f2      	bls.n	800c87c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c896:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d11c      	bne.n	800c8d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8ac:	f043 0302 	orr.w	r3, r3, #2
 800c8b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	639a      	str	r2, [r3, #56]	@ 0x38
 800c8d6:	e00b      	b.n	800c8f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c900:	2b01      	cmp	r3, #1
 800c902:	d10d      	bne.n	800c920 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c90c:	2100      	movs	r1, #0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f968 	bl	800cbe4 <USB_SetDevSpeed>
 800c914:	e008      	b.n	800c928 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c916:	2101      	movs	r1, #1
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f963 	bl	800cbe4 <USB_SetDevSpeed>
 800c91e:	e003      	b.n	800c928 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c920:	2103      	movs	r1, #3
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f95e 	bl	800cbe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c928:	2110      	movs	r1, #16
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8fa 	bl	800cb24 <USB_FlushTxFifo>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f924 	bl	800cb88 <USB_FlushRxFifo>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c950:	461a      	mov	r2, r3
 800c952:	2300      	movs	r3, #0
 800c954:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c95c:	461a      	mov	r2, r3
 800c95e:	2300      	movs	r3, #0
 800c960:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c968:	461a      	mov	r2, r3
 800c96a:	2300      	movs	r3, #0
 800c96c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c96e:	2300      	movs	r3, #0
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	e043      	b.n	800c9fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	015a      	lsls	r2, r3, #5
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c98a:	d118      	bne.n	800c9be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10a      	bne.n	800c9a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	015a      	lsls	r2, r3, #5
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	e013      	b.n	800c9d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	e008      	b.n	800c9d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	015a      	lsls	r2, r3, #5
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9dc:	461a      	mov	r2, r3
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c9f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	613b      	str	r3, [r7, #16]
 800c9fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca00:	461a      	mov	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d3b5      	bcc.n	800c974 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	613b      	str	r3, [r7, #16]
 800ca0c:	e043      	b.n	800ca96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	015a      	lsls	r2, r3, #5
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	4413      	add	r3, r2
 800ca16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca24:	d118      	bne.n	800ca58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	e013      	b.n	800ca6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e008      	b.n	800ca6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca64:	461a      	mov	r2, r3
 800ca66:	2300      	movs	r3, #0
 800ca68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	015a      	lsls	r2, r3, #5
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	4413      	add	r3, r2
 800ca72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca76:	461a      	mov	r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca88:	461a      	mov	r2, r3
 800ca8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ca8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	3301      	adds	r3, #1
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d3b5      	bcc.n	800ca0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cab4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cac2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cac4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d105      	bne.n	800cad8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	f043 0210 	orr.w	r2, r3, #16
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	699a      	ldr	r2, [r3, #24]
 800cadc:	4b10      	ldr	r3, [pc, #64]	@ (800cb20 <USB_DevInit+0x2c4>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cae4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d005      	beq.n	800caf8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	f043 0208 	orr.w	r2, r3, #8
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800caf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d107      	bne.n	800cb10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb08:	f043 0304 	orr.w	r3, r3, #4
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb1c:	b004      	add	sp, #16
 800cb1e:	4770      	bx	lr
 800cb20:	803c3800 	.word	0x803c3800

0800cb24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb3e:	d901      	bls.n	800cb44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e01b      	b.n	800cb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	daf2      	bge.n	800cb32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	019b      	lsls	r3, r3, #6
 800cb54:	f043 0220 	orr.w	r2, r3, #32
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb68:	d901      	bls.n	800cb6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e006      	b.n	800cb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	f003 0320 	and.w	r3, r3, #32
 800cb76:	2b20      	cmp	r3, #32
 800cb78:	d0f0      	beq.n	800cb5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb90:	2300      	movs	r3, #0
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3301      	adds	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cba0:	d901      	bls.n	800cba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e018      	b.n	800cbd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	daf2      	bge.n	800cb94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2210      	movs	r2, #16
 800cbb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cbc4:	d901      	bls.n	800cbca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e006      	b.n	800cbd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	f003 0310 	and.w	r3, r3, #16
 800cbd2:	2b10      	cmp	r3, #16
 800cbd4:	d0f0      	beq.n	800cbb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	460b      	mov	r3, r1
 800cbee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	78fb      	ldrb	r3, [r7, #3]
 800cbfe:	68f9      	ldr	r1, [r7, #12]
 800cc00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc04:	4313      	orrs	r3, r2
 800cc06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b087      	sub	sp, #28
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f003 0306 	and.w	r3, r3, #6
 800cc2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc36:	2300      	movs	r3, #0
 800cc38:	75fb      	strb	r3, [r7, #23]
 800cc3a:	e00a      	b.n	800cc52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d002      	beq.n	800cc48 <USB_GetDevSpeed+0x32>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b06      	cmp	r3, #6
 800cc46:	d102      	bne.n	800cc4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc48:	2302      	movs	r3, #2
 800cc4a:	75fb      	strb	r3, [r7, #23]
 800cc4c:	e001      	b.n	800cc52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc4e:	230f      	movs	r3, #15
 800cc50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d13a      	bne.n	800ccf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc82:	69da      	ldr	r2, [r3, #28]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f003 030f 	and.w	r3, r3, #15
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	68f9      	ldr	r1, [r7, #12]
 800cc96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d155      	bne.n	800cd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	791b      	ldrb	r3, [r3, #4]
 800ccce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	059b      	lsls	r3, r3, #22
 800ccd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	e036      	b.n	800cd60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccf8:	69da      	ldr	r2, [r3, #28]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 030f 	and.w	r3, r3, #15
 800cd02:	2101      	movs	r1, #1
 800cd04:	fa01 f303 	lsl.w	r3, r1, r3
 800cd08:	041b      	lsls	r3, r3, #16
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd10:	4313      	orrs	r3, r2
 800cd12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d11a      	bne.n	800cd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	791b      	ldrb	r3, [r3, #4]
 800cd44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd46:	430b      	orrs	r3, r1
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d161      	bne.n	800ce50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	015a      	lsls	r2, r3, #5
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4413      	add	r3, r2
 800cd94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cda2:	d11f      	bne.n	800cde4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	0151      	lsls	r1, r2, #5
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	440a      	add	r2, r1
 800cdba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cdbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cdc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	0151      	lsls	r1, r2, #5
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	440a      	add	r2, r1
 800cdda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cdde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cde2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f003 030f 	and.w	r3, r3, #15
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	43db      	mvns	r3, r3
 800cdfe:	68f9      	ldr	r1, [r7, #12]
 800ce00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce04:	4013      	ands	r3, r2
 800ce06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce0e:	69da      	ldr	r2, [r3, #28]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	f003 030f 	and.w	r3, r3, #15
 800ce18:	2101      	movs	r1, #1
 800ce1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	43db      	mvns	r3, r3
 800ce22:	68f9      	ldr	r1, [r7, #12]
 800ce24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce28:	4013      	ands	r3, r2
 800ce2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	0159      	lsls	r1, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	440b      	add	r3, r1
 800ce42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce46:	4619      	mov	r1, r3
 800ce48:	4b35      	ldr	r3, [pc, #212]	@ (800cf20 <USB_DeactivateEndpoint+0x1b0>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	600b      	str	r3, [r1, #0]
 800ce4e:	e060      	b.n	800cf12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce66:	d11f      	bne.n	800cea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	0151      	lsls	r1, r2, #5
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ce86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	0151      	lsls	r1, r2, #5
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	2101      	movs	r1, #1
 800ceba:	fa01 f303 	lsl.w	r3, r1, r3
 800cebe:	041b      	lsls	r3, r3, #16
 800cec0:	43db      	mvns	r3, r3
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cec8:	4013      	ands	r3, r2
 800ceca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ced2:	69da      	ldr	r2, [r3, #28]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 030f 	and.w	r3, r3, #15
 800cedc:	2101      	movs	r1, #1
 800cede:	fa01 f303 	lsl.w	r3, r1, r3
 800cee2:	041b      	lsls	r3, r3, #16
 800cee4:	43db      	mvns	r3, r3
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ceec:	4013      	ands	r3, r2
 800ceee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	0159      	lsls	r1, r3, #5
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	440b      	add	r3, r1
 800cf06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4b05      	ldr	r3, [pc, #20]	@ (800cf24 <USB_DeactivateEndpoint+0x1b4>)
 800cf0e:	4013      	ands	r3, r2
 800cf10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	ec337800 	.word	0xec337800
 800cf24:	eff37800 	.word	0xeff37800

0800cf28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	@ 0x28
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	4613      	mov	r3, r2
 800cf34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	f040 817f 	bne.w	800d248 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d132      	bne.n	800cfb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	0151      	lsls	r1, r2, #5
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	440a      	add	r2, r1
 800cf68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cf70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cf74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	0151      	lsls	r1, r2, #5
 800cf88:	69fa      	ldr	r2, [r7, #28]
 800cf8a:	440a      	add	r2, r1
 800cf8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	0151      	lsls	r1, r2, #5
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	440a      	add	r2, r1
 800cfac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfb0:	0cdb      	lsrs	r3, r3, #19
 800cfb2:	04db      	lsls	r3, r3, #19
 800cfb4:	6113      	str	r3, [r2, #16]
 800cfb6:	e097      	b.n	800d0e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	69fa      	ldr	r2, [r7, #28]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfd2:	0cdb      	lsrs	r3, r3, #19
 800cfd4:	04db      	lsls	r3, r3, #19
 800cfd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	0151      	lsls	r1, r2, #5
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	440a      	add	r2, r1
 800cfee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cff2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cff6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cffa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d11a      	bne.n	800d038 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	691a      	ldr	r2, [r3, #16]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d903      	bls.n	800d016 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	689a      	ldr	r2, [r3, #8]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	0151      	lsls	r1, r2, #5
 800d028:	69fa      	ldr	r2, [r7, #28]
 800d02a:	440a      	add	r2, r1
 800d02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d034:	6113      	str	r3, [r2, #16]
 800d036:	e044      	b.n	800d0c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	691a      	ldr	r2, [r3, #16]
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	4413      	add	r3, r2
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	4413      	add	r3, r2
 800d056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	8afb      	ldrh	r3, [r7, #22]
 800d05e:	04d9      	lsls	r1, r3, #19
 800d060:	4ba4      	ldr	r3, [pc, #656]	@ (800d2f4 <USB_EPStartXfer+0x3cc>)
 800d062:	400b      	ands	r3, r1
 800d064:	69b9      	ldr	r1, [r7, #24]
 800d066:	0148      	lsls	r0, r1, #5
 800d068:	69f9      	ldr	r1, [r7, #28]
 800d06a:	4401      	add	r1, r0
 800d06c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d070:	4313      	orrs	r3, r2
 800d072:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	791b      	ldrb	r3, [r3, #4]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d122      	bne.n	800d0c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	4413      	add	r3, r2
 800d084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	69ba      	ldr	r2, [r7, #24]
 800d08c:	0151      	lsls	r1, r2, #5
 800d08e:	69fa      	ldr	r2, [r7, #28]
 800d090:	440a      	add	r2, r1
 800d092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d096:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d09a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0a8:	691a      	ldr	r2, [r3, #16]
 800d0aa:	8afb      	ldrh	r3, [r7, #22]
 800d0ac:	075b      	lsls	r3, r3, #29
 800d0ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d0b2:	69b9      	ldr	r1, [r7, #24]
 800d0b4:	0148      	lsls	r0, r1, #5
 800d0b6:	69f9      	ldr	r1, [r7, #28]
 800d0b8:	4401      	add	r1, r0
 800d0ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0ce:	691a      	ldr	r2, [r3, #16]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0d8:	69b9      	ldr	r1, [r7, #24]
 800d0da:	0148      	lsls	r0, r1, #5
 800d0dc:	69f9      	ldr	r1, [r7, #28]
 800d0de:	4401      	add	r1, r0
 800d0e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d14b      	bne.n	800d186 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d009      	beq.n	800d10a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d102:	461a      	mov	r2, r3
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	69db      	ldr	r3, [r3, #28]
 800d108:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	791b      	ldrb	r3, [r3, #4]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d128      	bne.n	800d164 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d110      	bne.n	800d144 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	015a      	lsls	r2, r3, #5
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	4413      	add	r3, r2
 800d12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	69ba      	ldr	r2, [r7, #24]
 800d132:	0151      	lsls	r1, r2, #5
 800d134:	69fa      	ldr	r2, [r7, #28]
 800d136:	440a      	add	r2, r1
 800d138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d13c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	e00f      	b.n	800d164 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69ba      	ldr	r2, [r7, #24]
 800d154:	0151      	lsls	r1, r2, #5
 800d156:	69fa      	ldr	r2, [r7, #28]
 800d158:	440a      	add	r2, r1
 800d15a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d15e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d162:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	69ba      	ldr	r2, [r7, #24]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d17e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	e166      	b.n	800d454 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	0151      	lsls	r1, r2, #5
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	440a      	add	r2, r1
 800d19c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d1a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	791b      	ldrb	r3, [r3, #4]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d015      	beq.n	800d1da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f000 814e 	beq.w	800d454 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f003 030f 	and.w	r3, r3, #15
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ce:	69f9      	ldr	r1, [r7, #28]
 800d1d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	634b      	str	r3, [r1, #52]	@ 0x34
 800d1d8:	e13c      	b.n	800d454 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d110      	bne.n	800d20c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	0151      	lsls	r1, r2, #5
 800d1fc:	69fa      	ldr	r2, [r7, #28]
 800d1fe:	440a      	add	r2, r1
 800d200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d204:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	e00f      	b.n	800d22c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	4413      	add	r3, r2
 800d214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69ba      	ldr	r2, [r7, #24]
 800d21c:	0151      	lsls	r1, r2, #5
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	440a      	add	r2, r1
 800d222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d22a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	68d9      	ldr	r1, [r3, #12]
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	781a      	ldrb	r2, [r3, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	b298      	uxth	r0, r3
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	4603      	mov	r3, r0
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 f9b9 	bl	800d5b8 <USB_WritePacket>
 800d246:	e105      	b.n	800d454 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	69ba      	ldr	r2, [r7, #24]
 800d258:	0151      	lsls	r1, r2, #5
 800d25a:	69fa      	ldr	r2, [r7, #28]
 800d25c:	440a      	add	r2, r1
 800d25e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d262:	0cdb      	lsrs	r3, r3, #19
 800d264:	04db      	lsls	r3, r3, #19
 800d266:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	69ba      	ldr	r2, [r7, #24]
 800d278:	0151      	lsls	r1, r2, #5
 800d27a:	69fa      	ldr	r2, [r7, #28]
 800d27c:	440a      	add	r2, r1
 800d27e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d282:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d286:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d28a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d132      	bne.n	800d2f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	689a      	ldr	r2, [r3, #8]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b6:	691a      	ldr	r2, [r3, #16]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	6a1b      	ldr	r3, [r3, #32]
 800d2bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2c0:	69b9      	ldr	r1, [r7, #24]
 800d2c2:	0148      	lsls	r0, r1, #5
 800d2c4:	69f9      	ldr	r1, [r7, #28]
 800d2c6:	4401      	add	r1, r0
 800d2c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	69ba      	ldr	r2, [r7, #24]
 800d2e0:	0151      	lsls	r1, r2, #5
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	440a      	add	r2, r1
 800d2e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2ee:	6113      	str	r3, [r2, #16]
 800d2f0:	e062      	b.n	800d3b8 <USB_EPStartXfer+0x490>
 800d2f2:	bf00      	nop
 800d2f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d123      	bne.n	800d348 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	015a      	lsls	r2, r3, #5
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	4413      	add	r3, r2
 800d308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d316:	69b9      	ldr	r1, [r7, #24]
 800d318:	0148      	lsls	r0, r1, #5
 800d31a:	69f9      	ldr	r1, [r7, #28]
 800d31c:	4401      	add	r1, r0
 800d31e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d322:	4313      	orrs	r3, r2
 800d324:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	69ba      	ldr	r2, [r7, #24]
 800d336:	0151      	lsls	r1, r2, #5
 800d338:	69fa      	ldr	r2, [r7, #28]
 800d33a:	440a      	add	r2, r1
 800d33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d344:	6113      	str	r3, [r2, #16]
 800d346:	e037      	b.n	800d3b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	691a      	ldr	r2, [r3, #16]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	4413      	add	r3, r2
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	fbb2 f3f3 	udiv	r3, r2, r3
 800d35c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	8afa      	ldrh	r2, [r7, #22]
 800d364:	fb03 f202 	mul.w	r2, r3, r2
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	8afb      	ldrh	r3, [r7, #22]
 800d37c:	04d9      	lsls	r1, r3, #19
 800d37e:	4b38      	ldr	r3, [pc, #224]	@ (800d460 <USB_EPStartXfer+0x538>)
 800d380:	400b      	ands	r3, r1
 800d382:	69b9      	ldr	r1, [r7, #24]
 800d384:	0148      	lsls	r0, r1, #5
 800d386:	69f9      	ldr	r1, [r7, #28]
 800d388:	4401      	add	r1, r0
 800d38a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d38e:	4313      	orrs	r3, r2
 800d390:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d39e:	691a      	ldr	r2, [r3, #16]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3a8:	69b9      	ldr	r1, [r7, #24]
 800d3aa:	0148      	lsls	r0, r1, #5
 800d3ac:	69f9      	ldr	r1, [r7, #28]
 800d3ae:	4401      	add	r1, r0
 800d3b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d10d      	bne.n	800d3da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d009      	beq.n	800d3da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	68d9      	ldr	r1, [r3, #12]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	015a      	lsls	r2, r3, #5
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3d6:	460a      	mov	r2, r1
 800d3d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	791b      	ldrb	r3, [r3, #4]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d128      	bne.n	800d434 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d110      	bne.n	800d414 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	0151      	lsls	r1, r2, #5
 800d404:	69fa      	ldr	r2, [r7, #28]
 800d406:	440a      	add	r2, r1
 800d408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d40c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	e00f      	b.n	800d434 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	69ba      	ldr	r2, [r7, #24]
 800d424:	0151      	lsls	r1, r2, #5
 800d426:	69fa      	ldr	r2, [r7, #28]
 800d428:	440a      	add	r2, r1
 800d42a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d432:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	0151      	lsls	r1, r2, #5
 800d446:	69fa      	ldr	r2, [r7, #28]
 800d448:	440a      	add	r2, r1
 800d44a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d44e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3720      	adds	r7, #32
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	1ff80000 	.word	0x1ff80000

0800d464 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d464:	b480      	push	{r7}
 800d466:	b087      	sub	sp, #28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	785b      	ldrb	r3, [r3, #1]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d14a      	bne.n	800d518 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d49a:	f040 8086 	bne.w	800d5aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	7812      	ldrb	r2, [r2, #0]
 800d4b2:	0151      	lsls	r1, r2, #5
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	440a      	add	r2, r1
 800d4b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d4c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	0151      	lsls	r1, r2, #5
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	440a      	add	r2, r1
 800d4dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d4e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d902      	bls.n	800d4fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d4fa:	e056      	b.n	800d5aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	015a      	lsls	r2, r3, #5
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	4413      	add	r3, r2
 800d506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d514:	d0e7      	beq.n	800d4e6 <USB_EPStopXfer+0x82>
 800d516:	e048      	b.n	800d5aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d530:	d13b      	bne.n	800d5aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	0151      	lsls	r1, r2, #5
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	440a      	add	r2, r1
 800d54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d550:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d554:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	7812      	ldrb	r2, [r2, #0]
 800d56a:	0151      	lsls	r1, r2, #5
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	440a      	add	r2, r1
 800d570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3301      	adds	r3, #1
 800d57e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d586:	4293      	cmp	r3, r2
 800d588:	d902      	bls.n	800d590 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
          break;
 800d58e:	e00c      	b.n	800d5aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	015a      	lsls	r2, r3, #5
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	4413      	add	r3, r2
 800d59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5a8:	d0e7      	beq.n	800d57a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	371c      	adds	r7, #28
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b089      	sub	sp, #36	@ 0x24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	71fb      	strb	r3, [r7, #7]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d5d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d123      	bne.n	800d626 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d5de:	88bb      	ldrh	r3, [r7, #4]
 800d5e0:	3303      	adds	r3, #3
 800d5e2:	089b      	lsrs	r3, r3, #2
 800d5e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61bb      	str	r3, [r7, #24]
 800d5ea:	e018      	b.n	800d61e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	031a      	lsls	r2, r3, #12
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	3301      	adds	r3, #1
 800d604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	3301      	adds	r3, #1
 800d60a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	3301      	adds	r3, #1
 800d610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	3301      	adds	r3, #1
 800d616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	3301      	adds	r3, #1
 800d61c:	61bb      	str	r3, [r7, #24]
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	429a      	cmp	r2, r3
 800d624:	d3e2      	bcc.n	800d5ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3724      	adds	r7, #36	@ 0x24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d634:	b480      	push	{r7}
 800d636:	b08b      	sub	sp, #44	@ 0x2c
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	4613      	mov	r3, r2
 800d640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	089b      	lsrs	r3, r3, #2
 800d64e:	b29b      	uxth	r3, r3
 800d650:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d65a:	2300      	movs	r3, #0
 800d65c:	623b      	str	r3, [r7, #32]
 800d65e:	e014      	b.n	800d68a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66e:	3301      	adds	r3, #1
 800d670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	3301      	adds	r3, #1
 800d676:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	3301      	adds	r3, #1
 800d67c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d680:	3301      	adds	r3, #1
 800d682:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	3301      	adds	r3, #1
 800d688:	623b      	str	r3, [r7, #32]
 800d68a:	6a3a      	ldr	r2, [r7, #32]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d3e6      	bcc.n	800d660 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d692:	8bfb      	ldrh	r3, [r7, #30]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01e      	beq.n	800d6d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d698:	2300      	movs	r3, #0
 800d69a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f107 0310 	add.w	r3, r7, #16
 800d6a8:	6812      	ldr	r2, [r2, #0]
 800d6aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d6ac:	693a      	ldr	r2, [r7, #16]
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	701a      	strb	r2, [r3, #0]
      i++;
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d6ca:	8bfb      	ldrh	r3, [r7, #30]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d6d0:	8bfb      	ldrh	r3, [r7, #30]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1ea      	bne.n	800d6ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	372c      	adds	r7, #44	@ 0x2c
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	785b      	ldrb	r3, [r3, #1]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d12c      	bne.n	800d75a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4413      	add	r3, r2
 800d708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	db12      	blt.n	800d738 <USB_EPSetStall+0x54>
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00f      	beq.n	800d738 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	015a      	lsls	r2, r3, #5
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4413      	add	r3, r2
 800d720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	0151      	lsls	r1, r2, #5
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	440a      	add	r2, r1
 800d72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d732:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d736:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4413      	add	r3, r2
 800d740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	0151      	lsls	r1, r2, #5
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	440a      	add	r2, r1
 800d74e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	e02b      	b.n	800d7b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4413      	add	r3, r2
 800d762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	db12      	blt.n	800d792 <USB_EPSetStall+0xae>
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00f      	beq.n	800d792 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	0151      	lsls	r1, r2, #5
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	440a      	add	r2, r1
 800d788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d78c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d790:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	015a      	lsls	r2, r3, #5
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	4413      	add	r3, r2
 800d79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	0151      	lsls	r1, r2, #5
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	440a      	add	r2, r1
 800d7a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d7b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	785b      	ldrb	r3, [r3, #1]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d128      	bne.n	800d82e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	015a      	lsls	r2, r3, #5
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	0151      	lsls	r1, r2, #5
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	440a      	add	r2, r1
 800d7f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d7fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	791b      	ldrb	r3, [r3, #4]
 800d800:	2b03      	cmp	r3, #3
 800d802:	d003      	beq.n	800d80c <USB_EPClearStall+0x4c>
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	791b      	ldrb	r3, [r3, #4]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d138      	bne.n	800d87e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	0151      	lsls	r1, r2, #5
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	440a      	add	r2, r1
 800d822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	e027      	b.n	800d87e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	0151      	lsls	r1, r2, #5
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	440a      	add	r2, r1
 800d844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d848:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d84c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	791b      	ldrb	r3, [r3, #4]
 800d852:	2b03      	cmp	r3, #3
 800d854:	d003      	beq.n	800d85e <USB_EPClearStall+0x9e>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	791b      	ldrb	r3, [r3, #4]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d10f      	bne.n	800d87e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	015a      	lsls	r2, r3, #5
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	0151      	lsls	r1, r2, #5
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	440a      	add	r2, r1
 800d874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d87c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d8ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	011b      	lsls	r3, r3, #4
 800d8bc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d8c0:	68f9      	ldr	r1, [r7, #12]
 800d8c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d906:	f023 0302 	bic.w	r3, r3, #2
 800d90a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b085      	sub	sp, #20
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d934:	f023 0303 	bic.w	r3, r3, #3
 800d938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d948:	f043 0302 	orr.w	r3, r3, #2
 800d94c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4013      	ands	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d974:	68fb      	ldr	r3, [r7, #12]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	0c1b      	lsrs	r3, r3, #16
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b085      	sub	sp, #20
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9d2:	69db      	ldr	r3, [r3, #28]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	b29b      	uxth	r3, r3
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	4013      	ands	r3, r2
 800da16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da18:	68bb      	ldr	r3, [r7, #8]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da26:	b480      	push	{r7}
 800da28:	b087      	sub	sp, #28
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da4a:	78fb      	ldrb	r3, [r7, #3]
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	fa22 f303 	lsr.w	r3, r2, r3
 800da56:	01db      	lsls	r3, r3, #7
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	015a      	lsls	r2, r3, #5
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	4413      	add	r3, r2
 800da68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	4013      	ands	r3, r2
 800da72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da74:	68bb      	ldr	r3, [r7, #8]
}
 800da76:	4618      	mov	r0, r3
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800da82:	b480      	push	{r7}
 800da84:	b083      	sub	sp, #12
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	f003 0301 	and.w	r3, r3, #1
}
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800da9e:	b480      	push	{r7}
 800daa0:	b085      	sub	sp, #20
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dab8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dabc:	f023 0307 	bic.w	r3, r3, #7
 800dac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	460b      	mov	r3, r1
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	333c      	adds	r3, #60	@ 0x3c
 800dafa:	3304      	adds	r3, #4
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	4a26      	ldr	r2, [pc, #152]	@ (800db9c <USB_EP0_OutStart+0xb8>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d90a      	bls.n	800db1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db18:	d101      	bne.n	800db1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e037      	b.n	800db8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db24:	461a      	mov	r2, r3
 800db26:	2300      	movs	r3, #0
 800db28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800db3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db4c:	f043 0318 	orr.w	r3, r3, #24
 800db50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800db64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800db66:	7afb      	ldrb	r3, [r7, #11]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d10f      	bne.n	800db8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db72:	461a      	mov	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800db8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	371c      	adds	r7, #28
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	4f54300a 	.word	0x4f54300a

0800dba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbb8:	d901      	bls.n	800dbbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	e01b      	b.n	800dbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	691b      	ldr	r3, [r3, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	daf2      	bge.n	800dbac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	f043 0201 	orr.w	r2, r3, #1
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbe2:	d901      	bls.n	800dbe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e006      	b.n	800dbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d0f0      	beq.n	800dbd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
	...

0800dc04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dc10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dc14:	f005 fe24 	bl	8013860 <USBD_static_malloc>
 800dc18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d109      	bne.n	800dc34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	32b0      	adds	r2, #176	@ 0xb0
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dc30:	2302      	movs	r3, #2
 800dc32:	e0d4      	b.n	800ddde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dc34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dc38:	2100      	movs	r1, #0
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f006 fdf5 	bl	801482a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	32b0      	adds	r2, #176	@ 0xb0
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	32b0      	adds	r2, #176	@ 0xb0
 800dc5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	7c1b      	ldrb	r3, [r3, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d138      	bne.n	800dcde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dc6c:	4b5e      	ldr	r3, [pc, #376]	@ (800dde8 <USBD_CDC_Init+0x1e4>)
 800dc6e:	7819      	ldrb	r1, [r3, #0]
 800dc70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc74:	2202      	movs	r2, #2
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f005 fccf 	bl	801361a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc7c:	4b5a      	ldr	r3, [pc, #360]	@ (800dde8 <USBD_CDC_Init+0x1e4>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f003 020f 	and.w	r2, r3, #15
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	4613      	mov	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	440b      	add	r3, r1
 800dc90:	3324      	adds	r3, #36	@ 0x24
 800dc92:	2201      	movs	r2, #1
 800dc94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dc96:	4b55      	ldr	r3, [pc, #340]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800dc98:	7819      	ldrb	r1, [r3, #0]
 800dc9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc9e:	2202      	movs	r2, #2
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f005 fcba 	bl	801361a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dca6:	4b51      	ldr	r3, [pc, #324]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	f003 020f 	and.w	r2, r3, #15
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	440b      	add	r3, r1
 800dcba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dcc2:	4b4b      	ldr	r3, [pc, #300]	@ (800ddf0 <USBD_CDC_Init+0x1ec>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	f003 020f 	and.w	r2, r3, #15
 800dcca:	6879      	ldr	r1, [r7, #4]
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	440b      	add	r3, r1
 800dcd6:	3326      	adds	r3, #38	@ 0x26
 800dcd8:	2210      	movs	r2, #16
 800dcda:	801a      	strh	r2, [r3, #0]
 800dcdc:	e035      	b.n	800dd4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dcde:	4b42      	ldr	r3, [pc, #264]	@ (800dde8 <USBD_CDC_Init+0x1e4>)
 800dce0:	7819      	ldrb	r1, [r3, #0]
 800dce2:	2340      	movs	r3, #64	@ 0x40
 800dce4:	2202      	movs	r2, #2
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f005 fc97 	bl	801361a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dcec:	4b3e      	ldr	r3, [pc, #248]	@ (800dde8 <USBD_CDC_Init+0x1e4>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	f003 020f 	and.w	r2, r3, #15
 800dcf4:	6879      	ldr	r1, [r7, #4]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4413      	add	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	440b      	add	r3, r1
 800dd00:	3324      	adds	r3, #36	@ 0x24
 800dd02:	2201      	movs	r2, #1
 800dd04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dd06:	4b39      	ldr	r3, [pc, #228]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800dd08:	7819      	ldrb	r1, [r3, #0]
 800dd0a:	2340      	movs	r3, #64	@ 0x40
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f005 fc83 	bl	801361a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dd14:	4b35      	ldr	r3, [pc, #212]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	f003 020f 	and.w	r2, r3, #15
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	440b      	add	r3, r1
 800dd28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dd30:	4b2f      	ldr	r3, [pc, #188]	@ (800ddf0 <USBD_CDC_Init+0x1ec>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	f003 020f 	and.w	r2, r3, #15
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	440b      	add	r3, r1
 800dd44:	3326      	adds	r3, #38	@ 0x26
 800dd46:	2210      	movs	r2, #16
 800dd48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dd4a:	4b29      	ldr	r3, [pc, #164]	@ (800ddf0 <USBD_CDC_Init+0x1ec>)
 800dd4c:	7819      	ldrb	r1, [r3, #0]
 800dd4e:	2308      	movs	r3, #8
 800dd50:	2203      	movs	r2, #3
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f005 fc61 	bl	801361a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dd58:	4b25      	ldr	r3, [pc, #148]	@ (800ddf0 <USBD_CDC_Init+0x1ec>)
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	f003 020f 	and.w	r2, r3, #15
 800dd60:	6879      	ldr	r1, [r7, #4]
 800dd62:	4613      	mov	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4413      	add	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	440b      	add	r3, r1
 800dd6c:	3324      	adds	r3, #36	@ 0x24
 800dd6e:	2201      	movs	r2, #1
 800dd70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	33b0      	adds	r3, #176	@ 0xb0
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	e018      	b.n	800ddde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	7c1b      	ldrb	r3, [r3, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10a      	bne.n	800ddca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ddb4:	4b0d      	ldr	r3, [pc, #52]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800ddb6:	7819      	ldrb	r1, [r3, #0]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ddbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f005 fd18 	bl	80137f8 <USBD_LL_PrepareReceive>
 800ddc8:	e008      	b.n	800dddc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ddca:	4b08      	ldr	r3, [pc, #32]	@ (800ddec <USBD_CDC_Init+0x1e8>)
 800ddcc:	7819      	ldrb	r1, [r3, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ddd4:	2340      	movs	r3, #64	@ 0x40
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f005 fd0e 	bl	80137f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	20000097 	.word	0x20000097
 800ddec:	20000098 	.word	0x20000098
 800ddf0:	20000099 	.word	0x20000099

0800ddf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800de00:	4b3a      	ldr	r3, [pc, #232]	@ (800deec <USBD_CDC_DeInit+0xf8>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f005 fc2d 	bl	8013666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800de0c:	4b37      	ldr	r3, [pc, #220]	@ (800deec <USBD_CDC_DeInit+0xf8>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 020f 	and.w	r2, r3, #15
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	4613      	mov	r3, r2
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	440b      	add	r3, r1
 800de20:	3324      	adds	r3, #36	@ 0x24
 800de22:	2200      	movs	r2, #0
 800de24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800de26:	4b32      	ldr	r3, [pc, #200]	@ (800def0 <USBD_CDC_DeInit+0xfc>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f005 fc1a 	bl	8013666 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800de32:	4b2f      	ldr	r3, [pc, #188]	@ (800def0 <USBD_CDC_DeInit+0xfc>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	f003 020f 	and.w	r2, r3, #15
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	4613      	mov	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	440b      	add	r3, r1
 800de46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de4a:	2200      	movs	r2, #0
 800de4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800de4e:	4b29      	ldr	r3, [pc, #164]	@ (800def4 <USBD_CDC_DeInit+0x100>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f005 fc06 	bl	8013666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800de5a:	4b26      	ldr	r3, [pc, #152]	@ (800def4 <USBD_CDC_DeInit+0x100>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	f003 020f 	and.w	r2, r3, #15
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	440b      	add	r3, r1
 800de6e:	3324      	adds	r3, #36	@ 0x24
 800de70:	2200      	movs	r2, #0
 800de72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800de74:	4b1f      	ldr	r3, [pc, #124]	@ (800def4 <USBD_CDC_DeInit+0x100>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f003 020f 	and.w	r2, r3, #15
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	440b      	add	r3, r1
 800de88:	3326      	adds	r3, #38	@ 0x26
 800de8a:	2200      	movs	r2, #0
 800de8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	32b0      	adds	r2, #176	@ 0xb0
 800de98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01f      	beq.n	800dee0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	33b0      	adds	r3, #176	@ 0xb0
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	32b0      	adds	r2, #176	@ 0xb0
 800debe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f005 fcda 	bl	801387c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	32b0      	adds	r2, #176	@ 0xb0
 800ded2:	2100      	movs	r1, #0
 800ded4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20000097 	.word	0x20000097
 800def0:	20000098 	.word	0x20000098
 800def4:	20000099 	.word	0x20000099

0800def8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	32b0      	adds	r2, #176	@ 0xb0
 800df0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800df12:	2300      	movs	r3, #0
 800df14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800df16:	2300      	movs	r3, #0
 800df18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800df24:	2303      	movs	r3, #3
 800df26:	e0bf      	b.n	800e0a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df30:	2b00      	cmp	r3, #0
 800df32:	d050      	beq.n	800dfd6 <USBD_CDC_Setup+0xde>
 800df34:	2b20      	cmp	r3, #32
 800df36:	f040 80af 	bne.w	800e098 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	88db      	ldrh	r3, [r3, #6]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d03a      	beq.n	800dfb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	b25b      	sxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	da1b      	bge.n	800df84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	33b0      	adds	r3, #176	@ 0xb0
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4413      	add	r3, r2
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800df62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	88d2      	ldrh	r2, [r2, #6]
 800df68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	88db      	ldrh	r3, [r3, #6]
 800df6e:	2b07      	cmp	r3, #7
 800df70:	bf28      	it	cs
 800df72:	2307      	movcs	r3, #7
 800df74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	89fa      	ldrh	r2, [r7, #14]
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f001 fd93 	bl	800faa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800df82:	e090      	b.n	800e0a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	785a      	ldrb	r2, [r3, #1]
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	88db      	ldrh	r3, [r3, #6]
 800df92:	2b3f      	cmp	r3, #63	@ 0x3f
 800df94:	d803      	bhi.n	800df9e <USBD_CDC_Setup+0xa6>
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	88db      	ldrh	r3, [r3, #6]
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	e000      	b.n	800dfa0 <USBD_CDC_Setup+0xa8>
 800df9e:	2240      	movs	r2, #64	@ 0x40
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dfa6:	6939      	ldr	r1, [r7, #16]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dfae:	461a      	mov	r2, r3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f001 fda5 	bl	800fb00 <USBD_CtlPrepareRx>
      break;
 800dfb6:	e076      	b.n	800e0a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	33b0      	adds	r3, #176	@ 0xb0
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	7850      	ldrb	r0, [r2, #1]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	4798      	blx	r3
      break;
 800dfd4:	e067      	b.n	800e0a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	785b      	ldrb	r3, [r3, #1]
 800dfda:	2b0b      	cmp	r3, #11
 800dfdc:	d851      	bhi.n	800e082 <USBD_CDC_Setup+0x18a>
 800dfde:	a201      	add	r2, pc, #4	@ (adr r2, 800dfe4 <USBD_CDC_Setup+0xec>)
 800dfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe4:	0800e015 	.word	0x0800e015
 800dfe8:	0800e091 	.word	0x0800e091
 800dfec:	0800e083 	.word	0x0800e083
 800dff0:	0800e083 	.word	0x0800e083
 800dff4:	0800e083 	.word	0x0800e083
 800dff8:	0800e083 	.word	0x0800e083
 800dffc:	0800e083 	.word	0x0800e083
 800e000:	0800e083 	.word	0x0800e083
 800e004:	0800e083 	.word	0x0800e083
 800e008:	0800e083 	.word	0x0800e083
 800e00c:	0800e03f 	.word	0x0800e03f
 800e010:	0800e069 	.word	0x0800e069
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d107      	bne.n	800e030 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e020:	f107 030a 	add.w	r3, r7, #10
 800e024:	2202      	movs	r2, #2
 800e026:	4619      	mov	r1, r3
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f001 fd3d 	bl	800faa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e02e:	e032      	b.n	800e096 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f001 fcbb 	bl	800f9ae <USBD_CtlError>
            ret = USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	75fb      	strb	r3, [r7, #23]
          break;
 800e03c:	e02b      	b.n	800e096 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b03      	cmp	r3, #3
 800e048:	d107      	bne.n	800e05a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e04a:	f107 030d 	add.w	r3, r7, #13
 800e04e:	2201      	movs	r2, #1
 800e050:	4619      	mov	r1, r3
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f001 fd28 	bl	800faa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e058:	e01d      	b.n	800e096 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f001 fca6 	bl	800f9ae <USBD_CtlError>
            ret = USBD_FAIL;
 800e062:	2303      	movs	r3, #3
 800e064:	75fb      	strb	r3, [r7, #23]
          break;
 800e066:	e016      	b.n	800e096 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b03      	cmp	r3, #3
 800e072:	d00f      	beq.n	800e094 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e074:	6839      	ldr	r1, [r7, #0]
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f001 fc99 	bl	800f9ae <USBD_CtlError>
            ret = USBD_FAIL;
 800e07c:	2303      	movs	r3, #3
 800e07e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e080:	e008      	b.n	800e094 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f001 fc92 	bl	800f9ae <USBD_CtlError>
          ret = USBD_FAIL;
 800e08a:	2303      	movs	r3, #3
 800e08c:	75fb      	strb	r3, [r7, #23]
          break;
 800e08e:	e002      	b.n	800e096 <USBD_CDC_Setup+0x19e>
          break;
 800e090:	bf00      	nop
 800e092:	e008      	b.n	800e0a6 <USBD_CDC_Setup+0x1ae>
          break;
 800e094:	bf00      	nop
      }
      break;
 800e096:	e006      	b.n	800e0a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f001 fc87 	bl	800f9ae <USBD_CtlError>
      ret = USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800e0a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	32b0      	adds	r2, #176	@ 0xb0
 800e0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e065      	b.n	800e1a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	32b0      	adds	r2, #176	@ 0xb0
 800e0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e0ea:	78fb      	ldrb	r3, [r7, #3]
 800e0ec:	f003 020f 	and.w	r2, r3, #15
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	440b      	add	r3, r1
 800e0fc:	3318      	adds	r3, #24
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d02f      	beq.n	800e164 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	f003 020f 	and.w	r2, r3, #15
 800e10a:	6879      	ldr	r1, [r7, #4]
 800e10c:	4613      	mov	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	440b      	add	r3, r1
 800e116:	3318      	adds	r3, #24
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	78fb      	ldrb	r3, [r7, #3]
 800e11c:	f003 010f 	and.w	r1, r3, #15
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	460b      	mov	r3, r1
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4403      	add	r3, r0
 800e12c:	331c      	adds	r3, #28
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	fbb2 f1f3 	udiv	r1, r2, r3
 800e134:	fb01 f303 	mul.w	r3, r1, r3
 800e138:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d112      	bne.n	800e164 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	f003 020f 	and.w	r2, r3, #15
 800e144:	6879      	ldr	r1, [r7, #4]
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	440b      	add	r3, r1
 800e150:	3318      	adds	r3, #24
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e156:	78f9      	ldrb	r1, [r7, #3]
 800e158:	2300      	movs	r3, #0
 800e15a:	2200      	movs	r2, #0
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f005 fb2a 	bl	80137b6 <USBD_LL_Transmit>
 800e162:	e01f      	b.n	800e1a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2200      	movs	r2, #0
 800e168:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	33b0      	adds	r3, #176	@ 0xb0
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d010      	beq.n	800e1a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	33b0      	adds	r3, #176	@ 0xb0
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4413      	add	r3, r2
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e1a0:	78fa      	ldrb	r2, [r7, #3]
 800e1a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	32b0      	adds	r2, #176	@ 0xb0
 800e1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	32b0      	adds	r2, #176	@ 0xb0
 800e1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	e01a      	b.n	800e216 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e1e0:	78fb      	ldrb	r3, [r7, #3]
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f005 fb28 	bl	801383a <USBD_LL_GetRxDataSize>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	33b0      	adds	r3, #176	@ 0xb0
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e210:	4611      	mov	r1, r2
 800e212:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b084      	sub	sp, #16
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	32b0      	adds	r2, #176	@ 0xb0
 800e230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e234:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d101      	bne.n	800e240 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e23c:	2303      	movs	r3, #3
 800e23e:	e024      	b.n	800e28a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	33b0      	adds	r3, #176	@ 0xb0
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4413      	add	r3, r2
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d019      	beq.n	800e288 <USBD_CDC_EP0_RxReady+0x6a>
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e25a:	2bff      	cmp	r3, #255	@ 0xff
 800e25c:	d014      	beq.n	800e288 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	33b0      	adds	r3, #176	@ 0xb0
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e276:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e27e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	22ff      	movs	r2, #255	@ 0xff
 800e284:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e29c:	2182      	movs	r1, #130	@ 0x82
 800e29e:	4818      	ldr	r0, [pc, #96]	@ (800e300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2a0:	f000 fd4f 	bl	800ed42 <USBD_GetEpDesc>
 800e2a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	4815      	ldr	r0, [pc, #84]	@ (800e300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2aa:	f000 fd4a 	bl	800ed42 <USBD_GetEpDesc>
 800e2ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e2b0:	2181      	movs	r1, #129	@ 0x81
 800e2b2:	4813      	ldr	r0, [pc, #76]	@ (800e300 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2b4:	f000 fd45 	bl	800ed42 <USBD_GetEpDesc>
 800e2b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d006      	beq.n	800e2da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e2d4:	711a      	strb	r2, [r3, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d006      	beq.n	800e2ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e2e8:	711a      	strb	r2, [r3, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2243      	movs	r2, #67	@ 0x43
 800e2f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e2f4:	4b02      	ldr	r3, [pc, #8]	@ (800e300 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20000054 	.word	0x20000054

0800e304 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e30c:	2182      	movs	r1, #130	@ 0x82
 800e30e:	4818      	ldr	r0, [pc, #96]	@ (800e370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e310:	f000 fd17 	bl	800ed42 <USBD_GetEpDesc>
 800e314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e316:	2101      	movs	r1, #1
 800e318:	4815      	ldr	r0, [pc, #84]	@ (800e370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e31a:	f000 fd12 	bl	800ed42 <USBD_GetEpDesc>
 800e31e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e320:	2181      	movs	r1, #129	@ 0x81
 800e322:	4813      	ldr	r0, [pc, #76]	@ (800e370 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e324:	f000 fd0d 	bl	800ed42 <USBD_GetEpDesc>
 800e328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2210      	movs	r2, #16
 800e334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d006      	beq.n	800e34a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2200      	movs	r2, #0
 800e340:	711a      	strb	r2, [r3, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f042 0202 	orr.w	r2, r2, #2
 800e348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d006      	beq.n	800e35e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	711a      	strb	r2, [r3, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	f042 0202 	orr.w	r2, r2, #2
 800e35c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2243      	movs	r2, #67	@ 0x43
 800e362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e364:	4b02      	ldr	r3, [pc, #8]	@ (800e370 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	20000054 	.word	0x20000054

0800e374 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e37c:	2182      	movs	r1, #130	@ 0x82
 800e37e:	4818      	ldr	r0, [pc, #96]	@ (800e3e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e380:	f000 fcdf 	bl	800ed42 <USBD_GetEpDesc>
 800e384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e386:	2101      	movs	r1, #1
 800e388:	4815      	ldr	r0, [pc, #84]	@ (800e3e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e38a:	f000 fcda 	bl	800ed42 <USBD_GetEpDesc>
 800e38e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e390:	2181      	movs	r1, #129	@ 0x81
 800e392:	4813      	ldr	r0, [pc, #76]	@ (800e3e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e394:	f000 fcd5 	bl	800ed42 <USBD_GetEpDesc>
 800e398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2210      	movs	r2, #16
 800e3a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d006      	beq.n	800e3ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e3b4:	711a      	strb	r2, [r3, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d006      	beq.n	800e3ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e3c8:	711a      	strb	r2, [r3, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2243      	movs	r2, #67	@ 0x43
 800e3d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e3d4:	4b02      	ldr	r3, [pc, #8]	@ (800e3e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	20000054 	.word	0x20000054

0800e3e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	220a      	movs	r2, #10
 800e3f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e3f2:	4b03      	ldr	r3, [pc, #12]	@ (800e400 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	20000010 	.word	0x20000010

0800e404 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d101      	bne.n	800e418 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e414:	2303      	movs	r3, #3
 800e416:	e009      	b.n	800e42c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	33b0      	adds	r3, #176	@ 0xb0
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	32b0      	adds	r2, #176	@ 0xb0
 800e44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e452:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e008      	b.n	800e470 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	371c      	adds	r7, #28
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	32b0      	adds	r2, #176	@ 0xb0
 800e490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e494:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e004      	b.n	800e4aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
	...

0800e4b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	32b0      	adds	r2, #176	@ 0xb0
 800e4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	e025      	b.n	800e52a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d11f      	bne.n	800e528 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e4f0:	4b10      	ldr	r3, [pc, #64]	@ (800e534 <USBD_CDC_TransmitPacket+0x7c>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	f003 020f 	and.w	r2, r3, #15
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4403      	add	r3, r0
 800e50a:	3318      	adds	r3, #24
 800e50c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e50e:	4b09      	ldr	r3, [pc, #36]	@ (800e534 <USBD_CDC_TransmitPacket+0x7c>)
 800e510:	7819      	ldrb	r1, [r3, #0]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f005 f949 	bl	80137b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e528:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20000097 	.word	0x20000097

0800e538 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	32b0      	adds	r2, #176	@ 0xb0
 800e54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e54e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	32b0      	adds	r2, #176	@ 0xb0
 800e55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d101      	bne.n	800e566 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e562:	2303      	movs	r3, #3
 800e564:	e018      	b.n	800e598 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	7c1b      	ldrb	r3, [r3, #16]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10a      	bne.n	800e584 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e56e:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a0 <USBD_CDC_ReceivePacket+0x68>)
 800e570:	7819      	ldrb	r1, [r3, #0]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f005 f93b 	bl	80137f8 <USBD_LL_PrepareReceive>
 800e582:	e008      	b.n	800e596 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e584:	4b06      	ldr	r3, [pc, #24]	@ (800e5a0 <USBD_CDC_ReceivePacket+0x68>)
 800e586:	7819      	ldrb	r1, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e58e:	2340      	movs	r3, #64	@ 0x40
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f005 f931 	bl	80137f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000098 	.word	0x20000098

0800e5a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d101      	bne.n	800e5bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	e01f      	b.n	800e5fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	79fa      	ldrb	r2, [r7, #7]
 800e5ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f004 ffab 	bl	801354c <USBD_LL_Init>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e60e:	2300      	movs	r3, #0
 800e610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e618:	2303      	movs	r3, #3
 800e61a:	e025      	b.n	800e668 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	32ae      	adds	r2, #174	@ 0xae
 800e62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00f      	beq.n	800e658 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	32ae      	adds	r2, #174	@ 0xae
 800e642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e648:	f107 020e 	add.w	r2, r7, #14
 800e64c:	4610      	mov	r0, r2
 800e64e:	4798      	blx	r3
 800e650:	4602      	mov	r2, r0
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f004 ffb3 	bl	80135e4 <USBD_LL_Start>
 800e67e:	4603      	mov	r3, r0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e690:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d009      	beq.n	800e6cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	78fa      	ldrb	r2, [r7, #3]
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	4798      	blx	r3
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	78fa      	ldrb	r2, [r7, #3]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	4798      	blx	r3
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e6fc:	2303      	movs	r3, #3
 800e6fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e700:	7bfb      	ldrb	r3, [r7, #15]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f001 f90c 	bl	800f93a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2201      	movs	r2, #1
 800e726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e730:	461a      	mov	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e73e:	f003 031f 	and.w	r3, r3, #31
 800e742:	2b02      	cmp	r3, #2
 800e744:	d01a      	beq.n	800e77c <USBD_LL_SetupStage+0x72>
 800e746:	2b02      	cmp	r3, #2
 800e748:	d822      	bhi.n	800e790 <USBD_LL_SetupStage+0x86>
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <USBD_LL_SetupStage+0x4a>
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d00a      	beq.n	800e768 <USBD_LL_SetupStage+0x5e>
 800e752:	e01d      	b.n	800e790 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fb63 	bl	800ee28 <USBD_StdDevReq>
 800e762:	4603      	mov	r3, r0
 800e764:	73fb      	strb	r3, [r7, #15]
      break;
 800e766:	e020      	b.n	800e7aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fbcb 	bl	800ef0c <USBD_StdItfReq>
 800e776:	4603      	mov	r3, r0
 800e778:	73fb      	strb	r3, [r7, #15]
      break;
 800e77a:	e016      	b.n	800e7aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e782:	4619      	mov	r1, r3
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fc2d 	bl	800efe4 <USBD_StdEPReq>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]
      break;
 800e78e:	e00c      	b.n	800e7aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e796:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f004 ff80 	bl	80136a4 <USBD_LL_StallEP>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a8:	bf00      	nop
  }

  return ret;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b086      	sub	sp, #24
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e7c6:	7afb      	ldrb	r3, [r7, #11]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d16e      	bne.n	800e8aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e7d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	f040 8098 	bne.w	800e910 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	689a      	ldr	r2, [r3, #8]
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d913      	bls.n	800e814 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	689a      	ldr	r2, [r3, #8]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	1ad2      	subs	r2, r2, r3
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	68da      	ldr	r2, [r3, #12]
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	4293      	cmp	r3, r2
 800e804:	bf28      	it	cs
 800e806:	4613      	movcs	r3, r2
 800e808:	461a      	mov	r2, r3
 800e80a:	6879      	ldr	r1, [r7, #4]
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f001 f994 	bl	800fb3a <USBD_CtlContinueRx>
 800e812:	e07d      	b.n	800e910 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e81a:	f003 031f 	and.w	r3, r3, #31
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d014      	beq.n	800e84c <USBD_LL_DataOutStage+0x98>
 800e822:	2b02      	cmp	r3, #2
 800e824:	d81d      	bhi.n	800e862 <USBD_LL_DataOutStage+0xae>
 800e826:	2b00      	cmp	r3, #0
 800e828:	d002      	beq.n	800e830 <USBD_LL_DataOutStage+0x7c>
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d003      	beq.n	800e836 <USBD_LL_DataOutStage+0x82>
 800e82e:	e018      	b.n	800e862 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e830:	2300      	movs	r3, #0
 800e832:	75bb      	strb	r3, [r7, #22]
            break;
 800e834:	e018      	b.n	800e868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	4619      	mov	r1, r3
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 fa64 	bl	800ed0e <USBD_CoreFindIF>
 800e846:	4603      	mov	r3, r0
 800e848:	75bb      	strb	r3, [r7, #22]
            break;
 800e84a:	e00d      	b.n	800e868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e852:	b2db      	uxtb	r3, r3
 800e854:	4619      	mov	r1, r3
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f000 fa66 	bl	800ed28 <USBD_CoreFindEP>
 800e85c:	4603      	mov	r3, r0
 800e85e:	75bb      	strb	r3, [r7, #22]
            break;
 800e860:	e002      	b.n	800e868 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e862:	2300      	movs	r3, #0
 800e864:	75bb      	strb	r3, [r7, #22]
            break;
 800e866:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e868:	7dbb      	ldrb	r3, [r7, #22]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d119      	bne.n	800e8a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b03      	cmp	r3, #3
 800e878:	d113      	bne.n	800e8a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e87a:	7dba      	ldrb	r2, [r7, #22]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	32ae      	adds	r2, #174	@ 0xae
 800e880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00b      	beq.n	800e8a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e88a:	7dba      	ldrb	r2, [r7, #22]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e892:	7dba      	ldrb	r2, [r7, #22]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	32ae      	adds	r2, #174	@ 0xae
 800e898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f001 f95a 	bl	800fb5c <USBD_CtlSendStatus>
 800e8a8:	e032      	b.n	800e910 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e8aa:	7afb      	ldrb	r3, [r7, #11]
 800e8ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 fa37 	bl	800ed28 <USBD_CoreFindEP>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8be:	7dbb      	ldrb	r3, [r7, #22]
 800e8c0:	2bff      	cmp	r3, #255	@ 0xff
 800e8c2:	d025      	beq.n	800e910 <USBD_LL_DataOutStage+0x15c>
 800e8c4:	7dbb      	ldrb	r3, [r7, #22]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d122      	bne.n	800e910 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	d117      	bne.n	800e906 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e8d6:	7dba      	ldrb	r2, [r7, #22]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	32ae      	adds	r2, #174	@ 0xae
 800e8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00f      	beq.n	800e906 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e8e6:	7dba      	ldrb	r2, [r7, #22]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e8ee:	7dba      	ldrb	r2, [r7, #22]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	32ae      	adds	r2, #174	@ 0xae
 800e8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	7afa      	ldrb	r2, [r7, #11]
 800e8fc:	4611      	mov	r1, r2
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	4798      	blx	r3
 800e902:	4603      	mov	r3, r0
 800e904:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
 800e90e:	e000      	b.n	800e912 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3718      	adds	r7, #24
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b086      	sub	sp, #24
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	460b      	mov	r3, r1
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e928:	7afb      	ldrb	r3, [r7, #11]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d16f      	bne.n	800ea0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3314      	adds	r3, #20
 800e932:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d15a      	bne.n	800e9f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	429a      	cmp	r2, r3
 800e948:	d914      	bls.n	800e974 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	689a      	ldr	r2, [r3, #8]
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	1ad2      	subs	r2, r2, r3
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	461a      	mov	r2, r3
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f001 f8bc 	bl	800fade <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e966:	2300      	movs	r3, #0
 800e968:	2200      	movs	r2, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f004 ff43 	bl	80137f8 <USBD_LL_PrepareReceive>
 800e972:	e03f      	b.n	800e9f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d11c      	bne.n	800e9ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e988:	429a      	cmp	r2, r3
 800e98a:	d316      	bcc.n	800e9ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e996:	429a      	cmp	r2, r3
 800e998:	d20f      	bcs.n	800e9ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e99a:	2200      	movs	r2, #0
 800e99c:	2100      	movs	r1, #0
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f001 f89d 	bl	800fade <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f004 ff20 	bl	80137f8 <USBD_LL_PrepareReceive>
 800e9b8:	e01c      	b.n	800e9f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d10f      	bne.n	800e9e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d009      	beq.n	800e9e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9e6:	2180      	movs	r1, #128	@ 0x80
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f004 fe5b 	bl	80136a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f001 f8c7 	bl	800fb82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d03a      	beq.n	800ea74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fe42 	bl	800e688 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ea0c:	e032      	b.n	800ea74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ea0e:	7afb      	ldrb	r3, [r7, #11]
 800ea10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	4619      	mov	r1, r3
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 f985 	bl	800ed28 <USBD_CoreFindEP>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea22:	7dfb      	ldrb	r3, [r7, #23]
 800ea24:	2bff      	cmp	r3, #255	@ 0xff
 800ea26:	d025      	beq.n	800ea74 <USBD_LL_DataInStage+0x15a>
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d122      	bne.n	800ea74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d11c      	bne.n	800ea74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ea3a:	7dfa      	ldrb	r2, [r7, #23]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	32ae      	adds	r2, #174	@ 0xae
 800ea40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d014      	beq.n	800ea74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea4a:	7dfa      	ldrb	r2, [r7, #23]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea52:	7dfa      	ldrb	r2, [r7, #23]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	32ae      	adds	r2, #174	@ 0xae
 800ea58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea5c:	695b      	ldr	r3, [r3, #20]
 800ea5e:	7afa      	ldrb	r2, [r7, #11]
 800ea60:	4611      	mov	r1, r2
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	4798      	blx	r3
 800ea66:	4603      	mov	r3, r0
 800ea68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ea6a:	7dbb      	ldrb	r3, [r7, #22]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ea70:	7dbb      	ldrb	r3, [r7, #22]
 800ea72:	e000      	b.n	800ea76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d014      	beq.n	800eae4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00e      	beq.n	800eae4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6852      	ldr	r2, [r2, #4]
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	4611      	mov	r1, r2
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	4798      	blx	r3
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eae0:	2303      	movs	r3, #3
 800eae2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eae4:	2340      	movs	r3, #64	@ 0x40
 800eae6:	2200      	movs	r2, #0
 800eae8:	2100      	movs	r1, #0
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f004 fd95 	bl	801361a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2240      	movs	r2, #64	@ 0x40
 800eafc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb00:	2340      	movs	r3, #64	@ 0x40
 800eb02:	2200      	movs	r2, #0
 800eb04:	2180      	movs	r1, #128	@ 0x80
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f004 fd87 	bl	801361a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2240      	movs	r2, #64	@ 0x40
 800eb16:	621a      	str	r2, [r3, #32]

  return ret;
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb22:	b480      	push	{r7}
 800eb24:	b083      	sub	sp, #12
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	78fa      	ldrb	r2, [r7, #3]
 800eb32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb34:	2300      	movs	r3, #0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb42:	b480      	push	{r7}
 800eb44:	b083      	sub	sp, #12
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b04      	cmp	r3, #4
 800eb54:	d006      	beq.n	800eb64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2204      	movs	r2, #4
 800eb68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b083      	sub	sp, #12
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b04      	cmp	r3, #4
 800eb8c:	d106      	bne.n	800eb9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b082      	sub	sp, #8
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d110      	bne.n	800ebe0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00b      	beq.n	800ebe0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebce:	69db      	ldr	r3, [r3, #28]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebda:	69db      	ldr	r3, [r3, #28]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	32ae      	adds	r2, #174	@ 0xae
 800ec00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	e01c      	b.n	800ec46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d115      	bne.n	800ec44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	32ae      	adds	r2, #174	@ 0xae
 800ec22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00b      	beq.n	800ec44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	32ae      	adds	r2, #174	@ 0xae
 800ec36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec3a:	6a1b      	ldr	r3, [r3, #32]
 800ec3c:	78fa      	ldrb	r2, [r7, #3]
 800ec3e:	4611      	mov	r1, r2
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	460b      	mov	r3, r1
 800ec58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	32ae      	adds	r2, #174	@ 0xae
 800ec64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	e01c      	b.n	800ecaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b03      	cmp	r3, #3
 800ec7a:	d115      	bne.n	800eca8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	32ae      	adds	r2, #174	@ 0xae
 800ec86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00b      	beq.n	800eca8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	32ae      	adds	r2, #174	@ 0xae
 800ec9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca0:	78fa      	ldrb	r2, [r7, #3]
 800eca2:	4611      	mov	r1, r2
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}

0800ecb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ecb2:	b480      	push	{r7}
 800ecb4:	b083      	sub	sp, #12
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00e      	beq.n	800ed04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	6852      	ldr	r2, [r2, #4]
 800ecf2:	b2d2      	uxtb	r2, r2
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	4798      	blx	r3
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ed00:	2303      	movs	r3, #3
 800ed02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b083      	sub	sp, #12
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	460b      	mov	r3, r1
 800ed18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	460b      	mov	r3, r1
 800ed32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b086      	sub	sp, #24
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	885b      	ldrh	r3, [r3, #2]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d91f      	bls.n	800eda8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ed6e:	e013      	b.n	800ed98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ed70:	f107 030a 	add.w	r3, r7, #10
 800ed74:	4619      	mov	r1, r3
 800ed76:	6978      	ldr	r0, [r7, #20]
 800ed78:	f000 f81b 	bl	800edb2 <USBD_GetNextDesc>
 800ed7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	785b      	ldrb	r3, [r3, #1]
 800ed82:	2b05      	cmp	r3, #5
 800ed84:	d108      	bne.n	800ed98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	789b      	ldrb	r3, [r3, #2]
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d008      	beq.n	800eda6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	885b      	ldrh	r3, [r3, #2]
 800ed9c:	b29a      	uxth	r2, r3
 800ed9e:	897b      	ldrh	r3, [r7, #10]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d8e5      	bhi.n	800ed70 <USBD_GetEpDesc+0x2e>
 800eda4:	e000      	b.n	800eda8 <USBD_GetEpDesc+0x66>
          break;
 800eda6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800eda8:	693b      	ldr	r3, [r7, #16]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b085      	sub	sp, #20
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	881b      	ldrh	r3, [r3, #0]
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	7812      	ldrb	r2, [r2, #0]
 800edc8:	4413      	add	r3, r2
 800edca:	b29a      	uxth	r2, r3
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4413      	add	r3, r2
 800edda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800eddc:	68fb      	ldr	r3, [r7, #12]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3714      	adds	r7, #20
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800edea:	b480      	push	{r7}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	3301      	adds	r3, #1
 800ee00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee08:	8a3b      	ldrh	r3, [r7, #16]
 800ee0a:	021b      	lsls	r3, r3, #8
 800ee0c:	b21a      	sxth	r2, r3
 800ee0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	b21b      	sxth	r3, r3
 800ee16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee18:	89fb      	ldrh	r3, [r7, #14]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	371c      	adds	r7, #28
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
	...

0800ee28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee3e:	2b40      	cmp	r3, #64	@ 0x40
 800ee40:	d005      	beq.n	800ee4e <USBD_StdDevReq+0x26>
 800ee42:	2b40      	cmp	r3, #64	@ 0x40
 800ee44:	d857      	bhi.n	800eef6 <USBD_StdDevReq+0xce>
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d00f      	beq.n	800ee6a <USBD_StdDevReq+0x42>
 800ee4a:	2b20      	cmp	r3, #32
 800ee4c:	d153      	bne.n	800eef6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	32ae      	adds	r2, #174	@ 0xae
 800ee58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	4798      	blx	r3
 800ee64:	4603      	mov	r3, r0
 800ee66:	73fb      	strb	r3, [r7, #15]
      break;
 800ee68:	e04a      	b.n	800ef00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	785b      	ldrb	r3, [r3, #1]
 800ee6e:	2b09      	cmp	r3, #9
 800ee70:	d83b      	bhi.n	800eeea <USBD_StdDevReq+0xc2>
 800ee72:	a201      	add	r2, pc, #4	@ (adr r2, 800ee78 <USBD_StdDevReq+0x50>)
 800ee74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee78:	0800eecd 	.word	0x0800eecd
 800ee7c:	0800eee1 	.word	0x0800eee1
 800ee80:	0800eeeb 	.word	0x0800eeeb
 800ee84:	0800eed7 	.word	0x0800eed7
 800ee88:	0800eeeb 	.word	0x0800eeeb
 800ee8c:	0800eeab 	.word	0x0800eeab
 800ee90:	0800eea1 	.word	0x0800eea1
 800ee94:	0800eeeb 	.word	0x0800eeeb
 800ee98:	0800eec3 	.word	0x0800eec3
 800ee9c:	0800eeb5 	.word	0x0800eeb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fa3c 	bl	800f320 <USBD_GetDescriptor>
          break;
 800eea8:	e024      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 fba1 	bl	800f5f4 <USBD_SetAddress>
          break;
 800eeb2:	e01f      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fbe0 	bl	800f67c <USBD_SetConfig>
 800eebc:	4603      	mov	r3, r0
 800eebe:	73fb      	strb	r3, [r7, #15]
          break;
 800eec0:	e018      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eec2:	6839      	ldr	r1, [r7, #0]
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 fc83 	bl	800f7d0 <USBD_GetConfig>
          break;
 800eeca:	e013      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 fcb4 	bl	800f83c <USBD_GetStatus>
          break;
 800eed4:	e00e      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eed6:	6839      	ldr	r1, [r7, #0]
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fce3 	bl	800f8a4 <USBD_SetFeature>
          break;
 800eede:	e009      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fd07 	bl	800f8f6 <USBD_ClrFeature>
          break;
 800eee8:	e004      	b.n	800eef4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eeea:	6839      	ldr	r1, [r7, #0]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 fd5e 	bl	800f9ae <USBD_CtlError>
          break;
 800eef2:	bf00      	nop
      }
      break;
 800eef4:	e004      	b.n	800ef00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fd58 	bl	800f9ae <USBD_CtlError>
      break;
 800eefe:	bf00      	nop
  }

  return ret;
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop

0800ef0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef22:	2b40      	cmp	r3, #64	@ 0x40
 800ef24:	d005      	beq.n	800ef32 <USBD_StdItfReq+0x26>
 800ef26:	2b40      	cmp	r3, #64	@ 0x40
 800ef28:	d852      	bhi.n	800efd0 <USBD_StdItfReq+0xc4>
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <USBD_StdItfReq+0x26>
 800ef2e:	2b20      	cmp	r3, #32
 800ef30:	d14e      	bne.n	800efd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	d840      	bhi.n	800efc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	889b      	ldrh	r3, [r3, #4]
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d836      	bhi.n	800efb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	889b      	ldrh	r3, [r3, #4]
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7ff fedb 	bl	800ed0e <USBD_CoreFindIF>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	2bff      	cmp	r3, #255	@ 0xff
 800ef60:	d01d      	beq.n	800ef9e <USBD_StdItfReq+0x92>
 800ef62:	7bbb      	ldrb	r3, [r7, #14]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d11a      	bne.n	800ef9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ef68:	7bba      	ldrb	r2, [r7, #14]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	32ae      	adds	r2, #174	@ 0xae
 800ef6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00f      	beq.n	800ef98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ef78:	7bba      	ldrb	r2, [r7, #14]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ef80:	7bba      	ldrb	r2, [r7, #14]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	32ae      	adds	r2, #174	@ 0xae
 800ef86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	4798      	blx	r3
 800ef92:	4603      	mov	r3, r0
 800ef94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef96:	e004      	b.n	800efa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef9c:	e001      	b.n	800efa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	88db      	ldrh	r3, [r3, #6]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d110      	bne.n	800efcc <USBD_StdItfReq+0xc0>
 800efaa:	7bfb      	ldrb	r3, [r7, #15]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10d      	bne.n	800efcc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fdd3 	bl	800fb5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efb6:	e009      	b.n	800efcc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fcf7 	bl	800f9ae <USBD_CtlError>
          break;
 800efc0:	e004      	b.n	800efcc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fcf2 	bl	800f9ae <USBD_CtlError>
          break;
 800efca:	e000      	b.n	800efce <USBD_StdItfReq+0xc2>
          break;
 800efcc:	bf00      	nop
      }
      break;
 800efce:	e004      	b.n	800efda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fceb 	bl	800f9ae <USBD_CtlError>
      break;
 800efd8:	bf00      	nop
  }

  return ret;
 800efda:	7bfb      	ldrb	r3, [r7, #15]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	889b      	ldrh	r3, [r3, #4]
 800eff6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f000:	2b40      	cmp	r3, #64	@ 0x40
 800f002:	d007      	beq.n	800f014 <USBD_StdEPReq+0x30>
 800f004:	2b40      	cmp	r3, #64	@ 0x40
 800f006:	f200 817f 	bhi.w	800f308 <USBD_StdEPReq+0x324>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d02a      	beq.n	800f064 <USBD_StdEPReq+0x80>
 800f00e:	2b20      	cmp	r3, #32
 800f010:	f040 817a 	bne.w	800f308 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff fe85 	bl	800ed28 <USBD_CoreFindEP>
 800f01e:	4603      	mov	r3, r0
 800f020:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f022:	7b7b      	ldrb	r3, [r7, #13]
 800f024:	2bff      	cmp	r3, #255	@ 0xff
 800f026:	f000 8174 	beq.w	800f312 <USBD_StdEPReq+0x32e>
 800f02a:	7b7b      	ldrb	r3, [r7, #13]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f040 8170 	bne.w	800f312 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f032:	7b7a      	ldrb	r2, [r7, #13]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f03a:	7b7a      	ldrb	r2, [r7, #13]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	32ae      	adds	r2, #174	@ 0xae
 800f040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 8163 	beq.w	800f312 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f04c:	7b7a      	ldrb	r2, [r7, #13]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	32ae      	adds	r2, #174	@ 0xae
 800f052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	4798      	blx	r3
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f062:	e156      	b.n	800f312 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	785b      	ldrb	r3, [r3, #1]
 800f068:	2b03      	cmp	r3, #3
 800f06a:	d008      	beq.n	800f07e <USBD_StdEPReq+0x9a>
 800f06c:	2b03      	cmp	r3, #3
 800f06e:	f300 8145 	bgt.w	800f2fc <USBD_StdEPReq+0x318>
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 809b 	beq.w	800f1ae <USBD_StdEPReq+0x1ca>
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d03c      	beq.n	800f0f6 <USBD_StdEPReq+0x112>
 800f07c:	e13e      	b.n	800f2fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f084:	b2db      	uxtb	r3, r3
 800f086:	2b02      	cmp	r3, #2
 800f088:	d002      	beq.n	800f090 <USBD_StdEPReq+0xac>
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d016      	beq.n	800f0bc <USBD_StdEPReq+0xd8>
 800f08e:	e02c      	b.n	800f0ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f090:	7bbb      	ldrb	r3, [r7, #14]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00d      	beq.n	800f0b2 <USBD_StdEPReq+0xce>
 800f096:	7bbb      	ldrb	r3, [r7, #14]
 800f098:	2b80      	cmp	r3, #128	@ 0x80
 800f09a:	d00a      	beq.n	800f0b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f09c:	7bbb      	ldrb	r3, [r7, #14]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f004 faff 	bl	80136a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0a6:	2180      	movs	r1, #128	@ 0x80
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f004 fafb 	bl	80136a4 <USBD_LL_StallEP>
 800f0ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0b0:	e020      	b.n	800f0f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f0b2:	6839      	ldr	r1, [r7, #0]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fc7a 	bl	800f9ae <USBD_CtlError>
              break;
 800f0ba:	e01b      	b.n	800f0f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	885b      	ldrh	r3, [r3, #2]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10e      	bne.n	800f0e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f0c4:	7bbb      	ldrb	r3, [r7, #14]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00b      	beq.n	800f0e2 <USBD_StdEPReq+0xfe>
 800f0ca:	7bbb      	ldrb	r3, [r7, #14]
 800f0cc:	2b80      	cmp	r3, #128	@ 0x80
 800f0ce:	d008      	beq.n	800f0e2 <USBD_StdEPReq+0xfe>
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	88db      	ldrh	r3, [r3, #6]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d104      	bne.n	800f0e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0d8:	7bbb      	ldrb	r3, [r7, #14]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f004 fae1 	bl	80136a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fd3a 	bl	800fb5c <USBD_CtlSendStatus>

              break;
 800f0e8:	e004      	b.n	800f0f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 fc5e 	bl	800f9ae <USBD_CtlError>
              break;
 800f0f2:	bf00      	nop
          }
          break;
 800f0f4:	e107      	b.n	800f306 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d002      	beq.n	800f108 <USBD_StdEPReq+0x124>
 800f102:	2b03      	cmp	r3, #3
 800f104:	d016      	beq.n	800f134 <USBD_StdEPReq+0x150>
 800f106:	e04b      	b.n	800f1a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00d      	beq.n	800f12a <USBD_StdEPReq+0x146>
 800f10e:	7bbb      	ldrb	r3, [r7, #14]
 800f110:	2b80      	cmp	r3, #128	@ 0x80
 800f112:	d00a      	beq.n	800f12a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f114:	7bbb      	ldrb	r3, [r7, #14]
 800f116:	4619      	mov	r1, r3
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f004 fac3 	bl	80136a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f11e:	2180      	movs	r1, #128	@ 0x80
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f004 fabf 	bl	80136a4 <USBD_LL_StallEP>
 800f126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f128:	e040      	b.n	800f1ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fc3e 	bl	800f9ae <USBD_CtlError>
              break;
 800f132:	e03b      	b.n	800f1ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	885b      	ldrh	r3, [r3, #2]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d136      	bne.n	800f1aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f13c:	7bbb      	ldrb	r3, [r7, #14]
 800f13e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f142:	2b00      	cmp	r3, #0
 800f144:	d004      	beq.n	800f150 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f146:	7bbb      	ldrb	r3, [r7, #14]
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f004 fac9 	bl	80136e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fd03 	bl	800fb5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f156:	7bbb      	ldrb	r3, [r7, #14]
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff fde4 	bl	800ed28 <USBD_CoreFindEP>
 800f160:	4603      	mov	r3, r0
 800f162:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f164:	7b7b      	ldrb	r3, [r7, #13]
 800f166:	2bff      	cmp	r3, #255	@ 0xff
 800f168:	d01f      	beq.n	800f1aa <USBD_StdEPReq+0x1c6>
 800f16a:	7b7b      	ldrb	r3, [r7, #13]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d11c      	bne.n	800f1aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f170:	7b7a      	ldrb	r2, [r7, #13]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f178:	7b7a      	ldrb	r2, [r7, #13]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	32ae      	adds	r2, #174	@ 0xae
 800f17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d010      	beq.n	800f1aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f188:	7b7a      	ldrb	r2, [r7, #13]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	32ae      	adds	r2, #174	@ 0xae
 800f18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	4798      	blx	r3
 800f19a:	4603      	mov	r3, r0
 800f19c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f19e:	e004      	b.n	800f1aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fc03 	bl	800f9ae <USBD_CtlError>
              break;
 800f1a8:	e000      	b.n	800f1ac <USBD_StdEPReq+0x1c8>
              break;
 800f1aa:	bf00      	nop
          }
          break;
 800f1ac:	e0ab      	b.n	800f306 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d002      	beq.n	800f1c0 <USBD_StdEPReq+0x1dc>
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d032      	beq.n	800f224 <USBD_StdEPReq+0x240>
 800f1be:	e097      	b.n	800f2f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d007      	beq.n	800f1d6 <USBD_StdEPReq+0x1f2>
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	2b80      	cmp	r3, #128	@ 0x80
 800f1ca:	d004      	beq.n	800f1d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fbed 	bl	800f9ae <USBD_CtlError>
                break;
 800f1d4:	e091      	b.n	800f2fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	da0b      	bge.n	800f1f6 <USBD_StdEPReq+0x212>
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
 800f1e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	4413      	add	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	3310      	adds	r3, #16
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	e00b      	b.n	800f20e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	4413      	add	r3, r2
 800f20c:	3304      	adds	r3, #4
 800f20e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2202      	movs	r2, #2
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fc43 	bl	800faa8 <USBD_CtlSendData>
              break;
 800f222:	e06a      	b.n	800f2fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da11      	bge.n	800f250 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f22c:	7bbb      	ldrb	r3, [r7, #14]
 800f22e:	f003 020f 	and.w	r2, r3, #15
 800f232:	6879      	ldr	r1, [r7, #4]
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	440b      	add	r3, r1
 800f23e:	3324      	adds	r3, #36	@ 0x24
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d117      	bne.n	800f276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fbb0 	bl	800f9ae <USBD_CtlError>
                  break;
 800f24e:	e054      	b.n	800f2fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f250:	7bbb      	ldrb	r3, [r7, #14]
 800f252:	f003 020f 	and.w	r2, r3, #15
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	440b      	add	r3, r1
 800f262:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d104      	bne.n	800f276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fb9d 	bl	800f9ae <USBD_CtlError>
                  break;
 800f274:	e041      	b.n	800f2fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	da0b      	bge.n	800f296 <USBD_StdEPReq+0x2b2>
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f284:	4613      	mov	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4413      	add	r3, r2
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	3310      	adds	r3, #16
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	4413      	add	r3, r2
 800f292:	3304      	adds	r3, #4
 800f294:	e00b      	b.n	800f2ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f296:	7bbb      	ldrb	r3, [r7, #14]
 800f298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f29c:	4613      	mov	r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	4413      	add	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2b0:	7bbb      	ldrb	r3, [r7, #14]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <USBD_StdEPReq+0x2d8>
 800f2b6:	7bbb      	ldrb	r3, [r7, #14]
 800f2b8:	2b80      	cmp	r3, #128	@ 0x80
 800f2ba:	d103      	bne.n	800f2c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	e00e      	b.n	800f2e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f004 fa29 	bl	8013720 <USBD_LL_IsStallEP>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d003      	beq.n	800f2dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	e002      	b.n	800f2e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	2202      	movs	r2, #2
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fbdd 	bl	800faa8 <USBD_CtlSendData>
              break;
 800f2ee:	e004      	b.n	800f2fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fb5b 	bl	800f9ae <USBD_CtlError>
              break;
 800f2f8:	bf00      	nop
          }
          break;
 800f2fa:	e004      	b.n	800f306 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f2fc:	6839      	ldr	r1, [r7, #0]
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fb55 	bl	800f9ae <USBD_CtlError>
          break;
 800f304:	bf00      	nop
      }
      break;
 800f306:	e005      	b.n	800f314 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fb4f 	bl	800f9ae <USBD_CtlError>
      break;
 800f310:	e000      	b.n	800f314 <USBD_StdEPReq+0x330>
      break;
 800f312:	bf00      	nop
  }

  return ret;
 800f314:	7bfb      	ldrb	r3, [r7, #15]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f32a:	2300      	movs	r3, #0
 800f32c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f332:	2300      	movs	r3, #0
 800f334:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	885b      	ldrh	r3, [r3, #2]
 800f33a:	0a1b      	lsrs	r3, r3, #8
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	3b01      	subs	r3, #1
 800f340:	2b06      	cmp	r3, #6
 800f342:	f200 8128 	bhi.w	800f596 <USBD_GetDescriptor+0x276>
 800f346:	a201      	add	r2, pc, #4	@ (adr r2, 800f34c <USBD_GetDescriptor+0x2c>)
 800f348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34c:	0800f369 	.word	0x0800f369
 800f350:	0800f381 	.word	0x0800f381
 800f354:	0800f3c1 	.word	0x0800f3c1
 800f358:	0800f597 	.word	0x0800f597
 800f35c:	0800f597 	.word	0x0800f597
 800f360:	0800f537 	.word	0x0800f537
 800f364:	0800f563 	.word	0x0800f563
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	7c12      	ldrb	r2, [r2, #16]
 800f374:	f107 0108 	add.w	r1, r7, #8
 800f378:	4610      	mov	r0, r2
 800f37a:	4798      	blx	r3
 800f37c:	60f8      	str	r0, [r7, #12]
      break;
 800f37e:	e112      	b.n	800f5a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	7c1b      	ldrb	r3, [r3, #16]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10d      	bne.n	800f3a4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f390:	f107 0208 	add.w	r2, r7, #8
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3301      	adds	r3, #1
 800f39e:	2202      	movs	r2, #2
 800f3a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f3a2:	e100      	b.n	800f5a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ac:	f107 0208 	add.w	r2, r7, #8
 800f3b0:	4610      	mov	r0, r2
 800f3b2:	4798      	blx	r3
 800f3b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	701a      	strb	r2, [r3, #0]
      break;
 800f3be:	e0f2      	b.n	800f5a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	885b      	ldrh	r3, [r3, #2]
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	f200 80ac 	bhi.w	800f524 <USBD_GetDescriptor+0x204>
 800f3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d4 <USBD_GetDescriptor+0xb4>)
 800f3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d2:	bf00      	nop
 800f3d4:	0800f3ed 	.word	0x0800f3ed
 800f3d8:	0800f421 	.word	0x0800f421
 800f3dc:	0800f455 	.word	0x0800f455
 800f3e0:	0800f489 	.word	0x0800f489
 800f3e4:	0800f4bd 	.word	0x0800f4bd
 800f3e8:	0800f4f1 	.word	0x0800f4f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00b      	beq.n	800f410 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	7c12      	ldrb	r2, [r2, #16]
 800f404:	f107 0108 	add.w	r1, r7, #8
 800f408:	4610      	mov	r0, r2
 800f40a:	4798      	blx	r3
 800f40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f40e:	e091      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 facb 	bl	800f9ae <USBD_CtlError>
            err++;
 800f418:	7afb      	ldrb	r3, [r7, #11]
 800f41a:	3301      	adds	r3, #1
 800f41c:	72fb      	strb	r3, [r7, #11]
          break;
 800f41e:	e089      	b.n	800f534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00b      	beq.n	800f444 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	7c12      	ldrb	r2, [r2, #16]
 800f438:	f107 0108 	add.w	r1, r7, #8
 800f43c:	4610      	mov	r0, r2
 800f43e:	4798      	blx	r3
 800f440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f442:	e077      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 fab1 	bl	800f9ae <USBD_CtlError>
            err++;
 800f44c:	7afb      	ldrb	r3, [r7, #11]
 800f44e:	3301      	adds	r3, #1
 800f450:	72fb      	strb	r3, [r7, #11]
          break;
 800f452:	e06f      	b.n	800f534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00b      	beq.n	800f478 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	7c12      	ldrb	r2, [r2, #16]
 800f46c:	f107 0108 	add.w	r1, r7, #8
 800f470:	4610      	mov	r0, r2
 800f472:	4798      	blx	r3
 800f474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f476:	e05d      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fa97 	bl	800f9ae <USBD_CtlError>
            err++;
 800f480:	7afb      	ldrb	r3, [r7, #11]
 800f482:	3301      	adds	r3, #1
 800f484:	72fb      	strb	r3, [r7, #11]
          break;
 800f486:	e055      	b.n	800f534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00b      	beq.n	800f4ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	7c12      	ldrb	r2, [r2, #16]
 800f4a0:	f107 0108 	add.w	r1, r7, #8
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4798      	blx	r3
 800f4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4aa:	e043      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fa7d 	bl	800f9ae <USBD_CtlError>
            err++;
 800f4b4:	7afb      	ldrb	r3, [r7, #11]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ba:	e03b      	b.n	800f534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4c2:	695b      	ldr	r3, [r3, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00b      	beq.n	800f4e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	7c12      	ldrb	r2, [r2, #16]
 800f4d4:	f107 0108 	add.w	r1, r7, #8
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
 800f4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4de:	e029      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fa63 	bl	800f9ae <USBD_CtlError>
            err++;
 800f4e8:	7afb      	ldrb	r3, [r7, #11]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ee:	e021      	b.n	800f534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00b      	beq.n	800f514 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	7c12      	ldrb	r2, [r2, #16]
 800f508:	f107 0108 	add.w	r1, r7, #8
 800f50c:	4610      	mov	r0, r2
 800f50e:	4798      	blx	r3
 800f510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f512:	e00f      	b.n	800f534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fa49 	bl	800f9ae <USBD_CtlError>
            err++;
 800f51c:	7afb      	ldrb	r3, [r7, #11]
 800f51e:	3301      	adds	r3, #1
 800f520:	72fb      	strb	r3, [r7, #11]
          break;
 800f522:	e007      	b.n	800f534 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fa41 	bl	800f9ae <USBD_CtlError>
          err++;
 800f52c:	7afb      	ldrb	r3, [r7, #11]
 800f52e:	3301      	adds	r3, #1
 800f530:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f532:	bf00      	nop
      }
      break;
 800f534:	e037      	b.n	800f5a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7c1b      	ldrb	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d109      	bne.n	800f552 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f546:	f107 0208 	add.w	r2, r7, #8
 800f54a:	4610      	mov	r0, r2
 800f54c:	4798      	blx	r3
 800f54e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f550:	e029      	b.n	800f5a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f552:	6839      	ldr	r1, [r7, #0]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 fa2a 	bl	800f9ae <USBD_CtlError>
        err++;
 800f55a:	7afb      	ldrb	r3, [r7, #11]
 800f55c:	3301      	adds	r3, #1
 800f55e:	72fb      	strb	r3, [r7, #11]
      break;
 800f560:	e021      	b.n	800f5a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	7c1b      	ldrb	r3, [r3, #16]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10d      	bne.n	800f586 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f572:	f107 0208 	add.w	r2, r7, #8
 800f576:	4610      	mov	r0, r2
 800f578:	4798      	blx	r3
 800f57a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3301      	adds	r3, #1
 800f580:	2207      	movs	r2, #7
 800f582:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f584:	e00f      	b.n	800f5a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 fa10 	bl	800f9ae <USBD_CtlError>
        err++;
 800f58e:	7afb      	ldrb	r3, [r7, #11]
 800f590:	3301      	adds	r3, #1
 800f592:	72fb      	strb	r3, [r7, #11]
      break;
 800f594:	e007      	b.n	800f5a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 fa08 	bl	800f9ae <USBD_CtlError>
      err++;
 800f59e:	7afb      	ldrb	r3, [r7, #11]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800f5a4:	bf00      	nop
  }

  if (err != 0U)
 800f5a6:	7afb      	ldrb	r3, [r7, #11]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d11e      	bne.n	800f5ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	88db      	ldrh	r3, [r3, #6]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d016      	beq.n	800f5e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f5b4:	893b      	ldrh	r3, [r7, #8]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00e      	beq.n	800f5d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	88da      	ldrh	r2, [r3, #6]
 800f5be:	893b      	ldrh	r3, [r7, #8]
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	bf28      	it	cs
 800f5c4:	4613      	movcs	r3, r2
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f5ca:	893b      	ldrh	r3, [r7, #8]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	68f9      	ldr	r1, [r7, #12]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fa69 	bl	800faa8 <USBD_CtlSendData>
 800f5d6:	e009      	b.n	800f5ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f5d8:	6839      	ldr	r1, [r7, #0]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f9e7 	bl	800f9ae <USBD_CtlError>
 800f5e0:	e004      	b.n	800f5ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 faba 	bl	800fb5c <USBD_CtlSendStatus>
 800f5e8:	e000      	b.n	800f5ec <USBD_GetDescriptor+0x2cc>
    return;
 800f5ea:	bf00      	nop
  }
}
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop

0800f5f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	889b      	ldrh	r3, [r3, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d131      	bne.n	800f66a <USBD_SetAddress+0x76>
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	88db      	ldrh	r3, [r3, #6]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d12d      	bne.n	800f66a <USBD_SetAddress+0x76>
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	885b      	ldrh	r3, [r3, #2]
 800f612:	2b7f      	cmp	r3, #127	@ 0x7f
 800f614:	d829      	bhi.n	800f66a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	885b      	ldrh	r3, [r3, #2]
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f620:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	2b03      	cmp	r3, #3
 800f62c:	d104      	bne.n	800f638 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f62e:	6839      	ldr	r1, [r7, #0]
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 f9bc 	bl	800f9ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f636:	e01d      	b.n	800f674 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7bfa      	ldrb	r2, [r7, #15]
 800f63c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	4619      	mov	r1, r3
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f004 f897 	bl	8013778 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fa86 	bl	800fb5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d004      	beq.n	800f660 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2202      	movs	r2, #2
 800f65a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f65e:	e009      	b.n	800f674 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f668:	e004      	b.n	800f674 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f99e 	bl	800f9ae <USBD_CtlError>
  }
}
 800f672:	bf00      	nop
 800f674:	bf00      	nop
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	885b      	ldrh	r3, [r3, #2]
 800f68e:	b2da      	uxtb	r2, r3
 800f690:	4b4e      	ldr	r3, [pc, #312]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f692:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f694:	4b4d      	ldr	r3, [pc, #308]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d905      	bls.n	800f6a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 f985 	bl	800f9ae <USBD_CtlError>
    return USBD_FAIL;
 800f6a4:	2303      	movs	r3, #3
 800f6a6:	e08c      	b.n	800f7c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d002      	beq.n	800f6ba <USBD_SetConfig+0x3e>
 800f6b4:	2b03      	cmp	r3, #3
 800f6b6:	d029      	beq.n	800f70c <USBD_SetConfig+0x90>
 800f6b8:	e075      	b.n	800f7a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f6ba:	4b44      	ldr	r3, [pc, #272]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d020      	beq.n	800f704 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f6c2:	4b42      	ldr	r3, [pc, #264]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6cc:	4b3f      	ldr	r3, [pc, #252]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7fe ffe3 	bl	800e69e <USBD_SetClassConfig>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d008      	beq.n	800f6f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f962 	bl	800f9ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6f2:	e065      	b.n	800f7c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fa31 	bl	800fb5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2203      	movs	r2, #3
 800f6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f702:	e05d      	b.n	800f7c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fa29 	bl	800fb5c <USBD_CtlSendStatus>
      break;
 800f70a:	e059      	b.n	800f7c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f70c:	4b2f      	ldr	r3, [pc, #188]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d112      	bne.n	800f73a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f71c:	4b2b      	ldr	r3, [pc, #172]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f726:	4b29      	ldr	r3, [pc, #164]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	4619      	mov	r1, r3
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7fe ffd2 	bl	800e6d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 fa12 	bl	800fb5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f738:	e042      	b.n	800f7c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f73a:	4b24      	ldr	r3, [pc, #144]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	429a      	cmp	r2, r3
 800f746:	d02a      	beq.n	800f79e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe ffc0 	bl	800e6d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f756:	4b1d      	ldr	r3, [pc, #116]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f760:	4b1a      	ldr	r3, [pc, #104]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f7fe ff99 	bl	800e69e <USBD_SetClassConfig>
 800f76c:	4603      	mov	r3, r0
 800f76e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f770:	7bfb      	ldrb	r3, [r7, #15]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00f      	beq.n	800f796 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 f918 	bl	800f9ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	b2db      	uxtb	r3, r3
 800f784:	4619      	mov	r1, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7fe ffa5 	bl	800e6d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2202      	movs	r2, #2
 800f790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f794:	e014      	b.n	800f7c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f9e0 	bl	800fb5c <USBD_CtlSendStatus>
      break;
 800f79c:	e010      	b.n	800f7c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f9dc 	bl	800fb5c <USBD_CtlSendStatus>
      break;
 800f7a4:	e00c      	b.n	800f7c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 f900 	bl	800f9ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7ae:	4b07      	ldr	r3, [pc, #28]	@ (800f7cc <USBD_SetConfig+0x150>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7fe ff8e 	bl	800e6d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f7ba:	2303      	movs	r3, #3
 800f7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800f7be:	bf00      	nop
  }

  return ret;
 800f7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	200003f8 	.word	0x200003f8

0800f7d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	88db      	ldrh	r3, [r3, #6]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d004      	beq.n	800f7ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f7e2:	6839      	ldr	r1, [r7, #0]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f8e2 	bl	800f9ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f7ea:	e023      	b.n	800f834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	dc02      	bgt.n	800f7fe <USBD_GetConfig+0x2e>
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	dc03      	bgt.n	800f804 <USBD_GetConfig+0x34>
 800f7fc:	e015      	b.n	800f82a <USBD_GetConfig+0x5a>
 800f7fe:	2b03      	cmp	r3, #3
 800f800:	d00b      	beq.n	800f81a <USBD_GetConfig+0x4a>
 800f802:	e012      	b.n	800f82a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3308      	adds	r3, #8
 800f80e:	2201      	movs	r2, #1
 800f810:	4619      	mov	r1, r3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 f948 	bl	800faa8 <USBD_CtlSendData>
        break;
 800f818:	e00c      	b.n	800f834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	3304      	adds	r3, #4
 800f81e:	2201      	movs	r2, #1
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f940 	bl	800faa8 <USBD_CtlSendData>
        break;
 800f828:	e004      	b.n	800f834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 f8be 	bl	800f9ae <USBD_CtlError>
        break;
 800f832:	bf00      	nop
}
 800f834:	bf00      	nop
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	3b01      	subs	r3, #1
 800f850:	2b02      	cmp	r3, #2
 800f852:	d81e      	bhi.n	800f892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	88db      	ldrh	r3, [r3, #6]
 800f858:	2b02      	cmp	r3, #2
 800f85a:	d004      	beq.n	800f866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f8a5 	bl	800f9ae <USBD_CtlError>
        break;
 800f864:	e01a      	b.n	800f89c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f872:	2b00      	cmp	r3, #0
 800f874:	d005      	beq.n	800f882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	f043 0202 	orr.w	r2, r3, #2
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	330c      	adds	r3, #12
 800f886:	2202      	movs	r2, #2
 800f888:	4619      	mov	r1, r3
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f90c 	bl	800faa8 <USBD_CtlSendData>
      break;
 800f890:	e004      	b.n	800f89c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 f88a 	bl	800f9ae <USBD_CtlError>
      break;
 800f89a:	bf00      	nop
  }
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	885b      	ldrh	r3, [r3, #2]
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d107      	bne.n	800f8c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f94c 	bl	800fb5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f8c4:	e013      	b.n	800f8ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	885b      	ldrh	r3, [r3, #2]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d10b      	bne.n	800f8e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	889b      	ldrh	r3, [r3, #4]
 800f8d2:	0a1b      	lsrs	r3, r3, #8
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 f93c 	bl	800fb5c <USBD_CtlSendStatus>
}
 800f8e4:	e003      	b.n	800f8ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f8e6:	6839      	ldr	r1, [r7, #0]
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 f860 	bl	800f9ae <USBD_CtlError>
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f906:	b2db      	uxtb	r3, r3
 800f908:	3b01      	subs	r3, #1
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d80b      	bhi.n	800f926 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	885b      	ldrh	r3, [r3, #2]
 800f912:	2b01      	cmp	r3, #1
 800f914:	d10c      	bne.n	800f930 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f91c 	bl	800fb5c <USBD_CtlSendStatus>
      }
      break;
 800f924:	e004      	b.n	800f930 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f840 	bl	800f9ae <USBD_CtlError>
      break;
 800f92e:	e000      	b.n	800f932 <USBD_ClrFeature+0x3c>
      break;
 800f930:	bf00      	nop
  }
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b084      	sub	sp, #16
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	781a      	ldrb	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	3301      	adds	r3, #1
 800f954:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3301      	adds	r3, #1
 800f962:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f7ff fa40 	bl	800edea <SWAPBYTE>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	3301      	adds	r3, #1
 800f976:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	3301      	adds	r3, #1
 800f97c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f7ff fa33 	bl	800edea <SWAPBYTE>
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3301      	adds	r3, #1
 800f990:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	3301      	adds	r3, #1
 800f996:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7ff fa26 	bl	800edea <SWAPBYTE>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	80da      	strh	r2, [r3, #6]
}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9b8:	2180      	movs	r1, #128	@ 0x80
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f003 fe72 	bl	80136a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f003 fe6e 	bl	80136a4 <USBD_LL_StallEP>
}
 800f9c8:	bf00      	nop
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d042      	beq.n	800fa6c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f9ea:	6938      	ldr	r0, [r7, #16]
 800f9ec:	f000 f842 	bl	800fa74 <USBD_GetLen>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	005b      	lsls	r3, r3, #1
 800f9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9fa:	d808      	bhi.n	800fa0e <USBD_GetString+0x3e>
 800f9fc:	6938      	ldr	r0, [r7, #16]
 800f9fe:	f000 f839 	bl	800fa74 <USBD_GetLen>
 800fa02:	4603      	mov	r3, r0
 800fa04:	3301      	adds	r3, #1
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	e001      	b.n	800fa12 <USBD_GetString+0x42>
 800fa0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	68ba      	ldr	r2, [r7, #8]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	7812      	ldrb	r2, [r2, #0]
 800fa20:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa22:	7dfb      	ldrb	r3, [r7, #23]
 800fa24:	3301      	adds	r3, #1
 800fa26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa28:	7dfb      	ldrb	r3, [r7, #23]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	2203      	movs	r2, #3
 800fa30:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
 800fa34:	3301      	adds	r3, #1
 800fa36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa38:	e013      	b.n	800fa62 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fa3a:	7dfb      	ldrb	r3, [r7, #23]
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	4413      	add	r3, r2
 800fa40:	693a      	ldr	r2, [r7, #16]
 800fa42:	7812      	ldrb	r2, [r2, #0]
 800fa44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	613b      	str	r3, [r7, #16]
    idx++;
 800fa4c:	7dfb      	ldrb	r3, [r7, #23]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	4413      	add	r3, r2
 800fa58:	2200      	movs	r2, #0
 800fa5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa5c:	7dfb      	ldrb	r3, [r7, #23]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1e7      	bne.n	800fa3a <USBD_GetString+0x6a>
 800fa6a:	e000      	b.n	800fa6e <USBD_GetString+0x9e>
    return;
 800fa6c:	bf00      	nop
  }
}
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa84:	e005      	b.n	800fa92 <USBD_GetLen+0x1e>
  {
    len++;
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1f5      	bne.n	800fa86 <USBD_GetLen+0x12>
  }

  return len;
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2202      	movs	r2, #2
 800fab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	2100      	movs	r1, #0
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f003 fe71 	bl	80137b6 <USBD_LL_Transmit>

  return USBD_OK;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	60f8      	str	r0, [r7, #12]
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	2100      	movs	r1, #0
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f003 fe60 	bl	80137b6 <USBD_LL_Transmit>

  return USBD_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2203      	movs	r2, #3
 800fb10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	2100      	movs	r1, #0
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f003 fe64 	bl	80137f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b084      	sub	sp, #16
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	60f8      	str	r0, [r7, #12]
 800fb42:	60b9      	str	r1, [r7, #8]
 800fb44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f003 fe53 	bl	80137f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2204      	movs	r2, #4
 800fb68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	2200      	movs	r2, #0
 800fb70:	2100      	movs	r1, #0
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f003 fe1f 	bl	80137b6 <USBD_LL_Transmit>

  return USBD_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b082      	sub	sp, #8
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2205      	movs	r2, #5
 800fb8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb92:	2300      	movs	r3, #0
 800fb94:	2200      	movs	r2, #0
 800fb96:	2100      	movs	r1, #0
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f003 fe2d 	bl	80137f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <__NVIC_SetPriority>:
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	6039      	str	r1, [r7, #0]
 800fbb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fbb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	db0a      	blt.n	800fbd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	490c      	ldr	r1, [pc, #48]	@ (800fbf4 <__NVIC_SetPriority+0x4c>)
 800fbc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbc6:	0112      	lsls	r2, r2, #4
 800fbc8:	b2d2      	uxtb	r2, r2
 800fbca:	440b      	add	r3, r1
 800fbcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fbd0:	e00a      	b.n	800fbe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	4908      	ldr	r1, [pc, #32]	@ (800fbf8 <__NVIC_SetPriority+0x50>)
 800fbd8:	79fb      	ldrb	r3, [r7, #7]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	3b04      	subs	r3, #4
 800fbe0:	0112      	lsls	r2, r2, #4
 800fbe2:	b2d2      	uxtb	r2, r2
 800fbe4:	440b      	add	r3, r1
 800fbe6:	761a      	strb	r2, [r3, #24]
}
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	e000e100 	.word	0xe000e100
 800fbf8:	e000ed00 	.word	0xe000ed00

0800fbfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fc00:	4b05      	ldr	r3, [pc, #20]	@ (800fc18 <SysTick_Handler+0x1c>)
 800fc02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fc04:	f001 ffe0 	bl	8011bc8 <xTaskGetSchedulerState>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d001      	beq.n	800fc12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fc0e:	f002 fedb 	bl	80129c8 <xPortSysTickHandler>
  }
}
 800fc12:	bf00      	nop
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	e000e010 	.word	0xe000e010

0800fc1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc20:	2100      	movs	r1, #0
 800fc22:	f06f 0004 	mvn.w	r0, #4
 800fc26:	f7ff ffbf 	bl	800fba8 <__NVIC_SetPriority>
#endif
}
 800fc2a:	bf00      	nop
 800fc2c:	bd80      	pop	{r7, pc}
	...

0800fc30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc36:	f3ef 8305 	mrs	r3, IPSR
 800fc3a:	603b      	str	r3, [r7, #0]
  return(result);
 800fc3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d003      	beq.n	800fc4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc42:	f06f 0305 	mvn.w	r3, #5
 800fc46:	607b      	str	r3, [r7, #4]
 800fc48:	e00c      	b.n	800fc64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc4a:	4b0a      	ldr	r3, [pc, #40]	@ (800fc74 <osKernelInitialize+0x44>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d105      	bne.n	800fc5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fc52:	4b08      	ldr	r3, [pc, #32]	@ (800fc74 <osKernelInitialize+0x44>)
 800fc54:	2201      	movs	r2, #1
 800fc56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	607b      	str	r3, [r7, #4]
 800fc5c:	e002      	b.n	800fc64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc64:	687b      	ldr	r3, [r7, #4]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	200003fc 	.word	0x200003fc

0800fc78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc7e:	f3ef 8305 	mrs	r3, IPSR
 800fc82:	603b      	str	r3, [r7, #0]
  return(result);
 800fc84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fc8a:	f06f 0305 	mvn.w	r3, #5
 800fc8e:	607b      	str	r3, [r7, #4]
 800fc90:	e010      	b.n	800fcb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fc92:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc0 <osKernelStart+0x48>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d109      	bne.n	800fcae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fc9a:	f7ff ffbf 	bl	800fc1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fc9e:	4b08      	ldr	r3, [pc, #32]	@ (800fcc0 <osKernelStart+0x48>)
 800fca0:	2202      	movs	r2, #2
 800fca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fca4:	f001 fb2c 	bl	8011300 <vTaskStartScheduler>
      stat = osOK;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	607b      	str	r3, [r7, #4]
 800fcac:	e002      	b.n	800fcb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fcae:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fcb4:	687b      	ldr	r3, [r7, #4]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200003fc 	.word	0x200003fc

0800fcc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b08e      	sub	sp, #56	@ 0x38
 800fcc8:	af04      	add	r7, sp, #16
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcd4:	f3ef 8305 	mrs	r3, IPSR
 800fcd8:	617b      	str	r3, [r7, #20]
  return(result);
 800fcda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d17e      	bne.n	800fdde <osThreadNew+0x11a>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d07b      	beq.n	800fdde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fce6:	2380      	movs	r3, #128	@ 0x80
 800fce8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fcea:	2318      	movs	r3, #24
 800fcec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d045      	beq.n	800fd8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <osThreadNew+0x48>
        name = attr->name;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d002      	beq.n	800fd1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	699b      	ldr	r3, [r3, #24]
 800fd18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d008      	beq.n	800fd32 <osThreadNew+0x6e>
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	2b38      	cmp	r3, #56	@ 0x38
 800fd24:	d805      	bhi.n	800fd32 <osThreadNew+0x6e>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <osThreadNew+0x72>
        return (NULL);
 800fd32:	2300      	movs	r3, #0
 800fd34:	e054      	b.n	800fde0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	695b      	ldr	r3, [r3, #20]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d003      	beq.n	800fd46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	089b      	lsrs	r3, r3, #2
 800fd44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00e      	beq.n	800fd6c <osThreadNew+0xa8>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	2ba7      	cmp	r3, #167	@ 0xa7
 800fd54:	d90a      	bls.n	800fd6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d006      	beq.n	800fd6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	695b      	ldr	r3, [r3, #20]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d002      	beq.n	800fd6c <osThreadNew+0xa8>
        mem = 1;
 800fd66:	2301      	movs	r3, #1
 800fd68:	61bb      	str	r3, [r7, #24]
 800fd6a:	e010      	b.n	800fd8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10c      	bne.n	800fd8e <osThreadNew+0xca>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d108      	bne.n	800fd8e <osThreadNew+0xca>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d104      	bne.n	800fd8e <osThreadNew+0xca>
          mem = 0;
 800fd84:	2300      	movs	r3, #0
 800fd86:	61bb      	str	r3, [r7, #24]
 800fd88:	e001      	b.n	800fd8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d110      	bne.n	800fdb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd9c:	9202      	str	r2, [sp, #8]
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	6a3a      	ldr	r2, [r7, #32]
 800fda8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f001 f840 	bl	8010e30 <xTaskCreateStatic>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	613b      	str	r3, [r7, #16]
 800fdb4:	e013      	b.n	800fdde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d110      	bne.n	800fdde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	f107 0310 	add.w	r3, r7, #16
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f001 f88e 	bl	8010ef0 <xTaskCreate>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d001      	beq.n	800fdde <osThreadNew+0x11a>
            hTask = NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fdde:	693b      	ldr	r3, [r7, #16]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3728      	adds	r7, #40	@ 0x28
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdf0:	f3ef 8305 	mrs	r3, IPSR
 800fdf4:	60bb      	str	r3, [r7, #8]
  return(result);
 800fdf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <osDelay+0x1c>
    stat = osErrorISR;
 800fdfc:	f06f 0305 	mvn.w	r3, #5
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	e007      	b.n	800fe14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d002      	beq.n	800fe14 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f001 fa40 	bl	8011294 <vTaskDelay>
    }
  }

  return (stat);
 800fe14:	68fb      	ldr	r3, [r7, #12]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
	...

0800fe20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	4a07      	ldr	r2, [pc, #28]	@ (800fe4c <vApplicationGetIdleTaskMemory+0x2c>)
 800fe30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	4a06      	ldr	r2, [pc, #24]	@ (800fe50 <vApplicationGetIdleTaskMemory+0x30>)
 800fe36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2280      	movs	r2, #128	@ 0x80
 800fe3c:	601a      	str	r2, [r3, #0]
}
 800fe3e:	bf00      	nop
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	20000400 	.word	0x20000400
 800fe50:	200004a8 	.word	0x200004a8

0800fe54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	4a07      	ldr	r2, [pc, #28]	@ (800fe80 <vApplicationGetTimerTaskMemory+0x2c>)
 800fe64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	4a06      	ldr	r2, [pc, #24]	@ (800fe84 <vApplicationGetTimerTaskMemory+0x30>)
 800fe6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fe72:	601a      	str	r2, [r3, #0]
}
 800fe74:	bf00      	nop
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	200006a8 	.word	0x200006a8
 800fe84:	20000750 	.word	0x20000750

0800fe88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f103 0208 	add.w	r2, r3, #8
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f103 0208 	add.w	r2, r3, #8
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f103 0208 	add.w	r2, r3, #8
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fed6:	bf00      	nop
 800fed8:	370c      	adds	r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr

0800fee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fee2:	b480      	push	{r7}
 800fee4:	b085      	sub	sp, #20
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	689a      	ldr	r2, [r3, #8]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	683a      	ldr	r2, [r7, #0]
 800ff06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	1c5a      	adds	r2, r3, #1
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
}
 800ff1e:	bf00      	nop
 800ff20:	3714      	adds	r7, #20
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr

0800ff2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff2a:	b480      	push	{r7}
 800ff2c:	b085      	sub	sp, #20
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff40:	d103      	bne.n	800ff4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	60fb      	str	r3, [r7, #12]
 800ff48:	e00c      	b.n	800ff64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	3308      	adds	r3, #8
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	e002      	b.n	800ff58 <vListInsert+0x2e>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d2f6      	bcs.n	800ff52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	685a      	ldr	r2, [r3, #4]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	683a      	ldr	r2, [r7, #0]
 800ff7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	601a      	str	r2, [r3, #0]
}
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	691b      	ldr	r3, [r3, #16]
 800ffa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	6892      	ldr	r2, [r2, #8]
 800ffb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	6852      	ldr	r2, [r2, #4]
 800ffbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d103      	bne.n	800ffd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689a      	ldr	r2, [r3, #8]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	1e5a      	subs	r2, r3, #1
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d10b      	bne.n	801001c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010016:	bf00      	nop
 8010018:	bf00      	nop
 801001a:	e7fd      	b.n	8010018 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801001c:	f002 fc44 	bl	80128a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010028:	68f9      	ldr	r1, [r7, #12]
 801002a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801002c:	fb01 f303 	mul.w	r3, r1, r3
 8010030:	441a      	add	r2, r3
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801004c:	3b01      	subs	r3, #1
 801004e:	68f9      	ldr	r1, [r7, #12]
 8010050:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010052:	fb01 f303 	mul.w	r3, r1, r3
 8010056:	441a      	add	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	22ff      	movs	r2, #255	@ 0xff
 8010060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	22ff      	movs	r2, #255	@ 0xff
 8010068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d114      	bne.n	801009c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	691b      	ldr	r3, [r3, #16]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d01a      	beq.n	80100b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	3310      	adds	r3, #16
 801007e:	4618      	mov	r0, r3
 8010080:	f001 fbdc 	bl	801183c <xTaskRemoveFromEventList>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d012      	beq.n	80100b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801008a:	4b0d      	ldr	r3, [pc, #52]	@ (80100c0 <xQueueGenericReset+0xd0>)
 801008c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	f3bf 8f6f 	isb	sy
 801009a:	e009      	b.n	80100b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	3310      	adds	r3, #16
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff fef1 	bl	800fe88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	3324      	adds	r3, #36	@ 0x24
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff feec 	bl	800fe88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80100b0:	f002 fc2c 	bl	801290c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80100b4:	2301      	movs	r3, #1
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	e000ed04 	.word	0xe000ed04

080100c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08e      	sub	sp, #56	@ 0x38
 80100c8:	af02      	add	r7, sp, #8
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
 80100d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10b      	bne.n	80100f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80100d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80100ea:	bf00      	nop
 80100ec:	bf00      	nop
 80100ee:	e7fd      	b.n	80100ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d10b      	bne.n	801010e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	e7fd      	b.n	801010a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <xQueueGenericCreateStatic+0x56>
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <xQueueGenericCreateStatic+0x5a>
 801011a:	2301      	movs	r3, #1
 801011c:	e000      	b.n	8010120 <xQueueGenericCreateStatic+0x5c>
 801011e:	2300      	movs	r3, #0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10b      	bne.n	801013c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	623b      	str	r3, [r7, #32]
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <xQueueGenericCreateStatic+0x84>
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <xQueueGenericCreateStatic+0x88>
 8010148:	2301      	movs	r3, #1
 801014a:	e000      	b.n	801014e <xQueueGenericCreateStatic+0x8a>
 801014c:	2300      	movs	r3, #0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10b      	bne.n	801016a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	61fb      	str	r3, [r7, #28]
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop
 8010168:	e7fd      	b.n	8010166 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801016a:	2350      	movs	r3, #80	@ 0x50
 801016c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	2b50      	cmp	r3, #80	@ 0x50
 8010172:	d00b      	beq.n	801018c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	61bb      	str	r3, [r7, #24]
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	e7fd      	b.n	8010188 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801018c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00d      	beq.n	80101b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801019a:	2201      	movs	r2, #1
 801019c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80101a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	4613      	mov	r3, r2
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	68b9      	ldr	r1, [r7, #8]
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 f840 	bl	8010234 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3730      	adds	r7, #48	@ 0x30
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b08a      	sub	sp, #40	@ 0x28
 80101c2:	af02      	add	r7, sp, #8
 80101c4:	60f8      	str	r0, [r7, #12]
 80101c6:	60b9      	str	r1, [r7, #8]
 80101c8:	4613      	mov	r3, r2
 80101ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10b      	bne.n	80101ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80101d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	613b      	str	r3, [r7, #16]
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop
 80101e8:	e7fd      	b.n	80101e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	68ba      	ldr	r2, [r7, #8]
 80101ee:	fb02 f303 	mul.w	r3, r2, r3
 80101f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	3350      	adds	r3, #80	@ 0x50
 80101f8:	4618      	mov	r0, r3
 80101fa:	f002 fc77 	bl	8012aec <pvPortMalloc>
 80101fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d011      	beq.n	801022a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	3350      	adds	r3, #80	@ 0x50
 801020e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	2200      	movs	r2, #0
 8010214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010218:	79fa      	ldrb	r2, [r7, #7]
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	4613      	mov	r3, r2
 8010220:	697a      	ldr	r2, [r7, #20]
 8010222:	68b9      	ldr	r1, [r7, #8]
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f000 f805 	bl	8010234 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801022a:	69bb      	ldr	r3, [r7, #24]
	}
 801022c:	4618      	mov	r0, r3
 801022e:	3720      	adds	r7, #32
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	607a      	str	r2, [r7, #4]
 8010240:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d103      	bne.n	8010250 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	e002      	b.n	8010256 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010262:	2101      	movs	r1, #1
 8010264:	69b8      	ldr	r0, [r7, #24]
 8010266:	f7ff fec3 	bl	800fff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	78fa      	ldrb	r2, [r7, #3]
 801026e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00e      	beq.n	80102a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801029a:	2300      	movs	r3, #0
 801029c:	2200      	movs	r2, #0
 801029e:	2100      	movs	r1, #0
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 f81d 	bl	80102e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80102a6:	bf00      	nop
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b086      	sub	sp, #24
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	4603      	mov	r3, r0
 80102b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80102b8:	2301      	movs	r3, #1
 80102ba:	617b      	str	r3, [r7, #20]
 80102bc:	2300      	movs	r3, #0
 80102be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	461a      	mov	r2, r3
 80102c4:	6939      	ldr	r1, [r7, #16]
 80102c6:	6978      	ldr	r0, [r7, #20]
 80102c8:	f7ff ff79 	bl	80101be <xQueueGenericCreate>
 80102cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f7ff ffd3 	bl	801027a <prvInitialiseMutex>

		return xNewQueue;
 80102d4:	68fb      	ldr	r3, [r7, #12]
	}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3718      	adds	r7, #24
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08e      	sub	sp, #56	@ 0x38
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
 80102ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80102ee:	2300      	movs	r3, #0
 80102f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80102f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10b      	bne.n	8010314 <xQueueGenericSend+0x34>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801030e:	bf00      	nop
 8010310:	bf00      	nop
 8010312:	e7fd      	b.n	8010310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d103      	bne.n	8010322 <xQueueGenericSend+0x42>
 801031a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <xQueueGenericSend+0x46>
 8010322:	2301      	movs	r3, #1
 8010324:	e000      	b.n	8010328 <xQueueGenericSend+0x48>
 8010326:	2300      	movs	r3, #0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10b      	bne.n	8010344 <xQueueGenericSend+0x64>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801033e:	bf00      	nop
 8010340:	bf00      	nop
 8010342:	e7fd      	b.n	8010340 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	2b02      	cmp	r3, #2
 8010348:	d103      	bne.n	8010352 <xQueueGenericSend+0x72>
 801034a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801034e:	2b01      	cmp	r3, #1
 8010350:	d101      	bne.n	8010356 <xQueueGenericSend+0x76>
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <xQueueGenericSend+0x78>
 8010356:	2300      	movs	r3, #0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10b      	bne.n	8010374 <xQueueGenericSend+0x94>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	623b      	str	r3, [r7, #32]
}
 801036e:	bf00      	nop
 8010370:	bf00      	nop
 8010372:	e7fd      	b.n	8010370 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010374:	f001 fc28 	bl	8011bc8 <xTaskGetSchedulerState>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d102      	bne.n	8010384 <xQueueGenericSend+0xa4>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d101      	bne.n	8010388 <xQueueGenericSend+0xa8>
 8010384:	2301      	movs	r3, #1
 8010386:	e000      	b.n	801038a <xQueueGenericSend+0xaa>
 8010388:	2300      	movs	r3, #0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10b      	bne.n	80103a6 <xQueueGenericSend+0xc6>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	61fb      	str	r3, [r7, #28]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103a6:	f002 fa7f 	bl	80128a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d302      	bcc.n	80103bc <xQueueGenericSend+0xdc>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d129      	bne.n	8010410 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103bc:	683a      	ldr	r2, [r7, #0]
 80103be:	68b9      	ldr	r1, [r7, #8]
 80103c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80103c2:	f000 fbc7 	bl	8010b54 <prvCopyDataToQueue>
 80103c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d010      	beq.n	80103f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d2:	3324      	adds	r3, #36	@ 0x24
 80103d4:	4618      	mov	r0, r3
 80103d6:	f001 fa31 	bl	801183c <xTaskRemoveFromEventList>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d013      	beq.n	8010408 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80103e0:	4b3f      	ldr	r3, [pc, #252]	@ (80104e0 <xQueueGenericSend+0x200>)
 80103e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	f3bf 8f6f 	isb	sy
 80103f0:	e00a      	b.n	8010408 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80103f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d007      	beq.n	8010408 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80103f8:	4b39      	ldr	r3, [pc, #228]	@ (80104e0 <xQueueGenericSend+0x200>)
 80103fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010408:	f002 fa80 	bl	801290c <vPortExitCritical>
				return pdPASS;
 801040c:	2301      	movs	r3, #1
 801040e:	e063      	b.n	80104d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d103      	bne.n	801041e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010416:	f002 fa79 	bl	801290c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801041a:	2300      	movs	r3, #0
 801041c:	e05c      	b.n	80104d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801041e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010420:	2b00      	cmp	r3, #0
 8010422:	d106      	bne.n	8010432 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010424:	f107 0314 	add.w	r3, r7, #20
 8010428:	4618      	mov	r0, r3
 801042a:	f001 fa6b 	bl	8011904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801042e:	2301      	movs	r3, #1
 8010430:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010432:	f002 fa6b 	bl	801290c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010436:	f000 ffd3 	bl	80113e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801043a:	f002 fa35 	bl	80128a8 <vPortEnterCritical>
 801043e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010444:	b25b      	sxtb	r3, r3
 8010446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044a:	d103      	bne.n	8010454 <xQueueGenericSend+0x174>
 801044c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801044e:	2200      	movs	r2, #0
 8010450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801045a:	b25b      	sxtb	r3, r3
 801045c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010460:	d103      	bne.n	801046a <xQueueGenericSend+0x18a>
 8010462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801046a:	f002 fa4f 	bl	801290c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801046e:	1d3a      	adds	r2, r7, #4
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	4611      	mov	r1, r2
 8010476:	4618      	mov	r0, r3
 8010478:	f001 fa5a 	bl	8011930 <xTaskCheckForTimeOut>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d124      	bne.n	80104cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010484:	f000 fc5e 	bl	8010d44 <prvIsQueueFull>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d018      	beq.n	80104c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801048e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010490:	3310      	adds	r3, #16
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	4611      	mov	r1, r2
 8010496:	4618      	mov	r0, r3
 8010498:	f001 f97e 	bl	8011798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801049c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801049e:	f000 fbe9 	bl	8010c74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80104a2:	f000 ffab 	bl	80113fc <xTaskResumeAll>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f47f af7c 	bne.w	80103a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80104ae:	4b0c      	ldr	r3, [pc, #48]	@ (80104e0 <xQueueGenericSend+0x200>)
 80104b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104b4:	601a      	str	r2, [r3, #0]
 80104b6:	f3bf 8f4f 	dsb	sy
 80104ba:	f3bf 8f6f 	isb	sy
 80104be:	e772      	b.n	80103a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80104c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80104c2:	f000 fbd7 	bl	8010c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104c6:	f000 ff99 	bl	80113fc <xTaskResumeAll>
 80104ca:	e76c      	b.n	80103a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80104cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80104ce:	f000 fbd1 	bl	8010c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104d2:	f000 ff93 	bl	80113fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80104d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3738      	adds	r7, #56	@ 0x38
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b090      	sub	sp, #64	@ 0x40
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80104f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10b      	bne.n	8010514 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801050e:	bf00      	nop
 8010510:	bf00      	nop
 8010512:	e7fd      	b.n	8010510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d103      	bne.n	8010522 <xQueueGenericSendFromISR+0x3e>
 801051a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <xQueueGenericSendFromISR+0x42>
 8010522:	2301      	movs	r3, #1
 8010524:	e000      	b.n	8010528 <xQueueGenericSendFromISR+0x44>
 8010526:	2300      	movs	r3, #0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d10b      	bne.n	8010544 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801053e:	bf00      	nop
 8010540:	bf00      	nop
 8010542:	e7fd      	b.n	8010540 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	2b02      	cmp	r3, #2
 8010548:	d103      	bne.n	8010552 <xQueueGenericSendFromISR+0x6e>
 801054a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801054e:	2b01      	cmp	r3, #1
 8010550:	d101      	bne.n	8010556 <xQueueGenericSendFromISR+0x72>
 8010552:	2301      	movs	r3, #1
 8010554:	e000      	b.n	8010558 <xQueueGenericSendFromISR+0x74>
 8010556:	2300      	movs	r3, #0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10b      	bne.n	8010574 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801055c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	623b      	str	r3, [r7, #32]
}
 801056e:	bf00      	nop
 8010570:	bf00      	nop
 8010572:	e7fd      	b.n	8010570 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010574:	f002 fa78 	bl	8012a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010578:	f3ef 8211 	mrs	r2, BASEPRI
 801057c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	61fa      	str	r2, [r7, #28]
 801058e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010590:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010592:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801059c:	429a      	cmp	r2, r3
 801059e:	d302      	bcc.n	80105a6 <xQueueGenericSendFromISR+0xc2>
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d12f      	bne.n	8010606 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80105a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80105ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	68b9      	ldr	r1, [r7, #8]
 80105ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80105bc:	f000 faca 	bl	8010b54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80105c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105c8:	d112      	bne.n	80105f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d016      	beq.n	8010600 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d4:	3324      	adds	r3, #36	@ 0x24
 80105d6:	4618      	mov	r0, r3
 80105d8:	f001 f930 	bl	801183c <xTaskRemoveFromEventList>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00e      	beq.n	8010600 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00b      	beq.n	8010600 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	e007      	b.n	8010600 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105f4:	3301      	adds	r3, #1
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	b25a      	sxtb	r2, r3
 80105fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010600:	2301      	movs	r3, #1
 8010602:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010604:	e001      	b.n	801060a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010606:	2300      	movs	r3, #0
 8010608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801060a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801060c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010614:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010618:	4618      	mov	r0, r3
 801061a:	3740      	adds	r7, #64	@ 0x40
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	@ 0x38
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801062e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010630:	2b00      	cmp	r3, #0
 8010632:	d10b      	bne.n	801064c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	623b      	str	r3, [r7, #32]
}
 8010646:	bf00      	nop
 8010648:	bf00      	nop
 801064a:	e7fd      	b.n	8010648 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801064c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010650:	2b00      	cmp	r3, #0
 8010652:	d00b      	beq.n	801066c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010658:	f383 8811 	msr	BASEPRI, r3
 801065c:	f3bf 8f6f 	isb	sy
 8010660:	f3bf 8f4f 	dsb	sy
 8010664:	61fb      	str	r3, [r7, #28]
}
 8010666:	bf00      	nop
 8010668:	bf00      	nop
 801066a:	e7fd      	b.n	8010668 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d103      	bne.n	801067c <xQueueGiveFromISR+0x5c>
 8010674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010676:	689b      	ldr	r3, [r3, #8]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <xQueueGiveFromISR+0x60>
 801067c:	2301      	movs	r3, #1
 801067e:	e000      	b.n	8010682 <xQueueGiveFromISR+0x62>
 8010680:	2300      	movs	r3, #0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d10b      	bne.n	801069e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	61bb      	str	r3, [r7, #24]
}
 8010698:	bf00      	nop
 801069a:	bf00      	nop
 801069c:	e7fd      	b.n	801069a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801069e:	f002 f9e3 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 80106a2:	f3ef 8211 	mrs	r2, BASEPRI
 80106a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	617a      	str	r2, [r7, #20]
 80106b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80106ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80106c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d22b      	bcs.n	8010726 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80106e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e8:	d112      	bne.n	8010710 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d016      	beq.n	8010720 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f4:	3324      	adds	r3, #36	@ 0x24
 80106f6:	4618      	mov	r0, r3
 80106f8:	f001 f8a0 	bl	801183c <xTaskRemoveFromEventList>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00e      	beq.n	8010720 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00b      	beq.n	8010720 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2201      	movs	r2, #1
 801070c:	601a      	str	r2, [r3, #0]
 801070e:	e007      	b.n	8010720 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010714:	3301      	adds	r3, #1
 8010716:	b2db      	uxtb	r3, r3
 8010718:	b25a      	sxtb	r2, r3
 801071a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010720:	2301      	movs	r3, #1
 8010722:	637b      	str	r3, [r7, #52]	@ 0x34
 8010724:	e001      	b.n	801072a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010726:	2300      	movs	r3, #0
 8010728:	637b      	str	r3, [r7, #52]	@ 0x34
 801072a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f383 8811 	msr	BASEPRI, r3
}
 8010734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010738:	4618      	mov	r0, r3
 801073a:	3738      	adds	r7, #56	@ 0x38
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b08c      	sub	sp, #48	@ 0x30
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801074c:	2300      	movs	r3, #0
 801074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010756:	2b00      	cmp	r3, #0
 8010758:	d10b      	bne.n	8010772 <xQueueReceive+0x32>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	623b      	str	r3, [r7, #32]
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	e7fd      	b.n	801076e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d103      	bne.n	8010780 <xQueueReceive+0x40>
 8010778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <xQueueReceive+0x44>
 8010780:	2301      	movs	r3, #1
 8010782:	e000      	b.n	8010786 <xQueueReceive+0x46>
 8010784:	2300      	movs	r3, #0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10b      	bne.n	80107a2 <xQueueReceive+0x62>
	__asm volatile
 801078a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	61fb      	str	r3, [r7, #28]
}
 801079c:	bf00      	nop
 801079e:	bf00      	nop
 80107a0:	e7fd      	b.n	801079e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107a2:	f001 fa11 	bl	8011bc8 <xTaskGetSchedulerState>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d102      	bne.n	80107b2 <xQueueReceive+0x72>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d101      	bne.n	80107b6 <xQueueReceive+0x76>
 80107b2:	2301      	movs	r3, #1
 80107b4:	e000      	b.n	80107b8 <xQueueReceive+0x78>
 80107b6:	2300      	movs	r3, #0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10b      	bne.n	80107d4 <xQueueReceive+0x94>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c0:	f383 8811 	msr	BASEPRI, r3
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	61bb      	str	r3, [r7, #24]
}
 80107ce:	bf00      	nop
 80107d0:	bf00      	nop
 80107d2:	e7fd      	b.n	80107d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107d4:	f002 f868 	bl	80128a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01f      	beq.n	8010824 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107e8:	f000 fa1e 	bl	8010c28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ee:	1e5a      	subs	r2, r3, #1
 80107f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00f      	beq.n	801081c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fe:	3310      	adds	r3, #16
 8010800:	4618      	mov	r0, r3
 8010802:	f001 f81b 	bl	801183c <xTaskRemoveFromEventList>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d007      	beq.n	801081c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801080c:	4b3c      	ldr	r3, [pc, #240]	@ (8010900 <xQueueReceive+0x1c0>)
 801080e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801081c:	f002 f876 	bl	801290c <vPortExitCritical>
				return pdPASS;
 8010820:	2301      	movs	r3, #1
 8010822:	e069      	b.n	80108f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801082a:	f002 f86f 	bl	801290c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801082e:	2300      	movs	r3, #0
 8010830:	e062      	b.n	80108f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d106      	bne.n	8010846 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010838:	f107 0310 	add.w	r3, r7, #16
 801083c:	4618      	mov	r0, r3
 801083e:	f001 f861 	bl	8011904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010842:	2301      	movs	r3, #1
 8010844:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010846:	f002 f861 	bl	801290c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801084a:	f000 fdc9 	bl	80113e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801084e:	f002 f82b 	bl	80128a8 <vPortEnterCritical>
 8010852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010858:	b25b      	sxtb	r3, r3
 801085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085e:	d103      	bne.n	8010868 <xQueueReceive+0x128>
 8010860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010862:	2200      	movs	r2, #0
 8010864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801086a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801086e:	b25b      	sxtb	r3, r3
 8010870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010874:	d103      	bne.n	801087e <xQueueReceive+0x13e>
 8010876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010878:	2200      	movs	r2, #0
 801087a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801087e:	f002 f845 	bl	801290c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010882:	1d3a      	adds	r2, r7, #4
 8010884:	f107 0310 	add.w	r3, r7, #16
 8010888:	4611      	mov	r1, r2
 801088a:	4618      	mov	r0, r3
 801088c:	f001 f850 	bl	8011930 <xTaskCheckForTimeOut>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d123      	bne.n	80108de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010898:	f000 fa3e 	bl	8010d18 <prvIsQueueEmpty>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d017      	beq.n	80108d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a4:	3324      	adds	r3, #36	@ 0x24
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4611      	mov	r1, r2
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 ff74 	bl	8011798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108b2:	f000 f9df 	bl	8010c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108b6:	f000 fda1 	bl	80113fc <xTaskResumeAll>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d189      	bne.n	80107d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80108c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010900 <xQueueReceive+0x1c0>)
 80108c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108c6:	601a      	str	r2, [r3, #0]
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	e780      	b.n	80107d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80108d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108d4:	f000 f9ce 	bl	8010c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108d8:	f000 fd90 	bl	80113fc <xTaskResumeAll>
 80108dc:	e77a      	b.n	80107d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108e0:	f000 f9c8 	bl	8010c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108e4:	f000 fd8a 	bl	80113fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108ea:	f000 fa15 	bl	8010d18 <prvIsQueueEmpty>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f43f af6f 	beq.w	80107d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3730      	adds	r7, #48	@ 0x30
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	e000ed04 	.word	0xe000ed04

08010904 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08e      	sub	sp, #56	@ 0x38
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801090e:	2300      	movs	r3, #0
 8010910:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010916:	2300      	movs	r3, #0
 8010918:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d10b      	bne.n	8010938 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	623b      	str	r3, [r7, #32]
}
 8010932:	bf00      	nop
 8010934:	bf00      	nop
 8010936:	e7fd      	b.n	8010934 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00b      	beq.n	8010958 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	61fb      	str	r3, [r7, #28]
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010958:	f001 f936 	bl	8011bc8 <xTaskGetSchedulerState>
 801095c:	4603      	mov	r3, r0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d102      	bne.n	8010968 <xQueueSemaphoreTake+0x64>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d101      	bne.n	801096c <xQueueSemaphoreTake+0x68>
 8010968:	2301      	movs	r3, #1
 801096a:	e000      	b.n	801096e <xQueueSemaphoreTake+0x6a>
 801096c:	2300      	movs	r3, #0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10b      	bne.n	801098a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	61bb      	str	r3, [r7, #24]
}
 8010984:	bf00      	nop
 8010986:	bf00      	nop
 8010988:	e7fd      	b.n	8010986 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801098a:	f001 ff8d 	bl	80128a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801098e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010992:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010996:	2b00      	cmp	r3, #0
 8010998:	d024      	beq.n	80109e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099c:	1e5a      	subs	r2, r3, #1
 801099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d104      	bne.n	80109b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80109aa:	f001 fa87 	bl	8011ebc <pvTaskIncrementMutexHeldCount>
 80109ae:	4602      	mov	r2, r0
 80109b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00f      	beq.n	80109dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109be:	3310      	adds	r3, #16
 80109c0:	4618      	mov	r0, r3
 80109c2:	f000 ff3b 	bl	801183c <xTaskRemoveFromEventList>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d007      	beq.n	80109dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109cc:	4b54      	ldr	r3, [pc, #336]	@ (8010b20 <xQueueSemaphoreTake+0x21c>)
 80109ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109d2:	601a      	str	r2, [r3, #0]
 80109d4:	f3bf 8f4f 	dsb	sy
 80109d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109dc:	f001 ff96 	bl	801290c <vPortExitCritical>
				return pdPASS;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e098      	b.n	8010b16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d112      	bne.n	8010a10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00b      	beq.n	8010a08 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80109f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	617b      	str	r3, [r7, #20]
}
 8010a02:	bf00      	nop
 8010a04:	bf00      	nop
 8010a06:	e7fd      	b.n	8010a04 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010a08:	f001 ff80 	bl	801290c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e082      	b.n	8010b16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a16:	f107 030c 	add.w	r3, r7, #12
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 ff72 	bl	8011904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a20:	2301      	movs	r3, #1
 8010a22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a24:	f001 ff72 	bl	801290c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a28:	f000 fcda 	bl	80113e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a2c:	f001 ff3c 	bl	80128a8 <vPortEnterCritical>
 8010a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010a36:	b25b      	sxtb	r3, r3
 8010a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a3c:	d103      	bne.n	8010a46 <xQueueSemaphoreTake+0x142>
 8010a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a40:	2200      	movs	r2, #0
 8010a42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010a4c:	b25b      	sxtb	r3, r3
 8010a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a52:	d103      	bne.n	8010a5c <xQueueSemaphoreTake+0x158>
 8010a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a56:	2200      	movs	r2, #0
 8010a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010a5c:	f001 ff56 	bl	801290c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a60:	463a      	mov	r2, r7
 8010a62:	f107 030c 	add.w	r3, r7, #12
 8010a66:	4611      	mov	r1, r2
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 ff61 	bl	8011930 <xTaskCheckForTimeOut>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d132      	bne.n	8010ada <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a76:	f000 f94f 	bl	8010d18 <prvIsQueueEmpty>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d026      	beq.n	8010ace <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d109      	bne.n	8010a9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010a88:	f001 ff0e 	bl	80128a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 f8b7 	bl	8011c04 <xTaskPriorityInherit>
 8010a96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010a98:	f001 ff38 	bl	801290c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9e:	3324      	adds	r3, #36	@ 0x24
 8010aa0:	683a      	ldr	r2, [r7, #0]
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f000 fe77 	bl	8011798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010aaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010aac:	f000 f8e2 	bl	8010c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ab0:	f000 fca4 	bl	80113fc <xTaskResumeAll>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f47f af67 	bne.w	801098a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010abc:	4b18      	ldr	r3, [pc, #96]	@ (8010b20 <xQueueSemaphoreTake+0x21c>)
 8010abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ac2:	601a      	str	r2, [r3, #0]
 8010ac4:	f3bf 8f4f 	dsb	sy
 8010ac8:	f3bf 8f6f 	isb	sy
 8010acc:	e75d      	b.n	801098a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ace:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ad0:	f000 f8d0 	bl	8010c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ad4:	f000 fc92 	bl	80113fc <xTaskResumeAll>
 8010ad8:	e757      	b.n	801098a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010ada:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010adc:	f000 f8ca 	bl	8010c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ae0:	f000 fc8c 	bl	80113fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ae6:	f000 f917 	bl	8010d18 <prvIsQueueEmpty>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f43f af4c 	beq.w	801098a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00d      	beq.n	8010b14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010af8:	f001 fed6 	bl	80128a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010afe:	f000 f811 	bl	8010b24 <prvGetDisinheritPriorityAfterTimeout>
 8010b02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f001 f952 	bl	8011db4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010b10:	f001 fefc 	bl	801290c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3738      	adds	r7, #56	@ 0x38
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	e000ed04 	.word	0xe000ed04

08010b24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d006      	beq.n	8010b42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8010b3e:	60fb      	str	r3, [r7, #12]
 8010b40:	e001      	b.n	8010b46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010b42:	2300      	movs	r3, #0
 8010b44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010b46:	68fb      	ldr	r3, [r7, #12]
	}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d10d      	bne.n	8010b8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d14d      	bne.n	8010c16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f001 f8a8 	bl	8011cd4 <xTaskPriorityDisinherit>
 8010b84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	609a      	str	r2, [r3, #8]
 8010b8c:	e043      	b.n	8010c16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d119      	bne.n	8010bc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6858      	ldr	r0, [r3, #4]
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	68b9      	ldr	r1, [r7, #8]
 8010ba0:	f003 ff6d 	bl	8014a7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bac:	441a      	add	r2, r3
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d32b      	bcc.n	8010c16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	605a      	str	r2, [r3, #4]
 8010bc6:	e026      	b.n	8010c16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	68d8      	ldr	r0, [r3, #12]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	68b9      	ldr	r1, [r7, #8]
 8010bd4:	f003 ff53 	bl	8014a7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	68da      	ldr	r2, [r3, #12]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010be0:	425b      	negs	r3, r3
 8010be2:	441a      	add	r2, r3
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	68da      	ldr	r2, [r3, #12]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d207      	bcs.n	8010c04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	689a      	ldr	r2, [r3, #8]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bfc:	425b      	negs	r3, r3
 8010bfe:	441a      	add	r2, r3
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2b02      	cmp	r3, #2
 8010c08:	d105      	bne.n	8010c16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	3b01      	subs	r3, #1
 8010c14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010c1e:	697b      	ldr	r3, [r7, #20]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d018      	beq.n	8010c6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	68da      	ldr	r2, [r3, #12]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c42:	441a      	add	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68da      	ldr	r2, [r3, #12]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d303      	bcc.n	8010c5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	68d9      	ldr	r1, [r3, #12]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c64:	461a      	mov	r2, r3
 8010c66:	6838      	ldr	r0, [r7, #0]
 8010c68:	f003 ff09 	bl	8014a7e <memcpy>
	}
}
 8010c6c:	bf00      	nop
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c7c:	f001 fe14 	bl	80128a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c88:	e011      	b.n	8010cae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d012      	beq.n	8010cb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3324      	adds	r3, #36	@ 0x24
 8010c96:	4618      	mov	r0, r3
 8010c98:	f000 fdd0 	bl	801183c <xTaskRemoveFromEventList>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d001      	beq.n	8010ca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010ca2:	f000 fea9 	bl	80119f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	dce9      	bgt.n	8010c8a <prvUnlockQueue+0x16>
 8010cb6:	e000      	b.n	8010cba <prvUnlockQueue+0x46>
					break;
 8010cb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	22ff      	movs	r2, #255	@ 0xff
 8010cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010cc2:	f001 fe23 	bl	801290c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010cc6:	f001 fdef 	bl	80128a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010cd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cd2:	e011      	b.n	8010cf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d012      	beq.n	8010d02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	3310      	adds	r3, #16
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f000 fdab 	bl	801183c <xTaskRemoveFromEventList>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cec:	f000 fe84 	bl	80119f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dce9      	bgt.n	8010cd4 <prvUnlockQueue+0x60>
 8010d00:	e000      	b.n	8010d04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010d02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	22ff      	movs	r2, #255	@ 0xff
 8010d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010d0c:	f001 fdfe 	bl	801290c <vPortExitCritical>
}
 8010d10:	bf00      	nop
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d20:	f001 fdc2 	bl	80128a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d102      	bne.n	8010d32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	e001      	b.n	8010d36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d32:	2300      	movs	r3, #0
 8010d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d36:	f001 fde9 	bl	801290c <vPortExitCritical>

	return xReturn;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d4c:	f001 fdac 	bl	80128a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d102      	bne.n	8010d62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	60fb      	str	r3, [r7, #12]
 8010d60:	e001      	b.n	8010d66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d62:	2300      	movs	r3, #0
 8010d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d66:	f001 fdd1 	bl	801290c <vPortExitCritical>

	return xReturn;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d7e:	2300      	movs	r3, #0
 8010d80:	60fb      	str	r3, [r7, #12]
 8010d82:	e014      	b.n	8010dae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010d84:	4a0f      	ldr	r2, [pc, #60]	@ (8010dc4 <vQueueAddToRegistry+0x50>)
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d10b      	bne.n	8010da8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010d90:	490c      	ldr	r1, [pc, #48]	@ (8010dc4 <vQueueAddToRegistry+0x50>)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	683a      	ldr	r2, [r7, #0]
 8010d96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8010dc4 <vQueueAddToRegistry+0x50>)
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	4413      	add	r3, r2
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010da6:	e006      	b.n	8010db6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	3301      	adds	r3, #1
 8010dac:	60fb      	str	r3, [r7, #12]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2b07      	cmp	r3, #7
 8010db2:	d9e7      	bls.n	8010d84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	3714      	adds	r7, #20
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	20000b50 	.word	0x20000b50

08010dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010dd8:	f001 fd66 	bl	80128a8 <vPortEnterCritical>
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010de2:	b25b      	sxtb	r3, r3
 8010de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010de8:	d103      	bne.n	8010df2 <vQueueWaitForMessageRestricted+0x2a>
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010df8:	b25b      	sxtb	r3, r3
 8010dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfe:	d103      	bne.n	8010e08 <vQueueWaitForMessageRestricted+0x40>
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e08:	f001 fd80 	bl	801290c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d106      	bne.n	8010e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	3324      	adds	r3, #36	@ 0x24
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 fce1 	bl	80117e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010e22:	6978      	ldr	r0, [r7, #20]
 8010e24:	f7ff ff26 	bl	8010c74 <prvUnlockQueue>
	}
 8010e28:	bf00      	nop
 8010e2a:	3718      	adds	r7, #24
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b08e      	sub	sp, #56	@ 0x38
 8010e34:	af04      	add	r7, sp, #16
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
 8010e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d10b      	bne.n	8010e5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	623b      	str	r3, [r7, #32]
}
 8010e56:	bf00      	nop
 8010e58:	bf00      	nop
 8010e5a:	e7fd      	b.n	8010e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10b      	bne.n	8010e7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	61fb      	str	r3, [r7, #28]
}
 8010e74:	bf00      	nop
 8010e76:	bf00      	nop
 8010e78:	e7fd      	b.n	8010e76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e7a:	23a8      	movs	r3, #168	@ 0xa8
 8010e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	2ba8      	cmp	r3, #168	@ 0xa8
 8010e82:	d00b      	beq.n	8010e9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	61bb      	str	r3, [r7, #24]
}
 8010e96:	bf00      	nop
 8010e98:	bf00      	nop
 8010e9a:	e7fd      	b.n	8010e98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01e      	beq.n	8010ee2 <xTaskCreateStatic+0xb2>
 8010ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d01b      	beq.n	8010ee2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010eb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	2202      	movs	r2, #2
 8010eb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	9303      	str	r3, [sp, #12]
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec2:	9302      	str	r3, [sp, #8]
 8010ec4:	f107 0314 	add.w	r3, r7, #20
 8010ec8:	9301      	str	r3, [sp, #4]
 8010eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	68b9      	ldr	r1, [r7, #8]
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f000 f851 	bl	8010f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010eda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010edc:	f000 f8f6 	bl	80110cc <prvAddNewTaskToReadyList>
 8010ee0:	e001      	b.n	8010ee6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ee6:	697b      	ldr	r3, [r7, #20]
	}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3728      	adds	r7, #40	@ 0x28
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b08c      	sub	sp, #48	@ 0x30
 8010ef4:	af04      	add	r7, sp, #16
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	603b      	str	r3, [r7, #0]
 8010efc:	4613      	mov	r3, r2
 8010efe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010f00:	88fb      	ldrh	r3, [r7, #6]
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	4618      	mov	r0, r3
 8010f06:	f001 fdf1 	bl	8012aec <pvPortMalloc>
 8010f0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00e      	beq.n	8010f30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010f12:	20a8      	movs	r0, #168	@ 0xa8
 8010f14:	f001 fdea 	bl	8012aec <pvPortMalloc>
 8010f18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d003      	beq.n	8010f28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	697a      	ldr	r2, [r7, #20]
 8010f24:	631a      	str	r2, [r3, #48]	@ 0x30
 8010f26:	e005      	b.n	8010f34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010f28:	6978      	ldr	r0, [r7, #20]
 8010f2a:	f001 fead 	bl	8012c88 <vPortFree>
 8010f2e:	e001      	b.n	8010f34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010f30:	2300      	movs	r3, #0
 8010f32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d017      	beq.n	8010f6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f42:	88fa      	ldrh	r2, [r7, #6]
 8010f44:	2300      	movs	r3, #0
 8010f46:	9303      	str	r3, [sp, #12]
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	9302      	str	r3, [sp, #8]
 8010f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	68b9      	ldr	r1, [r7, #8]
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f000 f80f 	bl	8010f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f5e:	69f8      	ldr	r0, [r7, #28]
 8010f60:	f000 f8b4 	bl	80110cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f64:	2301      	movs	r3, #1
 8010f66:	61bb      	str	r3, [r7, #24]
 8010f68:	e002      	b.n	8010f70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f70:	69bb      	ldr	r3, [r7, #24]
	}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3720      	adds	r7, #32
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
	...

08010f7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	461a      	mov	r2, r3
 8010f94:	21a5      	movs	r1, #165	@ 0xa5
 8010f96:	f003 fc48 	bl	801482a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	4413      	add	r3, r2
 8010faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	f023 0307 	bic.w	r3, r3, #7
 8010fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	f003 0307 	and.w	r3, r3, #7
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00b      	beq.n	8010fd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	617b      	str	r3, [r7, #20]
}
 8010fd0:	bf00      	nop
 8010fd2:	bf00      	nop
 8010fd4:	e7fd      	b.n	8010fd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d01f      	beq.n	801101c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fdc:	2300      	movs	r3, #0
 8010fde:	61fb      	str	r3, [r7, #28]
 8010fe0:	e012      	b.n	8011008 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	7819      	ldrb	r1, [r3, #0]
 8010fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	4413      	add	r3, r2
 8010ff0:	3334      	adds	r3, #52	@ 0x34
 8010ff2:	460a      	mov	r2, r1
 8010ff4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d006      	beq.n	8011010 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	3301      	adds	r3, #1
 8011006:	61fb      	str	r3, [r7, #28]
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	2b0f      	cmp	r3, #15
 801100c:	d9e9      	bls.n	8010fe2 <prvInitialiseNewTask+0x66>
 801100e:	e000      	b.n	8011012 <prvInitialiseNewTask+0x96>
			{
				break;
 8011010:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011014:	2200      	movs	r2, #0
 8011016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801101a:	e003      	b.n	8011024 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801101c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801101e:	2200      	movs	r2, #0
 8011020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011026:	2b37      	cmp	r3, #55	@ 0x37
 8011028:	d901      	bls.n	801102e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801102a:	2337      	movs	r3, #55	@ 0x37
 801102c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011032:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011038:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801103a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801103c:	2200      	movs	r2, #0
 801103e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011042:	3304      	adds	r3, #4
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe ff3f 	bl	800fec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801104a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801104c:	3318      	adds	r3, #24
 801104e:	4618      	mov	r0, r3
 8011050:	f7fe ff3a 	bl	800fec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011058:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801105c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011062:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011068:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801106c:	2200      	movs	r2, #0
 801106e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011074:	2200      	movs	r2, #0
 8011076:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107c:	3354      	adds	r3, #84	@ 0x54
 801107e:	224c      	movs	r2, #76	@ 0x4c
 8011080:	2100      	movs	r1, #0
 8011082:	4618      	mov	r0, r3
 8011084:	f003 fbd1 	bl	801482a <memset>
 8011088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108a:	4a0d      	ldr	r2, [pc, #52]	@ (80110c0 <prvInitialiseNewTask+0x144>)
 801108c:	659a      	str	r2, [r3, #88]	@ 0x58
 801108e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011090:	4a0c      	ldr	r2, [pc, #48]	@ (80110c4 <prvInitialiseNewTask+0x148>)
 8011092:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011096:	4a0c      	ldr	r2, [pc, #48]	@ (80110c8 <prvInitialiseNewTask+0x14c>)
 8011098:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	68f9      	ldr	r1, [r7, #12]
 801109e:	69b8      	ldr	r0, [r7, #24]
 80110a0:	f001 face 	bl	8012640 <pxPortInitialiseStack>
 80110a4:	4602      	mov	r2, r0
 80110a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80110aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80110b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110b6:	bf00      	nop
 80110b8:	3720      	adds	r7, #32
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	200061d0 	.word	0x200061d0
 80110c4:	20006238 	.word	0x20006238
 80110c8:	200062a0 	.word	0x200062a0

080110cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80110d4:	f001 fbe8 	bl	80128a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80110d8:	4b2d      	ldr	r3, [pc, #180]	@ (8011190 <prvAddNewTaskToReadyList+0xc4>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	3301      	adds	r3, #1
 80110de:	4a2c      	ldr	r2, [pc, #176]	@ (8011190 <prvAddNewTaskToReadyList+0xc4>)
 80110e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80110e2:	4b2c      	ldr	r3, [pc, #176]	@ (8011194 <prvAddNewTaskToReadyList+0xc8>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d109      	bne.n	80110fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80110ea:	4a2a      	ldr	r2, [pc, #168]	@ (8011194 <prvAddNewTaskToReadyList+0xc8>)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110f0:	4b27      	ldr	r3, [pc, #156]	@ (8011190 <prvAddNewTaskToReadyList+0xc4>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d110      	bne.n	801111a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110f8:	f000 fca2 	bl	8011a40 <prvInitialiseTaskLists>
 80110fc:	e00d      	b.n	801111a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110fe:	4b26      	ldr	r3, [pc, #152]	@ (8011198 <prvAddNewTaskToReadyList+0xcc>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d109      	bne.n	801111a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011106:	4b23      	ldr	r3, [pc, #140]	@ (8011194 <prvAddNewTaskToReadyList+0xc8>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011110:	429a      	cmp	r2, r3
 8011112:	d802      	bhi.n	801111a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011114:	4a1f      	ldr	r2, [pc, #124]	@ (8011194 <prvAddNewTaskToReadyList+0xc8>)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801111a:	4b20      	ldr	r3, [pc, #128]	@ (801119c <prvAddNewTaskToReadyList+0xd0>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	3301      	adds	r3, #1
 8011120:	4a1e      	ldr	r2, [pc, #120]	@ (801119c <prvAddNewTaskToReadyList+0xd0>)
 8011122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011124:	4b1d      	ldr	r3, [pc, #116]	@ (801119c <prvAddNewTaskToReadyList+0xd0>)
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011130:	4b1b      	ldr	r3, [pc, #108]	@ (80111a0 <prvAddNewTaskToReadyList+0xd4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	429a      	cmp	r2, r3
 8011136:	d903      	bls.n	8011140 <prvAddNewTaskToReadyList+0x74>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801113c:	4a18      	ldr	r2, [pc, #96]	@ (80111a0 <prvAddNewTaskToReadyList+0xd4>)
 801113e:	6013      	str	r3, [r2, #0]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011144:	4613      	mov	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	4a15      	ldr	r2, [pc, #84]	@ (80111a4 <prvAddNewTaskToReadyList+0xd8>)
 801114e:	441a      	add	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	3304      	adds	r3, #4
 8011154:	4619      	mov	r1, r3
 8011156:	4610      	mov	r0, r2
 8011158:	f7fe fec3 	bl	800fee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801115c:	f001 fbd6 	bl	801290c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011160:	4b0d      	ldr	r3, [pc, #52]	@ (8011198 <prvAddNewTaskToReadyList+0xcc>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00e      	beq.n	8011186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011168:	4b0a      	ldr	r3, [pc, #40]	@ (8011194 <prvAddNewTaskToReadyList+0xc8>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011172:	429a      	cmp	r2, r3
 8011174:	d207      	bcs.n	8011186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011176:	4b0c      	ldr	r3, [pc, #48]	@ (80111a8 <prvAddNewTaskToReadyList+0xdc>)
 8011178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011186:	bf00      	nop
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20001064 	.word	0x20001064
 8011194:	20000b90 	.word	0x20000b90
 8011198:	20001070 	.word	0x20001070
 801119c:	20001080 	.word	0x20001080
 80111a0:	2000106c 	.word	0x2000106c
 80111a4:	20000b94 	.word	0x20000b94
 80111a8:	e000ed04 	.word	0xe000ed04

080111ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80111b4:	f001 fb78 	bl	80128a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d102      	bne.n	80111c4 <vTaskDelete+0x18>
 80111be:	4b2d      	ldr	r3, [pc, #180]	@ (8011274 <vTaskDelete+0xc8>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	e000      	b.n	80111c6 <vTaskDelete+0x1a>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	3304      	adds	r3, #4
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fe fee5 	bl	800ff9c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d004      	beq.n	80111e4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3318      	adds	r3, #24
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fe fedc 	bl	800ff9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80111e4:	4b24      	ldr	r3, [pc, #144]	@ (8011278 <vTaskDelete+0xcc>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	3301      	adds	r3, #1
 80111ea:	4a23      	ldr	r2, [pc, #140]	@ (8011278 <vTaskDelete+0xcc>)
 80111ec:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80111ee:	4b21      	ldr	r3, [pc, #132]	@ (8011274 <vTaskDelete+0xc8>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d10b      	bne.n	8011210 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	3304      	adds	r3, #4
 80111fc:	4619      	mov	r1, r3
 80111fe:	481f      	ldr	r0, [pc, #124]	@ (801127c <vTaskDelete+0xd0>)
 8011200:	f7fe fe6f 	bl	800fee2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011204:	4b1e      	ldr	r3, [pc, #120]	@ (8011280 <vTaskDelete+0xd4>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	3301      	adds	r3, #1
 801120a:	4a1d      	ldr	r2, [pc, #116]	@ (8011280 <vTaskDelete+0xd4>)
 801120c:	6013      	str	r3, [r2, #0]
 801120e:	e009      	b.n	8011224 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011210:	4b1c      	ldr	r3, [pc, #112]	@ (8011284 <vTaskDelete+0xd8>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	3b01      	subs	r3, #1
 8011216:	4a1b      	ldr	r2, [pc, #108]	@ (8011284 <vTaskDelete+0xd8>)
 8011218:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f000 fc7e 	bl	8011b1c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011220:	f000 fcb2 	bl	8011b88 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011224:	f001 fb72 	bl	801290c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011228:	4b17      	ldr	r3, [pc, #92]	@ (8011288 <vTaskDelete+0xdc>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d01c      	beq.n	801126a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011230:	4b10      	ldr	r3, [pc, #64]	@ (8011274 <vTaskDelete+0xc8>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	429a      	cmp	r2, r3
 8011238:	d117      	bne.n	801126a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801123a:	4b14      	ldr	r3, [pc, #80]	@ (801128c <vTaskDelete+0xe0>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d00b      	beq.n	801125a <vTaskDelete+0xae>
	__asm volatile
 8011242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011246:	f383 8811 	msr	BASEPRI, r3
 801124a:	f3bf 8f6f 	isb	sy
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	60bb      	str	r3, [r7, #8]
}
 8011254:	bf00      	nop
 8011256:	bf00      	nop
 8011258:	e7fd      	b.n	8011256 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801125a:	4b0d      	ldr	r3, [pc, #52]	@ (8011290 <vTaskDelete+0xe4>)
 801125c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801126a:	bf00      	nop
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	20000b90 	.word	0x20000b90
 8011278:	20001080 	.word	0x20001080
 801127c:	20001038 	.word	0x20001038
 8011280:	2000104c 	.word	0x2000104c
 8011284:	20001064 	.word	0x20001064
 8011288:	20001070 	.word	0x20001070
 801128c:	2000108c 	.word	0x2000108c
 8011290:	e000ed04 	.word	0xe000ed04

08011294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801129c:	2300      	movs	r3, #0
 801129e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d018      	beq.n	80112d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80112a6:	4b14      	ldr	r3, [pc, #80]	@ (80112f8 <vTaskDelay+0x64>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00b      	beq.n	80112c6 <vTaskDelay+0x32>
	__asm volatile
 80112ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	60bb      	str	r3, [r7, #8]
}
 80112c0:	bf00      	nop
 80112c2:	bf00      	nop
 80112c4:	e7fd      	b.n	80112c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80112c6:	f000 f88b 	bl	80113e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80112ca:	2100      	movs	r1, #0
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 fe09 	bl	8011ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80112d2:	f000 f893 	bl	80113fc <xTaskResumeAll>
 80112d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d107      	bne.n	80112ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80112de:	4b07      	ldr	r3, [pc, #28]	@ (80112fc <vTaskDelay+0x68>)
 80112e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112ee:	bf00      	nop
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	2000108c 	.word	0x2000108c
 80112fc:	e000ed04 	.word	0xe000ed04

08011300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b08a      	sub	sp, #40	@ 0x28
 8011304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011306:	2300      	movs	r3, #0
 8011308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801130a:	2300      	movs	r3, #0
 801130c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801130e:	463a      	mov	r2, r7
 8011310:	1d39      	adds	r1, r7, #4
 8011312:	f107 0308 	add.w	r3, r7, #8
 8011316:	4618      	mov	r0, r3
 8011318:	f7fe fd82 	bl	800fe20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	9202      	str	r2, [sp, #8]
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	2300      	movs	r3, #0
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	2300      	movs	r3, #0
 801132c:	460a      	mov	r2, r1
 801132e:	4924      	ldr	r1, [pc, #144]	@ (80113c0 <vTaskStartScheduler+0xc0>)
 8011330:	4824      	ldr	r0, [pc, #144]	@ (80113c4 <vTaskStartScheduler+0xc4>)
 8011332:	f7ff fd7d 	bl	8010e30 <xTaskCreateStatic>
 8011336:	4603      	mov	r3, r0
 8011338:	4a23      	ldr	r2, [pc, #140]	@ (80113c8 <vTaskStartScheduler+0xc8>)
 801133a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801133c:	4b22      	ldr	r3, [pc, #136]	@ (80113c8 <vTaskStartScheduler+0xc8>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d002      	beq.n	801134a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011344:	2301      	movs	r3, #1
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	e001      	b.n	801134e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801134a:	2300      	movs	r3, #0
 801134c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b01      	cmp	r3, #1
 8011352:	d102      	bne.n	801135a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011354:	f000 fe1a 	bl	8011f8c <xTimerCreateTimerTask>
 8011358:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d11b      	bne.n	8011398 <vTaskStartScheduler+0x98>
	__asm volatile
 8011360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	613b      	str	r3, [r7, #16]
}
 8011372:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011374:	4b15      	ldr	r3, [pc, #84]	@ (80113cc <vTaskStartScheduler+0xcc>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	3354      	adds	r3, #84	@ 0x54
 801137a:	4a15      	ldr	r2, [pc, #84]	@ (80113d0 <vTaskStartScheduler+0xd0>)
 801137c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801137e:	4b15      	ldr	r3, [pc, #84]	@ (80113d4 <vTaskStartScheduler+0xd4>)
 8011380:	f04f 32ff 	mov.w	r2, #4294967295
 8011384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011386:	4b14      	ldr	r3, [pc, #80]	@ (80113d8 <vTaskStartScheduler+0xd8>)
 8011388:	2201      	movs	r2, #1
 801138a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801138c:	4b13      	ldr	r3, [pc, #76]	@ (80113dc <vTaskStartScheduler+0xdc>)
 801138e:	2200      	movs	r2, #0
 8011390:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011392:	f001 f9e5 	bl	8012760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011396:	e00f      	b.n	80113b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801139e:	d10b      	bne.n	80113b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80113a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	60fb      	str	r3, [r7, #12]
}
 80113b2:	bf00      	nop
 80113b4:	bf00      	nop
 80113b6:	e7fd      	b.n	80113b4 <vTaskStartScheduler+0xb4>
}
 80113b8:	bf00      	nop
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	08016a08 	.word	0x08016a08
 80113c4:	08011a11 	.word	0x08011a11
 80113c8:	20001088 	.word	0x20001088
 80113cc:	20000b90 	.word	0x20000b90
 80113d0:	20000110 	.word	0x20000110
 80113d4:	20001084 	.word	0x20001084
 80113d8:	20001070 	.word	0x20001070
 80113dc:	20001068 	.word	0x20001068

080113e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80113e0:	b480      	push	{r7}
 80113e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80113e4:	4b04      	ldr	r3, [pc, #16]	@ (80113f8 <vTaskSuspendAll+0x18>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	3301      	adds	r3, #1
 80113ea:	4a03      	ldr	r2, [pc, #12]	@ (80113f8 <vTaskSuspendAll+0x18>)
 80113ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80113ee:	bf00      	nop
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr
 80113f8:	2000108c 	.word	0x2000108c

080113fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011402:	2300      	movs	r3, #0
 8011404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011406:	2300      	movs	r3, #0
 8011408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801140a:	4b42      	ldr	r3, [pc, #264]	@ (8011514 <xTaskResumeAll+0x118>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10b      	bne.n	801142a <xTaskResumeAll+0x2e>
	__asm volatile
 8011412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011416:	f383 8811 	msr	BASEPRI, r3
 801141a:	f3bf 8f6f 	isb	sy
 801141e:	f3bf 8f4f 	dsb	sy
 8011422:	603b      	str	r3, [r7, #0]
}
 8011424:	bf00      	nop
 8011426:	bf00      	nop
 8011428:	e7fd      	b.n	8011426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801142a:	f001 fa3d 	bl	80128a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801142e:	4b39      	ldr	r3, [pc, #228]	@ (8011514 <xTaskResumeAll+0x118>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	3b01      	subs	r3, #1
 8011434:	4a37      	ldr	r2, [pc, #220]	@ (8011514 <xTaskResumeAll+0x118>)
 8011436:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011438:	4b36      	ldr	r3, [pc, #216]	@ (8011514 <xTaskResumeAll+0x118>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d162      	bne.n	8011506 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011440:	4b35      	ldr	r3, [pc, #212]	@ (8011518 <xTaskResumeAll+0x11c>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d05e      	beq.n	8011506 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011448:	e02f      	b.n	80114aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801144a:	4b34      	ldr	r3, [pc, #208]	@ (801151c <xTaskResumeAll+0x120>)
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	3318      	adds	r3, #24
 8011456:	4618      	mov	r0, r3
 8011458:	f7fe fda0 	bl	800ff9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	3304      	adds	r3, #4
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fd9b 	bl	800ff9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801146a:	4b2d      	ldr	r3, [pc, #180]	@ (8011520 <xTaskResumeAll+0x124>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	d903      	bls.n	801147a <xTaskResumeAll+0x7e>
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011476:	4a2a      	ldr	r2, [pc, #168]	@ (8011520 <xTaskResumeAll+0x124>)
 8011478:	6013      	str	r3, [r2, #0]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801147e:	4613      	mov	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	4a27      	ldr	r2, [pc, #156]	@ (8011524 <xTaskResumeAll+0x128>)
 8011488:	441a      	add	r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	3304      	adds	r3, #4
 801148e:	4619      	mov	r1, r3
 8011490:	4610      	mov	r0, r2
 8011492:	f7fe fd26 	bl	800fee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801149a:	4b23      	ldr	r3, [pc, #140]	@ (8011528 <xTaskResumeAll+0x12c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d302      	bcc.n	80114aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80114a4:	4b21      	ldr	r3, [pc, #132]	@ (801152c <xTaskResumeAll+0x130>)
 80114a6:	2201      	movs	r2, #1
 80114a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114aa:	4b1c      	ldr	r3, [pc, #112]	@ (801151c <xTaskResumeAll+0x120>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1cb      	bne.n	801144a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d001      	beq.n	80114bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80114b8:	f000 fb66 	bl	8011b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80114bc:	4b1c      	ldr	r3, [pc, #112]	@ (8011530 <xTaskResumeAll+0x134>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d010      	beq.n	80114ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80114c8:	f000 f846 	bl	8011558 <xTaskIncrementTick>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d002      	beq.n	80114d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80114d2:	4b16      	ldr	r3, [pc, #88]	@ (801152c <xTaskResumeAll+0x130>)
 80114d4:	2201      	movs	r2, #1
 80114d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	3b01      	subs	r3, #1
 80114dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1f1      	bne.n	80114c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80114e4:	4b12      	ldr	r3, [pc, #72]	@ (8011530 <xTaskResumeAll+0x134>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80114ea:	4b10      	ldr	r3, [pc, #64]	@ (801152c <xTaskResumeAll+0x130>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d009      	beq.n	8011506 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80114f2:	2301      	movs	r3, #1
 80114f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80114f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011534 <xTaskResumeAll+0x138>)
 80114f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011506:	f001 fa01 	bl	801290c <vPortExitCritical>

	return xAlreadyYielded;
 801150a:	68bb      	ldr	r3, [r7, #8]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	2000108c 	.word	0x2000108c
 8011518:	20001064 	.word	0x20001064
 801151c:	20001024 	.word	0x20001024
 8011520:	2000106c 	.word	0x2000106c
 8011524:	20000b94 	.word	0x20000b94
 8011528:	20000b90 	.word	0x20000b90
 801152c:	20001078 	.word	0x20001078
 8011530:	20001074 	.word	0x20001074
 8011534:	e000ed04 	.word	0xe000ed04

08011538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801153e:	4b05      	ldr	r3, [pc, #20]	@ (8011554 <xTaskGetTickCount+0x1c>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011544:	687b      	ldr	r3, [r7, #4]
}
 8011546:	4618      	mov	r0, r3
 8011548:	370c      	adds	r7, #12
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	20001068 	.word	0x20001068

08011558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801155e:	2300      	movs	r3, #0
 8011560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011562:	4b4f      	ldr	r3, [pc, #316]	@ (80116a0 <xTaskIncrementTick+0x148>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	f040 8090 	bne.w	801168c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801156c:	4b4d      	ldr	r3, [pc, #308]	@ (80116a4 <xTaskIncrementTick+0x14c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	3301      	adds	r3, #1
 8011572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011574:	4a4b      	ldr	r2, [pc, #300]	@ (80116a4 <xTaskIncrementTick+0x14c>)
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d121      	bne.n	80115c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011580:	4b49      	ldr	r3, [pc, #292]	@ (80116a8 <xTaskIncrementTick+0x150>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00b      	beq.n	80115a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	603b      	str	r3, [r7, #0]
}
 801159c:	bf00      	nop
 801159e:	bf00      	nop
 80115a0:	e7fd      	b.n	801159e <xTaskIncrementTick+0x46>
 80115a2:	4b41      	ldr	r3, [pc, #260]	@ (80116a8 <xTaskIncrementTick+0x150>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	4b40      	ldr	r3, [pc, #256]	@ (80116ac <xTaskIncrementTick+0x154>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a3e      	ldr	r2, [pc, #248]	@ (80116a8 <xTaskIncrementTick+0x150>)
 80115ae:	6013      	str	r3, [r2, #0]
 80115b0:	4a3e      	ldr	r2, [pc, #248]	@ (80116ac <xTaskIncrementTick+0x154>)
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6013      	str	r3, [r2, #0]
 80115b6:	4b3e      	ldr	r3, [pc, #248]	@ (80116b0 <xTaskIncrementTick+0x158>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	3301      	adds	r3, #1
 80115bc:	4a3c      	ldr	r2, [pc, #240]	@ (80116b0 <xTaskIncrementTick+0x158>)
 80115be:	6013      	str	r3, [r2, #0]
 80115c0:	f000 fae2 	bl	8011b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80115c4:	4b3b      	ldr	r3, [pc, #236]	@ (80116b4 <xTaskIncrementTick+0x15c>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d349      	bcc.n	8011662 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115ce:	4b36      	ldr	r3, [pc, #216]	@ (80116a8 <xTaskIncrementTick+0x150>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d104      	bne.n	80115e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115d8:	4b36      	ldr	r3, [pc, #216]	@ (80116b4 <xTaskIncrementTick+0x15c>)
 80115da:	f04f 32ff 	mov.w	r2, #4294967295
 80115de:	601a      	str	r2, [r3, #0]
					break;
 80115e0:	e03f      	b.n	8011662 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115e2:	4b31      	ldr	r3, [pc, #196]	@ (80116a8 <xTaskIncrementTick+0x150>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80115f2:	693a      	ldr	r2, [r7, #16]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d203      	bcs.n	8011602 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80115fa:	4a2e      	ldr	r2, [pc, #184]	@ (80116b4 <xTaskIncrementTick+0x15c>)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011600:	e02f      	b.n	8011662 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	3304      	adds	r3, #4
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe fcc8 	bl	800ff9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	3318      	adds	r3, #24
 8011618:	4618      	mov	r0, r3
 801161a:	f7fe fcbf 	bl	800ff9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011622:	4b25      	ldr	r3, [pc, #148]	@ (80116b8 <xTaskIncrementTick+0x160>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	429a      	cmp	r2, r3
 8011628:	d903      	bls.n	8011632 <xTaskIncrementTick+0xda>
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801162e:	4a22      	ldr	r2, [pc, #136]	@ (80116b8 <xTaskIncrementTick+0x160>)
 8011630:	6013      	str	r3, [r2, #0]
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011636:	4613      	mov	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4413      	add	r3, r2
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4a1f      	ldr	r2, [pc, #124]	@ (80116bc <xTaskIncrementTick+0x164>)
 8011640:	441a      	add	r2, r3
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	3304      	adds	r3, #4
 8011646:	4619      	mov	r1, r3
 8011648:	4610      	mov	r0, r2
 801164a:	f7fe fc4a 	bl	800fee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011652:	4b1b      	ldr	r3, [pc, #108]	@ (80116c0 <xTaskIncrementTick+0x168>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011658:	429a      	cmp	r2, r3
 801165a:	d3b8      	bcc.n	80115ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801165c:	2301      	movs	r3, #1
 801165e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011660:	e7b5      	b.n	80115ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011662:	4b17      	ldr	r3, [pc, #92]	@ (80116c0 <xTaskIncrementTick+0x168>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011668:	4914      	ldr	r1, [pc, #80]	@ (80116bc <xTaskIncrementTick+0x164>)
 801166a:	4613      	mov	r3, r2
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	4413      	add	r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	440b      	add	r3, r1
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b01      	cmp	r3, #1
 8011678:	d901      	bls.n	801167e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801167a:	2301      	movs	r3, #1
 801167c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801167e:	4b11      	ldr	r3, [pc, #68]	@ (80116c4 <xTaskIncrementTick+0x16c>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d007      	beq.n	8011696 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011686:	2301      	movs	r3, #1
 8011688:	617b      	str	r3, [r7, #20]
 801168a:	e004      	b.n	8011696 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801168c:	4b0e      	ldr	r3, [pc, #56]	@ (80116c8 <xTaskIncrementTick+0x170>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3301      	adds	r3, #1
 8011692:	4a0d      	ldr	r2, [pc, #52]	@ (80116c8 <xTaskIncrementTick+0x170>)
 8011694:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011696:	697b      	ldr	r3, [r7, #20]
}
 8011698:	4618      	mov	r0, r3
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	2000108c 	.word	0x2000108c
 80116a4:	20001068 	.word	0x20001068
 80116a8:	2000101c 	.word	0x2000101c
 80116ac:	20001020 	.word	0x20001020
 80116b0:	2000107c 	.word	0x2000107c
 80116b4:	20001084 	.word	0x20001084
 80116b8:	2000106c 	.word	0x2000106c
 80116bc:	20000b94 	.word	0x20000b94
 80116c0:	20000b90 	.word	0x20000b90
 80116c4:	20001078 	.word	0x20001078
 80116c8:	20001074 	.word	0x20001074

080116cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80116d2:	4b2b      	ldr	r3, [pc, #172]	@ (8011780 <vTaskSwitchContext+0xb4>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d003      	beq.n	80116e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80116da:	4b2a      	ldr	r3, [pc, #168]	@ (8011784 <vTaskSwitchContext+0xb8>)
 80116dc:	2201      	movs	r2, #1
 80116de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80116e0:	e047      	b.n	8011772 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80116e2:	4b28      	ldr	r3, [pc, #160]	@ (8011784 <vTaskSwitchContext+0xb8>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116e8:	4b27      	ldr	r3, [pc, #156]	@ (8011788 <vTaskSwitchContext+0xbc>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	60fb      	str	r3, [r7, #12]
 80116ee:	e011      	b.n	8011714 <vTaskSwitchContext+0x48>
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d10b      	bne.n	801170e <vTaskSwitchContext+0x42>
	__asm volatile
 80116f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fa:	f383 8811 	msr	BASEPRI, r3
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	607b      	str	r3, [r7, #4]
}
 8011708:	bf00      	nop
 801170a:	bf00      	nop
 801170c:	e7fd      	b.n	801170a <vTaskSwitchContext+0x3e>
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3b01      	subs	r3, #1
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	491d      	ldr	r1, [pc, #116]	@ (801178c <vTaskSwitchContext+0xc0>)
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	4613      	mov	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	4413      	add	r3, r2
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	440b      	add	r3, r1
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d0e3      	beq.n	80116f0 <vTaskSwitchContext+0x24>
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	4613      	mov	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4413      	add	r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4a16      	ldr	r2, [pc, #88]	@ (801178c <vTaskSwitchContext+0xc0>)
 8011734:	4413      	add	r3, r2
 8011736:	60bb      	str	r3, [r7, #8]
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	685a      	ldr	r2, [r3, #4]
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	605a      	str	r2, [r3, #4]
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	3308      	adds	r3, #8
 801174a:	429a      	cmp	r2, r3
 801174c:	d104      	bne.n	8011758 <vTaskSwitchContext+0x8c>
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	685a      	ldr	r2, [r3, #4]
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	605a      	str	r2, [r3, #4]
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	4a0c      	ldr	r2, [pc, #48]	@ (8011790 <vTaskSwitchContext+0xc4>)
 8011760:	6013      	str	r3, [r2, #0]
 8011762:	4a09      	ldr	r2, [pc, #36]	@ (8011788 <vTaskSwitchContext+0xbc>)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011768:	4b09      	ldr	r3, [pc, #36]	@ (8011790 <vTaskSwitchContext+0xc4>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3354      	adds	r3, #84	@ 0x54
 801176e:	4a09      	ldr	r2, [pc, #36]	@ (8011794 <vTaskSwitchContext+0xc8>)
 8011770:	6013      	str	r3, [r2, #0]
}
 8011772:	bf00      	nop
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	2000108c 	.word	0x2000108c
 8011784:	20001078 	.word	0x20001078
 8011788:	2000106c 	.word	0x2000106c
 801178c:	20000b94 	.word	0x20000b94
 8011790:	20000b90 	.word	0x20000b90
 8011794:	20000110 	.word	0x20000110

08011798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d10b      	bne.n	80117c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80117a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	60fb      	str	r3, [r7, #12]
}
 80117ba:	bf00      	nop
 80117bc:	bf00      	nop
 80117be:	e7fd      	b.n	80117bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80117c0:	4b07      	ldr	r3, [pc, #28]	@ (80117e0 <vTaskPlaceOnEventList+0x48>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3318      	adds	r3, #24
 80117c6:	4619      	mov	r1, r3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7fe fbae 	bl	800ff2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80117ce:	2101      	movs	r1, #1
 80117d0:	6838      	ldr	r0, [r7, #0]
 80117d2:	f000 fb87 	bl	8011ee4 <prvAddCurrentTaskToDelayedList>
}
 80117d6:	bf00      	nop
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	20000b90 	.word	0x20000b90

080117e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	60b9      	str	r1, [r7, #8]
 80117ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10b      	bne.n	801180e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	617b      	str	r3, [r7, #20]
}
 8011808:	bf00      	nop
 801180a:	bf00      	nop
 801180c:	e7fd      	b.n	801180a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801180e:	4b0a      	ldr	r3, [pc, #40]	@ (8011838 <vTaskPlaceOnEventListRestricted+0x54>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	3318      	adds	r3, #24
 8011814:	4619      	mov	r1, r3
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f7fe fb63 	bl	800fee2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d002      	beq.n	8011828 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011822:	f04f 33ff 	mov.w	r3, #4294967295
 8011826:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	68b8      	ldr	r0, [r7, #8]
 801182c:	f000 fb5a 	bl	8011ee4 <prvAddCurrentTaskToDelayedList>
	}
 8011830:	bf00      	nop
 8011832:	3718      	adds	r7, #24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	20000b90 	.word	0x20000b90

0801183c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10b      	bne.n	801186a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011856:	f383 8811 	msr	BASEPRI, r3
 801185a:	f3bf 8f6f 	isb	sy
 801185e:	f3bf 8f4f 	dsb	sy
 8011862:	60fb      	str	r3, [r7, #12]
}
 8011864:	bf00      	nop
 8011866:	bf00      	nop
 8011868:	e7fd      	b.n	8011866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	3318      	adds	r3, #24
 801186e:	4618      	mov	r0, r3
 8011870:	f7fe fb94 	bl	800ff9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011874:	4b1d      	ldr	r3, [pc, #116]	@ (80118ec <xTaskRemoveFromEventList+0xb0>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d11d      	bne.n	80118b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	3304      	adds	r3, #4
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe fb8b 	bl	800ff9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801188a:	4b19      	ldr	r3, [pc, #100]	@ (80118f0 <xTaskRemoveFromEventList+0xb4>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	429a      	cmp	r2, r3
 8011890:	d903      	bls.n	801189a <xTaskRemoveFromEventList+0x5e>
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011896:	4a16      	ldr	r2, [pc, #88]	@ (80118f0 <xTaskRemoveFromEventList+0xb4>)
 8011898:	6013      	str	r3, [r2, #0]
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801189e:	4613      	mov	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	4413      	add	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4a13      	ldr	r2, [pc, #76]	@ (80118f4 <xTaskRemoveFromEventList+0xb8>)
 80118a8:	441a      	add	r2, r3
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	3304      	adds	r3, #4
 80118ae:	4619      	mov	r1, r3
 80118b0:	4610      	mov	r0, r2
 80118b2:	f7fe fb16 	bl	800fee2 <vListInsertEnd>
 80118b6:	e005      	b.n	80118c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	3318      	adds	r3, #24
 80118bc:	4619      	mov	r1, r3
 80118be:	480e      	ldr	r0, [pc, #56]	@ (80118f8 <xTaskRemoveFromEventList+0xbc>)
 80118c0:	f7fe fb0f 	bl	800fee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118c8:	4b0c      	ldr	r3, [pc, #48]	@ (80118fc <xTaskRemoveFromEventList+0xc0>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d905      	bls.n	80118de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80118d2:	2301      	movs	r3, #1
 80118d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80118d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011900 <xTaskRemoveFromEventList+0xc4>)
 80118d8:	2201      	movs	r2, #1
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	e001      	b.n	80118e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80118de:	2300      	movs	r3, #0
 80118e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80118e2:	697b      	ldr	r3, [r7, #20]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	2000108c 	.word	0x2000108c
 80118f0:	2000106c 	.word	0x2000106c
 80118f4:	20000b94 	.word	0x20000b94
 80118f8:	20001024 	.word	0x20001024
 80118fc:	20000b90 	.word	0x20000b90
 8011900:	20001078 	.word	0x20001078

08011904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801190c:	4b06      	ldr	r3, [pc, #24]	@ (8011928 <vTaskInternalSetTimeOutState+0x24>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011914:	4b05      	ldr	r3, [pc, #20]	@ (801192c <vTaskInternalSetTimeOutState+0x28>)
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	605a      	str	r2, [r3, #4]
}
 801191c:	bf00      	nop
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	2000107c 	.word	0x2000107c
 801192c:	20001068 	.word	0x20001068

08011930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b088      	sub	sp, #32
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10b      	bne.n	8011958 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	613b      	str	r3, [r7, #16]
}
 8011952:	bf00      	nop
 8011954:	bf00      	nop
 8011956:	e7fd      	b.n	8011954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d10b      	bne.n	8011976 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	60fb      	str	r3, [r7, #12]
}
 8011970:	bf00      	nop
 8011972:	bf00      	nop
 8011974:	e7fd      	b.n	8011972 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011976:	f000 ff97 	bl	80128a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801197a:	4b1d      	ldr	r3, [pc, #116]	@ (80119f0 <xTaskCheckForTimeOut+0xc0>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	69ba      	ldr	r2, [r7, #24]
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011992:	d102      	bne.n	801199a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011994:	2300      	movs	r3, #0
 8011996:	61fb      	str	r3, [r7, #28]
 8011998:	e023      	b.n	80119e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	4b15      	ldr	r3, [pc, #84]	@ (80119f4 <xTaskCheckForTimeOut+0xc4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d007      	beq.n	80119b6 <xTaskCheckForTimeOut+0x86>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	69ba      	ldr	r2, [r7, #24]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d302      	bcc.n	80119b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80119b0:	2301      	movs	r3, #1
 80119b2:	61fb      	str	r3, [r7, #28]
 80119b4:	e015      	b.n	80119e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	697a      	ldr	r2, [r7, #20]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d20b      	bcs.n	80119d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	1ad2      	subs	r2, r2, r3
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7ff ff99 	bl	8011904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80119d2:	2300      	movs	r3, #0
 80119d4:	61fb      	str	r3, [r7, #28]
 80119d6:	e004      	b.n	80119e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	2200      	movs	r2, #0
 80119dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80119de:	2301      	movs	r3, #1
 80119e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80119e2:	f000 ff93 	bl	801290c <vPortExitCritical>

	return xReturn;
 80119e6:	69fb      	ldr	r3, [r7, #28]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3720      	adds	r7, #32
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	20001068 	.word	0x20001068
 80119f4:	2000107c 	.word	0x2000107c

080119f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80119f8:	b480      	push	{r7}
 80119fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80119fc:	4b03      	ldr	r3, [pc, #12]	@ (8011a0c <vTaskMissedYield+0x14>)
 80119fe:	2201      	movs	r2, #1
 8011a00:	601a      	str	r2, [r3, #0]
}
 8011a02:	bf00      	nop
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr
 8011a0c:	20001078 	.word	0x20001078

08011a10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011a18:	f000 f852 	bl	8011ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011a1c:	4b06      	ldr	r3, [pc, #24]	@ (8011a38 <prvIdleTask+0x28>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d9f9      	bls.n	8011a18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011a24:	4b05      	ldr	r3, [pc, #20]	@ (8011a3c <prvIdleTask+0x2c>)
 8011a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a2a:	601a      	str	r2, [r3, #0]
 8011a2c:	f3bf 8f4f 	dsb	sy
 8011a30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011a34:	e7f0      	b.n	8011a18 <prvIdleTask+0x8>
 8011a36:	bf00      	nop
 8011a38:	20000b94 	.word	0x20000b94
 8011a3c:	e000ed04 	.word	0xe000ed04

08011a40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a46:	2300      	movs	r3, #0
 8011a48:	607b      	str	r3, [r7, #4]
 8011a4a:	e00c      	b.n	8011a66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	4613      	mov	r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4a12      	ldr	r2, [pc, #72]	@ (8011aa0 <prvInitialiseTaskLists+0x60>)
 8011a58:	4413      	add	r3, r2
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fe fa14 	bl	800fe88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	3301      	adds	r3, #1
 8011a64:	607b      	str	r3, [r7, #4]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2b37      	cmp	r3, #55	@ 0x37
 8011a6a:	d9ef      	bls.n	8011a4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011a6c:	480d      	ldr	r0, [pc, #52]	@ (8011aa4 <prvInitialiseTaskLists+0x64>)
 8011a6e:	f7fe fa0b 	bl	800fe88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011a72:	480d      	ldr	r0, [pc, #52]	@ (8011aa8 <prvInitialiseTaskLists+0x68>)
 8011a74:	f7fe fa08 	bl	800fe88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011a78:	480c      	ldr	r0, [pc, #48]	@ (8011aac <prvInitialiseTaskLists+0x6c>)
 8011a7a:	f7fe fa05 	bl	800fe88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011a7e:	480c      	ldr	r0, [pc, #48]	@ (8011ab0 <prvInitialiseTaskLists+0x70>)
 8011a80:	f7fe fa02 	bl	800fe88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011a84:	480b      	ldr	r0, [pc, #44]	@ (8011ab4 <prvInitialiseTaskLists+0x74>)
 8011a86:	f7fe f9ff 	bl	800fe88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8011ab8 <prvInitialiseTaskLists+0x78>)
 8011a8c:	4a05      	ldr	r2, [pc, #20]	@ (8011aa4 <prvInitialiseTaskLists+0x64>)
 8011a8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011a90:	4b0a      	ldr	r3, [pc, #40]	@ (8011abc <prvInitialiseTaskLists+0x7c>)
 8011a92:	4a05      	ldr	r2, [pc, #20]	@ (8011aa8 <prvInitialiseTaskLists+0x68>)
 8011a94:	601a      	str	r2, [r3, #0]
}
 8011a96:	bf00      	nop
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	20000b94 	.word	0x20000b94
 8011aa4:	20000ff4 	.word	0x20000ff4
 8011aa8:	20001008 	.word	0x20001008
 8011aac:	20001024 	.word	0x20001024
 8011ab0:	20001038 	.word	0x20001038
 8011ab4:	20001050 	.word	0x20001050
 8011ab8:	2000101c 	.word	0x2000101c
 8011abc:	20001020 	.word	0x20001020

08011ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ac6:	e019      	b.n	8011afc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011ac8:	f000 feee 	bl	80128a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011acc:	4b10      	ldr	r3, [pc, #64]	@ (8011b10 <prvCheckTasksWaitingTermination+0x50>)
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fa5f 	bl	800ff9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ade:	4b0d      	ldr	r3, [pc, #52]	@ (8011b14 <prvCheckTasksWaitingTermination+0x54>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	3b01      	subs	r3, #1
 8011ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8011b14 <prvCheckTasksWaitingTermination+0x54>)
 8011ae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8011b18 <prvCheckTasksWaitingTermination+0x58>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	4a0a      	ldr	r2, [pc, #40]	@ (8011b18 <prvCheckTasksWaitingTermination+0x58>)
 8011af0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011af2:	f000 ff0b 	bl	801290c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 f810 	bl	8011b1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011afc:	4b06      	ldr	r3, [pc, #24]	@ (8011b18 <prvCheckTasksWaitingTermination+0x58>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1e1      	bne.n	8011ac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011b04:	bf00      	nop
 8011b06:	bf00      	nop
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	20001038 	.word	0x20001038
 8011b14:	20001064 	.word	0x20001064
 8011b18:	2000104c 	.word	0x2000104c

08011b1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	3354      	adds	r3, #84	@ 0x54
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f002 fecb 	bl	80148c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d108      	bne.n	8011b4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f001 f8a3 	bl	8012c88 <vPortFree>
				vPortFree( pxTCB );
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f001 f8a0 	bl	8012c88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011b48:	e019      	b.n	8011b7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d103      	bne.n	8011b5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f001 f897 	bl	8012c88 <vPortFree>
	}
 8011b5a:	e010      	b.n	8011b7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011b62:	2b02      	cmp	r3, #2
 8011b64:	d00b      	beq.n	8011b7e <prvDeleteTCB+0x62>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	60fb      	str	r3, [r7, #12]
}
 8011b78:	bf00      	nop
 8011b7a:	bf00      	nop
 8011b7c:	e7fd      	b.n	8011b7a <prvDeleteTCB+0x5e>
	}
 8011b7e:	bf00      	nop
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc0 <prvResetNextTaskUnblockTime+0x38>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d104      	bne.n	8011ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011b98:	4b0a      	ldr	r3, [pc, #40]	@ (8011bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8011b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ba0:	e008      	b.n	8011bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ba2:	4b07      	ldr	r3, [pc, #28]	@ (8011bc0 <prvResetNextTaskUnblockTime+0x38>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	4a04      	ldr	r2, [pc, #16]	@ (8011bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8011bb2:	6013      	str	r3, [r2, #0]
}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr
 8011bc0:	2000101c 	.word	0x2000101c
 8011bc4:	20001084 	.word	0x20001084

08011bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011bce:	4b0b      	ldr	r3, [pc, #44]	@ (8011bfc <xTaskGetSchedulerState+0x34>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d102      	bne.n	8011bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	607b      	str	r3, [r7, #4]
 8011bda:	e008      	b.n	8011bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bdc:	4b08      	ldr	r3, [pc, #32]	@ (8011c00 <xTaskGetSchedulerState+0x38>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d102      	bne.n	8011bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011be4:	2302      	movs	r3, #2
 8011be6:	607b      	str	r3, [r7, #4]
 8011be8:	e001      	b.n	8011bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011bea:	2300      	movs	r3, #0
 8011bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011bee:	687b      	ldr	r3, [r7, #4]
	}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	20001070 	.word	0x20001070
 8011c00:	2000108c 	.word	0x2000108c

08011c04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011c10:	2300      	movs	r3, #0
 8011c12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d051      	beq.n	8011cbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8011cc8 <xTaskPriorityInherit+0xc4>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d241      	bcs.n	8011cac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	db06      	blt.n	8011c3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c30:	4b25      	ldr	r3, [pc, #148]	@ (8011cc8 <xTaskPriorityInherit+0xc4>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	6959      	ldr	r1, [r3, #20]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c46:	4613      	mov	r3, r2
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	4413      	add	r3, r2
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8011ccc <xTaskPriorityInherit+0xc8>)
 8011c50:	4413      	add	r3, r2
 8011c52:	4299      	cmp	r1, r3
 8011c54:	d122      	bne.n	8011c9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	3304      	adds	r3, #4
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fe f99e 	bl	800ff9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c60:	4b19      	ldr	r3, [pc, #100]	@ (8011cc8 <xTaskPriorityInherit+0xc4>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c6e:	4b18      	ldr	r3, [pc, #96]	@ (8011cd0 <xTaskPriorityInherit+0xcc>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d903      	bls.n	8011c7e <xTaskPriorityInherit+0x7a>
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c7a:	4a15      	ldr	r2, [pc, #84]	@ (8011cd0 <xTaskPriorityInherit+0xcc>)
 8011c7c:	6013      	str	r3, [r2, #0]
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c82:	4613      	mov	r3, r2
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	4413      	add	r3, r2
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4a10      	ldr	r2, [pc, #64]	@ (8011ccc <xTaskPriorityInherit+0xc8>)
 8011c8c:	441a      	add	r2, r3
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	3304      	adds	r3, #4
 8011c92:	4619      	mov	r1, r3
 8011c94:	4610      	mov	r0, r2
 8011c96:	f7fe f924 	bl	800fee2 <vListInsertEnd>
 8011c9a:	e004      	b.n	8011ca6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc8 <xTaskPriorityInherit+0xc4>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	60fb      	str	r3, [r7, #12]
 8011caa:	e008      	b.n	8011cbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011cb0:	4b05      	ldr	r3, [pc, #20]	@ (8011cc8 <xTaskPriorityInherit+0xc4>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d201      	bcs.n	8011cbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
	}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	20000b90 	.word	0x20000b90
 8011ccc:	20000b94 	.word	0x20000b94
 8011cd0:	2000106c 	.word	0x2000106c

08011cd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b086      	sub	sp, #24
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d058      	beq.n	8011d9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011cea:	4b2f      	ldr	r3, [pc, #188]	@ (8011da8 <xTaskPriorityDisinherit+0xd4>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	693a      	ldr	r2, [r7, #16]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d00b      	beq.n	8011d0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	60fb      	str	r3, [r7, #12]
}
 8011d06:	bf00      	nop
 8011d08:	bf00      	nop
 8011d0a:	e7fd      	b.n	8011d08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d10b      	bne.n	8011d2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d18:	f383 8811 	msr	BASEPRI, r3
 8011d1c:	f3bf 8f6f 	isb	sy
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	60bb      	str	r3, [r7, #8]
}
 8011d26:	bf00      	nop
 8011d28:	bf00      	nop
 8011d2a:	e7fd      	b.n	8011d28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d30:	1e5a      	subs	r2, r3, #1
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d02c      	beq.n	8011d9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d128      	bne.n	8011d9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe f924 	bl	800ff9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8011dac <xTaskPriorityDisinherit+0xd8>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d903      	bls.n	8011d7c <xTaskPriorityDisinherit+0xa8>
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d78:	4a0c      	ldr	r2, [pc, #48]	@ (8011dac <xTaskPriorityDisinherit+0xd8>)
 8011d7a:	6013      	str	r3, [r2, #0]
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d80:	4613      	mov	r3, r2
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	4413      	add	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4a09      	ldr	r2, [pc, #36]	@ (8011db0 <xTaskPriorityDisinherit+0xdc>)
 8011d8a:	441a      	add	r2, r3
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	4619      	mov	r1, r3
 8011d92:	4610      	mov	r0, r2
 8011d94:	f7fe f8a5 	bl	800fee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011d98:	2301      	movs	r3, #1
 8011d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011d9c:	697b      	ldr	r3, [r7, #20]
	}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20000b90 	.word	0x20000b90
 8011dac:	2000106c 	.word	0x2000106c
 8011db0:	20000b94 	.word	0x20000b94

08011db4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b088      	sub	sp, #32
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d06c      	beq.n	8011ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d10b      	bne.n	8011dec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	60fb      	str	r3, [r7, #12]
}
 8011de6:	bf00      	nop
 8011de8:	bf00      	nop
 8011dea:	e7fd      	b.n	8011de8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d902      	bls.n	8011dfc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	61fb      	str	r3, [r7, #28]
 8011dfa:	e002      	b.n	8011e02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e06:	69fa      	ldr	r2, [r7, #28]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d04c      	beq.n	8011ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e10:	697a      	ldr	r2, [r7, #20]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d147      	bne.n	8011ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011e16:	4b26      	ldr	r3, [pc, #152]	@ (8011eb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	69ba      	ldr	r2, [r7, #24]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d10b      	bne.n	8011e38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	60bb      	str	r3, [r7, #8]
}
 8011e32:	bf00      	nop
 8011e34:	bf00      	nop
 8011e36:	e7fd      	b.n	8011e34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	69fa      	ldr	r2, [r7, #28]
 8011e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	699b      	ldr	r3, [r3, #24]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	db04      	blt.n	8011e56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	6959      	ldr	r1, [r3, #20]
 8011e5a:	693a      	ldr	r2, [r7, #16]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	4413      	add	r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	4a13      	ldr	r2, [pc, #76]	@ (8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011e66:	4413      	add	r3, r2
 8011e68:	4299      	cmp	r1, r3
 8011e6a:	d11c      	bne.n	8011ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e6c:	69bb      	ldr	r3, [r7, #24]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fe f893 	bl	800ff9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d903      	bls.n	8011e8a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e86:	4a0c      	ldr	r2, [pc, #48]	@ (8011eb8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e8e:	4613      	mov	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	4a07      	ldr	r2, [pc, #28]	@ (8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011e98:	441a      	add	r2, r3
 8011e9a:	69bb      	ldr	r3, [r7, #24]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	f7fe f81e 	bl	800fee2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ea6:	bf00      	nop
 8011ea8:	3720      	adds	r7, #32
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	20000b90 	.word	0x20000b90
 8011eb4:	20000b94 	.word	0x20000b94
 8011eb8:	2000106c 	.word	0x2000106c

08011ebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ebc:	b480      	push	{r7}
 8011ebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011ec0:	4b07      	ldr	r3, [pc, #28]	@ (8011ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d004      	beq.n	8011ed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011ec8:	4b05      	ldr	r3, [pc, #20]	@ (8011ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ece:	3201      	adds	r2, #1
 8011ed0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011ed2:	4b03      	ldr	r3, [pc, #12]	@ (8011ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
	}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	20000b90 	.word	0x20000b90

08011ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011eee:	4b21      	ldr	r3, [pc, #132]	@ (8011f74 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ef4:	4b20      	ldr	r3, [pc, #128]	@ (8011f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	3304      	adds	r3, #4
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fe f84e 	bl	800ff9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f06:	d10a      	bne.n	8011f1e <prvAddCurrentTaskToDelayedList+0x3a>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d007      	beq.n	8011f1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8011f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	3304      	adds	r3, #4
 8011f14:	4619      	mov	r1, r3
 8011f16:	4819      	ldr	r0, [pc, #100]	@ (8011f7c <prvAddCurrentTaskToDelayedList+0x98>)
 8011f18:	f7fd ffe3 	bl	800fee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f1c:	e026      	b.n	8011f6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	4413      	add	r3, r2
 8011f24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f26:	4b14      	ldr	r3, [pc, #80]	@ (8011f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	68ba      	ldr	r2, [r7, #8]
 8011f2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f2e:	68ba      	ldr	r2, [r7, #8]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d209      	bcs.n	8011f4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f36:	4b12      	ldr	r3, [pc, #72]	@ (8011f80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f38:	681a      	ldr	r2, [r3, #0]
 8011f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8011f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	3304      	adds	r3, #4
 8011f40:	4619      	mov	r1, r3
 8011f42:	4610      	mov	r0, r2
 8011f44:	f7fd fff1 	bl	800ff2a <vListInsert>
}
 8011f48:	e010      	b.n	8011f6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8011f84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3304      	adds	r3, #4
 8011f54:	4619      	mov	r1, r3
 8011f56:	4610      	mov	r0, r2
 8011f58:	f7fd ffe7 	bl	800ff2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d202      	bcs.n	8011f6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f66:	4a08      	ldr	r2, [pc, #32]	@ (8011f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	6013      	str	r3, [r2, #0]
}
 8011f6c:	bf00      	nop
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20001068 	.word	0x20001068
 8011f78:	20000b90 	.word	0x20000b90
 8011f7c:	20001050 	.word	0x20001050
 8011f80:	20001020 	.word	0x20001020
 8011f84:	2000101c 	.word	0x2000101c
 8011f88:	20001084 	.word	0x20001084

08011f8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b08a      	sub	sp, #40	@ 0x28
 8011f90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011f92:	2300      	movs	r3, #0
 8011f94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011f96:	f000 fb13 	bl	80125c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8012010 <xTimerCreateTimerTask+0x84>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d021      	beq.n	8011fe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011faa:	1d3a      	adds	r2, r7, #4
 8011fac:	f107 0108 	add.w	r1, r7, #8
 8011fb0:	f107 030c 	add.w	r3, r7, #12
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fd ff4d 	bl	800fe54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011fba:	6879      	ldr	r1, [r7, #4]
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	9202      	str	r2, [sp, #8]
 8011fc2:	9301      	str	r3, [sp, #4]
 8011fc4:	2302      	movs	r3, #2
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	460a      	mov	r2, r1
 8011fcc:	4911      	ldr	r1, [pc, #68]	@ (8012014 <xTimerCreateTimerTask+0x88>)
 8011fce:	4812      	ldr	r0, [pc, #72]	@ (8012018 <xTimerCreateTimerTask+0x8c>)
 8011fd0:	f7fe ff2e 	bl	8010e30 <xTaskCreateStatic>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	4a11      	ldr	r2, [pc, #68]	@ (801201c <xTimerCreateTimerTask+0x90>)
 8011fd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011fda:	4b10      	ldr	r3, [pc, #64]	@ (801201c <xTimerCreateTimerTask+0x90>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d001      	beq.n	8011fe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d10b      	bne.n	8012004 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff0:	f383 8811 	msr	BASEPRI, r3
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	f3bf 8f4f 	dsb	sy
 8011ffc:	613b      	str	r3, [r7, #16]
}
 8011ffe:	bf00      	nop
 8012000:	bf00      	nop
 8012002:	e7fd      	b.n	8012000 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012004:	697b      	ldr	r3, [r7, #20]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	200010c0 	.word	0x200010c0
 8012014:	08016a10 	.word	0x08016a10
 8012018:	08012159 	.word	0x08012159
 801201c:	200010c4 	.word	0x200010c4

08012020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08a      	sub	sp, #40	@ 0x28
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
 801202c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801202e:	2300      	movs	r3, #0
 8012030:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d10b      	bne.n	8012050 <xTimerGenericCommand+0x30>
	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	623b      	str	r3, [r7, #32]
}
 801204a:	bf00      	nop
 801204c:	bf00      	nop
 801204e:	e7fd      	b.n	801204c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012050:	4b19      	ldr	r3, [pc, #100]	@ (80120b8 <xTimerGenericCommand+0x98>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d02a      	beq.n	80120ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b05      	cmp	r3, #5
 8012068:	dc18      	bgt.n	801209c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801206a:	f7ff fdad 	bl	8011bc8 <xTaskGetSchedulerState>
 801206e:	4603      	mov	r3, r0
 8012070:	2b02      	cmp	r3, #2
 8012072:	d109      	bne.n	8012088 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012074:	4b10      	ldr	r3, [pc, #64]	@ (80120b8 <xTimerGenericCommand+0x98>)
 8012076:	6818      	ldr	r0, [r3, #0]
 8012078:	f107 0110 	add.w	r1, r7, #16
 801207c:	2300      	movs	r3, #0
 801207e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012080:	f7fe f92e 	bl	80102e0 <xQueueGenericSend>
 8012084:	6278      	str	r0, [r7, #36]	@ 0x24
 8012086:	e012      	b.n	80120ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012088:	4b0b      	ldr	r3, [pc, #44]	@ (80120b8 <xTimerGenericCommand+0x98>)
 801208a:	6818      	ldr	r0, [r3, #0]
 801208c:	f107 0110 	add.w	r1, r7, #16
 8012090:	2300      	movs	r3, #0
 8012092:	2200      	movs	r2, #0
 8012094:	f7fe f924 	bl	80102e0 <xQueueGenericSend>
 8012098:	6278      	str	r0, [r7, #36]	@ 0x24
 801209a:	e008      	b.n	80120ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801209c:	4b06      	ldr	r3, [pc, #24]	@ (80120b8 <xTimerGenericCommand+0x98>)
 801209e:	6818      	ldr	r0, [r3, #0]
 80120a0:	f107 0110 	add.w	r1, r7, #16
 80120a4:	2300      	movs	r3, #0
 80120a6:	683a      	ldr	r2, [r7, #0]
 80120a8:	f7fe fa1c 	bl	80104e4 <xQueueGenericSendFromISR>
 80120ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80120ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3728      	adds	r7, #40	@ 0x28
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	200010c0 	.word	0x200010c0

080120bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b088      	sub	sp, #32
 80120c0:	af02      	add	r7, sp, #8
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120c6:	4b23      	ldr	r3, [pc, #140]	@ (8012154 <prvProcessExpiredTimer+0x98>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	3304      	adds	r3, #4
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7fd ff61 	bl	800ff9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120e0:	f003 0304 	and.w	r3, r3, #4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d023      	beq.n	8012130 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	699a      	ldr	r2, [r3, #24]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	18d1      	adds	r1, r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	6978      	ldr	r0, [r7, #20]
 80120f6:	f000 f8d5 	bl	80122a4 <prvInsertTimerInActiveList>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d020      	beq.n	8012142 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012100:	2300      	movs	r3, #0
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	2300      	movs	r3, #0
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	2100      	movs	r1, #0
 801210a:	6978      	ldr	r0, [r7, #20]
 801210c:	f7ff ff88 	bl	8012020 <xTimerGenericCommand>
 8012110:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d114      	bne.n	8012142 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	60fb      	str	r3, [r7, #12]
}
 801212a:	bf00      	nop
 801212c:	bf00      	nop
 801212e:	e7fd      	b.n	801212c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012136:	f023 0301 	bic.w	r3, r3, #1
 801213a:	b2da      	uxtb	r2, r3
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	6a1b      	ldr	r3, [r3, #32]
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	4798      	blx	r3
}
 801214a:	bf00      	nop
 801214c:	3718      	adds	r7, #24
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	200010b8 	.word	0x200010b8

08012158 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012160:	f107 0308 	add.w	r3, r7, #8
 8012164:	4618      	mov	r0, r3
 8012166:	f000 f859 	bl	801221c <prvGetNextExpireTime>
 801216a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	4619      	mov	r1, r3
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f000 f805 	bl	8012180 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012176:	f000 f8d7 	bl	8012328 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801217a:	bf00      	nop
 801217c:	e7f0      	b.n	8012160 <prvTimerTask+0x8>
	...

08012180 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801218a:	f7ff f929 	bl	80113e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801218e:	f107 0308 	add.w	r3, r7, #8
 8012192:	4618      	mov	r0, r3
 8012194:	f000 f866 	bl	8012264 <prvSampleTimeNow>
 8012198:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d130      	bne.n	8012202 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d10a      	bne.n	80121bc <prvProcessTimerOrBlockTask+0x3c>
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d806      	bhi.n	80121bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80121ae:	f7ff f925 	bl	80113fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80121b2:	68f9      	ldr	r1, [r7, #12]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff ff81 	bl	80120bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80121ba:	e024      	b.n	8012206 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d008      	beq.n	80121d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80121c2:	4b13      	ldr	r3, [pc, #76]	@ (8012210 <prvProcessTimerOrBlockTask+0x90>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d101      	bne.n	80121d0 <prvProcessTimerOrBlockTask+0x50>
 80121cc:	2301      	movs	r3, #1
 80121ce:	e000      	b.n	80121d2 <prvProcessTimerOrBlockTask+0x52>
 80121d0:	2300      	movs	r3, #0
 80121d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80121d4:	4b0f      	ldr	r3, [pc, #60]	@ (8012214 <prvProcessTimerOrBlockTask+0x94>)
 80121d6:	6818      	ldr	r0, [r3, #0]
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	4619      	mov	r1, r3
 80121e2:	f7fe fdf1 	bl	8010dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80121e6:	f7ff f909 	bl	80113fc <xTaskResumeAll>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10a      	bne.n	8012206 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80121f0:	4b09      	ldr	r3, [pc, #36]	@ (8012218 <prvProcessTimerOrBlockTask+0x98>)
 80121f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121f6:	601a      	str	r2, [r3, #0]
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	f3bf 8f6f 	isb	sy
}
 8012200:	e001      	b.n	8012206 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012202:	f7ff f8fb 	bl	80113fc <xTaskResumeAll>
}
 8012206:	bf00      	nop
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	200010bc 	.word	0x200010bc
 8012214:	200010c0 	.word	0x200010c0
 8012218:	e000ed04 	.word	0xe000ed04

0801221c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801221c:	b480      	push	{r7}
 801221e:	b085      	sub	sp, #20
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012224:	4b0e      	ldr	r3, [pc, #56]	@ (8012260 <prvGetNextExpireTime+0x44>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d101      	bne.n	8012232 <prvGetNextExpireTime+0x16>
 801222e:	2201      	movs	r2, #1
 8012230:	e000      	b.n	8012234 <prvGetNextExpireTime+0x18>
 8012232:	2200      	movs	r2, #0
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d105      	bne.n	801224c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012240:	4b07      	ldr	r3, [pc, #28]	@ (8012260 <prvGetNextExpireTime+0x44>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	60fb      	str	r3, [r7, #12]
 801224a:	e001      	b.n	8012250 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801224c:	2300      	movs	r3, #0
 801224e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012250:	68fb      	ldr	r3, [r7, #12]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3714      	adds	r7, #20
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	200010b8 	.word	0x200010b8

08012264 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801226c:	f7ff f964 	bl	8011538 <xTaskGetTickCount>
 8012270:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012272:	4b0b      	ldr	r3, [pc, #44]	@ (80122a0 <prvSampleTimeNow+0x3c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	429a      	cmp	r2, r3
 801227a:	d205      	bcs.n	8012288 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801227c:	f000 f93a 	bl	80124f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2201      	movs	r2, #1
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	e002      	b.n	801228e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801228e:	4a04      	ldr	r2, [pc, #16]	@ (80122a0 <prvSampleTimeNow+0x3c>)
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012294:	68fb      	ldr	r3, [r7, #12]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	200010c8 	.word	0x200010c8

080122a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
 80122b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80122b2:	2300      	movs	r3, #0
 80122b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80122c2:	68ba      	ldr	r2, [r7, #8]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d812      	bhi.n	80122f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	1ad2      	subs	r2, r2, r3
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	699b      	ldr	r3, [r3, #24]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d302      	bcc.n	80122de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80122d8:	2301      	movs	r3, #1
 80122da:	617b      	str	r3, [r7, #20]
 80122dc:	e01b      	b.n	8012316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80122de:	4b10      	ldr	r3, [pc, #64]	@ (8012320 <prvInsertTimerInActiveList+0x7c>)
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	3304      	adds	r3, #4
 80122e6:	4619      	mov	r1, r3
 80122e8:	4610      	mov	r0, r2
 80122ea:	f7fd fe1e 	bl	800ff2a <vListInsert>
 80122ee:	e012      	b.n	8012316 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d206      	bcs.n	8012306 <prvInsertTimerInActiveList+0x62>
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d302      	bcc.n	8012306 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012300:	2301      	movs	r3, #1
 8012302:	617b      	str	r3, [r7, #20]
 8012304:	e007      	b.n	8012316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012306:	4b07      	ldr	r3, [pc, #28]	@ (8012324 <prvInsertTimerInActiveList+0x80>)
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	3304      	adds	r3, #4
 801230e:	4619      	mov	r1, r3
 8012310:	4610      	mov	r0, r2
 8012312:	f7fd fe0a 	bl	800ff2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012316:	697b      	ldr	r3, [r7, #20]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3718      	adds	r7, #24
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	200010bc 	.word	0x200010bc
 8012324:	200010b8 	.word	0x200010b8

08012328 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b08e      	sub	sp, #56	@ 0x38
 801232c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801232e:	e0ce      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	da19      	bge.n	801236a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012336:	1d3b      	adds	r3, r7, #4
 8012338:	3304      	adds	r3, #4
 801233a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801233c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10b      	bne.n	801235a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012346:	f383 8811 	msr	BASEPRI, r3
 801234a:	f3bf 8f6f 	isb	sy
 801234e:	f3bf 8f4f 	dsb	sy
 8012352:	61fb      	str	r3, [r7, #28]
}
 8012354:	bf00      	nop
 8012356:	bf00      	nop
 8012358:	e7fd      	b.n	8012356 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012360:	6850      	ldr	r0, [r2, #4]
 8012362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012364:	6892      	ldr	r2, [r2, #8]
 8012366:	4611      	mov	r1, r2
 8012368:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	f2c0 80ae 	blt.w	80124ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012378:	695b      	ldr	r3, [r3, #20]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d004      	beq.n	8012388 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012380:	3304      	adds	r3, #4
 8012382:	4618      	mov	r0, r3
 8012384:	f7fd fe0a 	bl	800ff9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012388:	463b      	mov	r3, r7
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff ff6a 	bl	8012264 <prvSampleTimeNow>
 8012390:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b09      	cmp	r3, #9
 8012396:	f200 8097 	bhi.w	80124c8 <prvProcessReceivedCommands+0x1a0>
 801239a:	a201      	add	r2, pc, #4	@ (adr r2, 80123a0 <prvProcessReceivedCommands+0x78>)
 801239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a0:	080123c9 	.word	0x080123c9
 80123a4:	080123c9 	.word	0x080123c9
 80123a8:	080123c9 	.word	0x080123c9
 80123ac:	0801243f 	.word	0x0801243f
 80123b0:	08012453 	.word	0x08012453
 80123b4:	0801249f 	.word	0x0801249f
 80123b8:	080123c9 	.word	0x080123c9
 80123bc:	080123c9 	.word	0x080123c9
 80123c0:	0801243f 	.word	0x0801243f
 80123c4:	08012453 	.word	0x08012453
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80123c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80123ce:	f043 0301 	orr.w	r3, r3, #1
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123de:	699b      	ldr	r3, [r3, #24]
 80123e0:	18d1      	adds	r1, r2, r3
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123e8:	f7ff ff5c 	bl	80122a4 <prvInsertTimerInActiveList>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d06c      	beq.n	80124cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012400:	f003 0304 	and.w	r3, r3, #4
 8012404:	2b00      	cmp	r3, #0
 8012406:	d061      	beq.n	80124cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012408:	68ba      	ldr	r2, [r7, #8]
 801240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240c:	699b      	ldr	r3, [r3, #24]
 801240e:	441a      	add	r2, r3
 8012410:	2300      	movs	r3, #0
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	2300      	movs	r3, #0
 8012416:	2100      	movs	r1, #0
 8012418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801241a:	f7ff fe01 	bl	8012020 <xTimerGenericCommand>
 801241e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012420:	6a3b      	ldr	r3, [r7, #32]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d152      	bne.n	80124cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8012426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	61bb      	str	r3, [r7, #24]
}
 8012438:	bf00      	nop
 801243a:	bf00      	nop
 801243c:	e7fd      	b.n	801243a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012444:	f023 0301 	bic.w	r3, r3, #1
 8012448:	b2da      	uxtb	r2, r3
 801244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801244c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012450:	e03d      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012458:	f043 0301 	orr.w	r3, r3, #1
 801245c:	b2da      	uxtb	r2, r3
 801245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012464:	68ba      	ldr	r2, [r7, #8]
 8012466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012468:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801246c:	699b      	ldr	r3, [r3, #24]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d10b      	bne.n	801248a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012476:	f383 8811 	msr	BASEPRI, r3
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	f3bf 8f4f 	dsb	sy
 8012482:	617b      	str	r3, [r7, #20]
}
 8012484:	bf00      	nop
 8012486:	bf00      	nop
 8012488:	e7fd      	b.n	8012486 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801248c:	699a      	ldr	r2, [r3, #24]
 801248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012490:	18d1      	adds	r1, r2, r3
 8012492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012498:	f7ff ff04 	bl	80122a4 <prvInsertTimerInActiveList>
					break;
 801249c:	e017      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80124a4:	f003 0302 	and.w	r3, r3, #2
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d103      	bne.n	80124b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80124ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124ae:	f000 fbeb 	bl	8012c88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80124b2:	e00c      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80124ba:	f023 0301 	bic.w	r3, r3, #1
 80124be:	b2da      	uxtb	r2, r3
 80124c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80124c6:	e002      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80124c8:	bf00      	nop
 80124ca:	e000      	b.n	80124ce <prvProcessReceivedCommands+0x1a6>
					break;
 80124cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124ce:	4b08      	ldr	r3, [pc, #32]	@ (80124f0 <prvProcessReceivedCommands+0x1c8>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	1d39      	adds	r1, r7, #4
 80124d4:	2200      	movs	r2, #0
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7fe f932 	bl	8010740 <xQueueReceive>
 80124dc:	4603      	mov	r3, r0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f47f af26 	bne.w	8012330 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80124e4:	bf00      	nop
 80124e6:	bf00      	nop
 80124e8:	3730      	adds	r7, #48	@ 0x30
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	200010c0 	.word	0x200010c0

080124f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80124fa:	e049      	b.n	8012590 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80124fc:	4b2e      	ldr	r3, [pc, #184]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012506:	4b2c      	ldr	r3, [pc, #176]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	3304      	adds	r3, #4
 8012514:	4618      	mov	r0, r3
 8012516:	f7fd fd41 	bl	800ff9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	6a1b      	ldr	r3, [r3, #32]
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012528:	f003 0304 	and.w	r3, r3, #4
 801252c:	2b00      	cmp	r3, #0
 801252e:	d02f      	beq.n	8012590 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	699b      	ldr	r3, [r3, #24]
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	4413      	add	r3, r2
 8012538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	429a      	cmp	r2, r3
 8012540:	d90e      	bls.n	8012560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	68ba      	ldr	r2, [r7, #8]
 8012546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801254e:	4b1a      	ldr	r3, [pc, #104]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	3304      	adds	r3, #4
 8012556:	4619      	mov	r1, r3
 8012558:	4610      	mov	r0, r2
 801255a:	f7fd fce6 	bl	800ff2a <vListInsert>
 801255e:	e017      	b.n	8012590 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012560:	2300      	movs	r3, #0
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	2300      	movs	r3, #0
 8012566:	693a      	ldr	r2, [r7, #16]
 8012568:	2100      	movs	r1, #0
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ff fd58 	bl	8012020 <xTimerGenericCommand>
 8012570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d10b      	bne.n	8012590 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257c:	f383 8811 	msr	BASEPRI, r3
 8012580:	f3bf 8f6f 	isb	sy
 8012584:	f3bf 8f4f 	dsb	sy
 8012588:	603b      	str	r3, [r7, #0]
}
 801258a:	bf00      	nop
 801258c:	bf00      	nop
 801258e:	e7fd      	b.n	801258c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012590:	4b09      	ldr	r3, [pc, #36]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1b0      	bne.n	80124fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801259a:	4b07      	ldr	r3, [pc, #28]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125a0:	4b06      	ldr	r3, [pc, #24]	@ (80125bc <prvSwitchTimerLists+0xc8>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a04      	ldr	r2, [pc, #16]	@ (80125b8 <prvSwitchTimerLists+0xc4>)
 80125a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125a8:	4a04      	ldr	r2, [pc, #16]	@ (80125bc <prvSwitchTimerLists+0xc8>)
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	6013      	str	r3, [r2, #0]
}
 80125ae:	bf00      	nop
 80125b0:	3718      	adds	r7, #24
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	200010b8 	.word	0x200010b8
 80125bc:	200010bc 	.word	0x200010bc

080125c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80125c6:	f000 f96f 	bl	80128a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80125ca:	4b15      	ldr	r3, [pc, #84]	@ (8012620 <prvCheckForValidListAndQueue+0x60>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d120      	bne.n	8012614 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80125d2:	4814      	ldr	r0, [pc, #80]	@ (8012624 <prvCheckForValidListAndQueue+0x64>)
 80125d4:	f7fd fc58 	bl	800fe88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80125d8:	4813      	ldr	r0, [pc, #76]	@ (8012628 <prvCheckForValidListAndQueue+0x68>)
 80125da:	f7fd fc55 	bl	800fe88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80125de:	4b13      	ldr	r3, [pc, #76]	@ (801262c <prvCheckForValidListAndQueue+0x6c>)
 80125e0:	4a10      	ldr	r2, [pc, #64]	@ (8012624 <prvCheckForValidListAndQueue+0x64>)
 80125e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80125e4:	4b12      	ldr	r3, [pc, #72]	@ (8012630 <prvCheckForValidListAndQueue+0x70>)
 80125e6:	4a10      	ldr	r2, [pc, #64]	@ (8012628 <prvCheckForValidListAndQueue+0x68>)
 80125e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80125ea:	2300      	movs	r3, #0
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	4b11      	ldr	r3, [pc, #68]	@ (8012634 <prvCheckForValidListAndQueue+0x74>)
 80125f0:	4a11      	ldr	r2, [pc, #68]	@ (8012638 <prvCheckForValidListAndQueue+0x78>)
 80125f2:	2110      	movs	r1, #16
 80125f4:	200a      	movs	r0, #10
 80125f6:	f7fd fd65 	bl	80100c4 <xQueueGenericCreateStatic>
 80125fa:	4603      	mov	r3, r0
 80125fc:	4a08      	ldr	r2, [pc, #32]	@ (8012620 <prvCheckForValidListAndQueue+0x60>)
 80125fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012600:	4b07      	ldr	r3, [pc, #28]	@ (8012620 <prvCheckForValidListAndQueue+0x60>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d005      	beq.n	8012614 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012608:	4b05      	ldr	r3, [pc, #20]	@ (8012620 <prvCheckForValidListAndQueue+0x60>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	490b      	ldr	r1, [pc, #44]	@ (801263c <prvCheckForValidListAndQueue+0x7c>)
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fbb0 	bl	8010d74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012614:	f000 f97a 	bl	801290c <vPortExitCritical>
}
 8012618:	bf00      	nop
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	200010c0 	.word	0x200010c0
 8012624:	20001090 	.word	0x20001090
 8012628:	200010a4 	.word	0x200010a4
 801262c:	200010b8 	.word	0x200010b8
 8012630:	200010bc 	.word	0x200010bc
 8012634:	2000116c 	.word	0x2000116c
 8012638:	200010cc 	.word	0x200010cc
 801263c:	08016a18 	.word	0x08016a18

08012640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	3b04      	subs	r3, #4
 8012650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	3b04      	subs	r3, #4
 801265e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	f023 0201 	bic.w	r2, r3, #1
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	3b04      	subs	r3, #4
 801266e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012670:	4a0c      	ldr	r2, [pc, #48]	@ (80126a4 <pxPortInitialiseStack+0x64>)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	3b14      	subs	r3, #20
 801267a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	3b04      	subs	r3, #4
 8012686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f06f 0202 	mvn.w	r2, #2
 801268e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	3b20      	subs	r3, #32
 8012694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012696:	68fb      	ldr	r3, [r7, #12]
}
 8012698:	4618      	mov	r0, r3
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr
 80126a4:	080126a9 	.word	0x080126a9

080126a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126ae:	2300      	movs	r3, #0
 80126b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126b2:	4b13      	ldr	r3, [pc, #76]	@ (8012700 <prvTaskExitError+0x58>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ba:	d00b      	beq.n	80126d4 <prvTaskExitError+0x2c>
	__asm volatile
 80126bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	60fb      	str	r3, [r7, #12]
}
 80126ce:	bf00      	nop
 80126d0:	bf00      	nop
 80126d2:	e7fd      	b.n	80126d0 <prvTaskExitError+0x28>
	__asm volatile
 80126d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	60bb      	str	r3, [r7, #8]
}
 80126e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126e8:	bf00      	nop
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d0fc      	beq.n	80126ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126f0:	bf00      	nop
 80126f2:	bf00      	nop
 80126f4:	3714      	adds	r7, #20
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	2000009c 	.word	0x2000009c
	...

08012710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012710:	4b07      	ldr	r3, [pc, #28]	@ (8012730 <pxCurrentTCBConst2>)
 8012712:	6819      	ldr	r1, [r3, #0]
 8012714:	6808      	ldr	r0, [r1, #0]
 8012716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271a:	f380 8809 	msr	PSP, r0
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f04f 0000 	mov.w	r0, #0
 8012726:	f380 8811 	msr	BASEPRI, r0
 801272a:	4770      	bx	lr
 801272c:	f3af 8000 	nop.w

08012730 <pxCurrentTCBConst2>:
 8012730:	20000b90 	.word	0x20000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012734:	bf00      	nop
 8012736:	bf00      	nop

08012738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012738:	4808      	ldr	r0, [pc, #32]	@ (801275c <prvPortStartFirstTask+0x24>)
 801273a:	6800      	ldr	r0, [r0, #0]
 801273c:	6800      	ldr	r0, [r0, #0]
 801273e:	f380 8808 	msr	MSP, r0
 8012742:	f04f 0000 	mov.w	r0, #0
 8012746:	f380 8814 	msr	CONTROL, r0
 801274a:	b662      	cpsie	i
 801274c:	b661      	cpsie	f
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	df00      	svc	0
 8012758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801275a:	bf00      	nop
 801275c:	e000ed08 	.word	0xe000ed08

08012760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012766:	4b47      	ldr	r3, [pc, #284]	@ (8012884 <xPortStartScheduler+0x124>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a47      	ldr	r2, [pc, #284]	@ (8012888 <xPortStartScheduler+0x128>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d10b      	bne.n	8012788 <xPortStartScheduler+0x28>
	__asm volatile
 8012770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	613b      	str	r3, [r7, #16]
}
 8012782:	bf00      	nop
 8012784:	bf00      	nop
 8012786:	e7fd      	b.n	8012784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012788:	4b3e      	ldr	r3, [pc, #248]	@ (8012884 <xPortStartScheduler+0x124>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a3f      	ldr	r2, [pc, #252]	@ (801288c <xPortStartScheduler+0x12c>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d10b      	bne.n	80127aa <xPortStartScheduler+0x4a>
	__asm volatile
 8012792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	60fb      	str	r3, [r7, #12]
}
 80127a4:	bf00      	nop
 80127a6:	bf00      	nop
 80127a8:	e7fd      	b.n	80127a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127aa:	4b39      	ldr	r3, [pc, #228]	@ (8012890 <xPortStartScheduler+0x130>)
 80127ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	22ff      	movs	r2, #255	@ 0xff
 80127ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127c4:	78fb      	ldrb	r3, [r7, #3]
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80127cc:	b2da      	uxtb	r2, r3
 80127ce:	4b31      	ldr	r3, [pc, #196]	@ (8012894 <xPortStartScheduler+0x134>)
 80127d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127d2:	4b31      	ldr	r3, [pc, #196]	@ (8012898 <xPortStartScheduler+0x138>)
 80127d4:	2207      	movs	r2, #7
 80127d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127d8:	e009      	b.n	80127ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80127da:	4b2f      	ldr	r3, [pc, #188]	@ (8012898 <xPortStartScheduler+0x138>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	3b01      	subs	r3, #1
 80127e0:	4a2d      	ldr	r2, [pc, #180]	@ (8012898 <xPortStartScheduler+0x138>)
 80127e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80127e4:	78fb      	ldrb	r3, [r7, #3]
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	005b      	lsls	r3, r3, #1
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127ee:	78fb      	ldrb	r3, [r7, #3]
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80127f6:	2b80      	cmp	r3, #128	@ 0x80
 80127f8:	d0ef      	beq.n	80127da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80127fa:	4b27      	ldr	r3, [pc, #156]	@ (8012898 <xPortStartScheduler+0x138>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f1c3 0307 	rsb	r3, r3, #7
 8012802:	2b04      	cmp	r3, #4
 8012804:	d00b      	beq.n	801281e <xPortStartScheduler+0xbe>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	60bb      	str	r3, [r7, #8]
}
 8012818:	bf00      	nop
 801281a:	bf00      	nop
 801281c:	e7fd      	b.n	801281a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801281e:	4b1e      	ldr	r3, [pc, #120]	@ (8012898 <xPortStartScheduler+0x138>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	4a1c      	ldr	r2, [pc, #112]	@ (8012898 <xPortStartScheduler+0x138>)
 8012826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012828:	4b1b      	ldr	r3, [pc, #108]	@ (8012898 <xPortStartScheduler+0x138>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012830:	4a19      	ldr	r2, [pc, #100]	@ (8012898 <xPortStartScheduler+0x138>)
 8012832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	b2da      	uxtb	r2, r3
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801283c:	4b17      	ldr	r3, [pc, #92]	@ (801289c <xPortStartScheduler+0x13c>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a16      	ldr	r2, [pc, #88]	@ (801289c <xPortStartScheduler+0x13c>)
 8012842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012848:	4b14      	ldr	r3, [pc, #80]	@ (801289c <xPortStartScheduler+0x13c>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a13      	ldr	r2, [pc, #76]	@ (801289c <xPortStartScheduler+0x13c>)
 801284e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012854:	f000 f8da 	bl	8012a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012858:	4b11      	ldr	r3, [pc, #68]	@ (80128a0 <xPortStartScheduler+0x140>)
 801285a:	2200      	movs	r2, #0
 801285c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801285e:	f000 f8f9 	bl	8012a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012862:	4b10      	ldr	r3, [pc, #64]	@ (80128a4 <xPortStartScheduler+0x144>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a0f      	ldr	r2, [pc, #60]	@ (80128a4 <xPortStartScheduler+0x144>)
 8012868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801286c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801286e:	f7ff ff63 	bl	8012738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012872:	f7fe ff2b 	bl	80116cc <vTaskSwitchContext>
	prvTaskExitError();
 8012876:	f7ff ff17 	bl	80126a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801287a:	2300      	movs	r3, #0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	e000ed00 	.word	0xe000ed00
 8012888:	410fc271 	.word	0x410fc271
 801288c:	410fc270 	.word	0x410fc270
 8012890:	e000e400 	.word	0xe000e400
 8012894:	200011bc 	.word	0x200011bc
 8012898:	200011c0 	.word	0x200011c0
 801289c:	e000ed20 	.word	0xe000ed20
 80128a0:	2000009c 	.word	0x2000009c
 80128a4:	e000ef34 	.word	0xe000ef34

080128a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	607b      	str	r3, [r7, #4]
}
 80128c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128c2:	4b10      	ldr	r3, [pc, #64]	@ (8012904 <vPortEnterCritical+0x5c>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	3301      	adds	r3, #1
 80128c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012904 <vPortEnterCritical+0x5c>)
 80128ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128cc:	4b0d      	ldr	r3, [pc, #52]	@ (8012904 <vPortEnterCritical+0x5c>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d110      	bne.n	80128f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012908 <vPortEnterCritical+0x60>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00b      	beq.n	80128f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80128de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128e2:	f383 8811 	msr	BASEPRI, r3
 80128e6:	f3bf 8f6f 	isb	sy
 80128ea:	f3bf 8f4f 	dsb	sy
 80128ee:	603b      	str	r3, [r7, #0]
}
 80128f0:	bf00      	nop
 80128f2:	bf00      	nop
 80128f4:	e7fd      	b.n	80128f2 <vPortEnterCritical+0x4a>
	}
}
 80128f6:	bf00      	nop
 80128f8:	370c      	adds	r7, #12
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	2000009c 	.word	0x2000009c
 8012908:	e000ed04 	.word	0xe000ed04

0801290c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012912:	4b12      	ldr	r3, [pc, #72]	@ (801295c <vPortExitCritical+0x50>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d10b      	bne.n	8012932 <vPortExitCritical+0x26>
	__asm volatile
 801291a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	607b      	str	r3, [r7, #4]
}
 801292c:	bf00      	nop
 801292e:	bf00      	nop
 8012930:	e7fd      	b.n	801292e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012932:	4b0a      	ldr	r3, [pc, #40]	@ (801295c <vPortExitCritical+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3b01      	subs	r3, #1
 8012938:	4a08      	ldr	r2, [pc, #32]	@ (801295c <vPortExitCritical+0x50>)
 801293a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801293c:	4b07      	ldr	r3, [pc, #28]	@ (801295c <vPortExitCritical+0x50>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d105      	bne.n	8012950 <vPortExitCritical+0x44>
 8012944:	2300      	movs	r3, #0
 8012946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	f383 8811 	msr	BASEPRI, r3
}
 801294e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012950:	bf00      	nop
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	2000009c 	.word	0x2000009c

08012960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012960:	f3ef 8009 	mrs	r0, PSP
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	4b15      	ldr	r3, [pc, #84]	@ (80129c0 <pxCurrentTCBConst>)
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	f01e 0f10 	tst.w	lr, #16
 8012970:	bf08      	it	eq
 8012972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297a:	6010      	str	r0, [r2, #0]
 801297c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012984:	f380 8811 	msr	BASEPRI, r0
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f7fe fe9c 	bl	80116cc <vTaskSwitchContext>
 8012994:	f04f 0000 	mov.w	r0, #0
 8012998:	f380 8811 	msr	BASEPRI, r0
 801299c:	bc09      	pop	{r0, r3}
 801299e:	6819      	ldr	r1, [r3, #0]
 80129a0:	6808      	ldr	r0, [r1, #0]
 80129a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a6:	f01e 0f10 	tst.w	lr, #16
 80129aa:	bf08      	it	eq
 80129ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129b0:	f380 8809 	msr	PSP, r0
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	f3af 8000 	nop.w

080129c0 <pxCurrentTCBConst>:
 80129c0:	20000b90 	.word	0x20000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop

080129c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
	__asm volatile
 80129ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	607b      	str	r3, [r7, #4]
}
 80129e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80129e2:	f7fe fdb9 	bl	8011558 <xTaskIncrementTick>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129ec:	4b06      	ldr	r3, [pc, #24]	@ (8012a08 <xPortSysTickHandler+0x40>)
 80129ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	2300      	movs	r3, #0
 80129f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	f383 8811 	msr	BASEPRI, r3
}
 80129fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a00:	bf00      	nop
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	e000ed04 	.word	0xe000ed04

08012a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a10:	4b0b      	ldr	r3, [pc, #44]	@ (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a16:	4b0b      	ldr	r3, [pc, #44]	@ (8012a44 <vPortSetupTimerInterrupt+0x38>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a48 <vPortSetupTimerInterrupt+0x3c>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a0a      	ldr	r2, [pc, #40]	@ (8012a4c <vPortSetupTimerInterrupt+0x40>)
 8012a22:	fba2 2303 	umull	r2, r3, r2, r3
 8012a26:	099b      	lsrs	r3, r3, #6
 8012a28:	4a09      	ldr	r2, [pc, #36]	@ (8012a50 <vPortSetupTimerInterrupt+0x44>)
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a2e:	4b04      	ldr	r3, [pc, #16]	@ (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a30:	2207      	movs	r2, #7
 8012a32:	601a      	str	r2, [r3, #0]
}
 8012a34:	bf00      	nop
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	e000e010 	.word	0xe000e010
 8012a44:	e000e018 	.word	0xe000e018
 8012a48:	20000004 	.word	0x20000004
 8012a4c:	10624dd3 	.word	0x10624dd3
 8012a50:	e000e014 	.word	0xe000e014

08012a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012a64 <vPortEnableVFP+0x10>
 8012a58:	6801      	ldr	r1, [r0, #0]
 8012a5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012a5e:	6001      	str	r1, [r0, #0]
 8012a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a62:	bf00      	nop
 8012a64:	e000ed88 	.word	0xe000ed88

08012a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a6e:	f3ef 8305 	mrs	r3, IPSR
 8012a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2b0f      	cmp	r3, #15
 8012a78:	d915      	bls.n	8012aa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a7a:	4a18      	ldr	r2, [pc, #96]	@ (8012adc <vPortValidateInterruptPriority+0x74>)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4413      	add	r3, r2
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a84:	4b16      	ldr	r3, [pc, #88]	@ (8012ae0 <vPortValidateInterruptPriority+0x78>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	7afa      	ldrb	r2, [r7, #11]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d20b      	bcs.n	8012aa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	607b      	str	r3, [r7, #4]
}
 8012aa0:	bf00      	nop
 8012aa2:	bf00      	nop
 8012aa4:	e7fd      	b.n	8012aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8012ae4 <vPortValidateInterruptPriority+0x7c>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012aae:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae8 <vPortValidateInterruptPriority+0x80>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d90b      	bls.n	8012ace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aba:	f383 8811 	msr	BASEPRI, r3
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	603b      	str	r3, [r7, #0]
}
 8012ac8:	bf00      	nop
 8012aca:	bf00      	nop
 8012acc:	e7fd      	b.n	8012aca <vPortValidateInterruptPriority+0x62>
	}
 8012ace:	bf00      	nop
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	e000e3f0 	.word	0xe000e3f0
 8012ae0:	200011bc 	.word	0x200011bc
 8012ae4:	e000ed0c 	.word	0xe000ed0c
 8012ae8:	200011c0 	.word	0x200011c0

08012aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08a      	sub	sp, #40	@ 0x28
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012af8:	f7fe fc72 	bl	80113e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012afc:	4b5c      	ldr	r3, [pc, #368]	@ (8012c70 <pvPortMalloc+0x184>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d101      	bne.n	8012b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b04:	f000 f924 	bl	8012d50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b08:	4b5a      	ldr	r3, [pc, #360]	@ (8012c74 <pvPortMalloc+0x188>)
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4013      	ands	r3, r2
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f040 8095 	bne.w	8012c40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d01e      	beq.n	8012b5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012b1c:	2208      	movs	r2, #8
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4413      	add	r3, r2
 8012b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f003 0307 	and.w	r3, r3, #7
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d015      	beq.n	8012b5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f023 0307 	bic.w	r3, r3, #7
 8012b34:	3308      	adds	r3, #8
 8012b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f003 0307 	and.w	r3, r3, #7
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00b      	beq.n	8012b5a <pvPortMalloc+0x6e>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	617b      	str	r3, [r7, #20]
}
 8012b54:	bf00      	nop
 8012b56:	bf00      	nop
 8012b58:	e7fd      	b.n	8012b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d06f      	beq.n	8012c40 <pvPortMalloc+0x154>
 8012b60:	4b45      	ldr	r3, [pc, #276]	@ (8012c78 <pvPortMalloc+0x18c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d86a      	bhi.n	8012c40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b6a:	4b44      	ldr	r3, [pc, #272]	@ (8012c7c <pvPortMalloc+0x190>)
 8012b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b6e:	4b43      	ldr	r3, [pc, #268]	@ (8012c7c <pvPortMalloc+0x190>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b74:	e004      	b.n	8012b80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d903      	bls.n	8012b92 <pvPortMalloc+0xa6>
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1f1      	bne.n	8012b76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b92:	4b37      	ldr	r3, [pc, #220]	@ (8012c70 <pvPortMalloc+0x184>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d051      	beq.n	8012c40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b9c:	6a3b      	ldr	r3, [r7, #32]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2208      	movs	r2, #8
 8012ba2:	4413      	add	r3, r2
 8012ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	6a3b      	ldr	r3, [r7, #32]
 8012bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb0:	685a      	ldr	r2, [r3, #4]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	1ad2      	subs	r2, r2, r3
 8012bb6:	2308      	movs	r3, #8
 8012bb8:	005b      	lsls	r3, r3, #1
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d920      	bls.n	8012c00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	f003 0307 	and.w	r3, r3, #7
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d00b      	beq.n	8012be8 <pvPortMalloc+0xfc>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	613b      	str	r3, [r7, #16]
}
 8012be2:	bf00      	nop
 8012be4:	bf00      	nop
 8012be6:	e7fd      	b.n	8012be4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bea:	685a      	ldr	r2, [r3, #4]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	1ad2      	subs	r2, r2, r3
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012bfa:	69b8      	ldr	r0, [r7, #24]
 8012bfc:	f000 f90a 	bl	8012e14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c00:	4b1d      	ldr	r3, [pc, #116]	@ (8012c78 <pvPortMalloc+0x18c>)
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	1ad3      	subs	r3, r2, r3
 8012c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8012c78 <pvPortMalloc+0x18c>)
 8012c0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8012c78 <pvPortMalloc+0x18c>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	4b1b      	ldr	r3, [pc, #108]	@ (8012c80 <pvPortMalloc+0x194>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d203      	bcs.n	8012c22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c1a:	4b17      	ldr	r3, [pc, #92]	@ (8012c78 <pvPortMalloc+0x18c>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4a18      	ldr	r2, [pc, #96]	@ (8012c80 <pvPortMalloc+0x194>)
 8012c20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c24:	685a      	ldr	r2, [r3, #4]
 8012c26:	4b13      	ldr	r3, [pc, #76]	@ (8012c74 <pvPortMalloc+0x188>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	431a      	orrs	r2, r3
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c32:	2200      	movs	r2, #0
 8012c34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c36:	4b13      	ldr	r3, [pc, #76]	@ (8012c84 <pvPortMalloc+0x198>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	4a11      	ldr	r2, [pc, #68]	@ (8012c84 <pvPortMalloc+0x198>)
 8012c3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c40:	f7fe fbdc 	bl	80113fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	f003 0307 	and.w	r3, r3, #7
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00b      	beq.n	8012c66 <pvPortMalloc+0x17a>
	__asm volatile
 8012c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	60fb      	str	r3, [r7, #12]
}
 8012c60:	bf00      	nop
 8012c62:	bf00      	nop
 8012c64:	e7fd      	b.n	8012c62 <pvPortMalloc+0x176>
	return pvReturn;
 8012c66:	69fb      	ldr	r3, [r7, #28]
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3728      	adds	r7, #40	@ 0x28
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	20004dcc 	.word	0x20004dcc
 8012c74:	20004de0 	.word	0x20004de0
 8012c78:	20004dd0 	.word	0x20004dd0
 8012c7c:	20004dc4 	.word	0x20004dc4
 8012c80:	20004dd4 	.word	0x20004dd4
 8012c84:	20004dd8 	.word	0x20004dd8

08012c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b086      	sub	sp, #24
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d04f      	beq.n	8012d3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c9a:	2308      	movs	r3, #8
 8012c9c:	425b      	negs	r3, r3
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	685a      	ldr	r2, [r3, #4]
 8012cac:	4b25      	ldr	r3, [pc, #148]	@ (8012d44 <vPortFree+0xbc>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d10b      	bne.n	8012cce <vPortFree+0x46>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cba:	f383 8811 	msr	BASEPRI, r3
 8012cbe:	f3bf 8f6f 	isb	sy
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	60fb      	str	r3, [r7, #12]
}
 8012cc8:	bf00      	nop
 8012cca:	bf00      	nop
 8012ccc:	e7fd      	b.n	8012cca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00b      	beq.n	8012cee <vPortFree+0x66>
	__asm volatile
 8012cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	60bb      	str	r3, [r7, #8]
}
 8012ce8:	bf00      	nop
 8012cea:	bf00      	nop
 8012cec:	e7fd      	b.n	8012cea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	685a      	ldr	r2, [r3, #4]
 8012cf2:	4b14      	ldr	r3, [pc, #80]	@ (8012d44 <vPortFree+0xbc>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4013      	ands	r3, r2
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d01e      	beq.n	8012d3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d11a      	bne.n	8012d3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	4b0e      	ldr	r3, [pc, #56]	@ (8012d44 <vPortFree+0xbc>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	43db      	mvns	r3, r3
 8012d0e:	401a      	ands	r2, r3
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d14:	f7fe fb64 	bl	80113e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	685a      	ldr	r2, [r3, #4]
 8012d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d48 <vPortFree+0xc0>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4413      	add	r3, r2
 8012d22:	4a09      	ldr	r2, [pc, #36]	@ (8012d48 <vPortFree+0xc0>)
 8012d24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d26:	6938      	ldr	r0, [r7, #16]
 8012d28:	f000 f874 	bl	8012e14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d2c:	4b07      	ldr	r3, [pc, #28]	@ (8012d4c <vPortFree+0xc4>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	3301      	adds	r3, #1
 8012d32:	4a06      	ldr	r2, [pc, #24]	@ (8012d4c <vPortFree+0xc4>)
 8012d34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d36:	f7fe fb61 	bl	80113fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d3a:	bf00      	nop
 8012d3c:	3718      	adds	r7, #24
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	20004de0 	.word	0x20004de0
 8012d48:	20004dd0 	.word	0x20004dd0
 8012d4c:	20004ddc 	.word	0x20004ddc

08012d50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d50:	b480      	push	{r7}
 8012d52:	b085      	sub	sp, #20
 8012d54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012d5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d5c:	4b27      	ldr	r3, [pc, #156]	@ (8012dfc <prvHeapInit+0xac>)
 8012d5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f003 0307 	and.w	r3, r3, #7
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00c      	beq.n	8012d84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3307      	adds	r3, #7
 8012d6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f023 0307 	bic.w	r3, r3, #7
 8012d76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	1ad3      	subs	r3, r2, r3
 8012d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8012dfc <prvHeapInit+0xac>)
 8012d80:	4413      	add	r3, r2
 8012d82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d88:	4a1d      	ldr	r2, [pc, #116]	@ (8012e00 <prvHeapInit+0xb0>)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8012e00 <prvHeapInit+0xb0>)
 8012d90:	2200      	movs	r2, #0
 8012d92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	68ba      	ldr	r2, [r7, #8]
 8012d98:	4413      	add	r3, r2
 8012d9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d9c:	2208      	movs	r2, #8
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	1a9b      	subs	r3, r3, r2
 8012da2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f023 0307 	bic.w	r3, r3, #7
 8012daa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	4a15      	ldr	r2, [pc, #84]	@ (8012e04 <prvHeapInit+0xb4>)
 8012db0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012db2:	4b14      	ldr	r3, [pc, #80]	@ (8012e04 <prvHeapInit+0xb4>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	2200      	movs	r2, #0
 8012db8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dba:	4b12      	ldr	r3, [pc, #72]	@ (8012e04 <prvHeapInit+0xb4>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	1ad2      	subs	r2, r2, r3
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8012e04 <prvHeapInit+0xb4>)
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8012e08 <prvHeapInit+0xb8>)
 8012dde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	4a09      	ldr	r2, [pc, #36]	@ (8012e0c <prvHeapInit+0xbc>)
 8012de6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012de8:	4b09      	ldr	r3, [pc, #36]	@ (8012e10 <prvHeapInit+0xc0>)
 8012dea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012dee:	601a      	str	r2, [r3, #0]
}
 8012df0:	bf00      	nop
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	200011c4 	.word	0x200011c4
 8012e00:	20004dc4 	.word	0x20004dc4
 8012e04:	20004dcc 	.word	0x20004dcc
 8012e08:	20004dd4 	.word	0x20004dd4
 8012e0c:	20004dd0 	.word	0x20004dd0
 8012e10:	20004de0 	.word	0x20004de0

08012e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e14:	b480      	push	{r7}
 8012e16:	b085      	sub	sp, #20
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e1c:	4b28      	ldr	r3, [pc, #160]	@ (8012ec0 <prvInsertBlockIntoFreeList+0xac>)
 8012e1e:	60fb      	str	r3, [r7, #12]
 8012e20:	e002      	b.n	8012e28 <prvInsertBlockIntoFreeList+0x14>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	60fb      	str	r3, [r7, #12]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d8f7      	bhi.n	8012e22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d108      	bne.n	8012e56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685a      	ldr	r2, [r3, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	441a      	add	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	68ba      	ldr	r2, [r7, #8]
 8012e60:	441a      	add	r2, r3
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d118      	bne.n	8012e9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	4b15      	ldr	r3, [pc, #84]	@ (8012ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d00d      	beq.n	8012e92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	685a      	ldr	r2, [r3, #4]
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	441a      	add	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	681a      	ldr	r2, [r3, #0]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	601a      	str	r2, [r3, #0]
 8012e90:	e008      	b.n	8012ea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e92:	4b0c      	ldr	r3, [pc, #48]	@ (8012ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	e003      	b.n	8012ea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681a      	ldr	r2, [r3, #0]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d002      	beq.n	8012eb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012eb2:	bf00      	nop
 8012eb4:	3714      	adds	r7, #20
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop
 8012ec0:	20004dc4 	.word	0x20004dc4
 8012ec4:	20004dcc 	.word	0x20004dcc

08012ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012ecc:	2200      	movs	r2, #0
 8012ece:	4912      	ldr	r1, [pc, #72]	@ (8012f18 <MX_USB_DEVICE_Init+0x50>)
 8012ed0:	4812      	ldr	r0, [pc, #72]	@ (8012f1c <MX_USB_DEVICE_Init+0x54>)
 8012ed2:	f7fb fb67 	bl	800e5a4 <USBD_Init>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012edc:	f7f5 f8be 	bl	800805c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012ee0:	490f      	ldr	r1, [pc, #60]	@ (8012f20 <MX_USB_DEVICE_Init+0x58>)
 8012ee2:	480e      	ldr	r0, [pc, #56]	@ (8012f1c <MX_USB_DEVICE_Init+0x54>)
 8012ee4:	f7fb fb8e 	bl	800e604 <USBD_RegisterClass>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012eee:	f7f5 f8b5 	bl	800805c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012ef2:	490c      	ldr	r1, [pc, #48]	@ (8012f24 <MX_USB_DEVICE_Init+0x5c>)
 8012ef4:	4809      	ldr	r0, [pc, #36]	@ (8012f1c <MX_USB_DEVICE_Init+0x54>)
 8012ef6:	f7fb fa85 	bl	800e404 <USBD_CDC_RegisterInterface>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d001      	beq.n	8012f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012f00:	f7f5 f8ac 	bl	800805c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012f04:	4805      	ldr	r0, [pc, #20]	@ (8012f1c <MX_USB_DEVICE_Init+0x54>)
 8012f06:	f7fb fbb3 	bl	800e670 <USBD_Start>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d001      	beq.n	8012f14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012f10:	f7f5 f8a4 	bl	800805c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012f14:	bf00      	nop
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	200000b4 	.word	0x200000b4
 8012f1c:	20004de4 	.word	0x20004de4
 8012f20:	2000001c 	.word	0x2000001c
 8012f24:	200000a0 	.word	0x200000a0

08012f28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	4905      	ldr	r1, [pc, #20]	@ (8012f44 <CDC_Init_FS+0x1c>)
 8012f30:	4805      	ldr	r0, [pc, #20]	@ (8012f48 <CDC_Init_FS+0x20>)
 8012f32:	f7fb fa81 	bl	800e438 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012f36:	4905      	ldr	r1, [pc, #20]	@ (8012f4c <CDC_Init_FS+0x24>)
 8012f38:	4803      	ldr	r0, [pc, #12]	@ (8012f48 <CDC_Init_FS+0x20>)
 8012f3a:	f7fb fa9f 	bl	800e47c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012f3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	200054c0 	.word	0x200054c0
 8012f48:	20004de4 	.word	0x20004de4
 8012f4c:	200050c0 	.word	0x200050c0

08012f50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f50:	b480      	push	{r7}
 8012f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	4603      	mov	r3, r0
 8012f68:	6039      	str	r1, [r7, #0]
 8012f6a:	71fb      	strb	r3, [r7, #7]
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012f70:	79fb      	ldrb	r3, [r7, #7]
 8012f72:	2b23      	cmp	r3, #35	@ 0x23
 8012f74:	d84a      	bhi.n	801300c <CDC_Control_FS+0xac>
 8012f76:	a201      	add	r2, pc, #4	@ (adr r2, 8012f7c <CDC_Control_FS+0x1c>)
 8012f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f7c:	0801300d 	.word	0x0801300d
 8012f80:	0801300d 	.word	0x0801300d
 8012f84:	0801300d 	.word	0x0801300d
 8012f88:	0801300d 	.word	0x0801300d
 8012f8c:	0801300d 	.word	0x0801300d
 8012f90:	0801300d 	.word	0x0801300d
 8012f94:	0801300d 	.word	0x0801300d
 8012f98:	0801300d 	.word	0x0801300d
 8012f9c:	0801300d 	.word	0x0801300d
 8012fa0:	0801300d 	.word	0x0801300d
 8012fa4:	0801300d 	.word	0x0801300d
 8012fa8:	0801300d 	.word	0x0801300d
 8012fac:	0801300d 	.word	0x0801300d
 8012fb0:	0801300d 	.word	0x0801300d
 8012fb4:	0801300d 	.word	0x0801300d
 8012fb8:	0801300d 	.word	0x0801300d
 8012fbc:	0801300d 	.word	0x0801300d
 8012fc0:	0801300d 	.word	0x0801300d
 8012fc4:	0801300d 	.word	0x0801300d
 8012fc8:	0801300d 	.word	0x0801300d
 8012fcc:	0801300d 	.word	0x0801300d
 8012fd0:	0801300d 	.word	0x0801300d
 8012fd4:	0801300d 	.word	0x0801300d
 8012fd8:	0801300d 	.word	0x0801300d
 8012fdc:	0801300d 	.word	0x0801300d
 8012fe0:	0801300d 	.word	0x0801300d
 8012fe4:	0801300d 	.word	0x0801300d
 8012fe8:	0801300d 	.word	0x0801300d
 8012fec:	0801300d 	.word	0x0801300d
 8012ff0:	0801300d 	.word	0x0801300d
 8012ff4:	0801300d 	.word	0x0801300d
 8012ff8:	0801300d 	.word	0x0801300d
 8012ffc:	0801300d 	.word	0x0801300d
 8013000:	0801300d 	.word	0x0801300d
 8013004:	0801300d 	.word	0x0801300d
 8013008:	0801300d 	.word	0x0801300d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801300c:	bf00      	nop
  }

  return (USBD_OK);
 801300e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013010:	4618      	mov	r0, r3
 8013012:	370c      	adds	r7, #12
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr

0801301c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013026:	6879      	ldr	r1, [r7, #4]
 8013028:	4805      	ldr	r0, [pc, #20]	@ (8013040 <CDC_Receive_FS+0x24>)
 801302a:	f7fb fa27 	bl	800e47c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801302e:	4804      	ldr	r0, [pc, #16]	@ (8013040 <CDC_Receive_FS+0x24>)
 8013030:	f7fb fa82 	bl	800e538 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013034:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	20004de4 	.word	0x20004de4

08013044 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013050:	2300      	movs	r3, #0
 8013052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013054:	4b0d      	ldr	r3, [pc, #52]	@ (801308c <CDC_Transmit_FS+0x48>)
 8013056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801305a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013066:	2301      	movs	r3, #1
 8013068:	e00b      	b.n	8013082 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801306a:	887b      	ldrh	r3, [r7, #2]
 801306c:	461a      	mov	r2, r3
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	4806      	ldr	r0, [pc, #24]	@ (801308c <CDC_Transmit_FS+0x48>)
 8013072:	f7fb f9e1 	bl	800e438 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013076:	4805      	ldr	r0, [pc, #20]	@ (801308c <CDC_Transmit_FS+0x48>)
 8013078:	f7fb fa1e 	bl	800e4b8 <USBD_CDC_TransmitPacket>
 801307c:	4603      	mov	r3, r0
 801307e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013080:	7bfb      	ldrb	r3, [r7, #15]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	20004de4 	.word	0x20004de4

08013090 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013090:	b480      	push	{r7}
 8013092:	b087      	sub	sp, #28
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	4613      	mov	r3, r2
 801309c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801309e:	2300      	movs	r3, #0
 80130a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80130a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	371c      	adds	r7, #28
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr
	...

080130b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b083      	sub	sp, #12
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	4603      	mov	r3, r0
 80130bc:	6039      	str	r1, [r7, #0]
 80130be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	2212      	movs	r2, #18
 80130c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80130c6:	4b03      	ldr	r3, [pc, #12]	@ (80130d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	200000d0 	.word	0x200000d0

080130d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	4603      	mov	r3, r0
 80130e0:	6039      	str	r1, [r7, #0]
 80130e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2204      	movs	r2, #4
 80130e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80130ea:	4b03      	ldr	r3, [pc, #12]	@ (80130f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	370c      	adds	r7, #12
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr
 80130f8:	200000e4 	.word	0x200000e4

080130fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	6039      	str	r1, [r7, #0]
 8013106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013108:	79fb      	ldrb	r3, [r7, #7]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d105      	bne.n	801311a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801310e:	683a      	ldr	r2, [r7, #0]
 8013110:	4907      	ldr	r1, [pc, #28]	@ (8013130 <USBD_FS_ProductStrDescriptor+0x34>)
 8013112:	4808      	ldr	r0, [pc, #32]	@ (8013134 <USBD_FS_ProductStrDescriptor+0x38>)
 8013114:	f7fc fc5c 	bl	800f9d0 <USBD_GetString>
 8013118:	e004      	b.n	8013124 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801311a:	683a      	ldr	r2, [r7, #0]
 801311c:	4904      	ldr	r1, [pc, #16]	@ (8013130 <USBD_FS_ProductStrDescriptor+0x34>)
 801311e:	4805      	ldr	r0, [pc, #20]	@ (8013134 <USBD_FS_ProductStrDescriptor+0x38>)
 8013120:	f7fc fc56 	bl	800f9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013124:	4b02      	ldr	r3, [pc, #8]	@ (8013130 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013126:	4618      	mov	r0, r3
 8013128:	3708      	adds	r7, #8
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	200058c0 	.word	0x200058c0
 8013134:	08016a20 	.word	0x08016a20

08013138 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	4603      	mov	r3, r0
 8013140:	6039      	str	r1, [r7, #0]
 8013142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013144:	683a      	ldr	r2, [r7, #0]
 8013146:	4904      	ldr	r1, [pc, #16]	@ (8013158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013148:	4804      	ldr	r0, [pc, #16]	@ (801315c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801314a:	f7fc fc41 	bl	800f9d0 <USBD_GetString>
  return USBD_StrDesc;
 801314e:	4b02      	ldr	r3, [pc, #8]	@ (8013158 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013150:	4618      	mov	r0, r3
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	200058c0 	.word	0x200058c0
 801315c:	08016a38 	.word	0x08016a38

08013160 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	4603      	mov	r3, r0
 8013168:	6039      	str	r1, [r7, #0]
 801316a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	221a      	movs	r2, #26
 8013170:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013172:	f000 f843 	bl	80131fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013176:	4b02      	ldr	r3, [pc, #8]	@ (8013180 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013178:	4618      	mov	r0, r3
 801317a:	3708      	adds	r7, #8
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}
 8013180:	200000e8 	.word	0x200000e8

08013184 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	4603      	mov	r3, r0
 801318c:	6039      	str	r1, [r7, #0]
 801318e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013190:	79fb      	ldrb	r3, [r7, #7]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d105      	bne.n	80131a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	4907      	ldr	r1, [pc, #28]	@ (80131b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801319a:	4808      	ldr	r0, [pc, #32]	@ (80131bc <USBD_FS_ConfigStrDescriptor+0x38>)
 801319c:	f7fc fc18 	bl	800f9d0 <USBD_GetString>
 80131a0:	e004      	b.n	80131ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80131a2:	683a      	ldr	r2, [r7, #0]
 80131a4:	4904      	ldr	r1, [pc, #16]	@ (80131b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80131a6:	4805      	ldr	r0, [pc, #20]	@ (80131bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80131a8:	f7fc fc12 	bl	800f9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80131ac:	4b02      	ldr	r3, [pc, #8]	@ (80131b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	200058c0 	.word	0x200058c0
 80131bc:	08016a4c 	.word	0x08016a4c

080131c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	4603      	mov	r3, r0
 80131c8:	6039      	str	r1, [r7, #0]
 80131ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80131cc:	79fb      	ldrb	r3, [r7, #7]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d105      	bne.n	80131de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131d2:	683a      	ldr	r2, [r7, #0]
 80131d4:	4907      	ldr	r1, [pc, #28]	@ (80131f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131d6:	4808      	ldr	r0, [pc, #32]	@ (80131f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131d8:	f7fc fbfa 	bl	800f9d0 <USBD_GetString>
 80131dc:	e004      	b.n	80131e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	4904      	ldr	r1, [pc, #16]	@ (80131f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80131e2:	4805      	ldr	r0, [pc, #20]	@ (80131f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80131e4:	f7fc fbf4 	bl	800f9d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80131e8:	4b02      	ldr	r3, [pc, #8]	@ (80131f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	200058c0 	.word	0x200058c0
 80131f8:	08016a58 	.word	0x08016a58

080131fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013202:	4b0f      	ldr	r3, [pc, #60]	@ (8013240 <Get_SerialNum+0x44>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013208:	4b0e      	ldr	r3, [pc, #56]	@ (8013244 <Get_SerialNum+0x48>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801320e:	4b0e      	ldr	r3, [pc, #56]	@ (8013248 <Get_SerialNum+0x4c>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4413      	add	r3, r2
 801321a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d009      	beq.n	8013236 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013222:	2208      	movs	r2, #8
 8013224:	4909      	ldr	r1, [pc, #36]	@ (801324c <Get_SerialNum+0x50>)
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 f814 	bl	8013254 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801322c:	2204      	movs	r2, #4
 801322e:	4908      	ldr	r1, [pc, #32]	@ (8013250 <Get_SerialNum+0x54>)
 8013230:	68b8      	ldr	r0, [r7, #8]
 8013232:	f000 f80f 	bl	8013254 <IntToUnicode>
  }
}
 8013236:	bf00      	nop
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	1fff7a10 	.word	0x1fff7a10
 8013244:	1fff7a14 	.word	0x1fff7a14
 8013248:	1fff7a18 	.word	0x1fff7a18
 801324c:	200000ea 	.word	0x200000ea
 8013250:	200000fa 	.word	0x200000fa

08013254 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013254:	b480      	push	{r7}
 8013256:	b087      	sub	sp, #28
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	4613      	mov	r3, r2
 8013260:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013262:	2300      	movs	r3, #0
 8013264:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013266:	2300      	movs	r3, #0
 8013268:	75fb      	strb	r3, [r7, #23]
 801326a:	e027      	b.n	80132bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	0f1b      	lsrs	r3, r3, #28
 8013270:	2b09      	cmp	r3, #9
 8013272:	d80b      	bhi.n	801328c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	0f1b      	lsrs	r3, r3, #28
 8013278:	b2da      	uxtb	r2, r3
 801327a:	7dfb      	ldrb	r3, [r7, #23]
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	4619      	mov	r1, r3
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	440b      	add	r3, r1
 8013284:	3230      	adds	r2, #48	@ 0x30
 8013286:	b2d2      	uxtb	r2, r2
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	e00a      	b.n	80132a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	0f1b      	lsrs	r3, r3, #28
 8013290:	b2da      	uxtb	r2, r3
 8013292:	7dfb      	ldrb	r3, [r7, #23]
 8013294:	005b      	lsls	r3, r3, #1
 8013296:	4619      	mov	r1, r3
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	440b      	add	r3, r1
 801329c:	3237      	adds	r2, #55	@ 0x37
 801329e:	b2d2      	uxtb	r2, r2
 80132a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	011b      	lsls	r3, r3, #4
 80132a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80132a8:	7dfb      	ldrb	r3, [r7, #23]
 80132aa:	005b      	lsls	r3, r3, #1
 80132ac:	3301      	adds	r3, #1
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	4413      	add	r3, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80132b6:	7dfb      	ldrb	r3, [r7, #23]
 80132b8:	3301      	adds	r3, #1
 80132ba:	75fb      	strb	r3, [r7, #23]
 80132bc:	7dfa      	ldrb	r2, [r7, #23]
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d3d3      	bcc.n	801326c <IntToUnicode+0x18>
  }
}
 80132c4:	bf00      	nop
 80132c6:	bf00      	nop
 80132c8:	371c      	adds	r7, #28
 80132ca:	46bd      	mov	sp, r7
 80132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d0:	4770      	bx	lr
	...

080132d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b08a      	sub	sp, #40	@ 0x28
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132dc:	f107 0314 	add.w	r3, r7, #20
 80132e0:	2200      	movs	r2, #0
 80132e2:	601a      	str	r2, [r3, #0]
 80132e4:	605a      	str	r2, [r3, #4]
 80132e6:	609a      	str	r2, [r3, #8]
 80132e8:	60da      	str	r2, [r3, #12]
 80132ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80132f4:	d13a      	bne.n	801336c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132f6:	2300      	movs	r3, #0
 80132f8:	613b      	str	r3, [r7, #16]
 80132fa:	4b1e      	ldr	r3, [pc, #120]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 80132fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132fe:	4a1d      	ldr	r2, [pc, #116]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 8013300:	f043 0301 	orr.w	r3, r3, #1
 8013304:	6313      	str	r3, [r2, #48]	@ 0x30
 8013306:	4b1b      	ldr	r3, [pc, #108]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 8013308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801330a:	f003 0301 	and.w	r3, r3, #1
 801330e:	613b      	str	r3, [r7, #16]
 8013310:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013312:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013318:	2302      	movs	r3, #2
 801331a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801331c:	2300      	movs	r3, #0
 801331e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013320:	2303      	movs	r3, #3
 8013322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013324:	230a      	movs	r3, #10
 8013326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013328:	f107 0314 	add.w	r3, r7, #20
 801332c:	4619      	mov	r1, r3
 801332e:	4812      	ldr	r0, [pc, #72]	@ (8013378 <HAL_PCD_MspInit+0xa4>)
 8013330:	f7f6 fc02 	bl	8009b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013334:	4b0f      	ldr	r3, [pc, #60]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 8013336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013338:	4a0e      	ldr	r2, [pc, #56]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 801333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801333e:	6353      	str	r3, [r2, #52]	@ 0x34
 8013340:	2300      	movs	r3, #0
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	4b0b      	ldr	r3, [pc, #44]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 8013346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013348:	4a0a      	ldr	r2, [pc, #40]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 801334a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801334e:	6453      	str	r3, [r2, #68]	@ 0x44
 8013350:	4b08      	ldr	r3, [pc, #32]	@ (8013374 <HAL_PCD_MspInit+0xa0>)
 8013352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013358:	60fb      	str	r3, [r7, #12]
 801335a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801335c:	2200      	movs	r2, #0
 801335e:	2105      	movs	r1, #5
 8013360:	2043      	movs	r0, #67	@ 0x43
 8013362:	f7f6 fbbf 	bl	8009ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013366:	2043      	movs	r0, #67	@ 0x43
 8013368:	f7f6 fbd8 	bl	8009b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801336c:	bf00      	nop
 801336e:	3728      	adds	r7, #40	@ 0x28
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	40023800 	.word	0x40023800
 8013378:	40020000 	.word	0x40020000

0801337c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013390:	4619      	mov	r1, r3
 8013392:	4610      	mov	r0, r2
 8013394:	f7fb f9b9 	bl	800e70a <USBD_LL_SetupStage>
}
 8013398:	bf00      	nop
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	460b      	mov	r3, r1
 80133aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80133b2:	78fa      	ldrb	r2, [r7, #3]
 80133b4:	6879      	ldr	r1, [r7, #4]
 80133b6:	4613      	mov	r3, r2
 80133b8:	00db      	lsls	r3, r3, #3
 80133ba:	4413      	add	r3, r2
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	440b      	add	r3, r1
 80133c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	78fb      	ldrb	r3, [r7, #3]
 80133c8:	4619      	mov	r1, r3
 80133ca:	f7fb f9f3 	bl	800e7b4 <USBD_LL_DataOutStage>
}
 80133ce:	bf00      	nop
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b082      	sub	sp, #8
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
 80133de:	460b      	mov	r3, r1
 80133e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80133e8:	78fa      	ldrb	r2, [r7, #3]
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	4613      	mov	r3, r2
 80133ee:	00db      	lsls	r3, r3, #3
 80133f0:	4413      	add	r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	440b      	add	r3, r1
 80133f6:	3320      	adds	r3, #32
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	78fb      	ldrb	r3, [r7, #3]
 80133fc:	4619      	mov	r1, r3
 80133fe:	f7fb fa8c 	bl	800e91a <USBD_LL_DataInStage>
}
 8013402:	bf00      	nop
 8013404:	3708      	adds	r7, #8
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b082      	sub	sp, #8
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013418:	4618      	mov	r0, r3
 801341a:	f7fb fbc6 	bl	800ebaa <USBD_LL_SOF>
}
 801341e:	bf00      	nop
 8013420:	3708      	adds	r7, #8
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}

08013426 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013426:	b580      	push	{r7, lr}
 8013428:	b084      	sub	sp, #16
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801342e:	2301      	movs	r3, #1
 8013430:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	79db      	ldrb	r3, [r3, #7]
 8013436:	2b02      	cmp	r3, #2
 8013438:	d001      	beq.n	801343e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801343a:	f7f4 fe0f 	bl	800805c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013444:	7bfa      	ldrb	r2, [r7, #15]
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f7fb fb6a 	bl	800eb22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013454:	4618      	mov	r0, r3
 8013456:	f7fb fb12 	bl	800ea7e <USBD_LL_Reset>
}
 801345a:	bf00      	nop
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
	...

08013464 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013472:	4618      	mov	r0, r3
 8013474:	f7fb fb65 	bl	800eb42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	6812      	ldr	r2, [r2, #0]
 8013486:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801348a:	f043 0301 	orr.w	r3, r3, #1
 801348e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	7adb      	ldrb	r3, [r3, #11]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d005      	beq.n	80134a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013498:	4b04      	ldr	r3, [pc, #16]	@ (80134ac <HAL_PCD_SuspendCallback+0x48>)
 801349a:	691b      	ldr	r3, [r3, #16]
 801349c:	4a03      	ldr	r2, [pc, #12]	@ (80134ac <HAL_PCD_SuspendCallback+0x48>)
 801349e:	f043 0306 	orr.w	r3, r3, #6
 80134a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80134a4:	bf00      	nop
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	e000ed00 	.word	0xe000ed00

080134b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fb fb5b 	bl	800eb7a <USBD_LL_Resume>
}
 80134c4:	bf00      	nop
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	460b      	mov	r3, r1
 80134d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80134de:	78fa      	ldrb	r2, [r7, #3]
 80134e0:	4611      	mov	r1, r2
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fb fbb3 	bl	800ec4e <USBD_LL_IsoOUTIncomplete>
}
 80134e8:	bf00      	nop
 80134ea:	3708      	adds	r7, #8
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	460b      	mov	r3, r1
 80134fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013502:	78fa      	ldrb	r2, [r7, #3]
 8013504:	4611      	mov	r1, r2
 8013506:	4618      	mov	r0, r3
 8013508:	f7fb fb6f 	bl	800ebea <USBD_LL_IsoINIncomplete>
}
 801350c:	bf00      	nop
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013522:	4618      	mov	r0, r3
 8013524:	f7fb fbc5 	bl	800ecb2 <USBD_LL_DevConnected>
}
 8013528:	bf00      	nop
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801353e:	4618      	mov	r0, r3
 8013540:	f7fb fbc2 	bl	800ecc8 <USBD_LL_DevDisconnected>
}
 8013544:	bf00      	nop
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d13c      	bne.n	80135d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801355c:	4a20      	ldr	r2, [pc, #128]	@ (80135e0 <USBD_LL_Init+0x94>)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	4a1e      	ldr	r2, [pc, #120]	@ (80135e0 <USBD_LL_Init+0x94>)
 8013568:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801356c:	4b1c      	ldr	r3, [pc, #112]	@ (80135e0 <USBD_LL_Init+0x94>)
 801356e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8013572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013574:	4b1a      	ldr	r3, [pc, #104]	@ (80135e0 <USBD_LL_Init+0x94>)
 8013576:	2204      	movs	r2, #4
 8013578:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801357a:	4b19      	ldr	r3, [pc, #100]	@ (80135e0 <USBD_LL_Init+0x94>)
 801357c:	2202      	movs	r2, #2
 801357e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013580:	4b17      	ldr	r3, [pc, #92]	@ (80135e0 <USBD_LL_Init+0x94>)
 8013582:	2200      	movs	r2, #0
 8013584:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013586:	4b16      	ldr	r3, [pc, #88]	@ (80135e0 <USBD_LL_Init+0x94>)
 8013588:	2202      	movs	r2, #2
 801358a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801358c:	4b14      	ldr	r3, [pc, #80]	@ (80135e0 <USBD_LL_Init+0x94>)
 801358e:	2200      	movs	r2, #0
 8013590:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013592:	4b13      	ldr	r3, [pc, #76]	@ (80135e0 <USBD_LL_Init+0x94>)
 8013594:	2200      	movs	r2, #0
 8013596:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013598:	4b11      	ldr	r3, [pc, #68]	@ (80135e0 <USBD_LL_Init+0x94>)
 801359a:	2200      	movs	r2, #0
 801359c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801359e:	4b10      	ldr	r3, [pc, #64]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135a0:	2200      	movs	r2, #0
 80135a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80135a4:	4b0e      	ldr	r3, [pc, #56]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80135aa:	480d      	ldr	r0, [pc, #52]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135ac:	f7f6 fcac 	bl	8009f08 <HAL_PCD_Init>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d001      	beq.n	80135ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80135b6:	f7f4 fd51 	bl	800805c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80135ba:	2180      	movs	r1, #128	@ 0x80
 80135bc:	4808      	ldr	r0, [pc, #32]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135be:	f7f7 fed8 	bl	800b372 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80135c2:	2240      	movs	r2, #64	@ 0x40
 80135c4:	2100      	movs	r1, #0
 80135c6:	4806      	ldr	r0, [pc, #24]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135c8:	f7f7 fe8c 	bl	800b2e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80135cc:	2280      	movs	r2, #128	@ 0x80
 80135ce:	2101      	movs	r1, #1
 80135d0:	4803      	ldr	r0, [pc, #12]	@ (80135e0 <USBD_LL_Init+0x94>)
 80135d2:	f7f7 fe87 	bl	800b2e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80135d6:	2300      	movs	r3, #0
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	20005ac0 	.word	0x20005ac0

080135e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135ec:	2300      	movs	r3, #0
 80135ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135f0:	2300      	movs	r3, #0
 80135f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f6 fd93 	bl	800a126 <HAL_PCD_Start>
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013604:	7bfb      	ldrb	r3, [r7, #15]
 8013606:	4618      	mov	r0, r3
 8013608:	f000 f942 	bl	8013890 <USBD_Get_USB_Status>
 801360c:	4603      	mov	r3, r0
 801360e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013610:	7bbb      	ldrb	r3, [r7, #14]
}
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}

0801361a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801361a:	b580      	push	{r7, lr}
 801361c:	b084      	sub	sp, #16
 801361e:	af00      	add	r7, sp, #0
 8013620:	6078      	str	r0, [r7, #4]
 8013622:	4608      	mov	r0, r1
 8013624:	4611      	mov	r1, r2
 8013626:	461a      	mov	r2, r3
 8013628:	4603      	mov	r3, r0
 801362a:	70fb      	strb	r3, [r7, #3]
 801362c:	460b      	mov	r3, r1
 801362e:	70bb      	strb	r3, [r7, #2]
 8013630:	4613      	mov	r3, r2
 8013632:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013634:	2300      	movs	r3, #0
 8013636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013642:	78bb      	ldrb	r3, [r7, #2]
 8013644:	883a      	ldrh	r2, [r7, #0]
 8013646:	78f9      	ldrb	r1, [r7, #3]
 8013648:	f7f7 fa67 	bl	800ab1a <HAL_PCD_EP_Open>
 801364c:	4603      	mov	r3, r0
 801364e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013650:	7bfb      	ldrb	r3, [r7, #15]
 8013652:	4618      	mov	r0, r3
 8013654:	f000 f91c 	bl	8013890 <USBD_Get_USB_Status>
 8013658:	4603      	mov	r3, r0
 801365a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801365c:	7bbb      	ldrb	r3, [r7, #14]
}
 801365e:	4618      	mov	r0, r3
 8013660:	3710      	adds	r7, #16
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}

08013666 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013666:	b580      	push	{r7, lr}
 8013668:	b084      	sub	sp, #16
 801366a:	af00      	add	r7, sp, #0
 801366c:	6078      	str	r0, [r7, #4]
 801366e:	460b      	mov	r3, r1
 8013670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013672:	2300      	movs	r3, #0
 8013674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013676:	2300      	movs	r3, #0
 8013678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013680:	78fa      	ldrb	r2, [r7, #3]
 8013682:	4611      	mov	r1, r2
 8013684:	4618      	mov	r0, r3
 8013686:	f7f7 fab2 	bl	800abee <HAL_PCD_EP_Close>
 801368a:	4603      	mov	r3, r0
 801368c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801368e:	7bfb      	ldrb	r3, [r7, #15]
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f8fd 	bl	8013890 <USBD_Get_USB_Status>
 8013696:	4603      	mov	r3, r0
 8013698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801369a:	7bbb      	ldrb	r3, [r7, #14]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3710      	adds	r7, #16
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136b0:	2300      	movs	r3, #0
 80136b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136b4:	2300      	movs	r3, #0
 80136b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136be:	78fa      	ldrb	r2, [r7, #3]
 80136c0:	4611      	mov	r1, r2
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7f7 fb6a 	bl	800ad9c <HAL_PCD_EP_SetStall>
 80136c8:	4603      	mov	r3, r0
 80136ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136cc:	7bfb      	ldrb	r3, [r7, #15]
 80136ce:	4618      	mov	r0, r3
 80136d0:	f000 f8de 	bl	8013890 <USBD_Get_USB_Status>
 80136d4:	4603      	mov	r3, r0
 80136d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3710      	adds	r7, #16
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b084      	sub	sp, #16
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
 80136ea:	460b      	mov	r3, r1
 80136ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136ee:	2300      	movs	r3, #0
 80136f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136f2:	2300      	movs	r3, #0
 80136f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136fc:	78fa      	ldrb	r2, [r7, #3]
 80136fe:	4611      	mov	r1, r2
 8013700:	4618      	mov	r0, r3
 8013702:	f7f7 fbae 	bl	800ae62 <HAL_PCD_EP_ClrStall>
 8013706:	4603      	mov	r3, r0
 8013708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801370a:	7bfb      	ldrb	r3, [r7, #15]
 801370c:	4618      	mov	r0, r3
 801370e:	f000 f8bf 	bl	8013890 <USBD_Get_USB_Status>
 8013712:	4603      	mov	r3, r0
 8013714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013716:	7bbb      	ldrb	r3, [r7, #14]
}
 8013718:	4618      	mov	r0, r3
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	460b      	mov	r3, r1
 801372a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013732:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013738:	2b00      	cmp	r3, #0
 801373a:	da0b      	bge.n	8013754 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801373c:	78fb      	ldrb	r3, [r7, #3]
 801373e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013742:	68f9      	ldr	r1, [r7, #12]
 8013744:	4613      	mov	r3, r2
 8013746:	00db      	lsls	r3, r3, #3
 8013748:	4413      	add	r3, r2
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	440b      	add	r3, r1
 801374e:	3316      	adds	r3, #22
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	e00b      	b.n	801376c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013754:	78fb      	ldrb	r3, [r7, #3]
 8013756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	4613      	mov	r3, r2
 801375e:	00db      	lsls	r3, r3, #3
 8013760:	4413      	add	r3, r2
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	440b      	add	r3, r1
 8013766:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801376a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801376c:	4618      	mov	r0, r3
 801376e:	3714      	adds	r7, #20
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr

08013778 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	460b      	mov	r3, r1
 8013782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013784:	2300      	movs	r3, #0
 8013786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013788:	2300      	movs	r3, #0
 801378a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013792:	78fa      	ldrb	r2, [r7, #3]
 8013794:	4611      	mov	r1, r2
 8013796:	4618      	mov	r0, r3
 8013798:	f7f7 f99b 	bl	800aad2 <HAL_PCD_SetAddress>
 801379c:	4603      	mov	r3, r0
 801379e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137a0:	7bfb      	ldrb	r3, [r7, #15]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f000 f874 	bl	8013890 <USBD_Get_USB_Status>
 80137a8:	4603      	mov	r3, r0
 80137aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	60f8      	str	r0, [r7, #12]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
 80137c2:	460b      	mov	r3, r1
 80137c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137c6:	2300      	movs	r3, #0
 80137c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137ca:	2300      	movs	r3, #0
 80137cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80137d4:	7af9      	ldrb	r1, [r7, #11]
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	f7f7 faa5 	bl	800ad28 <HAL_PCD_EP_Transmit>
 80137de:	4603      	mov	r3, r0
 80137e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137e2:	7dfb      	ldrb	r3, [r7, #23]
 80137e4:	4618      	mov	r0, r3
 80137e6:	f000 f853 	bl	8013890 <USBD_Get_USB_Status>
 80137ea:	4603      	mov	r3, r0
 80137ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80137ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3718      	adds	r7, #24
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	607a      	str	r2, [r7, #4]
 8013802:	603b      	str	r3, [r7, #0]
 8013804:	460b      	mov	r3, r1
 8013806:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013808:	2300      	movs	r3, #0
 801380a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013816:	7af9      	ldrb	r1, [r7, #11]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	f7f7 fa31 	bl	800ac82 <HAL_PCD_EP_Receive>
 8013820:	4603      	mov	r3, r0
 8013822:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013824:	7dfb      	ldrb	r3, [r7, #23]
 8013826:	4618      	mov	r0, r3
 8013828:	f000 f832 	bl	8013890 <USBD_Get_USB_Status>
 801382c:	4603      	mov	r3, r0
 801382e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013830:	7dbb      	ldrb	r3, [r7, #22]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3718      	adds	r7, #24
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801383a:	b580      	push	{r7, lr}
 801383c:	b082      	sub	sp, #8
 801383e:	af00      	add	r7, sp, #0
 8013840:	6078      	str	r0, [r7, #4]
 8013842:	460b      	mov	r3, r1
 8013844:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801384c:	78fa      	ldrb	r2, [r7, #3]
 801384e:	4611      	mov	r1, r2
 8013850:	4618      	mov	r0, r3
 8013852:	f7f7 fa51 	bl	800acf8 <HAL_PCD_EP_GetRxCount>
 8013856:	4603      	mov	r3, r0
}
 8013858:	4618      	mov	r0, r3
 801385a:	3708      	adds	r7, #8
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013868:	4b03      	ldr	r3, [pc, #12]	@ (8013878 <USBD_static_malloc+0x18>)
}
 801386a:	4618      	mov	r0, r3
 801386c:	370c      	adds	r7, #12
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	20005fa4 	.word	0x20005fa4

0801387c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]

}
 8013884:	bf00      	nop
 8013886:	370c      	adds	r7, #12
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
 8013896:	4603      	mov	r3, r0
 8013898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801389a:	2300      	movs	r3, #0
 801389c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801389e:	79fb      	ldrb	r3, [r7, #7]
 80138a0:	2b03      	cmp	r3, #3
 80138a2:	d817      	bhi.n	80138d4 <USBD_Get_USB_Status+0x44>
 80138a4:	a201      	add	r2, pc, #4	@ (adr r2, 80138ac <USBD_Get_USB_Status+0x1c>)
 80138a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138aa:	bf00      	nop
 80138ac:	080138bd 	.word	0x080138bd
 80138b0:	080138c3 	.word	0x080138c3
 80138b4:	080138c9 	.word	0x080138c9
 80138b8:	080138cf 	.word	0x080138cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80138bc:	2300      	movs	r3, #0
 80138be:	73fb      	strb	r3, [r7, #15]
    break;
 80138c0:	e00b      	b.n	80138da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80138c2:	2303      	movs	r3, #3
 80138c4:	73fb      	strb	r3, [r7, #15]
    break;
 80138c6:	e008      	b.n	80138da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80138c8:	2301      	movs	r3, #1
 80138ca:	73fb      	strb	r3, [r7, #15]
    break;
 80138cc:	e005      	b.n	80138da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80138ce:	2303      	movs	r3, #3
 80138d0:	73fb      	strb	r3, [r7, #15]
    break;
 80138d2:	e002      	b.n	80138da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80138d4:	2303      	movs	r3, #3
 80138d6:	73fb      	strb	r3, [r7, #15]
    break;
 80138d8:	bf00      	nop
  }
  return usb_status;
 80138da:	7bfb      	ldrb	r3, [r7, #15]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3714      	adds	r7, #20
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <_ZdlPvj>:
 80138e8:	f000 b8fc 	b.w	8013ae4 <_ZdlPv>

080138ec <_Znwj>:
 80138ec:	2801      	cmp	r0, #1
 80138ee:	bf38      	it	cc
 80138f0:	2001      	movcc	r0, #1
 80138f2:	b510      	push	{r4, lr}
 80138f4:	4604      	mov	r4, r0
 80138f6:	4620      	mov	r0, r4
 80138f8:	f000 f90c 	bl	8013b14 <malloc>
 80138fc:	b100      	cbz	r0, 8013900 <_Znwj+0x14>
 80138fe:	bd10      	pop	{r4, pc}
 8013900:	f000 f8f2 	bl	8013ae8 <_ZSt15get_new_handlerv>
 8013904:	b908      	cbnz	r0, 801390a <_Znwj+0x1e>
 8013906:	f000 f8fd 	bl	8013b04 <abort>
 801390a:	4780      	blx	r0
 801390c:	e7f3      	b.n	80138f6 <_Znwj+0xa>

0801390e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801390e:	b10a      	cbz	r2, 8013914 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8013910:	f001 b8b5 	b.w	8014a7e <memcpy>
 8013914:	4770      	bx	lr

08013916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8013916:	f850 3b08 	ldr.w	r3, [r0], #8
 801391a:	1a1b      	subs	r3, r3, r0
 801391c:	4258      	negs	r0, r3
 801391e:	4158      	adcs	r0, r3
 8013920:	4770      	bx	lr
	...

08013924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8013924:	b508      	push	{r3, lr}
 8013926:	680b      	ldr	r3, [r1, #0]
 8013928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801392c:	d302      	bcc.n	8013934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801392e:	480d      	ldr	r0, [pc, #52]	@ (8013964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8013930:	f000 f8e5 	bl	8013afe <_ZSt20__throw_length_errorPKc>
 8013934:	4293      	cmp	r3, r2
 8013936:	d90b      	bls.n	8013950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8013938:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801393c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8013940:	d206      	bcs.n	8013950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8013942:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8013946:	bf2a      	itet	cs
 8013948:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801394c:	6008      	strcc	r0, [r1, #0]
 801394e:	600b      	strcs	r3, [r1, #0]
 8013950:	6808      	ldr	r0, [r1, #0]
 8013952:	3001      	adds	r0, #1
 8013954:	d501      	bpl.n	801395a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8013956:	f000 f8cf 	bl	8013af8 <_ZSt17__throw_bad_allocv>
 801395a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801395e:	f7ff bfc5 	b.w	80138ec <_Znwj>
 8013962:	bf00      	nop
 8013964:	08016c68 	.word	0x08016c68

08013968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8013968:	b510      	push	{r4, lr}
 801396a:	4604      	mov	r4, r0
 801396c:	f7ff ffd3 	bl	8013916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013970:	b920      	cbnz	r0, 801397c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8013972:	6820      	ldr	r0, [r4, #0]
 8013974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013978:	f000 b8b4 	b.w	8013ae4 <_ZdlPv>
 801397c:	bd10      	pop	{r4, pc}

0801397e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801397e:	6840      	ldr	r0, [r0, #4]
 8013980:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8013984:	3901      	subs	r1, #1
 8013986:	1a09      	subs	r1, r1, r0
 8013988:	4291      	cmp	r1, r2
 801398a:	b508      	push	{r3, lr}
 801398c:	d202      	bcs.n	8013994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801398e:	4618      	mov	r0, r3
 8013990:	f000 f8b5 	bl	8013afe <_ZSt20__throw_length_errorPKc>
 8013994:	bd08      	pop	{r3, pc}

08013996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8013996:	2a01      	cmp	r2, #1
 8013998:	b410      	push	{r4}
 801399a:	d104      	bne.n	80139a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801399c:	780a      	ldrb	r2, [r1, #0]
 801399e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139a2:	7002      	strb	r2, [r0, #0]
 80139a4:	4770      	bx	lr
 80139a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139aa:	f7ff bfb0 	b.w	801390e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080139ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80139ae:	f100 0208 	add.w	r2, r0, #8
 80139b2:	6002      	str	r2, [r0, #0]
 80139b4:	2200      	movs	r2, #0
 80139b6:	6042      	str	r2, [r0, #4]
 80139b8:	7202      	strb	r2, [r0, #8]
 80139ba:	4770      	bx	lr

080139bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80139bc:	b510      	push	{r4, lr}
 80139be:	4604      	mov	r4, r0
 80139c0:	f7ff ffa9 	bl	8013916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80139c4:	b908      	cbnz	r0, 80139ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80139c6:	68a0      	ldr	r0, [r4, #8]
 80139c8:	bd10      	pop	{r4, pc}
 80139ca:	200f      	movs	r0, #15
 80139cc:	e7fc      	b.n	80139c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080139ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80139ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80139d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80139d4:	461f      	mov	r7, r3
 80139d6:	6843      	ldr	r3, [r0, #4]
 80139d8:	eb01 0802 	add.w	r8, r1, r2
 80139dc:	1ab2      	subs	r2, r6, r2
 80139de:	441a      	add	r2, r3
 80139e0:	4604      	mov	r4, r0
 80139e2:	460d      	mov	r5, r1
 80139e4:	eba3 0908 	sub.w	r9, r3, r8
 80139e8:	9201      	str	r2, [sp, #4]
 80139ea:	f7ff ffe7 	bl	80139bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80139ee:	a901      	add	r1, sp, #4
 80139f0:	4602      	mov	r2, r0
 80139f2:	4620      	mov	r0, r4
 80139f4:	f7ff ff96 	bl	8013924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80139f8:	4682      	mov	sl, r0
 80139fa:	b11d      	cbz	r5, 8013a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80139fc:	6821      	ldr	r1, [r4, #0]
 80139fe:	462a      	mov	r2, r5
 8013a00:	f7ff ffc9 	bl	8013996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013a04:	b137      	cbz	r7, 8013a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013a06:	b12e      	cbz	r6, 8013a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013a08:	4632      	mov	r2, r6
 8013a0a:	4639      	mov	r1, r7
 8013a0c:	eb0a 0005 	add.w	r0, sl, r5
 8013a10:	f7ff ffc1 	bl	8013996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013a14:	f1b9 0f00 	cmp.w	r9, #0
 8013a18:	d007      	beq.n	8013a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8013a1a:	6821      	ldr	r1, [r4, #0]
 8013a1c:	4435      	add	r5, r6
 8013a1e:	464a      	mov	r2, r9
 8013a20:	4441      	add	r1, r8
 8013a22:	eb0a 0005 	add.w	r0, sl, r5
 8013a26:	f7ff ffb6 	bl	8013996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f7ff ff9c 	bl	8013968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013a30:	9b01      	ldr	r3, [sp, #4]
 8013a32:	f8c4 a000 	str.w	sl, [r4]
 8013a36:	60a3      	str	r3, [r4, #8]
 8013a38:	b002      	add	sp, #8
 8013a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8013a3e:	6802      	ldr	r2, [r0, #0]
 8013a40:	2300      	movs	r3, #0
 8013a42:	6043      	str	r3, [r0, #4]
 8013a44:	7013      	strb	r3, [r2, #0]
 8013a46:	4770      	bx	lr

08013a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8013a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a4a:	6846      	ldr	r6, [r0, #4]
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	460f      	mov	r7, r1
 8013a50:	f7ff ffb4 	bl	80139bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013a54:	1c75      	adds	r5, r6, #1
 8013a56:	4285      	cmp	r5, r0
 8013a58:	d907      	bls.n	8013a6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	2300      	movs	r3, #0
 8013a60:	461a      	mov	r2, r3
 8013a62:	4631      	mov	r1, r6
 8013a64:	4620      	mov	r0, r4
 8013a66:	f7ff ffb2 	bl	80139ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	559f      	strb	r7, [r3, r6]
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	6065      	str	r5, [r4, #4]
 8013a72:	2200      	movs	r2, #0
 8013a74:	555a      	strb	r2, [r3, r5]
 8013a76:	b003      	add	sp, #12
 8013a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8013a7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013a7e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013a82:	4604      	mov	r4, r0
 8013a84:	eb02 0708 	add.w	r7, r2, r8
 8013a88:	460e      	mov	r6, r1
 8013a8a:	4615      	mov	r5, r2
 8013a8c:	f7ff ff96 	bl	80139bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013a90:	42b8      	cmp	r0, r7
 8013a92:	d30e      	bcc.n	8013ab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8013a94:	b12d      	cbz	r5, 8013aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8013a96:	6820      	ldr	r0, [r4, #0]
 8013a98:	462a      	mov	r2, r5
 8013a9a:	4631      	mov	r1, r6
 8013a9c:	4440      	add	r0, r8
 8013a9e:	f7ff ff7a 	bl	8013996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013aa2:	6823      	ldr	r3, [r4, #0]
 8013aa4:	6067      	str	r7, [r4, #4]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	55da      	strb	r2, [r3, r7]
 8013aac:	b002      	add	sp, #8
 8013aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab2:	9500      	str	r5, [sp, #0]
 8013ab4:	4633      	mov	r3, r6
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	4641      	mov	r1, r8
 8013aba:	4620      	mov	r0, r4
 8013abc:	f7ff ff87 	bl	80139ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013ac0:	e7ef      	b.n	8013aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
	...

08013ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8013ac4:	b570      	push	{r4, r5, r6, lr}
 8013ac6:	4b06      	ldr	r3, [pc, #24]	@ (8013ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8013ac8:	4604      	mov	r4, r0
 8013aca:	460d      	mov	r5, r1
 8013acc:	4616      	mov	r6, r2
 8013ace:	2100      	movs	r1, #0
 8013ad0:	f7ff ff55 	bl	801397e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f7ff ffce 	bl	8013a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
 8013ae0:	08016c80 	.word	0x08016c80

08013ae4 <_ZdlPv>:
 8013ae4:	f000 b81e 	b.w	8013b24 <free>

08013ae8 <_ZSt15get_new_handlerv>:
 8013ae8:	4b02      	ldr	r3, [pc, #8]	@ (8013af4 <_ZSt15get_new_handlerv+0xc>)
 8013aea:	6818      	ldr	r0, [r3, #0]
 8013aec:	f3bf 8f5b 	dmb	ish
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop
 8013af4:	200061c4 	.word	0x200061c4

08013af8 <_ZSt17__throw_bad_allocv>:
 8013af8:	b508      	push	{r3, lr}
 8013afa:	f000 f803 	bl	8013b04 <abort>

08013afe <_ZSt20__throw_length_errorPKc>:
 8013afe:	b508      	push	{r3, lr}
 8013b00:	f000 f800 	bl	8013b04 <abort>

08013b04 <abort>:
 8013b04:	b508      	push	{r3, lr}
 8013b06:	2006      	movs	r0, #6
 8013b08:	f000 fec0 	bl	801488c <raise>
 8013b0c:	2001      	movs	r0, #1
 8013b0e:	f7f4 ff15 	bl	800893c <_exit>
	...

08013b14 <malloc>:
 8013b14:	4b02      	ldr	r3, [pc, #8]	@ (8013b20 <malloc+0xc>)
 8013b16:	4601      	mov	r1, r0
 8013b18:	6818      	ldr	r0, [r3, #0]
 8013b1a:	f000 b82d 	b.w	8013b78 <_malloc_r>
 8013b1e:	bf00      	nop
 8013b20:	20000110 	.word	0x20000110

08013b24 <free>:
 8013b24:	4b02      	ldr	r3, [pc, #8]	@ (8013b30 <free+0xc>)
 8013b26:	4601      	mov	r1, r0
 8013b28:	6818      	ldr	r0, [r3, #0]
 8013b2a:	f001 be05 	b.w	8015738 <_free_r>
 8013b2e:	bf00      	nop
 8013b30:	20000110 	.word	0x20000110

08013b34 <sbrk_aligned>:
 8013b34:	b570      	push	{r4, r5, r6, lr}
 8013b36:	4e0f      	ldr	r6, [pc, #60]	@ (8013b74 <sbrk_aligned+0x40>)
 8013b38:	460c      	mov	r4, r1
 8013b3a:	6831      	ldr	r1, [r6, #0]
 8013b3c:	4605      	mov	r5, r0
 8013b3e:	b911      	cbnz	r1, 8013b46 <sbrk_aligned+0x12>
 8013b40:	f000 ff4e 	bl	80149e0 <_sbrk_r>
 8013b44:	6030      	str	r0, [r6, #0]
 8013b46:	4621      	mov	r1, r4
 8013b48:	4628      	mov	r0, r5
 8013b4a:	f000 ff49 	bl	80149e0 <_sbrk_r>
 8013b4e:	1c43      	adds	r3, r0, #1
 8013b50:	d103      	bne.n	8013b5a <sbrk_aligned+0x26>
 8013b52:	f04f 34ff 	mov.w	r4, #4294967295
 8013b56:	4620      	mov	r0, r4
 8013b58:	bd70      	pop	{r4, r5, r6, pc}
 8013b5a:	1cc4      	adds	r4, r0, #3
 8013b5c:	f024 0403 	bic.w	r4, r4, #3
 8013b60:	42a0      	cmp	r0, r4
 8013b62:	d0f8      	beq.n	8013b56 <sbrk_aligned+0x22>
 8013b64:	1a21      	subs	r1, r4, r0
 8013b66:	4628      	mov	r0, r5
 8013b68:	f000 ff3a 	bl	80149e0 <_sbrk_r>
 8013b6c:	3001      	adds	r0, #1
 8013b6e:	d1f2      	bne.n	8013b56 <sbrk_aligned+0x22>
 8013b70:	e7ef      	b.n	8013b52 <sbrk_aligned+0x1e>
 8013b72:	bf00      	nop
 8013b74:	200061c8 	.word	0x200061c8

08013b78 <_malloc_r>:
 8013b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b7c:	1ccd      	adds	r5, r1, #3
 8013b7e:	f025 0503 	bic.w	r5, r5, #3
 8013b82:	3508      	adds	r5, #8
 8013b84:	2d0c      	cmp	r5, #12
 8013b86:	bf38      	it	cc
 8013b88:	250c      	movcc	r5, #12
 8013b8a:	2d00      	cmp	r5, #0
 8013b8c:	4606      	mov	r6, r0
 8013b8e:	db01      	blt.n	8013b94 <_malloc_r+0x1c>
 8013b90:	42a9      	cmp	r1, r5
 8013b92:	d904      	bls.n	8013b9e <_malloc_r+0x26>
 8013b94:	230c      	movs	r3, #12
 8013b96:	6033      	str	r3, [r6, #0]
 8013b98:	2000      	movs	r0, #0
 8013b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013c74 <_malloc_r+0xfc>
 8013ba2:	f000 f869 	bl	8013c78 <__malloc_lock>
 8013ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8013baa:	461c      	mov	r4, r3
 8013bac:	bb44      	cbnz	r4, 8013c00 <_malloc_r+0x88>
 8013bae:	4629      	mov	r1, r5
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	f7ff ffbf 	bl	8013b34 <sbrk_aligned>
 8013bb6:	1c43      	adds	r3, r0, #1
 8013bb8:	4604      	mov	r4, r0
 8013bba:	d158      	bne.n	8013c6e <_malloc_r+0xf6>
 8013bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8013bc0:	4627      	mov	r7, r4
 8013bc2:	2f00      	cmp	r7, #0
 8013bc4:	d143      	bne.n	8013c4e <_malloc_r+0xd6>
 8013bc6:	2c00      	cmp	r4, #0
 8013bc8:	d04b      	beq.n	8013c62 <_malloc_r+0xea>
 8013bca:	6823      	ldr	r3, [r4, #0]
 8013bcc:	4639      	mov	r1, r7
 8013bce:	4630      	mov	r0, r6
 8013bd0:	eb04 0903 	add.w	r9, r4, r3
 8013bd4:	f000 ff04 	bl	80149e0 <_sbrk_r>
 8013bd8:	4581      	cmp	r9, r0
 8013bda:	d142      	bne.n	8013c62 <_malloc_r+0xea>
 8013bdc:	6821      	ldr	r1, [r4, #0]
 8013bde:	1a6d      	subs	r5, r5, r1
 8013be0:	4629      	mov	r1, r5
 8013be2:	4630      	mov	r0, r6
 8013be4:	f7ff ffa6 	bl	8013b34 <sbrk_aligned>
 8013be8:	3001      	adds	r0, #1
 8013bea:	d03a      	beq.n	8013c62 <_malloc_r+0xea>
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	442b      	add	r3, r5
 8013bf0:	6023      	str	r3, [r4, #0]
 8013bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8013bf6:	685a      	ldr	r2, [r3, #4]
 8013bf8:	bb62      	cbnz	r2, 8013c54 <_malloc_r+0xdc>
 8013bfa:	f8c8 7000 	str.w	r7, [r8]
 8013bfe:	e00f      	b.n	8013c20 <_malloc_r+0xa8>
 8013c00:	6822      	ldr	r2, [r4, #0]
 8013c02:	1b52      	subs	r2, r2, r5
 8013c04:	d420      	bmi.n	8013c48 <_malloc_r+0xd0>
 8013c06:	2a0b      	cmp	r2, #11
 8013c08:	d917      	bls.n	8013c3a <_malloc_r+0xc2>
 8013c0a:	1961      	adds	r1, r4, r5
 8013c0c:	42a3      	cmp	r3, r4
 8013c0e:	6025      	str	r5, [r4, #0]
 8013c10:	bf18      	it	ne
 8013c12:	6059      	strne	r1, [r3, #4]
 8013c14:	6863      	ldr	r3, [r4, #4]
 8013c16:	bf08      	it	eq
 8013c18:	f8c8 1000 	streq.w	r1, [r8]
 8013c1c:	5162      	str	r2, [r4, r5]
 8013c1e:	604b      	str	r3, [r1, #4]
 8013c20:	4630      	mov	r0, r6
 8013c22:	f000 f82f 	bl	8013c84 <__malloc_unlock>
 8013c26:	f104 000b 	add.w	r0, r4, #11
 8013c2a:	1d23      	adds	r3, r4, #4
 8013c2c:	f020 0007 	bic.w	r0, r0, #7
 8013c30:	1ac2      	subs	r2, r0, r3
 8013c32:	bf1c      	itt	ne
 8013c34:	1a1b      	subne	r3, r3, r0
 8013c36:	50a3      	strne	r3, [r4, r2]
 8013c38:	e7af      	b.n	8013b9a <_malloc_r+0x22>
 8013c3a:	6862      	ldr	r2, [r4, #4]
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	bf0c      	ite	eq
 8013c40:	f8c8 2000 	streq.w	r2, [r8]
 8013c44:	605a      	strne	r2, [r3, #4]
 8013c46:	e7eb      	b.n	8013c20 <_malloc_r+0xa8>
 8013c48:	4623      	mov	r3, r4
 8013c4a:	6864      	ldr	r4, [r4, #4]
 8013c4c:	e7ae      	b.n	8013bac <_malloc_r+0x34>
 8013c4e:	463c      	mov	r4, r7
 8013c50:	687f      	ldr	r7, [r7, #4]
 8013c52:	e7b6      	b.n	8013bc2 <_malloc_r+0x4a>
 8013c54:	461a      	mov	r2, r3
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	42a3      	cmp	r3, r4
 8013c5a:	d1fb      	bne.n	8013c54 <_malloc_r+0xdc>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	6053      	str	r3, [r2, #4]
 8013c60:	e7de      	b.n	8013c20 <_malloc_r+0xa8>
 8013c62:	230c      	movs	r3, #12
 8013c64:	6033      	str	r3, [r6, #0]
 8013c66:	4630      	mov	r0, r6
 8013c68:	f000 f80c 	bl	8013c84 <__malloc_unlock>
 8013c6c:	e794      	b.n	8013b98 <_malloc_r+0x20>
 8013c6e:	6005      	str	r5, [r0, #0]
 8013c70:	e7d6      	b.n	8013c20 <_malloc_r+0xa8>
 8013c72:	bf00      	nop
 8013c74:	200061cc 	.word	0x200061cc

08013c78 <__malloc_lock>:
 8013c78:	4801      	ldr	r0, [pc, #4]	@ (8013c80 <__malloc_lock+0x8>)
 8013c7a:	f000 befe 	b.w	8014a7a <__retarget_lock_acquire_recursive>
 8013c7e:	bf00      	nop
 8013c80:	20006310 	.word	0x20006310

08013c84 <__malloc_unlock>:
 8013c84:	4801      	ldr	r0, [pc, #4]	@ (8013c8c <__malloc_unlock+0x8>)
 8013c86:	f000 bef9 	b.w	8014a7c <__retarget_lock_release_recursive>
 8013c8a:	bf00      	nop
 8013c8c:	20006310 	.word	0x20006310

08013c90 <realloc>:
 8013c90:	4b02      	ldr	r3, [pc, #8]	@ (8013c9c <realloc+0xc>)
 8013c92:	460a      	mov	r2, r1
 8013c94:	4601      	mov	r1, r0
 8013c96:	6818      	ldr	r0, [r3, #0]
 8013c98:	f000 b802 	b.w	8013ca0 <_realloc_r>
 8013c9c:	20000110 	.word	0x20000110

08013ca0 <_realloc_r>:
 8013ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca4:	4680      	mov	r8, r0
 8013ca6:	4615      	mov	r5, r2
 8013ca8:	460c      	mov	r4, r1
 8013caa:	b921      	cbnz	r1, 8013cb6 <_realloc_r+0x16>
 8013cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	f7ff bf61 	b.w	8013b78 <_malloc_r>
 8013cb6:	b92a      	cbnz	r2, 8013cc4 <_realloc_r+0x24>
 8013cb8:	f001 fd3e 	bl	8015738 <_free_r>
 8013cbc:	2400      	movs	r4, #0
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc4:	f002 f904 	bl	8015ed0 <_malloc_usable_size_r>
 8013cc8:	4285      	cmp	r5, r0
 8013cca:	4606      	mov	r6, r0
 8013ccc:	d802      	bhi.n	8013cd4 <_realloc_r+0x34>
 8013cce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013cd2:	d8f4      	bhi.n	8013cbe <_realloc_r+0x1e>
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	4640      	mov	r0, r8
 8013cd8:	f7ff ff4e 	bl	8013b78 <_malloc_r>
 8013cdc:	4607      	mov	r7, r0
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d0ec      	beq.n	8013cbc <_realloc_r+0x1c>
 8013ce2:	42b5      	cmp	r5, r6
 8013ce4:	462a      	mov	r2, r5
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	bf28      	it	cs
 8013cea:	4632      	movcs	r2, r6
 8013cec:	f000 fec7 	bl	8014a7e <memcpy>
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	4640      	mov	r0, r8
 8013cf4:	f001 fd20 	bl	8015738 <_free_r>
 8013cf8:	463c      	mov	r4, r7
 8013cfa:	e7e0      	b.n	8013cbe <_realloc_r+0x1e>

08013cfc <__cvt>:
 8013cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d00:	ec57 6b10 	vmov	r6, r7, d0
 8013d04:	2f00      	cmp	r7, #0
 8013d06:	460c      	mov	r4, r1
 8013d08:	4619      	mov	r1, r3
 8013d0a:	463b      	mov	r3, r7
 8013d0c:	bfbb      	ittet	lt
 8013d0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013d12:	461f      	movlt	r7, r3
 8013d14:	2300      	movge	r3, #0
 8013d16:	232d      	movlt	r3, #45	@ 0x2d
 8013d18:	700b      	strb	r3, [r1, #0]
 8013d1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013d20:	4691      	mov	r9, r2
 8013d22:	f023 0820 	bic.w	r8, r3, #32
 8013d26:	bfbc      	itt	lt
 8013d28:	4632      	movlt	r2, r6
 8013d2a:	4616      	movlt	r6, r2
 8013d2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013d30:	d005      	beq.n	8013d3e <__cvt+0x42>
 8013d32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013d36:	d100      	bne.n	8013d3a <__cvt+0x3e>
 8013d38:	3401      	adds	r4, #1
 8013d3a:	2102      	movs	r1, #2
 8013d3c:	e000      	b.n	8013d40 <__cvt+0x44>
 8013d3e:	2103      	movs	r1, #3
 8013d40:	ab03      	add	r3, sp, #12
 8013d42:	9301      	str	r3, [sp, #4]
 8013d44:	ab02      	add	r3, sp, #8
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	ec47 6b10 	vmov	d0, r6, r7
 8013d4c:	4653      	mov	r3, sl
 8013d4e:	4622      	mov	r2, r4
 8013d50:	f000 ff2e 	bl	8014bb0 <_dtoa_r>
 8013d54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013d58:	4605      	mov	r5, r0
 8013d5a:	d119      	bne.n	8013d90 <__cvt+0x94>
 8013d5c:	f019 0f01 	tst.w	r9, #1
 8013d60:	d00e      	beq.n	8013d80 <__cvt+0x84>
 8013d62:	eb00 0904 	add.w	r9, r0, r4
 8013d66:	2200      	movs	r2, #0
 8013d68:	2300      	movs	r3, #0
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	4639      	mov	r1, r7
 8013d6e:	f7ec feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8013d72:	b108      	cbz	r0, 8013d78 <__cvt+0x7c>
 8013d74:	f8cd 900c 	str.w	r9, [sp, #12]
 8013d78:	2230      	movs	r2, #48	@ 0x30
 8013d7a:	9b03      	ldr	r3, [sp, #12]
 8013d7c:	454b      	cmp	r3, r9
 8013d7e:	d31e      	bcc.n	8013dbe <__cvt+0xc2>
 8013d80:	9b03      	ldr	r3, [sp, #12]
 8013d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d84:	1b5b      	subs	r3, r3, r5
 8013d86:	4628      	mov	r0, r5
 8013d88:	6013      	str	r3, [r2, #0]
 8013d8a:	b004      	add	sp, #16
 8013d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013d94:	eb00 0904 	add.w	r9, r0, r4
 8013d98:	d1e5      	bne.n	8013d66 <__cvt+0x6a>
 8013d9a:	7803      	ldrb	r3, [r0, #0]
 8013d9c:	2b30      	cmp	r3, #48	@ 0x30
 8013d9e:	d10a      	bne.n	8013db6 <__cvt+0xba>
 8013da0:	2200      	movs	r2, #0
 8013da2:	2300      	movs	r3, #0
 8013da4:	4630      	mov	r0, r6
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec fe96 	bl	8000ad8 <__aeabi_dcmpeq>
 8013dac:	b918      	cbnz	r0, 8013db6 <__cvt+0xba>
 8013dae:	f1c4 0401 	rsb	r4, r4, #1
 8013db2:	f8ca 4000 	str.w	r4, [sl]
 8013db6:	f8da 3000 	ldr.w	r3, [sl]
 8013dba:	4499      	add	r9, r3
 8013dbc:	e7d3      	b.n	8013d66 <__cvt+0x6a>
 8013dbe:	1c59      	adds	r1, r3, #1
 8013dc0:	9103      	str	r1, [sp, #12]
 8013dc2:	701a      	strb	r2, [r3, #0]
 8013dc4:	e7d9      	b.n	8013d7a <__cvt+0x7e>

08013dc6 <__exponent>:
 8013dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dc8:	2900      	cmp	r1, #0
 8013dca:	bfba      	itte	lt
 8013dcc:	4249      	neglt	r1, r1
 8013dce:	232d      	movlt	r3, #45	@ 0x2d
 8013dd0:	232b      	movge	r3, #43	@ 0x2b
 8013dd2:	2909      	cmp	r1, #9
 8013dd4:	7002      	strb	r2, [r0, #0]
 8013dd6:	7043      	strb	r3, [r0, #1]
 8013dd8:	dd29      	ble.n	8013e2e <__exponent+0x68>
 8013dda:	f10d 0307 	add.w	r3, sp, #7
 8013dde:	461d      	mov	r5, r3
 8013de0:	270a      	movs	r7, #10
 8013de2:	461a      	mov	r2, r3
 8013de4:	fbb1 f6f7 	udiv	r6, r1, r7
 8013de8:	fb07 1416 	mls	r4, r7, r6, r1
 8013dec:	3430      	adds	r4, #48	@ 0x30
 8013dee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013df2:	460c      	mov	r4, r1
 8013df4:	2c63      	cmp	r4, #99	@ 0x63
 8013df6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013dfa:	4631      	mov	r1, r6
 8013dfc:	dcf1      	bgt.n	8013de2 <__exponent+0x1c>
 8013dfe:	3130      	adds	r1, #48	@ 0x30
 8013e00:	1e94      	subs	r4, r2, #2
 8013e02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013e06:	1c41      	adds	r1, r0, #1
 8013e08:	4623      	mov	r3, r4
 8013e0a:	42ab      	cmp	r3, r5
 8013e0c:	d30a      	bcc.n	8013e24 <__exponent+0x5e>
 8013e0e:	f10d 0309 	add.w	r3, sp, #9
 8013e12:	1a9b      	subs	r3, r3, r2
 8013e14:	42ac      	cmp	r4, r5
 8013e16:	bf88      	it	hi
 8013e18:	2300      	movhi	r3, #0
 8013e1a:	3302      	adds	r3, #2
 8013e1c:	4403      	add	r3, r0
 8013e1e:	1a18      	subs	r0, r3, r0
 8013e20:	b003      	add	sp, #12
 8013e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013e28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013e2c:	e7ed      	b.n	8013e0a <__exponent+0x44>
 8013e2e:	2330      	movs	r3, #48	@ 0x30
 8013e30:	3130      	adds	r1, #48	@ 0x30
 8013e32:	7083      	strb	r3, [r0, #2]
 8013e34:	70c1      	strb	r1, [r0, #3]
 8013e36:	1d03      	adds	r3, r0, #4
 8013e38:	e7f1      	b.n	8013e1e <__exponent+0x58>
	...

08013e3c <_printf_float>:
 8013e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e40:	b08d      	sub	sp, #52	@ 0x34
 8013e42:	460c      	mov	r4, r1
 8013e44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013e48:	4616      	mov	r6, r2
 8013e4a:	461f      	mov	r7, r3
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	f000 fd25 	bl	801489c <_localeconv_r>
 8013e52:	6803      	ldr	r3, [r0, #0]
 8013e54:	9304      	str	r3, [sp, #16]
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7ec fa12 	bl	8000280 <strlen>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e60:	f8d8 3000 	ldr.w	r3, [r8]
 8013e64:	9005      	str	r0, [sp, #20]
 8013e66:	3307      	adds	r3, #7
 8013e68:	f023 0307 	bic.w	r3, r3, #7
 8013e6c:	f103 0208 	add.w	r2, r3, #8
 8013e70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013e74:	f8d4 b000 	ldr.w	fp, [r4]
 8013e78:	f8c8 2000 	str.w	r2, [r8]
 8013e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013e84:	9307      	str	r3, [sp, #28]
 8013e86:	f8cd 8018 	str.w	r8, [sp, #24]
 8013e8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e92:	4b9c      	ldr	r3, [pc, #624]	@ (8014104 <_printf_float+0x2c8>)
 8013e94:	f04f 32ff 	mov.w	r2, #4294967295
 8013e98:	f7ec fe50 	bl	8000b3c <__aeabi_dcmpun>
 8013e9c:	bb70      	cbnz	r0, 8013efc <_printf_float+0xc0>
 8013e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ea2:	4b98      	ldr	r3, [pc, #608]	@ (8014104 <_printf_float+0x2c8>)
 8013ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ea8:	f7ec fe2a 	bl	8000b00 <__aeabi_dcmple>
 8013eac:	bb30      	cbnz	r0, 8013efc <_printf_float+0xc0>
 8013eae:	2200      	movs	r2, #0
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	4640      	mov	r0, r8
 8013eb4:	4649      	mov	r1, r9
 8013eb6:	f7ec fe19 	bl	8000aec <__aeabi_dcmplt>
 8013eba:	b110      	cbz	r0, 8013ec2 <_printf_float+0x86>
 8013ebc:	232d      	movs	r3, #45	@ 0x2d
 8013ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ec2:	4a91      	ldr	r2, [pc, #580]	@ (8014108 <_printf_float+0x2cc>)
 8013ec4:	4b91      	ldr	r3, [pc, #580]	@ (801410c <_printf_float+0x2d0>)
 8013ec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013eca:	bf94      	ite	ls
 8013ecc:	4690      	movls	r8, r2
 8013ece:	4698      	movhi	r8, r3
 8013ed0:	2303      	movs	r3, #3
 8013ed2:	6123      	str	r3, [r4, #16]
 8013ed4:	f02b 0304 	bic.w	r3, fp, #4
 8013ed8:	6023      	str	r3, [r4, #0]
 8013eda:	f04f 0900 	mov.w	r9, #0
 8013ede:	9700      	str	r7, [sp, #0]
 8013ee0:	4633      	mov	r3, r6
 8013ee2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013ee4:	4621      	mov	r1, r4
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f000 f9d2 	bl	8014290 <_printf_common>
 8013eec:	3001      	adds	r0, #1
 8013eee:	f040 808d 	bne.w	801400c <_printf_float+0x1d0>
 8013ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef6:	b00d      	add	sp, #52	@ 0x34
 8013ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efc:	4642      	mov	r2, r8
 8013efe:	464b      	mov	r3, r9
 8013f00:	4640      	mov	r0, r8
 8013f02:	4649      	mov	r1, r9
 8013f04:	f7ec fe1a 	bl	8000b3c <__aeabi_dcmpun>
 8013f08:	b140      	cbz	r0, 8013f1c <_printf_float+0xe0>
 8013f0a:	464b      	mov	r3, r9
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	bfbc      	itt	lt
 8013f10:	232d      	movlt	r3, #45	@ 0x2d
 8013f12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013f16:	4a7e      	ldr	r2, [pc, #504]	@ (8014110 <_printf_float+0x2d4>)
 8013f18:	4b7e      	ldr	r3, [pc, #504]	@ (8014114 <_printf_float+0x2d8>)
 8013f1a:	e7d4      	b.n	8013ec6 <_printf_float+0x8a>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013f22:	9206      	str	r2, [sp, #24]
 8013f24:	1c5a      	adds	r2, r3, #1
 8013f26:	d13b      	bne.n	8013fa0 <_printf_float+0x164>
 8013f28:	2306      	movs	r3, #6
 8013f2a:	6063      	str	r3, [r4, #4]
 8013f2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013f30:	2300      	movs	r3, #0
 8013f32:	6022      	str	r2, [r4, #0]
 8013f34:	9303      	str	r3, [sp, #12]
 8013f36:	ab0a      	add	r3, sp, #40	@ 0x28
 8013f38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013f3c:	ab09      	add	r3, sp, #36	@ 0x24
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	6861      	ldr	r1, [r4, #4]
 8013f42:	ec49 8b10 	vmov	d0, r8, r9
 8013f46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7ff fed6 	bl	8013cfc <__cvt>
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f54:	2b47      	cmp	r3, #71	@ 0x47
 8013f56:	4680      	mov	r8, r0
 8013f58:	d129      	bne.n	8013fae <_printf_float+0x172>
 8013f5a:	1cc8      	adds	r0, r1, #3
 8013f5c:	db02      	blt.n	8013f64 <_printf_float+0x128>
 8013f5e:	6863      	ldr	r3, [r4, #4]
 8013f60:	4299      	cmp	r1, r3
 8013f62:	dd41      	ble.n	8013fe8 <_printf_float+0x1ac>
 8013f64:	f1aa 0a02 	sub.w	sl, sl, #2
 8013f68:	fa5f fa8a 	uxtb.w	sl, sl
 8013f6c:	3901      	subs	r1, #1
 8013f6e:	4652      	mov	r2, sl
 8013f70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013f74:	9109      	str	r1, [sp, #36]	@ 0x24
 8013f76:	f7ff ff26 	bl	8013dc6 <__exponent>
 8013f7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f7c:	1813      	adds	r3, r2, r0
 8013f7e:	2a01      	cmp	r2, #1
 8013f80:	4681      	mov	r9, r0
 8013f82:	6123      	str	r3, [r4, #16]
 8013f84:	dc02      	bgt.n	8013f8c <_printf_float+0x150>
 8013f86:	6822      	ldr	r2, [r4, #0]
 8013f88:	07d2      	lsls	r2, r2, #31
 8013f8a:	d501      	bpl.n	8013f90 <_printf_float+0x154>
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	6123      	str	r3, [r4, #16]
 8013f90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d0a2      	beq.n	8013ede <_printf_float+0xa2>
 8013f98:	232d      	movs	r3, #45	@ 0x2d
 8013f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f9e:	e79e      	b.n	8013ede <_printf_float+0xa2>
 8013fa0:	9a06      	ldr	r2, [sp, #24]
 8013fa2:	2a47      	cmp	r2, #71	@ 0x47
 8013fa4:	d1c2      	bne.n	8013f2c <_printf_float+0xf0>
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d1c0      	bne.n	8013f2c <_printf_float+0xf0>
 8013faa:	2301      	movs	r3, #1
 8013fac:	e7bd      	b.n	8013f2a <_printf_float+0xee>
 8013fae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013fb2:	d9db      	bls.n	8013f6c <_printf_float+0x130>
 8013fb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013fb8:	d118      	bne.n	8013fec <_printf_float+0x1b0>
 8013fba:	2900      	cmp	r1, #0
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	dd0b      	ble.n	8013fd8 <_printf_float+0x19c>
 8013fc0:	6121      	str	r1, [r4, #16]
 8013fc2:	b913      	cbnz	r3, 8013fca <_printf_float+0x18e>
 8013fc4:	6822      	ldr	r2, [r4, #0]
 8013fc6:	07d0      	lsls	r0, r2, #31
 8013fc8:	d502      	bpl.n	8013fd0 <_printf_float+0x194>
 8013fca:	3301      	adds	r3, #1
 8013fcc:	440b      	add	r3, r1
 8013fce:	6123      	str	r3, [r4, #16]
 8013fd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013fd2:	f04f 0900 	mov.w	r9, #0
 8013fd6:	e7db      	b.n	8013f90 <_printf_float+0x154>
 8013fd8:	b913      	cbnz	r3, 8013fe0 <_printf_float+0x1a4>
 8013fda:	6822      	ldr	r2, [r4, #0]
 8013fdc:	07d2      	lsls	r2, r2, #31
 8013fde:	d501      	bpl.n	8013fe4 <_printf_float+0x1a8>
 8013fe0:	3302      	adds	r3, #2
 8013fe2:	e7f4      	b.n	8013fce <_printf_float+0x192>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e7f2      	b.n	8013fce <_printf_float+0x192>
 8013fe8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013fee:	4299      	cmp	r1, r3
 8013ff0:	db05      	blt.n	8013ffe <_printf_float+0x1c2>
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	6121      	str	r1, [r4, #16]
 8013ff6:	07d8      	lsls	r0, r3, #31
 8013ff8:	d5ea      	bpl.n	8013fd0 <_printf_float+0x194>
 8013ffa:	1c4b      	adds	r3, r1, #1
 8013ffc:	e7e7      	b.n	8013fce <_printf_float+0x192>
 8013ffe:	2900      	cmp	r1, #0
 8014000:	bfd4      	ite	le
 8014002:	f1c1 0202 	rsble	r2, r1, #2
 8014006:	2201      	movgt	r2, #1
 8014008:	4413      	add	r3, r2
 801400a:	e7e0      	b.n	8013fce <_printf_float+0x192>
 801400c:	6823      	ldr	r3, [r4, #0]
 801400e:	055a      	lsls	r2, r3, #21
 8014010:	d407      	bmi.n	8014022 <_printf_float+0x1e6>
 8014012:	6923      	ldr	r3, [r4, #16]
 8014014:	4642      	mov	r2, r8
 8014016:	4631      	mov	r1, r6
 8014018:	4628      	mov	r0, r5
 801401a:	47b8      	blx	r7
 801401c:	3001      	adds	r0, #1
 801401e:	d12b      	bne.n	8014078 <_printf_float+0x23c>
 8014020:	e767      	b.n	8013ef2 <_printf_float+0xb6>
 8014022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014026:	f240 80dd 	bls.w	80141e4 <_printf_float+0x3a8>
 801402a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801402e:	2200      	movs	r2, #0
 8014030:	2300      	movs	r3, #0
 8014032:	f7ec fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 8014036:	2800      	cmp	r0, #0
 8014038:	d033      	beq.n	80140a2 <_printf_float+0x266>
 801403a:	4a37      	ldr	r2, [pc, #220]	@ (8014118 <_printf_float+0x2dc>)
 801403c:	2301      	movs	r3, #1
 801403e:	4631      	mov	r1, r6
 8014040:	4628      	mov	r0, r5
 8014042:	47b8      	blx	r7
 8014044:	3001      	adds	r0, #1
 8014046:	f43f af54 	beq.w	8013ef2 <_printf_float+0xb6>
 801404a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801404e:	4543      	cmp	r3, r8
 8014050:	db02      	blt.n	8014058 <_printf_float+0x21c>
 8014052:	6823      	ldr	r3, [r4, #0]
 8014054:	07d8      	lsls	r0, r3, #31
 8014056:	d50f      	bpl.n	8014078 <_printf_float+0x23c>
 8014058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801405c:	4631      	mov	r1, r6
 801405e:	4628      	mov	r0, r5
 8014060:	47b8      	blx	r7
 8014062:	3001      	adds	r0, #1
 8014064:	f43f af45 	beq.w	8013ef2 <_printf_float+0xb6>
 8014068:	f04f 0900 	mov.w	r9, #0
 801406c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014070:	f104 0a1a 	add.w	sl, r4, #26
 8014074:	45c8      	cmp	r8, r9
 8014076:	dc09      	bgt.n	801408c <_printf_float+0x250>
 8014078:	6823      	ldr	r3, [r4, #0]
 801407a:	079b      	lsls	r3, r3, #30
 801407c:	f100 8103 	bmi.w	8014286 <_printf_float+0x44a>
 8014080:	68e0      	ldr	r0, [r4, #12]
 8014082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014084:	4298      	cmp	r0, r3
 8014086:	bfb8      	it	lt
 8014088:	4618      	movlt	r0, r3
 801408a:	e734      	b.n	8013ef6 <_printf_float+0xba>
 801408c:	2301      	movs	r3, #1
 801408e:	4652      	mov	r2, sl
 8014090:	4631      	mov	r1, r6
 8014092:	4628      	mov	r0, r5
 8014094:	47b8      	blx	r7
 8014096:	3001      	adds	r0, #1
 8014098:	f43f af2b 	beq.w	8013ef2 <_printf_float+0xb6>
 801409c:	f109 0901 	add.w	r9, r9, #1
 80140a0:	e7e8      	b.n	8014074 <_printf_float+0x238>
 80140a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	dc39      	bgt.n	801411c <_printf_float+0x2e0>
 80140a8:	4a1b      	ldr	r2, [pc, #108]	@ (8014118 <_printf_float+0x2dc>)
 80140aa:	2301      	movs	r3, #1
 80140ac:	4631      	mov	r1, r6
 80140ae:	4628      	mov	r0, r5
 80140b0:	47b8      	blx	r7
 80140b2:	3001      	adds	r0, #1
 80140b4:	f43f af1d 	beq.w	8013ef2 <_printf_float+0xb6>
 80140b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80140bc:	ea59 0303 	orrs.w	r3, r9, r3
 80140c0:	d102      	bne.n	80140c8 <_printf_float+0x28c>
 80140c2:	6823      	ldr	r3, [r4, #0]
 80140c4:	07d9      	lsls	r1, r3, #31
 80140c6:	d5d7      	bpl.n	8014078 <_printf_float+0x23c>
 80140c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140cc:	4631      	mov	r1, r6
 80140ce:	4628      	mov	r0, r5
 80140d0:	47b8      	blx	r7
 80140d2:	3001      	adds	r0, #1
 80140d4:	f43f af0d 	beq.w	8013ef2 <_printf_float+0xb6>
 80140d8:	f04f 0a00 	mov.w	sl, #0
 80140dc:	f104 0b1a 	add.w	fp, r4, #26
 80140e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140e2:	425b      	negs	r3, r3
 80140e4:	4553      	cmp	r3, sl
 80140e6:	dc01      	bgt.n	80140ec <_printf_float+0x2b0>
 80140e8:	464b      	mov	r3, r9
 80140ea:	e793      	b.n	8014014 <_printf_float+0x1d8>
 80140ec:	2301      	movs	r3, #1
 80140ee:	465a      	mov	r2, fp
 80140f0:	4631      	mov	r1, r6
 80140f2:	4628      	mov	r0, r5
 80140f4:	47b8      	blx	r7
 80140f6:	3001      	adds	r0, #1
 80140f8:	f43f aefb 	beq.w	8013ef2 <_printf_float+0xb6>
 80140fc:	f10a 0a01 	add.w	sl, sl, #1
 8014100:	e7ee      	b.n	80140e0 <_printf_float+0x2a4>
 8014102:	bf00      	nop
 8014104:	7fefffff 	.word	0x7fefffff
 8014108:	08016c95 	.word	0x08016c95
 801410c:	08016c99 	.word	0x08016c99
 8014110:	08016c9d 	.word	0x08016c9d
 8014114:	08016ca1 	.word	0x08016ca1
 8014118:	08016ca5 	.word	0x08016ca5
 801411c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801411e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014122:	4553      	cmp	r3, sl
 8014124:	bfa8      	it	ge
 8014126:	4653      	movge	r3, sl
 8014128:	2b00      	cmp	r3, #0
 801412a:	4699      	mov	r9, r3
 801412c:	dc36      	bgt.n	801419c <_printf_float+0x360>
 801412e:	f04f 0b00 	mov.w	fp, #0
 8014132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014136:	f104 021a 	add.w	r2, r4, #26
 801413a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801413c:	9306      	str	r3, [sp, #24]
 801413e:	eba3 0309 	sub.w	r3, r3, r9
 8014142:	455b      	cmp	r3, fp
 8014144:	dc31      	bgt.n	80141aa <_printf_float+0x36e>
 8014146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014148:	459a      	cmp	sl, r3
 801414a:	dc3a      	bgt.n	80141c2 <_printf_float+0x386>
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	07da      	lsls	r2, r3, #31
 8014150:	d437      	bmi.n	80141c2 <_printf_float+0x386>
 8014152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014154:	ebaa 0903 	sub.w	r9, sl, r3
 8014158:	9b06      	ldr	r3, [sp, #24]
 801415a:	ebaa 0303 	sub.w	r3, sl, r3
 801415e:	4599      	cmp	r9, r3
 8014160:	bfa8      	it	ge
 8014162:	4699      	movge	r9, r3
 8014164:	f1b9 0f00 	cmp.w	r9, #0
 8014168:	dc33      	bgt.n	80141d2 <_printf_float+0x396>
 801416a:	f04f 0800 	mov.w	r8, #0
 801416e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014172:	f104 0b1a 	add.w	fp, r4, #26
 8014176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014178:	ebaa 0303 	sub.w	r3, sl, r3
 801417c:	eba3 0309 	sub.w	r3, r3, r9
 8014180:	4543      	cmp	r3, r8
 8014182:	f77f af79 	ble.w	8014078 <_printf_float+0x23c>
 8014186:	2301      	movs	r3, #1
 8014188:	465a      	mov	r2, fp
 801418a:	4631      	mov	r1, r6
 801418c:	4628      	mov	r0, r5
 801418e:	47b8      	blx	r7
 8014190:	3001      	adds	r0, #1
 8014192:	f43f aeae 	beq.w	8013ef2 <_printf_float+0xb6>
 8014196:	f108 0801 	add.w	r8, r8, #1
 801419a:	e7ec      	b.n	8014176 <_printf_float+0x33a>
 801419c:	4642      	mov	r2, r8
 801419e:	4631      	mov	r1, r6
 80141a0:	4628      	mov	r0, r5
 80141a2:	47b8      	blx	r7
 80141a4:	3001      	adds	r0, #1
 80141a6:	d1c2      	bne.n	801412e <_printf_float+0x2f2>
 80141a8:	e6a3      	b.n	8013ef2 <_printf_float+0xb6>
 80141aa:	2301      	movs	r3, #1
 80141ac:	4631      	mov	r1, r6
 80141ae:	4628      	mov	r0, r5
 80141b0:	9206      	str	r2, [sp, #24]
 80141b2:	47b8      	blx	r7
 80141b4:	3001      	adds	r0, #1
 80141b6:	f43f ae9c 	beq.w	8013ef2 <_printf_float+0xb6>
 80141ba:	9a06      	ldr	r2, [sp, #24]
 80141bc:	f10b 0b01 	add.w	fp, fp, #1
 80141c0:	e7bb      	b.n	801413a <_printf_float+0x2fe>
 80141c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141c6:	4631      	mov	r1, r6
 80141c8:	4628      	mov	r0, r5
 80141ca:	47b8      	blx	r7
 80141cc:	3001      	adds	r0, #1
 80141ce:	d1c0      	bne.n	8014152 <_printf_float+0x316>
 80141d0:	e68f      	b.n	8013ef2 <_printf_float+0xb6>
 80141d2:	9a06      	ldr	r2, [sp, #24]
 80141d4:	464b      	mov	r3, r9
 80141d6:	4442      	add	r2, r8
 80141d8:	4631      	mov	r1, r6
 80141da:	4628      	mov	r0, r5
 80141dc:	47b8      	blx	r7
 80141de:	3001      	adds	r0, #1
 80141e0:	d1c3      	bne.n	801416a <_printf_float+0x32e>
 80141e2:	e686      	b.n	8013ef2 <_printf_float+0xb6>
 80141e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80141e8:	f1ba 0f01 	cmp.w	sl, #1
 80141ec:	dc01      	bgt.n	80141f2 <_printf_float+0x3b6>
 80141ee:	07db      	lsls	r3, r3, #31
 80141f0:	d536      	bpl.n	8014260 <_printf_float+0x424>
 80141f2:	2301      	movs	r3, #1
 80141f4:	4642      	mov	r2, r8
 80141f6:	4631      	mov	r1, r6
 80141f8:	4628      	mov	r0, r5
 80141fa:	47b8      	blx	r7
 80141fc:	3001      	adds	r0, #1
 80141fe:	f43f ae78 	beq.w	8013ef2 <_printf_float+0xb6>
 8014202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014206:	4631      	mov	r1, r6
 8014208:	4628      	mov	r0, r5
 801420a:	47b8      	blx	r7
 801420c:	3001      	adds	r0, #1
 801420e:	f43f ae70 	beq.w	8013ef2 <_printf_float+0xb6>
 8014212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014216:	2200      	movs	r2, #0
 8014218:	2300      	movs	r3, #0
 801421a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801421e:	f7ec fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8014222:	b9c0      	cbnz	r0, 8014256 <_printf_float+0x41a>
 8014224:	4653      	mov	r3, sl
 8014226:	f108 0201 	add.w	r2, r8, #1
 801422a:	4631      	mov	r1, r6
 801422c:	4628      	mov	r0, r5
 801422e:	47b8      	blx	r7
 8014230:	3001      	adds	r0, #1
 8014232:	d10c      	bne.n	801424e <_printf_float+0x412>
 8014234:	e65d      	b.n	8013ef2 <_printf_float+0xb6>
 8014236:	2301      	movs	r3, #1
 8014238:	465a      	mov	r2, fp
 801423a:	4631      	mov	r1, r6
 801423c:	4628      	mov	r0, r5
 801423e:	47b8      	blx	r7
 8014240:	3001      	adds	r0, #1
 8014242:	f43f ae56 	beq.w	8013ef2 <_printf_float+0xb6>
 8014246:	f108 0801 	add.w	r8, r8, #1
 801424a:	45d0      	cmp	r8, sl
 801424c:	dbf3      	blt.n	8014236 <_printf_float+0x3fa>
 801424e:	464b      	mov	r3, r9
 8014250:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014254:	e6df      	b.n	8014016 <_printf_float+0x1da>
 8014256:	f04f 0800 	mov.w	r8, #0
 801425a:	f104 0b1a 	add.w	fp, r4, #26
 801425e:	e7f4      	b.n	801424a <_printf_float+0x40e>
 8014260:	2301      	movs	r3, #1
 8014262:	4642      	mov	r2, r8
 8014264:	e7e1      	b.n	801422a <_printf_float+0x3ee>
 8014266:	2301      	movs	r3, #1
 8014268:	464a      	mov	r2, r9
 801426a:	4631      	mov	r1, r6
 801426c:	4628      	mov	r0, r5
 801426e:	47b8      	blx	r7
 8014270:	3001      	adds	r0, #1
 8014272:	f43f ae3e 	beq.w	8013ef2 <_printf_float+0xb6>
 8014276:	f108 0801 	add.w	r8, r8, #1
 801427a:	68e3      	ldr	r3, [r4, #12]
 801427c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801427e:	1a5b      	subs	r3, r3, r1
 8014280:	4543      	cmp	r3, r8
 8014282:	dcf0      	bgt.n	8014266 <_printf_float+0x42a>
 8014284:	e6fc      	b.n	8014080 <_printf_float+0x244>
 8014286:	f04f 0800 	mov.w	r8, #0
 801428a:	f104 0919 	add.w	r9, r4, #25
 801428e:	e7f4      	b.n	801427a <_printf_float+0x43e>

08014290 <_printf_common>:
 8014290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014294:	4616      	mov	r6, r2
 8014296:	4698      	mov	r8, r3
 8014298:	688a      	ldr	r2, [r1, #8]
 801429a:	690b      	ldr	r3, [r1, #16]
 801429c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80142a0:	4293      	cmp	r3, r2
 80142a2:	bfb8      	it	lt
 80142a4:	4613      	movlt	r3, r2
 80142a6:	6033      	str	r3, [r6, #0]
 80142a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80142ac:	4607      	mov	r7, r0
 80142ae:	460c      	mov	r4, r1
 80142b0:	b10a      	cbz	r2, 80142b6 <_printf_common+0x26>
 80142b2:	3301      	adds	r3, #1
 80142b4:	6033      	str	r3, [r6, #0]
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	0699      	lsls	r1, r3, #26
 80142ba:	bf42      	ittt	mi
 80142bc:	6833      	ldrmi	r3, [r6, #0]
 80142be:	3302      	addmi	r3, #2
 80142c0:	6033      	strmi	r3, [r6, #0]
 80142c2:	6825      	ldr	r5, [r4, #0]
 80142c4:	f015 0506 	ands.w	r5, r5, #6
 80142c8:	d106      	bne.n	80142d8 <_printf_common+0x48>
 80142ca:	f104 0a19 	add.w	sl, r4, #25
 80142ce:	68e3      	ldr	r3, [r4, #12]
 80142d0:	6832      	ldr	r2, [r6, #0]
 80142d2:	1a9b      	subs	r3, r3, r2
 80142d4:	42ab      	cmp	r3, r5
 80142d6:	dc26      	bgt.n	8014326 <_printf_common+0x96>
 80142d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80142dc:	6822      	ldr	r2, [r4, #0]
 80142de:	3b00      	subs	r3, #0
 80142e0:	bf18      	it	ne
 80142e2:	2301      	movne	r3, #1
 80142e4:	0692      	lsls	r2, r2, #26
 80142e6:	d42b      	bmi.n	8014340 <_printf_common+0xb0>
 80142e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80142ec:	4641      	mov	r1, r8
 80142ee:	4638      	mov	r0, r7
 80142f0:	47c8      	blx	r9
 80142f2:	3001      	adds	r0, #1
 80142f4:	d01e      	beq.n	8014334 <_printf_common+0xa4>
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	6922      	ldr	r2, [r4, #16]
 80142fa:	f003 0306 	and.w	r3, r3, #6
 80142fe:	2b04      	cmp	r3, #4
 8014300:	bf02      	ittt	eq
 8014302:	68e5      	ldreq	r5, [r4, #12]
 8014304:	6833      	ldreq	r3, [r6, #0]
 8014306:	1aed      	subeq	r5, r5, r3
 8014308:	68a3      	ldr	r3, [r4, #8]
 801430a:	bf0c      	ite	eq
 801430c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014310:	2500      	movne	r5, #0
 8014312:	4293      	cmp	r3, r2
 8014314:	bfc4      	itt	gt
 8014316:	1a9b      	subgt	r3, r3, r2
 8014318:	18ed      	addgt	r5, r5, r3
 801431a:	2600      	movs	r6, #0
 801431c:	341a      	adds	r4, #26
 801431e:	42b5      	cmp	r5, r6
 8014320:	d11a      	bne.n	8014358 <_printf_common+0xc8>
 8014322:	2000      	movs	r0, #0
 8014324:	e008      	b.n	8014338 <_printf_common+0xa8>
 8014326:	2301      	movs	r3, #1
 8014328:	4652      	mov	r2, sl
 801432a:	4641      	mov	r1, r8
 801432c:	4638      	mov	r0, r7
 801432e:	47c8      	blx	r9
 8014330:	3001      	adds	r0, #1
 8014332:	d103      	bne.n	801433c <_printf_common+0xac>
 8014334:	f04f 30ff 	mov.w	r0, #4294967295
 8014338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801433c:	3501      	adds	r5, #1
 801433e:	e7c6      	b.n	80142ce <_printf_common+0x3e>
 8014340:	18e1      	adds	r1, r4, r3
 8014342:	1c5a      	adds	r2, r3, #1
 8014344:	2030      	movs	r0, #48	@ 0x30
 8014346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801434a:	4422      	add	r2, r4
 801434c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014354:	3302      	adds	r3, #2
 8014356:	e7c7      	b.n	80142e8 <_printf_common+0x58>
 8014358:	2301      	movs	r3, #1
 801435a:	4622      	mov	r2, r4
 801435c:	4641      	mov	r1, r8
 801435e:	4638      	mov	r0, r7
 8014360:	47c8      	blx	r9
 8014362:	3001      	adds	r0, #1
 8014364:	d0e6      	beq.n	8014334 <_printf_common+0xa4>
 8014366:	3601      	adds	r6, #1
 8014368:	e7d9      	b.n	801431e <_printf_common+0x8e>
	...

0801436c <_printf_i>:
 801436c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014370:	7e0f      	ldrb	r7, [r1, #24]
 8014372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014374:	2f78      	cmp	r7, #120	@ 0x78
 8014376:	4691      	mov	r9, r2
 8014378:	4680      	mov	r8, r0
 801437a:	460c      	mov	r4, r1
 801437c:	469a      	mov	sl, r3
 801437e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014382:	d807      	bhi.n	8014394 <_printf_i+0x28>
 8014384:	2f62      	cmp	r7, #98	@ 0x62
 8014386:	d80a      	bhi.n	801439e <_printf_i+0x32>
 8014388:	2f00      	cmp	r7, #0
 801438a:	f000 80d2 	beq.w	8014532 <_printf_i+0x1c6>
 801438e:	2f58      	cmp	r7, #88	@ 0x58
 8014390:	f000 80b9 	beq.w	8014506 <_printf_i+0x19a>
 8014394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801439c:	e03a      	b.n	8014414 <_printf_i+0xa8>
 801439e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80143a2:	2b15      	cmp	r3, #21
 80143a4:	d8f6      	bhi.n	8014394 <_printf_i+0x28>
 80143a6:	a101      	add	r1, pc, #4	@ (adr r1, 80143ac <_printf_i+0x40>)
 80143a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143ac:	08014405 	.word	0x08014405
 80143b0:	08014419 	.word	0x08014419
 80143b4:	08014395 	.word	0x08014395
 80143b8:	08014395 	.word	0x08014395
 80143bc:	08014395 	.word	0x08014395
 80143c0:	08014395 	.word	0x08014395
 80143c4:	08014419 	.word	0x08014419
 80143c8:	08014395 	.word	0x08014395
 80143cc:	08014395 	.word	0x08014395
 80143d0:	08014395 	.word	0x08014395
 80143d4:	08014395 	.word	0x08014395
 80143d8:	08014519 	.word	0x08014519
 80143dc:	08014443 	.word	0x08014443
 80143e0:	080144d3 	.word	0x080144d3
 80143e4:	08014395 	.word	0x08014395
 80143e8:	08014395 	.word	0x08014395
 80143ec:	0801453b 	.word	0x0801453b
 80143f0:	08014395 	.word	0x08014395
 80143f4:	08014443 	.word	0x08014443
 80143f8:	08014395 	.word	0x08014395
 80143fc:	08014395 	.word	0x08014395
 8014400:	080144db 	.word	0x080144db
 8014404:	6833      	ldr	r3, [r6, #0]
 8014406:	1d1a      	adds	r2, r3, #4
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	6032      	str	r2, [r6, #0]
 801440c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014414:	2301      	movs	r3, #1
 8014416:	e09d      	b.n	8014554 <_printf_i+0x1e8>
 8014418:	6833      	ldr	r3, [r6, #0]
 801441a:	6820      	ldr	r0, [r4, #0]
 801441c:	1d19      	adds	r1, r3, #4
 801441e:	6031      	str	r1, [r6, #0]
 8014420:	0606      	lsls	r6, r0, #24
 8014422:	d501      	bpl.n	8014428 <_printf_i+0xbc>
 8014424:	681d      	ldr	r5, [r3, #0]
 8014426:	e003      	b.n	8014430 <_printf_i+0xc4>
 8014428:	0645      	lsls	r5, r0, #25
 801442a:	d5fb      	bpl.n	8014424 <_printf_i+0xb8>
 801442c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014430:	2d00      	cmp	r5, #0
 8014432:	da03      	bge.n	801443c <_printf_i+0xd0>
 8014434:	232d      	movs	r3, #45	@ 0x2d
 8014436:	426d      	negs	r5, r5
 8014438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801443c:	4859      	ldr	r0, [pc, #356]	@ (80145a4 <_printf_i+0x238>)
 801443e:	230a      	movs	r3, #10
 8014440:	e011      	b.n	8014466 <_printf_i+0xfa>
 8014442:	6821      	ldr	r1, [r4, #0]
 8014444:	6833      	ldr	r3, [r6, #0]
 8014446:	0608      	lsls	r0, r1, #24
 8014448:	f853 5b04 	ldr.w	r5, [r3], #4
 801444c:	d402      	bmi.n	8014454 <_printf_i+0xe8>
 801444e:	0649      	lsls	r1, r1, #25
 8014450:	bf48      	it	mi
 8014452:	b2ad      	uxthmi	r5, r5
 8014454:	2f6f      	cmp	r7, #111	@ 0x6f
 8014456:	4853      	ldr	r0, [pc, #332]	@ (80145a4 <_printf_i+0x238>)
 8014458:	6033      	str	r3, [r6, #0]
 801445a:	bf14      	ite	ne
 801445c:	230a      	movne	r3, #10
 801445e:	2308      	moveq	r3, #8
 8014460:	2100      	movs	r1, #0
 8014462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014466:	6866      	ldr	r6, [r4, #4]
 8014468:	60a6      	str	r6, [r4, #8]
 801446a:	2e00      	cmp	r6, #0
 801446c:	bfa2      	ittt	ge
 801446e:	6821      	ldrge	r1, [r4, #0]
 8014470:	f021 0104 	bicge.w	r1, r1, #4
 8014474:	6021      	strge	r1, [r4, #0]
 8014476:	b90d      	cbnz	r5, 801447c <_printf_i+0x110>
 8014478:	2e00      	cmp	r6, #0
 801447a:	d04b      	beq.n	8014514 <_printf_i+0x1a8>
 801447c:	4616      	mov	r6, r2
 801447e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014482:	fb03 5711 	mls	r7, r3, r1, r5
 8014486:	5dc7      	ldrb	r7, [r0, r7]
 8014488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801448c:	462f      	mov	r7, r5
 801448e:	42bb      	cmp	r3, r7
 8014490:	460d      	mov	r5, r1
 8014492:	d9f4      	bls.n	801447e <_printf_i+0x112>
 8014494:	2b08      	cmp	r3, #8
 8014496:	d10b      	bne.n	80144b0 <_printf_i+0x144>
 8014498:	6823      	ldr	r3, [r4, #0]
 801449a:	07df      	lsls	r7, r3, #31
 801449c:	d508      	bpl.n	80144b0 <_printf_i+0x144>
 801449e:	6923      	ldr	r3, [r4, #16]
 80144a0:	6861      	ldr	r1, [r4, #4]
 80144a2:	4299      	cmp	r1, r3
 80144a4:	bfde      	ittt	le
 80144a6:	2330      	movle	r3, #48	@ 0x30
 80144a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80144ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80144b0:	1b92      	subs	r2, r2, r6
 80144b2:	6122      	str	r2, [r4, #16]
 80144b4:	f8cd a000 	str.w	sl, [sp]
 80144b8:	464b      	mov	r3, r9
 80144ba:	aa03      	add	r2, sp, #12
 80144bc:	4621      	mov	r1, r4
 80144be:	4640      	mov	r0, r8
 80144c0:	f7ff fee6 	bl	8014290 <_printf_common>
 80144c4:	3001      	adds	r0, #1
 80144c6:	d14a      	bne.n	801455e <_printf_i+0x1f2>
 80144c8:	f04f 30ff 	mov.w	r0, #4294967295
 80144cc:	b004      	add	sp, #16
 80144ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d2:	6823      	ldr	r3, [r4, #0]
 80144d4:	f043 0320 	orr.w	r3, r3, #32
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	4833      	ldr	r0, [pc, #204]	@ (80145a8 <_printf_i+0x23c>)
 80144dc:	2778      	movs	r7, #120	@ 0x78
 80144de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	6831      	ldr	r1, [r6, #0]
 80144e6:	061f      	lsls	r7, r3, #24
 80144e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80144ec:	d402      	bmi.n	80144f4 <_printf_i+0x188>
 80144ee:	065f      	lsls	r7, r3, #25
 80144f0:	bf48      	it	mi
 80144f2:	b2ad      	uxthmi	r5, r5
 80144f4:	6031      	str	r1, [r6, #0]
 80144f6:	07d9      	lsls	r1, r3, #31
 80144f8:	bf44      	itt	mi
 80144fa:	f043 0320 	orrmi.w	r3, r3, #32
 80144fe:	6023      	strmi	r3, [r4, #0]
 8014500:	b11d      	cbz	r5, 801450a <_printf_i+0x19e>
 8014502:	2310      	movs	r3, #16
 8014504:	e7ac      	b.n	8014460 <_printf_i+0xf4>
 8014506:	4827      	ldr	r0, [pc, #156]	@ (80145a4 <_printf_i+0x238>)
 8014508:	e7e9      	b.n	80144de <_printf_i+0x172>
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	f023 0320 	bic.w	r3, r3, #32
 8014510:	6023      	str	r3, [r4, #0]
 8014512:	e7f6      	b.n	8014502 <_printf_i+0x196>
 8014514:	4616      	mov	r6, r2
 8014516:	e7bd      	b.n	8014494 <_printf_i+0x128>
 8014518:	6833      	ldr	r3, [r6, #0]
 801451a:	6825      	ldr	r5, [r4, #0]
 801451c:	6961      	ldr	r1, [r4, #20]
 801451e:	1d18      	adds	r0, r3, #4
 8014520:	6030      	str	r0, [r6, #0]
 8014522:	062e      	lsls	r6, r5, #24
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	d501      	bpl.n	801452c <_printf_i+0x1c0>
 8014528:	6019      	str	r1, [r3, #0]
 801452a:	e002      	b.n	8014532 <_printf_i+0x1c6>
 801452c:	0668      	lsls	r0, r5, #25
 801452e:	d5fb      	bpl.n	8014528 <_printf_i+0x1bc>
 8014530:	8019      	strh	r1, [r3, #0]
 8014532:	2300      	movs	r3, #0
 8014534:	6123      	str	r3, [r4, #16]
 8014536:	4616      	mov	r6, r2
 8014538:	e7bc      	b.n	80144b4 <_printf_i+0x148>
 801453a:	6833      	ldr	r3, [r6, #0]
 801453c:	1d1a      	adds	r2, r3, #4
 801453e:	6032      	str	r2, [r6, #0]
 8014540:	681e      	ldr	r6, [r3, #0]
 8014542:	6862      	ldr	r2, [r4, #4]
 8014544:	2100      	movs	r1, #0
 8014546:	4630      	mov	r0, r6
 8014548:	f7eb fe4a 	bl	80001e0 <memchr>
 801454c:	b108      	cbz	r0, 8014552 <_printf_i+0x1e6>
 801454e:	1b80      	subs	r0, r0, r6
 8014550:	6060      	str	r0, [r4, #4]
 8014552:	6863      	ldr	r3, [r4, #4]
 8014554:	6123      	str	r3, [r4, #16]
 8014556:	2300      	movs	r3, #0
 8014558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801455c:	e7aa      	b.n	80144b4 <_printf_i+0x148>
 801455e:	6923      	ldr	r3, [r4, #16]
 8014560:	4632      	mov	r2, r6
 8014562:	4649      	mov	r1, r9
 8014564:	4640      	mov	r0, r8
 8014566:	47d0      	blx	sl
 8014568:	3001      	adds	r0, #1
 801456a:	d0ad      	beq.n	80144c8 <_printf_i+0x15c>
 801456c:	6823      	ldr	r3, [r4, #0]
 801456e:	079b      	lsls	r3, r3, #30
 8014570:	d413      	bmi.n	801459a <_printf_i+0x22e>
 8014572:	68e0      	ldr	r0, [r4, #12]
 8014574:	9b03      	ldr	r3, [sp, #12]
 8014576:	4298      	cmp	r0, r3
 8014578:	bfb8      	it	lt
 801457a:	4618      	movlt	r0, r3
 801457c:	e7a6      	b.n	80144cc <_printf_i+0x160>
 801457e:	2301      	movs	r3, #1
 8014580:	4632      	mov	r2, r6
 8014582:	4649      	mov	r1, r9
 8014584:	4640      	mov	r0, r8
 8014586:	47d0      	blx	sl
 8014588:	3001      	adds	r0, #1
 801458a:	d09d      	beq.n	80144c8 <_printf_i+0x15c>
 801458c:	3501      	adds	r5, #1
 801458e:	68e3      	ldr	r3, [r4, #12]
 8014590:	9903      	ldr	r1, [sp, #12]
 8014592:	1a5b      	subs	r3, r3, r1
 8014594:	42ab      	cmp	r3, r5
 8014596:	dcf2      	bgt.n	801457e <_printf_i+0x212>
 8014598:	e7eb      	b.n	8014572 <_printf_i+0x206>
 801459a:	2500      	movs	r5, #0
 801459c:	f104 0619 	add.w	r6, r4, #25
 80145a0:	e7f5      	b.n	801458e <_printf_i+0x222>
 80145a2:	bf00      	nop
 80145a4:	08016ca7 	.word	0x08016ca7
 80145a8:	08016cb8 	.word	0x08016cb8

080145ac <std>:
 80145ac:	2300      	movs	r3, #0
 80145ae:	b510      	push	{r4, lr}
 80145b0:	4604      	mov	r4, r0
 80145b2:	e9c0 3300 	strd	r3, r3, [r0]
 80145b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145ba:	6083      	str	r3, [r0, #8]
 80145bc:	8181      	strh	r1, [r0, #12]
 80145be:	6643      	str	r3, [r0, #100]	@ 0x64
 80145c0:	81c2      	strh	r2, [r0, #14]
 80145c2:	6183      	str	r3, [r0, #24]
 80145c4:	4619      	mov	r1, r3
 80145c6:	2208      	movs	r2, #8
 80145c8:	305c      	adds	r0, #92	@ 0x5c
 80145ca:	f000 f92e 	bl	801482a <memset>
 80145ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014604 <std+0x58>)
 80145d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80145d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014608 <std+0x5c>)
 80145d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80145d6:	4b0d      	ldr	r3, [pc, #52]	@ (801460c <std+0x60>)
 80145d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80145da:	4b0d      	ldr	r3, [pc, #52]	@ (8014610 <std+0x64>)
 80145dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80145de:	4b0d      	ldr	r3, [pc, #52]	@ (8014614 <std+0x68>)
 80145e0:	6224      	str	r4, [r4, #32]
 80145e2:	429c      	cmp	r4, r3
 80145e4:	d006      	beq.n	80145f4 <std+0x48>
 80145e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145ea:	4294      	cmp	r4, r2
 80145ec:	d002      	beq.n	80145f4 <std+0x48>
 80145ee:	33d0      	adds	r3, #208	@ 0xd0
 80145f0:	429c      	cmp	r4, r3
 80145f2:	d105      	bne.n	8014600 <std+0x54>
 80145f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80145f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145fc:	f000 ba3c 	b.w	8014a78 <__retarget_lock_init_recursive>
 8014600:	bd10      	pop	{r4, pc}
 8014602:	bf00      	nop
 8014604:	08014771 	.word	0x08014771
 8014608:	08014793 	.word	0x08014793
 801460c:	080147cb 	.word	0x080147cb
 8014610:	080147ef 	.word	0x080147ef
 8014614:	200061d0 	.word	0x200061d0

08014618 <stdio_exit_handler>:
 8014618:	4a02      	ldr	r2, [pc, #8]	@ (8014624 <stdio_exit_handler+0xc>)
 801461a:	4903      	ldr	r1, [pc, #12]	@ (8014628 <stdio_exit_handler+0x10>)
 801461c:	4803      	ldr	r0, [pc, #12]	@ (801462c <stdio_exit_handler+0x14>)
 801461e:	f000 b869 	b.w	80146f4 <_fwalk_sglue>
 8014622:	bf00      	nop
 8014624:	20000104 	.word	0x20000104
 8014628:	08016299 	.word	0x08016299
 801462c:	20000114 	.word	0x20000114

08014630 <cleanup_stdio>:
 8014630:	6841      	ldr	r1, [r0, #4]
 8014632:	4b0c      	ldr	r3, [pc, #48]	@ (8014664 <cleanup_stdio+0x34>)
 8014634:	4299      	cmp	r1, r3
 8014636:	b510      	push	{r4, lr}
 8014638:	4604      	mov	r4, r0
 801463a:	d001      	beq.n	8014640 <cleanup_stdio+0x10>
 801463c:	f001 fe2c 	bl	8016298 <_fflush_r>
 8014640:	68a1      	ldr	r1, [r4, #8]
 8014642:	4b09      	ldr	r3, [pc, #36]	@ (8014668 <cleanup_stdio+0x38>)
 8014644:	4299      	cmp	r1, r3
 8014646:	d002      	beq.n	801464e <cleanup_stdio+0x1e>
 8014648:	4620      	mov	r0, r4
 801464a:	f001 fe25 	bl	8016298 <_fflush_r>
 801464e:	68e1      	ldr	r1, [r4, #12]
 8014650:	4b06      	ldr	r3, [pc, #24]	@ (801466c <cleanup_stdio+0x3c>)
 8014652:	4299      	cmp	r1, r3
 8014654:	d004      	beq.n	8014660 <cleanup_stdio+0x30>
 8014656:	4620      	mov	r0, r4
 8014658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801465c:	f001 be1c 	b.w	8016298 <_fflush_r>
 8014660:	bd10      	pop	{r4, pc}
 8014662:	bf00      	nop
 8014664:	200061d0 	.word	0x200061d0
 8014668:	20006238 	.word	0x20006238
 801466c:	200062a0 	.word	0x200062a0

08014670 <global_stdio_init.part.0>:
 8014670:	b510      	push	{r4, lr}
 8014672:	4b0b      	ldr	r3, [pc, #44]	@ (80146a0 <global_stdio_init.part.0+0x30>)
 8014674:	4c0b      	ldr	r4, [pc, #44]	@ (80146a4 <global_stdio_init.part.0+0x34>)
 8014676:	4a0c      	ldr	r2, [pc, #48]	@ (80146a8 <global_stdio_init.part.0+0x38>)
 8014678:	601a      	str	r2, [r3, #0]
 801467a:	4620      	mov	r0, r4
 801467c:	2200      	movs	r2, #0
 801467e:	2104      	movs	r1, #4
 8014680:	f7ff ff94 	bl	80145ac <std>
 8014684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014688:	2201      	movs	r2, #1
 801468a:	2109      	movs	r1, #9
 801468c:	f7ff ff8e 	bl	80145ac <std>
 8014690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014694:	2202      	movs	r2, #2
 8014696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801469a:	2112      	movs	r1, #18
 801469c:	f7ff bf86 	b.w	80145ac <std>
 80146a0:	20006308 	.word	0x20006308
 80146a4:	200061d0 	.word	0x200061d0
 80146a8:	08014619 	.word	0x08014619

080146ac <__sfp_lock_acquire>:
 80146ac:	4801      	ldr	r0, [pc, #4]	@ (80146b4 <__sfp_lock_acquire+0x8>)
 80146ae:	f000 b9e4 	b.w	8014a7a <__retarget_lock_acquire_recursive>
 80146b2:	bf00      	nop
 80146b4:	20006311 	.word	0x20006311

080146b8 <__sfp_lock_release>:
 80146b8:	4801      	ldr	r0, [pc, #4]	@ (80146c0 <__sfp_lock_release+0x8>)
 80146ba:	f000 b9df 	b.w	8014a7c <__retarget_lock_release_recursive>
 80146be:	bf00      	nop
 80146c0:	20006311 	.word	0x20006311

080146c4 <__sinit>:
 80146c4:	b510      	push	{r4, lr}
 80146c6:	4604      	mov	r4, r0
 80146c8:	f7ff fff0 	bl	80146ac <__sfp_lock_acquire>
 80146cc:	6a23      	ldr	r3, [r4, #32]
 80146ce:	b11b      	cbz	r3, 80146d8 <__sinit+0x14>
 80146d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d4:	f7ff bff0 	b.w	80146b8 <__sfp_lock_release>
 80146d8:	4b04      	ldr	r3, [pc, #16]	@ (80146ec <__sinit+0x28>)
 80146da:	6223      	str	r3, [r4, #32]
 80146dc:	4b04      	ldr	r3, [pc, #16]	@ (80146f0 <__sinit+0x2c>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1f5      	bne.n	80146d0 <__sinit+0xc>
 80146e4:	f7ff ffc4 	bl	8014670 <global_stdio_init.part.0>
 80146e8:	e7f2      	b.n	80146d0 <__sinit+0xc>
 80146ea:	bf00      	nop
 80146ec:	08014631 	.word	0x08014631
 80146f0:	20006308 	.word	0x20006308

080146f4 <_fwalk_sglue>:
 80146f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f8:	4607      	mov	r7, r0
 80146fa:	4688      	mov	r8, r1
 80146fc:	4614      	mov	r4, r2
 80146fe:	2600      	movs	r6, #0
 8014700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014704:	f1b9 0901 	subs.w	r9, r9, #1
 8014708:	d505      	bpl.n	8014716 <_fwalk_sglue+0x22>
 801470a:	6824      	ldr	r4, [r4, #0]
 801470c:	2c00      	cmp	r4, #0
 801470e:	d1f7      	bne.n	8014700 <_fwalk_sglue+0xc>
 8014710:	4630      	mov	r0, r6
 8014712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014716:	89ab      	ldrh	r3, [r5, #12]
 8014718:	2b01      	cmp	r3, #1
 801471a:	d907      	bls.n	801472c <_fwalk_sglue+0x38>
 801471c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014720:	3301      	adds	r3, #1
 8014722:	d003      	beq.n	801472c <_fwalk_sglue+0x38>
 8014724:	4629      	mov	r1, r5
 8014726:	4638      	mov	r0, r7
 8014728:	47c0      	blx	r8
 801472a:	4306      	orrs	r6, r0
 801472c:	3568      	adds	r5, #104	@ 0x68
 801472e:	e7e9      	b.n	8014704 <_fwalk_sglue+0x10>

08014730 <siprintf>:
 8014730:	b40e      	push	{r1, r2, r3}
 8014732:	b500      	push	{lr}
 8014734:	b09c      	sub	sp, #112	@ 0x70
 8014736:	ab1d      	add	r3, sp, #116	@ 0x74
 8014738:	9002      	str	r0, [sp, #8]
 801473a:	9006      	str	r0, [sp, #24]
 801473c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014740:	4809      	ldr	r0, [pc, #36]	@ (8014768 <siprintf+0x38>)
 8014742:	9107      	str	r1, [sp, #28]
 8014744:	9104      	str	r1, [sp, #16]
 8014746:	4909      	ldr	r1, [pc, #36]	@ (801476c <siprintf+0x3c>)
 8014748:	f853 2b04 	ldr.w	r2, [r3], #4
 801474c:	9105      	str	r1, [sp, #20]
 801474e:	6800      	ldr	r0, [r0, #0]
 8014750:	9301      	str	r3, [sp, #4]
 8014752:	a902      	add	r1, sp, #8
 8014754:	f001 fc20 	bl	8015f98 <_svfiprintf_r>
 8014758:	9b02      	ldr	r3, [sp, #8]
 801475a:	2200      	movs	r2, #0
 801475c:	701a      	strb	r2, [r3, #0]
 801475e:	b01c      	add	sp, #112	@ 0x70
 8014760:	f85d eb04 	ldr.w	lr, [sp], #4
 8014764:	b003      	add	sp, #12
 8014766:	4770      	bx	lr
 8014768:	20000110 	.word	0x20000110
 801476c:	ffff0208 	.word	0xffff0208

08014770 <__sread>:
 8014770:	b510      	push	{r4, lr}
 8014772:	460c      	mov	r4, r1
 8014774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014778:	f000 f90c 	bl	8014994 <_read_r>
 801477c:	2800      	cmp	r0, #0
 801477e:	bfab      	itete	ge
 8014780:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014782:	89a3      	ldrhlt	r3, [r4, #12]
 8014784:	181b      	addge	r3, r3, r0
 8014786:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801478a:	bfac      	ite	ge
 801478c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801478e:	81a3      	strhlt	r3, [r4, #12]
 8014790:	bd10      	pop	{r4, pc}

08014792 <__swrite>:
 8014792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014796:	461f      	mov	r7, r3
 8014798:	898b      	ldrh	r3, [r1, #12]
 801479a:	05db      	lsls	r3, r3, #23
 801479c:	4605      	mov	r5, r0
 801479e:	460c      	mov	r4, r1
 80147a0:	4616      	mov	r6, r2
 80147a2:	d505      	bpl.n	80147b0 <__swrite+0x1e>
 80147a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147a8:	2302      	movs	r3, #2
 80147aa:	2200      	movs	r2, #0
 80147ac:	f000 f8e0 	bl	8014970 <_lseek_r>
 80147b0:	89a3      	ldrh	r3, [r4, #12]
 80147b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80147ba:	81a3      	strh	r3, [r4, #12]
 80147bc:	4632      	mov	r2, r6
 80147be:	463b      	mov	r3, r7
 80147c0:	4628      	mov	r0, r5
 80147c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147c6:	f000 b91b 	b.w	8014a00 <_write_r>

080147ca <__sseek>:
 80147ca:	b510      	push	{r4, lr}
 80147cc:	460c      	mov	r4, r1
 80147ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147d2:	f000 f8cd 	bl	8014970 <_lseek_r>
 80147d6:	1c43      	adds	r3, r0, #1
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	bf15      	itete	ne
 80147dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80147de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80147e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147e6:	81a3      	strheq	r3, [r4, #12]
 80147e8:	bf18      	it	ne
 80147ea:	81a3      	strhne	r3, [r4, #12]
 80147ec:	bd10      	pop	{r4, pc}

080147ee <__sclose>:
 80147ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147f2:	f000 b857 	b.w	80148a4 <_close_r>

080147f6 <memmove>:
 80147f6:	4288      	cmp	r0, r1
 80147f8:	b510      	push	{r4, lr}
 80147fa:	eb01 0402 	add.w	r4, r1, r2
 80147fe:	d902      	bls.n	8014806 <memmove+0x10>
 8014800:	4284      	cmp	r4, r0
 8014802:	4623      	mov	r3, r4
 8014804:	d807      	bhi.n	8014816 <memmove+0x20>
 8014806:	1e43      	subs	r3, r0, #1
 8014808:	42a1      	cmp	r1, r4
 801480a:	d008      	beq.n	801481e <memmove+0x28>
 801480c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014810:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014814:	e7f8      	b.n	8014808 <memmove+0x12>
 8014816:	4402      	add	r2, r0
 8014818:	4601      	mov	r1, r0
 801481a:	428a      	cmp	r2, r1
 801481c:	d100      	bne.n	8014820 <memmove+0x2a>
 801481e:	bd10      	pop	{r4, pc}
 8014820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014824:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014828:	e7f7      	b.n	801481a <memmove+0x24>

0801482a <memset>:
 801482a:	4402      	add	r2, r0
 801482c:	4603      	mov	r3, r0
 801482e:	4293      	cmp	r3, r2
 8014830:	d100      	bne.n	8014834 <memset+0xa>
 8014832:	4770      	bx	lr
 8014834:	f803 1b01 	strb.w	r1, [r3], #1
 8014838:	e7f9      	b.n	801482e <memset+0x4>

0801483a <_raise_r>:
 801483a:	291f      	cmp	r1, #31
 801483c:	b538      	push	{r3, r4, r5, lr}
 801483e:	4605      	mov	r5, r0
 8014840:	460c      	mov	r4, r1
 8014842:	d904      	bls.n	801484e <_raise_r+0x14>
 8014844:	2316      	movs	r3, #22
 8014846:	6003      	str	r3, [r0, #0]
 8014848:	f04f 30ff 	mov.w	r0, #4294967295
 801484c:	bd38      	pop	{r3, r4, r5, pc}
 801484e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014850:	b112      	cbz	r2, 8014858 <_raise_r+0x1e>
 8014852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014856:	b94b      	cbnz	r3, 801486c <_raise_r+0x32>
 8014858:	4628      	mov	r0, r5
 801485a:	f000 f8bf 	bl	80149dc <_getpid_r>
 801485e:	4622      	mov	r2, r4
 8014860:	4601      	mov	r1, r0
 8014862:	4628      	mov	r0, r5
 8014864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014868:	f000 b8a6 	b.w	80149b8 <_kill_r>
 801486c:	2b01      	cmp	r3, #1
 801486e:	d00a      	beq.n	8014886 <_raise_r+0x4c>
 8014870:	1c59      	adds	r1, r3, #1
 8014872:	d103      	bne.n	801487c <_raise_r+0x42>
 8014874:	2316      	movs	r3, #22
 8014876:	6003      	str	r3, [r0, #0]
 8014878:	2001      	movs	r0, #1
 801487a:	e7e7      	b.n	801484c <_raise_r+0x12>
 801487c:	2100      	movs	r1, #0
 801487e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014882:	4620      	mov	r0, r4
 8014884:	4798      	blx	r3
 8014886:	2000      	movs	r0, #0
 8014888:	e7e0      	b.n	801484c <_raise_r+0x12>
	...

0801488c <raise>:
 801488c:	4b02      	ldr	r3, [pc, #8]	@ (8014898 <raise+0xc>)
 801488e:	4601      	mov	r1, r0
 8014890:	6818      	ldr	r0, [r3, #0]
 8014892:	f7ff bfd2 	b.w	801483a <_raise_r>
 8014896:	bf00      	nop
 8014898:	20000110 	.word	0x20000110

0801489c <_localeconv_r>:
 801489c:	4800      	ldr	r0, [pc, #0]	@ (80148a0 <_localeconv_r+0x4>)
 801489e:	4770      	bx	lr
 80148a0:	20000250 	.word	0x20000250

080148a4 <_close_r>:
 80148a4:	b538      	push	{r3, r4, r5, lr}
 80148a6:	4d06      	ldr	r5, [pc, #24]	@ (80148c0 <_close_r+0x1c>)
 80148a8:	2300      	movs	r3, #0
 80148aa:	4604      	mov	r4, r0
 80148ac:	4608      	mov	r0, r1
 80148ae:	602b      	str	r3, [r5, #0]
 80148b0:	f7f4 f888 	bl	80089c4 <_close>
 80148b4:	1c43      	adds	r3, r0, #1
 80148b6:	d102      	bne.n	80148be <_close_r+0x1a>
 80148b8:	682b      	ldr	r3, [r5, #0]
 80148ba:	b103      	cbz	r3, 80148be <_close_r+0x1a>
 80148bc:	6023      	str	r3, [r4, #0]
 80148be:	bd38      	pop	{r3, r4, r5, pc}
 80148c0:	2000630c 	.word	0x2000630c

080148c4 <_reclaim_reent>:
 80148c4:	4b29      	ldr	r3, [pc, #164]	@ (801496c <_reclaim_reent+0xa8>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	4283      	cmp	r3, r0
 80148ca:	b570      	push	{r4, r5, r6, lr}
 80148cc:	4604      	mov	r4, r0
 80148ce:	d04b      	beq.n	8014968 <_reclaim_reent+0xa4>
 80148d0:	69c3      	ldr	r3, [r0, #28]
 80148d2:	b1ab      	cbz	r3, 8014900 <_reclaim_reent+0x3c>
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	b16b      	cbz	r3, 80148f4 <_reclaim_reent+0x30>
 80148d8:	2500      	movs	r5, #0
 80148da:	69e3      	ldr	r3, [r4, #28]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	5959      	ldr	r1, [r3, r5]
 80148e0:	2900      	cmp	r1, #0
 80148e2:	d13b      	bne.n	801495c <_reclaim_reent+0x98>
 80148e4:	3504      	adds	r5, #4
 80148e6:	2d80      	cmp	r5, #128	@ 0x80
 80148e8:	d1f7      	bne.n	80148da <_reclaim_reent+0x16>
 80148ea:	69e3      	ldr	r3, [r4, #28]
 80148ec:	4620      	mov	r0, r4
 80148ee:	68d9      	ldr	r1, [r3, #12]
 80148f0:	f000 ff22 	bl	8015738 <_free_r>
 80148f4:	69e3      	ldr	r3, [r4, #28]
 80148f6:	6819      	ldr	r1, [r3, #0]
 80148f8:	b111      	cbz	r1, 8014900 <_reclaim_reent+0x3c>
 80148fa:	4620      	mov	r0, r4
 80148fc:	f000 ff1c 	bl	8015738 <_free_r>
 8014900:	6961      	ldr	r1, [r4, #20]
 8014902:	b111      	cbz	r1, 801490a <_reclaim_reent+0x46>
 8014904:	4620      	mov	r0, r4
 8014906:	f000 ff17 	bl	8015738 <_free_r>
 801490a:	69e1      	ldr	r1, [r4, #28]
 801490c:	b111      	cbz	r1, 8014914 <_reclaim_reent+0x50>
 801490e:	4620      	mov	r0, r4
 8014910:	f000 ff12 	bl	8015738 <_free_r>
 8014914:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014916:	b111      	cbz	r1, 801491e <_reclaim_reent+0x5a>
 8014918:	4620      	mov	r0, r4
 801491a:	f000 ff0d 	bl	8015738 <_free_r>
 801491e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014920:	b111      	cbz	r1, 8014928 <_reclaim_reent+0x64>
 8014922:	4620      	mov	r0, r4
 8014924:	f000 ff08 	bl	8015738 <_free_r>
 8014928:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801492a:	b111      	cbz	r1, 8014932 <_reclaim_reent+0x6e>
 801492c:	4620      	mov	r0, r4
 801492e:	f000 ff03 	bl	8015738 <_free_r>
 8014932:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014934:	b111      	cbz	r1, 801493c <_reclaim_reent+0x78>
 8014936:	4620      	mov	r0, r4
 8014938:	f000 fefe 	bl	8015738 <_free_r>
 801493c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801493e:	b111      	cbz	r1, 8014946 <_reclaim_reent+0x82>
 8014940:	4620      	mov	r0, r4
 8014942:	f000 fef9 	bl	8015738 <_free_r>
 8014946:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014948:	b111      	cbz	r1, 8014950 <_reclaim_reent+0x8c>
 801494a:	4620      	mov	r0, r4
 801494c:	f000 fef4 	bl	8015738 <_free_r>
 8014950:	6a23      	ldr	r3, [r4, #32]
 8014952:	b14b      	cbz	r3, 8014968 <_reclaim_reent+0xa4>
 8014954:	4620      	mov	r0, r4
 8014956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801495a:	4718      	bx	r3
 801495c:	680e      	ldr	r6, [r1, #0]
 801495e:	4620      	mov	r0, r4
 8014960:	f000 feea 	bl	8015738 <_free_r>
 8014964:	4631      	mov	r1, r6
 8014966:	e7bb      	b.n	80148e0 <_reclaim_reent+0x1c>
 8014968:	bd70      	pop	{r4, r5, r6, pc}
 801496a:	bf00      	nop
 801496c:	20000110 	.word	0x20000110

08014970 <_lseek_r>:
 8014970:	b538      	push	{r3, r4, r5, lr}
 8014972:	4d07      	ldr	r5, [pc, #28]	@ (8014990 <_lseek_r+0x20>)
 8014974:	4604      	mov	r4, r0
 8014976:	4608      	mov	r0, r1
 8014978:	4611      	mov	r1, r2
 801497a:	2200      	movs	r2, #0
 801497c:	602a      	str	r2, [r5, #0]
 801497e:	461a      	mov	r2, r3
 8014980:	f7f4 f847 	bl	8008a12 <_lseek>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d102      	bne.n	801498e <_lseek_r+0x1e>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	b103      	cbz	r3, 801498e <_lseek_r+0x1e>
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	2000630c 	.word	0x2000630c

08014994 <_read_r>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4d07      	ldr	r5, [pc, #28]	@ (80149b4 <_read_r+0x20>)
 8014998:	4604      	mov	r4, r0
 801499a:	4608      	mov	r0, r1
 801499c:	4611      	mov	r1, r2
 801499e:	2200      	movs	r2, #0
 80149a0:	602a      	str	r2, [r5, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	f7f3 ffd5 	bl	8008952 <_read>
 80149a8:	1c43      	adds	r3, r0, #1
 80149aa:	d102      	bne.n	80149b2 <_read_r+0x1e>
 80149ac:	682b      	ldr	r3, [r5, #0]
 80149ae:	b103      	cbz	r3, 80149b2 <_read_r+0x1e>
 80149b0:	6023      	str	r3, [r4, #0]
 80149b2:	bd38      	pop	{r3, r4, r5, pc}
 80149b4:	2000630c 	.word	0x2000630c

080149b8 <_kill_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4d07      	ldr	r5, [pc, #28]	@ (80149d8 <_kill_r+0x20>)
 80149bc:	2300      	movs	r3, #0
 80149be:	4604      	mov	r4, r0
 80149c0:	4608      	mov	r0, r1
 80149c2:	4611      	mov	r1, r2
 80149c4:	602b      	str	r3, [r5, #0]
 80149c6:	f7f3 ffa9 	bl	800891c <_kill>
 80149ca:	1c43      	adds	r3, r0, #1
 80149cc:	d102      	bne.n	80149d4 <_kill_r+0x1c>
 80149ce:	682b      	ldr	r3, [r5, #0]
 80149d0:	b103      	cbz	r3, 80149d4 <_kill_r+0x1c>
 80149d2:	6023      	str	r3, [r4, #0]
 80149d4:	bd38      	pop	{r3, r4, r5, pc}
 80149d6:	bf00      	nop
 80149d8:	2000630c 	.word	0x2000630c

080149dc <_getpid_r>:
 80149dc:	f7f3 bf96 	b.w	800890c <_getpid>

080149e0 <_sbrk_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d06      	ldr	r5, [pc, #24]	@ (80149fc <_sbrk_r+0x1c>)
 80149e4:	2300      	movs	r3, #0
 80149e6:	4604      	mov	r4, r0
 80149e8:	4608      	mov	r0, r1
 80149ea:	602b      	str	r3, [r5, #0]
 80149ec:	f7f4 f81e 	bl	8008a2c <_sbrk>
 80149f0:	1c43      	adds	r3, r0, #1
 80149f2:	d102      	bne.n	80149fa <_sbrk_r+0x1a>
 80149f4:	682b      	ldr	r3, [r5, #0]
 80149f6:	b103      	cbz	r3, 80149fa <_sbrk_r+0x1a>
 80149f8:	6023      	str	r3, [r4, #0]
 80149fa:	bd38      	pop	{r3, r4, r5, pc}
 80149fc:	2000630c 	.word	0x2000630c

08014a00 <_write_r>:
 8014a00:	b538      	push	{r3, r4, r5, lr}
 8014a02:	4d07      	ldr	r5, [pc, #28]	@ (8014a20 <_write_r+0x20>)
 8014a04:	4604      	mov	r4, r0
 8014a06:	4608      	mov	r0, r1
 8014a08:	4611      	mov	r1, r2
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	602a      	str	r2, [r5, #0]
 8014a0e:	461a      	mov	r2, r3
 8014a10:	f7f3 ffbc 	bl	800898c <_write>
 8014a14:	1c43      	adds	r3, r0, #1
 8014a16:	d102      	bne.n	8014a1e <_write_r+0x1e>
 8014a18:	682b      	ldr	r3, [r5, #0]
 8014a1a:	b103      	cbz	r3, 8014a1e <_write_r+0x1e>
 8014a1c:	6023      	str	r3, [r4, #0]
 8014a1e:	bd38      	pop	{r3, r4, r5, pc}
 8014a20:	2000630c 	.word	0x2000630c

08014a24 <__errno>:
 8014a24:	4b01      	ldr	r3, [pc, #4]	@ (8014a2c <__errno+0x8>)
 8014a26:	6818      	ldr	r0, [r3, #0]
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	20000110 	.word	0x20000110

08014a30 <__libc_init_array>:
 8014a30:	b570      	push	{r4, r5, r6, lr}
 8014a32:	4d0d      	ldr	r5, [pc, #52]	@ (8014a68 <__libc_init_array+0x38>)
 8014a34:	4c0d      	ldr	r4, [pc, #52]	@ (8014a6c <__libc_init_array+0x3c>)
 8014a36:	1b64      	subs	r4, r4, r5
 8014a38:	10a4      	asrs	r4, r4, #2
 8014a3a:	2600      	movs	r6, #0
 8014a3c:	42a6      	cmp	r6, r4
 8014a3e:	d109      	bne.n	8014a54 <__libc_init_array+0x24>
 8014a40:	4d0b      	ldr	r5, [pc, #44]	@ (8014a70 <__libc_init_array+0x40>)
 8014a42:	4c0c      	ldr	r4, [pc, #48]	@ (8014a74 <__libc_init_array+0x44>)
 8014a44:	f001 ff0e 	bl	8016864 <_init>
 8014a48:	1b64      	subs	r4, r4, r5
 8014a4a:	10a4      	asrs	r4, r4, #2
 8014a4c:	2600      	movs	r6, #0
 8014a4e:	42a6      	cmp	r6, r4
 8014a50:	d105      	bne.n	8014a5e <__libc_init_array+0x2e>
 8014a52:	bd70      	pop	{r4, r5, r6, pc}
 8014a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a58:	4798      	blx	r3
 8014a5a:	3601      	adds	r6, #1
 8014a5c:	e7ee      	b.n	8014a3c <__libc_init_array+0xc>
 8014a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a62:	4798      	blx	r3
 8014a64:	3601      	adds	r6, #1
 8014a66:	e7f2      	b.n	8014a4e <__libc_init_array+0x1e>
 8014a68:	08017010 	.word	0x08017010
 8014a6c:	08017010 	.word	0x08017010
 8014a70:	08017010 	.word	0x08017010
 8014a74:	08017018 	.word	0x08017018

08014a78 <__retarget_lock_init_recursive>:
 8014a78:	4770      	bx	lr

08014a7a <__retarget_lock_acquire_recursive>:
 8014a7a:	4770      	bx	lr

08014a7c <__retarget_lock_release_recursive>:
 8014a7c:	4770      	bx	lr

08014a7e <memcpy>:
 8014a7e:	440a      	add	r2, r1
 8014a80:	4291      	cmp	r1, r2
 8014a82:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a86:	d100      	bne.n	8014a8a <memcpy+0xc>
 8014a88:	4770      	bx	lr
 8014a8a:	b510      	push	{r4, lr}
 8014a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a94:	4291      	cmp	r1, r2
 8014a96:	d1f9      	bne.n	8014a8c <memcpy+0xe>
 8014a98:	bd10      	pop	{r4, pc}

08014a9a <quorem>:
 8014a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9e:	6903      	ldr	r3, [r0, #16]
 8014aa0:	690c      	ldr	r4, [r1, #16]
 8014aa2:	42a3      	cmp	r3, r4
 8014aa4:	4607      	mov	r7, r0
 8014aa6:	db7e      	blt.n	8014ba6 <quorem+0x10c>
 8014aa8:	3c01      	subs	r4, #1
 8014aaa:	f101 0814 	add.w	r8, r1, #20
 8014aae:	00a3      	lsls	r3, r4, #2
 8014ab0:	f100 0514 	add.w	r5, r0, #20
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014aba:	9301      	str	r3, [sp, #4]
 8014abc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014acc:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ad0:	d32e      	bcc.n	8014b30 <quorem+0x96>
 8014ad2:	f04f 0a00 	mov.w	sl, #0
 8014ad6:	46c4      	mov	ip, r8
 8014ad8:	46ae      	mov	lr, r5
 8014ada:	46d3      	mov	fp, sl
 8014adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014ae0:	b298      	uxth	r0, r3
 8014ae2:	fb06 a000 	mla	r0, r6, r0, sl
 8014ae6:	0c02      	lsrs	r2, r0, #16
 8014ae8:	0c1b      	lsrs	r3, r3, #16
 8014aea:	fb06 2303 	mla	r3, r6, r3, r2
 8014aee:	f8de 2000 	ldr.w	r2, [lr]
 8014af2:	b280      	uxth	r0, r0
 8014af4:	b292      	uxth	r2, r2
 8014af6:	1a12      	subs	r2, r2, r0
 8014af8:	445a      	add	r2, fp
 8014afa:	f8de 0000 	ldr.w	r0, [lr]
 8014afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014b08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014b0c:	b292      	uxth	r2, r2
 8014b0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014b12:	45e1      	cmp	r9, ip
 8014b14:	f84e 2b04 	str.w	r2, [lr], #4
 8014b18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014b1c:	d2de      	bcs.n	8014adc <quorem+0x42>
 8014b1e:	9b00      	ldr	r3, [sp, #0]
 8014b20:	58eb      	ldr	r3, [r5, r3]
 8014b22:	b92b      	cbnz	r3, 8014b30 <quorem+0x96>
 8014b24:	9b01      	ldr	r3, [sp, #4]
 8014b26:	3b04      	subs	r3, #4
 8014b28:	429d      	cmp	r5, r3
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	d32f      	bcc.n	8014b8e <quorem+0xf4>
 8014b2e:	613c      	str	r4, [r7, #16]
 8014b30:	4638      	mov	r0, r7
 8014b32:	f001 f8c5 	bl	8015cc0 <__mcmp>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	db25      	blt.n	8014b86 <quorem+0xec>
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8014b42:	f8d1 c000 	ldr.w	ip, [r1]
 8014b46:	fa1f fe82 	uxth.w	lr, r2
 8014b4a:	fa1f f38c 	uxth.w	r3, ip
 8014b4e:	eba3 030e 	sub.w	r3, r3, lr
 8014b52:	4403      	add	r3, r0
 8014b54:	0c12      	lsrs	r2, r2, #16
 8014b56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014b5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b64:	45c1      	cmp	r9, r8
 8014b66:	f841 3b04 	str.w	r3, [r1], #4
 8014b6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b6e:	d2e6      	bcs.n	8014b3e <quorem+0xa4>
 8014b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b78:	b922      	cbnz	r2, 8014b84 <quorem+0xea>
 8014b7a:	3b04      	subs	r3, #4
 8014b7c:	429d      	cmp	r5, r3
 8014b7e:	461a      	mov	r2, r3
 8014b80:	d30b      	bcc.n	8014b9a <quorem+0x100>
 8014b82:	613c      	str	r4, [r7, #16]
 8014b84:	3601      	adds	r6, #1
 8014b86:	4630      	mov	r0, r6
 8014b88:	b003      	add	sp, #12
 8014b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8e:	6812      	ldr	r2, [r2, #0]
 8014b90:	3b04      	subs	r3, #4
 8014b92:	2a00      	cmp	r2, #0
 8014b94:	d1cb      	bne.n	8014b2e <quorem+0x94>
 8014b96:	3c01      	subs	r4, #1
 8014b98:	e7c6      	b.n	8014b28 <quorem+0x8e>
 8014b9a:	6812      	ldr	r2, [r2, #0]
 8014b9c:	3b04      	subs	r3, #4
 8014b9e:	2a00      	cmp	r2, #0
 8014ba0:	d1ef      	bne.n	8014b82 <quorem+0xe8>
 8014ba2:	3c01      	subs	r4, #1
 8014ba4:	e7ea      	b.n	8014b7c <quorem+0xe2>
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	e7ee      	b.n	8014b88 <quorem+0xee>
 8014baa:	0000      	movs	r0, r0
 8014bac:	0000      	movs	r0, r0
	...

08014bb0 <_dtoa_r>:
 8014bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb4:	69c7      	ldr	r7, [r0, #28]
 8014bb6:	b099      	sub	sp, #100	@ 0x64
 8014bb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014bbc:	ec55 4b10 	vmov	r4, r5, d0
 8014bc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8014bc4:	4683      	mov	fp, r0
 8014bc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8014bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014bca:	b97f      	cbnz	r7, 8014bec <_dtoa_r+0x3c>
 8014bcc:	2010      	movs	r0, #16
 8014bce:	f7fe ffa1 	bl	8013b14 <malloc>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8014bd8:	b920      	cbnz	r0, 8014be4 <_dtoa_r+0x34>
 8014bda:	4ba7      	ldr	r3, [pc, #668]	@ (8014e78 <_dtoa_r+0x2c8>)
 8014bdc:	21ef      	movs	r1, #239	@ 0xef
 8014bde:	48a7      	ldr	r0, [pc, #668]	@ (8014e7c <_dtoa_r+0x2cc>)
 8014be0:	f001 fb82 	bl	80162e8 <__assert_func>
 8014be4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014be8:	6007      	str	r7, [r0, #0]
 8014bea:	60c7      	str	r7, [r0, #12]
 8014bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014bf0:	6819      	ldr	r1, [r3, #0]
 8014bf2:	b159      	cbz	r1, 8014c0c <_dtoa_r+0x5c>
 8014bf4:	685a      	ldr	r2, [r3, #4]
 8014bf6:	604a      	str	r2, [r1, #4]
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	4093      	lsls	r3, r2
 8014bfc:	608b      	str	r3, [r1, #8]
 8014bfe:	4658      	mov	r0, fp
 8014c00:	f000 fe24 	bl	801584c <_Bfree>
 8014c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
 8014c0c:	1e2b      	subs	r3, r5, #0
 8014c0e:	bfb9      	ittee	lt
 8014c10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014c14:	9303      	strlt	r3, [sp, #12]
 8014c16:	2300      	movge	r3, #0
 8014c18:	6033      	strge	r3, [r6, #0]
 8014c1a:	9f03      	ldr	r7, [sp, #12]
 8014c1c:	4b98      	ldr	r3, [pc, #608]	@ (8014e80 <_dtoa_r+0x2d0>)
 8014c1e:	bfbc      	itt	lt
 8014c20:	2201      	movlt	r2, #1
 8014c22:	6032      	strlt	r2, [r6, #0]
 8014c24:	43bb      	bics	r3, r7
 8014c26:	d112      	bne.n	8014c4e <_dtoa_r+0x9e>
 8014c28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014c2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014c2e:	6013      	str	r3, [r2, #0]
 8014c30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c34:	4323      	orrs	r3, r4
 8014c36:	f000 854d 	beq.w	80156d4 <_dtoa_r+0xb24>
 8014c3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014e94 <_dtoa_r+0x2e4>
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	f000 854f 	beq.w	80156e4 <_dtoa_r+0xb34>
 8014c46:	f10a 0303 	add.w	r3, sl, #3
 8014c4a:	f000 bd49 	b.w	80156e0 <_dtoa_r+0xb30>
 8014c4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c52:	2200      	movs	r2, #0
 8014c54:	ec51 0b17 	vmov	r0, r1, d7
 8014c58:	2300      	movs	r3, #0
 8014c5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014c5e:	f7eb ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8014c62:	4680      	mov	r8, r0
 8014c64:	b158      	cbz	r0, 8014c7e <_dtoa_r+0xce>
 8014c66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014c68:	2301      	movs	r3, #1
 8014c6a:	6013      	str	r3, [r2, #0]
 8014c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c6e:	b113      	cbz	r3, 8014c76 <_dtoa_r+0xc6>
 8014c70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014c72:	4b84      	ldr	r3, [pc, #528]	@ (8014e84 <_dtoa_r+0x2d4>)
 8014c74:	6013      	str	r3, [r2, #0]
 8014c76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014e98 <_dtoa_r+0x2e8>
 8014c7a:	f000 bd33 	b.w	80156e4 <_dtoa_r+0xb34>
 8014c7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014c82:	aa16      	add	r2, sp, #88	@ 0x58
 8014c84:	a917      	add	r1, sp, #92	@ 0x5c
 8014c86:	4658      	mov	r0, fp
 8014c88:	f001 f8ca 	bl	8015e20 <__d2b>
 8014c8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014c90:	4681      	mov	r9, r0
 8014c92:	2e00      	cmp	r6, #0
 8014c94:	d077      	beq.n	8014d86 <_dtoa_r+0x1d6>
 8014c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014ca4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014ca8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014cac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	4b74      	ldr	r3, [pc, #464]	@ (8014e88 <_dtoa_r+0x2d8>)
 8014cb6:	f7eb faef 	bl	8000298 <__aeabi_dsub>
 8014cba:	a369      	add	r3, pc, #420	@ (adr r3, 8014e60 <_dtoa_r+0x2b0>)
 8014cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc0:	f7eb fca2 	bl	8000608 <__aeabi_dmul>
 8014cc4:	a368      	add	r3, pc, #416	@ (adr r3, 8014e68 <_dtoa_r+0x2b8>)
 8014cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cca:	f7eb fae7 	bl	800029c <__adddf3>
 8014cce:	4604      	mov	r4, r0
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	460d      	mov	r5, r1
 8014cd4:	f7eb fc2e 	bl	8000534 <__aeabi_i2d>
 8014cd8:	a365      	add	r3, pc, #404	@ (adr r3, 8014e70 <_dtoa_r+0x2c0>)
 8014cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cde:	f7eb fc93 	bl	8000608 <__aeabi_dmul>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	4629      	mov	r1, r5
 8014cea:	f7eb fad7 	bl	800029c <__adddf3>
 8014cee:	4604      	mov	r4, r0
 8014cf0:	460d      	mov	r5, r1
 8014cf2:	f7eb ff39 	bl	8000b68 <__aeabi_d2iz>
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	4607      	mov	r7, r0
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	4629      	mov	r1, r5
 8014d00:	f7eb fef4 	bl	8000aec <__aeabi_dcmplt>
 8014d04:	b140      	cbz	r0, 8014d18 <_dtoa_r+0x168>
 8014d06:	4638      	mov	r0, r7
 8014d08:	f7eb fc14 	bl	8000534 <__aeabi_i2d>
 8014d0c:	4622      	mov	r2, r4
 8014d0e:	462b      	mov	r3, r5
 8014d10:	f7eb fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8014d14:	b900      	cbnz	r0, 8014d18 <_dtoa_r+0x168>
 8014d16:	3f01      	subs	r7, #1
 8014d18:	2f16      	cmp	r7, #22
 8014d1a:	d851      	bhi.n	8014dc0 <_dtoa_r+0x210>
 8014d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8014e8c <_dtoa_r+0x2dc>)
 8014d1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014d2a:	f7eb fedf 	bl	8000aec <__aeabi_dcmplt>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d048      	beq.n	8014dc4 <_dtoa_r+0x214>
 8014d32:	3f01      	subs	r7, #1
 8014d34:	2300      	movs	r3, #0
 8014d36:	9312      	str	r3, [sp, #72]	@ 0x48
 8014d38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d3a:	1b9b      	subs	r3, r3, r6
 8014d3c:	1e5a      	subs	r2, r3, #1
 8014d3e:	bf44      	itt	mi
 8014d40:	f1c3 0801 	rsbmi	r8, r3, #1
 8014d44:	2300      	movmi	r3, #0
 8014d46:	9208      	str	r2, [sp, #32]
 8014d48:	bf54      	ite	pl
 8014d4a:	f04f 0800 	movpl.w	r8, #0
 8014d4e:	9308      	strmi	r3, [sp, #32]
 8014d50:	2f00      	cmp	r7, #0
 8014d52:	db39      	blt.n	8014dc8 <_dtoa_r+0x218>
 8014d54:	9b08      	ldr	r3, [sp, #32]
 8014d56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014d58:	443b      	add	r3, r7
 8014d5a:	9308      	str	r3, [sp, #32]
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d62:	2b09      	cmp	r3, #9
 8014d64:	d864      	bhi.n	8014e30 <_dtoa_r+0x280>
 8014d66:	2b05      	cmp	r3, #5
 8014d68:	bfc4      	itt	gt
 8014d6a:	3b04      	subgt	r3, #4
 8014d6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d70:	f1a3 0302 	sub.w	r3, r3, #2
 8014d74:	bfcc      	ite	gt
 8014d76:	2400      	movgt	r4, #0
 8014d78:	2401      	movle	r4, #1
 8014d7a:	2b03      	cmp	r3, #3
 8014d7c:	d863      	bhi.n	8014e46 <_dtoa_r+0x296>
 8014d7e:	e8df f003 	tbb	[pc, r3]
 8014d82:	372a      	.short	0x372a
 8014d84:	5535      	.short	0x5535
 8014d86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014d8a:	441e      	add	r6, r3
 8014d8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014d90:	2b20      	cmp	r3, #32
 8014d92:	bfc1      	itttt	gt
 8014d94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014d98:	409f      	lslgt	r7, r3
 8014d9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014d9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014da2:	bfd6      	itet	le
 8014da4:	f1c3 0320 	rsble	r3, r3, #32
 8014da8:	ea47 0003 	orrgt.w	r0, r7, r3
 8014dac:	fa04 f003 	lslle.w	r0, r4, r3
 8014db0:	f7eb fbb0 	bl	8000514 <__aeabi_ui2d>
 8014db4:	2201      	movs	r2, #1
 8014db6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014dba:	3e01      	subs	r6, #1
 8014dbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8014dbe:	e777      	b.n	8014cb0 <_dtoa_r+0x100>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e7b8      	b.n	8014d36 <_dtoa_r+0x186>
 8014dc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8014dc6:	e7b7      	b.n	8014d38 <_dtoa_r+0x188>
 8014dc8:	427b      	negs	r3, r7
 8014dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8014dcc:	2300      	movs	r3, #0
 8014dce:	eba8 0807 	sub.w	r8, r8, r7
 8014dd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014dd4:	e7c4      	b.n	8014d60 <_dtoa_r+0x1b0>
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	dc35      	bgt.n	8014e4c <_dtoa_r+0x29c>
 8014de0:	2301      	movs	r3, #1
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	9307      	str	r3, [sp, #28]
 8014de6:	461a      	mov	r2, r3
 8014de8:	920e      	str	r2, [sp, #56]	@ 0x38
 8014dea:	e00b      	b.n	8014e04 <_dtoa_r+0x254>
 8014dec:	2301      	movs	r3, #1
 8014dee:	e7f3      	b.n	8014dd8 <_dtoa_r+0x228>
 8014df0:	2300      	movs	r3, #0
 8014df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014df6:	18fb      	adds	r3, r7, r3
 8014df8:	9300      	str	r3, [sp, #0]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	9307      	str	r3, [sp, #28]
 8014e00:	bfb8      	it	lt
 8014e02:	2301      	movlt	r3, #1
 8014e04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014e08:	2100      	movs	r1, #0
 8014e0a:	2204      	movs	r2, #4
 8014e0c:	f102 0514 	add.w	r5, r2, #20
 8014e10:	429d      	cmp	r5, r3
 8014e12:	d91f      	bls.n	8014e54 <_dtoa_r+0x2a4>
 8014e14:	6041      	str	r1, [r0, #4]
 8014e16:	4658      	mov	r0, fp
 8014e18:	f000 fcd8 	bl	80157cc <_Balloc>
 8014e1c:	4682      	mov	sl, r0
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	d13c      	bne.n	8014e9c <_dtoa_r+0x2ec>
 8014e22:	4b1b      	ldr	r3, [pc, #108]	@ (8014e90 <_dtoa_r+0x2e0>)
 8014e24:	4602      	mov	r2, r0
 8014e26:	f240 11af 	movw	r1, #431	@ 0x1af
 8014e2a:	e6d8      	b.n	8014bde <_dtoa_r+0x2e>
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	e7e0      	b.n	8014df2 <_dtoa_r+0x242>
 8014e30:	2401      	movs	r4, #1
 8014e32:	2300      	movs	r3, #0
 8014e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014e38:	f04f 33ff 	mov.w	r3, #4294967295
 8014e3c:	9300      	str	r3, [sp, #0]
 8014e3e:	9307      	str	r3, [sp, #28]
 8014e40:	2200      	movs	r2, #0
 8014e42:	2312      	movs	r3, #18
 8014e44:	e7d0      	b.n	8014de8 <_dtoa_r+0x238>
 8014e46:	2301      	movs	r3, #1
 8014e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e4a:	e7f5      	b.n	8014e38 <_dtoa_r+0x288>
 8014e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	9307      	str	r3, [sp, #28]
 8014e52:	e7d7      	b.n	8014e04 <_dtoa_r+0x254>
 8014e54:	3101      	adds	r1, #1
 8014e56:	0052      	lsls	r2, r2, #1
 8014e58:	e7d8      	b.n	8014e0c <_dtoa_r+0x25c>
 8014e5a:	bf00      	nop
 8014e5c:	f3af 8000 	nop.w
 8014e60:	636f4361 	.word	0x636f4361
 8014e64:	3fd287a7 	.word	0x3fd287a7
 8014e68:	8b60c8b3 	.word	0x8b60c8b3
 8014e6c:	3fc68a28 	.word	0x3fc68a28
 8014e70:	509f79fb 	.word	0x509f79fb
 8014e74:	3fd34413 	.word	0x3fd34413
 8014e78:	08016cd6 	.word	0x08016cd6
 8014e7c:	08016ced 	.word	0x08016ced
 8014e80:	7ff00000 	.word	0x7ff00000
 8014e84:	08016ca6 	.word	0x08016ca6
 8014e88:	3ff80000 	.word	0x3ff80000
 8014e8c:	08016de8 	.word	0x08016de8
 8014e90:	08016d45 	.word	0x08016d45
 8014e94:	08016cd2 	.word	0x08016cd2
 8014e98:	08016ca5 	.word	0x08016ca5
 8014e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014ea0:	6018      	str	r0, [r3, #0]
 8014ea2:	9b07      	ldr	r3, [sp, #28]
 8014ea4:	2b0e      	cmp	r3, #14
 8014ea6:	f200 80a4 	bhi.w	8014ff2 <_dtoa_r+0x442>
 8014eaa:	2c00      	cmp	r4, #0
 8014eac:	f000 80a1 	beq.w	8014ff2 <_dtoa_r+0x442>
 8014eb0:	2f00      	cmp	r7, #0
 8014eb2:	dd33      	ble.n	8014f1c <_dtoa_r+0x36c>
 8014eb4:	4bad      	ldr	r3, [pc, #692]	@ (801516c <_dtoa_r+0x5bc>)
 8014eb6:	f007 020f 	and.w	r2, r7, #15
 8014eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ebe:	ed93 7b00 	vldr	d7, [r3]
 8014ec2:	05f8      	lsls	r0, r7, #23
 8014ec4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014ecc:	d516      	bpl.n	8014efc <_dtoa_r+0x34c>
 8014ece:	4ba8      	ldr	r3, [pc, #672]	@ (8015170 <_dtoa_r+0x5c0>)
 8014ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ed8:	f7eb fcc0 	bl	800085c <__aeabi_ddiv>
 8014edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ee0:	f004 040f 	and.w	r4, r4, #15
 8014ee4:	2603      	movs	r6, #3
 8014ee6:	4da2      	ldr	r5, [pc, #648]	@ (8015170 <_dtoa_r+0x5c0>)
 8014ee8:	b954      	cbnz	r4, 8014f00 <_dtoa_r+0x350>
 8014eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ef2:	f7eb fcb3 	bl	800085c <__aeabi_ddiv>
 8014ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014efa:	e028      	b.n	8014f4e <_dtoa_r+0x39e>
 8014efc:	2602      	movs	r6, #2
 8014efe:	e7f2      	b.n	8014ee6 <_dtoa_r+0x336>
 8014f00:	07e1      	lsls	r1, r4, #31
 8014f02:	d508      	bpl.n	8014f16 <_dtoa_r+0x366>
 8014f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f0c:	f7eb fb7c 	bl	8000608 <__aeabi_dmul>
 8014f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f14:	3601      	adds	r6, #1
 8014f16:	1064      	asrs	r4, r4, #1
 8014f18:	3508      	adds	r5, #8
 8014f1a:	e7e5      	b.n	8014ee8 <_dtoa_r+0x338>
 8014f1c:	f000 80d2 	beq.w	80150c4 <_dtoa_r+0x514>
 8014f20:	427c      	negs	r4, r7
 8014f22:	4b92      	ldr	r3, [pc, #584]	@ (801516c <_dtoa_r+0x5bc>)
 8014f24:	4d92      	ldr	r5, [pc, #584]	@ (8015170 <_dtoa_r+0x5c0>)
 8014f26:	f004 020f 	and.w	r2, r4, #15
 8014f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014f36:	f7eb fb67 	bl	8000608 <__aeabi_dmul>
 8014f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f3e:	1124      	asrs	r4, r4, #4
 8014f40:	2300      	movs	r3, #0
 8014f42:	2602      	movs	r6, #2
 8014f44:	2c00      	cmp	r4, #0
 8014f46:	f040 80b2 	bne.w	80150ae <_dtoa_r+0x4fe>
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1d3      	bne.n	8014ef6 <_dtoa_r+0x346>
 8014f4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014f50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f000 80b7 	beq.w	80150c8 <_dtoa_r+0x518>
 8014f5a:	4b86      	ldr	r3, [pc, #536]	@ (8015174 <_dtoa_r+0x5c4>)
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	4620      	mov	r0, r4
 8014f60:	4629      	mov	r1, r5
 8014f62:	f7eb fdc3 	bl	8000aec <__aeabi_dcmplt>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	f000 80ae 	beq.w	80150c8 <_dtoa_r+0x518>
 8014f6c:	9b07      	ldr	r3, [sp, #28]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	f000 80aa 	beq.w	80150c8 <_dtoa_r+0x518>
 8014f74:	9b00      	ldr	r3, [sp, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	dd37      	ble.n	8014fea <_dtoa_r+0x43a>
 8014f7a:	1e7b      	subs	r3, r7, #1
 8014f7c:	9304      	str	r3, [sp, #16]
 8014f7e:	4620      	mov	r0, r4
 8014f80:	4b7d      	ldr	r3, [pc, #500]	@ (8015178 <_dtoa_r+0x5c8>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	4629      	mov	r1, r5
 8014f86:	f7eb fb3f 	bl	8000608 <__aeabi_dmul>
 8014f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f8e:	9c00      	ldr	r4, [sp, #0]
 8014f90:	3601      	adds	r6, #1
 8014f92:	4630      	mov	r0, r6
 8014f94:	f7eb face 	bl	8000534 <__aeabi_i2d>
 8014f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f9c:	f7eb fb34 	bl	8000608 <__aeabi_dmul>
 8014fa0:	4b76      	ldr	r3, [pc, #472]	@ (801517c <_dtoa_r+0x5cc>)
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f7eb f97a 	bl	800029c <__adddf3>
 8014fa8:	4605      	mov	r5, r0
 8014faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014fae:	2c00      	cmp	r4, #0
 8014fb0:	f040 808d 	bne.w	80150ce <_dtoa_r+0x51e>
 8014fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fb8:	4b71      	ldr	r3, [pc, #452]	@ (8015180 <_dtoa_r+0x5d0>)
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f7eb f96c 	bl	8000298 <__aeabi_dsub>
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014fc8:	462a      	mov	r2, r5
 8014fca:	4633      	mov	r3, r6
 8014fcc:	f7eb fdac 	bl	8000b28 <__aeabi_dcmpgt>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	f040 828b 	bne.w	80154ec <_dtoa_r+0x93c>
 8014fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fda:	462a      	mov	r2, r5
 8014fdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014fe0:	f7eb fd84 	bl	8000aec <__aeabi_dcmplt>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f040 8128 	bne.w	801523a <_dtoa_r+0x68a>
 8014fea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014fee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	f2c0 815a 	blt.w	80152ae <_dtoa_r+0x6fe>
 8014ffa:	2f0e      	cmp	r7, #14
 8014ffc:	f300 8157 	bgt.w	80152ae <_dtoa_r+0x6fe>
 8015000:	4b5a      	ldr	r3, [pc, #360]	@ (801516c <_dtoa_r+0x5bc>)
 8015002:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015006:	ed93 7b00 	vldr	d7, [r3]
 801500a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801500c:	2b00      	cmp	r3, #0
 801500e:	ed8d 7b00 	vstr	d7, [sp]
 8015012:	da03      	bge.n	801501c <_dtoa_r+0x46c>
 8015014:	9b07      	ldr	r3, [sp, #28]
 8015016:	2b00      	cmp	r3, #0
 8015018:	f340 8101 	ble.w	801521e <_dtoa_r+0x66e>
 801501c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015020:	4656      	mov	r6, sl
 8015022:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015026:	4620      	mov	r0, r4
 8015028:	4629      	mov	r1, r5
 801502a:	f7eb fc17 	bl	800085c <__aeabi_ddiv>
 801502e:	f7eb fd9b 	bl	8000b68 <__aeabi_d2iz>
 8015032:	4680      	mov	r8, r0
 8015034:	f7eb fa7e 	bl	8000534 <__aeabi_i2d>
 8015038:	e9dd 2300 	ldrd	r2, r3, [sp]
 801503c:	f7eb fae4 	bl	8000608 <__aeabi_dmul>
 8015040:	4602      	mov	r2, r0
 8015042:	460b      	mov	r3, r1
 8015044:	4620      	mov	r0, r4
 8015046:	4629      	mov	r1, r5
 8015048:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801504c:	f7eb f924 	bl	8000298 <__aeabi_dsub>
 8015050:	f806 4b01 	strb.w	r4, [r6], #1
 8015054:	9d07      	ldr	r5, [sp, #28]
 8015056:	eba6 040a 	sub.w	r4, r6, sl
 801505a:	42a5      	cmp	r5, r4
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	f040 8117 	bne.w	8015292 <_dtoa_r+0x6e2>
 8015064:	f7eb f91a 	bl	800029c <__adddf3>
 8015068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801506c:	4604      	mov	r4, r0
 801506e:	460d      	mov	r5, r1
 8015070:	f7eb fd5a 	bl	8000b28 <__aeabi_dcmpgt>
 8015074:	2800      	cmp	r0, #0
 8015076:	f040 80f9 	bne.w	801526c <_dtoa_r+0x6bc>
 801507a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801507e:	4620      	mov	r0, r4
 8015080:	4629      	mov	r1, r5
 8015082:	f7eb fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8015086:	b118      	cbz	r0, 8015090 <_dtoa_r+0x4e0>
 8015088:	f018 0f01 	tst.w	r8, #1
 801508c:	f040 80ee 	bne.w	801526c <_dtoa_r+0x6bc>
 8015090:	4649      	mov	r1, r9
 8015092:	4658      	mov	r0, fp
 8015094:	f000 fbda 	bl	801584c <_Bfree>
 8015098:	2300      	movs	r3, #0
 801509a:	7033      	strb	r3, [r6, #0]
 801509c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801509e:	3701      	adds	r7, #1
 80150a0:	601f      	str	r7, [r3, #0]
 80150a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	f000 831d 	beq.w	80156e4 <_dtoa_r+0xb34>
 80150aa:	601e      	str	r6, [r3, #0]
 80150ac:	e31a      	b.n	80156e4 <_dtoa_r+0xb34>
 80150ae:	07e2      	lsls	r2, r4, #31
 80150b0:	d505      	bpl.n	80150be <_dtoa_r+0x50e>
 80150b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150b6:	f7eb faa7 	bl	8000608 <__aeabi_dmul>
 80150ba:	3601      	adds	r6, #1
 80150bc:	2301      	movs	r3, #1
 80150be:	1064      	asrs	r4, r4, #1
 80150c0:	3508      	adds	r5, #8
 80150c2:	e73f      	b.n	8014f44 <_dtoa_r+0x394>
 80150c4:	2602      	movs	r6, #2
 80150c6:	e742      	b.n	8014f4e <_dtoa_r+0x39e>
 80150c8:	9c07      	ldr	r4, [sp, #28]
 80150ca:	9704      	str	r7, [sp, #16]
 80150cc:	e761      	b.n	8014f92 <_dtoa_r+0x3e2>
 80150ce:	4b27      	ldr	r3, [pc, #156]	@ (801516c <_dtoa_r+0x5bc>)
 80150d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80150d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80150d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80150da:	4454      	add	r4, sl
 80150dc:	2900      	cmp	r1, #0
 80150de:	d053      	beq.n	8015188 <_dtoa_r+0x5d8>
 80150e0:	4928      	ldr	r1, [pc, #160]	@ (8015184 <_dtoa_r+0x5d4>)
 80150e2:	2000      	movs	r0, #0
 80150e4:	f7eb fbba 	bl	800085c <__aeabi_ddiv>
 80150e8:	4633      	mov	r3, r6
 80150ea:	462a      	mov	r2, r5
 80150ec:	f7eb f8d4 	bl	8000298 <__aeabi_dsub>
 80150f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80150f4:	4656      	mov	r6, sl
 80150f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150fa:	f7eb fd35 	bl	8000b68 <__aeabi_d2iz>
 80150fe:	4605      	mov	r5, r0
 8015100:	f7eb fa18 	bl	8000534 <__aeabi_i2d>
 8015104:	4602      	mov	r2, r0
 8015106:	460b      	mov	r3, r1
 8015108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801510c:	f7eb f8c4 	bl	8000298 <__aeabi_dsub>
 8015110:	3530      	adds	r5, #48	@ 0x30
 8015112:	4602      	mov	r2, r0
 8015114:	460b      	mov	r3, r1
 8015116:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801511a:	f806 5b01 	strb.w	r5, [r6], #1
 801511e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015122:	f7eb fce3 	bl	8000aec <__aeabi_dcmplt>
 8015126:	2800      	cmp	r0, #0
 8015128:	d171      	bne.n	801520e <_dtoa_r+0x65e>
 801512a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801512e:	4911      	ldr	r1, [pc, #68]	@ (8015174 <_dtoa_r+0x5c4>)
 8015130:	2000      	movs	r0, #0
 8015132:	f7eb f8b1 	bl	8000298 <__aeabi_dsub>
 8015136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801513a:	f7eb fcd7 	bl	8000aec <__aeabi_dcmplt>
 801513e:	2800      	cmp	r0, #0
 8015140:	f040 8095 	bne.w	801526e <_dtoa_r+0x6be>
 8015144:	42a6      	cmp	r6, r4
 8015146:	f43f af50 	beq.w	8014fea <_dtoa_r+0x43a>
 801514a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801514e:	4b0a      	ldr	r3, [pc, #40]	@ (8015178 <_dtoa_r+0x5c8>)
 8015150:	2200      	movs	r2, #0
 8015152:	f7eb fa59 	bl	8000608 <__aeabi_dmul>
 8015156:	4b08      	ldr	r3, [pc, #32]	@ (8015178 <_dtoa_r+0x5c8>)
 8015158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801515c:	2200      	movs	r2, #0
 801515e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015162:	f7eb fa51 	bl	8000608 <__aeabi_dmul>
 8015166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801516a:	e7c4      	b.n	80150f6 <_dtoa_r+0x546>
 801516c:	08016de8 	.word	0x08016de8
 8015170:	08016dc0 	.word	0x08016dc0
 8015174:	3ff00000 	.word	0x3ff00000
 8015178:	40240000 	.word	0x40240000
 801517c:	401c0000 	.word	0x401c0000
 8015180:	40140000 	.word	0x40140000
 8015184:	3fe00000 	.word	0x3fe00000
 8015188:	4631      	mov	r1, r6
 801518a:	4628      	mov	r0, r5
 801518c:	f7eb fa3c 	bl	8000608 <__aeabi_dmul>
 8015190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015194:	9415      	str	r4, [sp, #84]	@ 0x54
 8015196:	4656      	mov	r6, sl
 8015198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801519c:	f7eb fce4 	bl	8000b68 <__aeabi_d2iz>
 80151a0:	4605      	mov	r5, r0
 80151a2:	f7eb f9c7 	bl	8000534 <__aeabi_i2d>
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151ae:	f7eb f873 	bl	8000298 <__aeabi_dsub>
 80151b2:	3530      	adds	r5, #48	@ 0x30
 80151b4:	f806 5b01 	strb.w	r5, [r6], #1
 80151b8:	4602      	mov	r2, r0
 80151ba:	460b      	mov	r3, r1
 80151bc:	42a6      	cmp	r6, r4
 80151be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80151c2:	f04f 0200 	mov.w	r2, #0
 80151c6:	d124      	bne.n	8015212 <_dtoa_r+0x662>
 80151c8:	4bac      	ldr	r3, [pc, #688]	@ (801547c <_dtoa_r+0x8cc>)
 80151ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80151ce:	f7eb f865 	bl	800029c <__adddf3>
 80151d2:	4602      	mov	r2, r0
 80151d4:	460b      	mov	r3, r1
 80151d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151da:	f7eb fca5 	bl	8000b28 <__aeabi_dcmpgt>
 80151de:	2800      	cmp	r0, #0
 80151e0:	d145      	bne.n	801526e <_dtoa_r+0x6be>
 80151e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80151e6:	49a5      	ldr	r1, [pc, #660]	@ (801547c <_dtoa_r+0x8cc>)
 80151e8:	2000      	movs	r0, #0
 80151ea:	f7eb f855 	bl	8000298 <__aeabi_dsub>
 80151ee:	4602      	mov	r2, r0
 80151f0:	460b      	mov	r3, r1
 80151f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151f6:	f7eb fc79 	bl	8000aec <__aeabi_dcmplt>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	f43f aef5 	beq.w	8014fea <_dtoa_r+0x43a>
 8015200:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015202:	1e73      	subs	r3, r6, #1
 8015204:	9315      	str	r3, [sp, #84]	@ 0x54
 8015206:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801520a:	2b30      	cmp	r3, #48	@ 0x30
 801520c:	d0f8      	beq.n	8015200 <_dtoa_r+0x650>
 801520e:	9f04      	ldr	r7, [sp, #16]
 8015210:	e73e      	b.n	8015090 <_dtoa_r+0x4e0>
 8015212:	4b9b      	ldr	r3, [pc, #620]	@ (8015480 <_dtoa_r+0x8d0>)
 8015214:	f7eb f9f8 	bl	8000608 <__aeabi_dmul>
 8015218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801521c:	e7bc      	b.n	8015198 <_dtoa_r+0x5e8>
 801521e:	d10c      	bne.n	801523a <_dtoa_r+0x68a>
 8015220:	4b98      	ldr	r3, [pc, #608]	@ (8015484 <_dtoa_r+0x8d4>)
 8015222:	2200      	movs	r2, #0
 8015224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015228:	f7eb f9ee 	bl	8000608 <__aeabi_dmul>
 801522c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015230:	f7eb fc70 	bl	8000b14 <__aeabi_dcmpge>
 8015234:	2800      	cmp	r0, #0
 8015236:	f000 8157 	beq.w	80154e8 <_dtoa_r+0x938>
 801523a:	2400      	movs	r4, #0
 801523c:	4625      	mov	r5, r4
 801523e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015240:	43db      	mvns	r3, r3
 8015242:	9304      	str	r3, [sp, #16]
 8015244:	4656      	mov	r6, sl
 8015246:	2700      	movs	r7, #0
 8015248:	4621      	mov	r1, r4
 801524a:	4658      	mov	r0, fp
 801524c:	f000 fafe 	bl	801584c <_Bfree>
 8015250:	2d00      	cmp	r5, #0
 8015252:	d0dc      	beq.n	801520e <_dtoa_r+0x65e>
 8015254:	b12f      	cbz	r7, 8015262 <_dtoa_r+0x6b2>
 8015256:	42af      	cmp	r7, r5
 8015258:	d003      	beq.n	8015262 <_dtoa_r+0x6b2>
 801525a:	4639      	mov	r1, r7
 801525c:	4658      	mov	r0, fp
 801525e:	f000 faf5 	bl	801584c <_Bfree>
 8015262:	4629      	mov	r1, r5
 8015264:	4658      	mov	r0, fp
 8015266:	f000 faf1 	bl	801584c <_Bfree>
 801526a:	e7d0      	b.n	801520e <_dtoa_r+0x65e>
 801526c:	9704      	str	r7, [sp, #16]
 801526e:	4633      	mov	r3, r6
 8015270:	461e      	mov	r6, r3
 8015272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015276:	2a39      	cmp	r2, #57	@ 0x39
 8015278:	d107      	bne.n	801528a <_dtoa_r+0x6da>
 801527a:	459a      	cmp	sl, r3
 801527c:	d1f8      	bne.n	8015270 <_dtoa_r+0x6c0>
 801527e:	9a04      	ldr	r2, [sp, #16]
 8015280:	3201      	adds	r2, #1
 8015282:	9204      	str	r2, [sp, #16]
 8015284:	2230      	movs	r2, #48	@ 0x30
 8015286:	f88a 2000 	strb.w	r2, [sl]
 801528a:	781a      	ldrb	r2, [r3, #0]
 801528c:	3201      	adds	r2, #1
 801528e:	701a      	strb	r2, [r3, #0]
 8015290:	e7bd      	b.n	801520e <_dtoa_r+0x65e>
 8015292:	4b7b      	ldr	r3, [pc, #492]	@ (8015480 <_dtoa_r+0x8d0>)
 8015294:	2200      	movs	r2, #0
 8015296:	f7eb f9b7 	bl	8000608 <__aeabi_dmul>
 801529a:	2200      	movs	r2, #0
 801529c:	2300      	movs	r3, #0
 801529e:	4604      	mov	r4, r0
 80152a0:	460d      	mov	r5, r1
 80152a2:	f7eb fc19 	bl	8000ad8 <__aeabi_dcmpeq>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	f43f aebb 	beq.w	8015022 <_dtoa_r+0x472>
 80152ac:	e6f0      	b.n	8015090 <_dtoa_r+0x4e0>
 80152ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80152b0:	2a00      	cmp	r2, #0
 80152b2:	f000 80db 	beq.w	801546c <_dtoa_r+0x8bc>
 80152b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152b8:	2a01      	cmp	r2, #1
 80152ba:	f300 80bf 	bgt.w	801543c <_dtoa_r+0x88c>
 80152be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80152c0:	2a00      	cmp	r2, #0
 80152c2:	f000 80b7 	beq.w	8015434 <_dtoa_r+0x884>
 80152c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80152ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80152cc:	4646      	mov	r6, r8
 80152ce:	9a08      	ldr	r2, [sp, #32]
 80152d0:	2101      	movs	r1, #1
 80152d2:	441a      	add	r2, r3
 80152d4:	4658      	mov	r0, fp
 80152d6:	4498      	add	r8, r3
 80152d8:	9208      	str	r2, [sp, #32]
 80152da:	f000 fb6b 	bl	80159b4 <__i2b>
 80152de:	4605      	mov	r5, r0
 80152e0:	b15e      	cbz	r6, 80152fa <_dtoa_r+0x74a>
 80152e2:	9b08      	ldr	r3, [sp, #32]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	dd08      	ble.n	80152fa <_dtoa_r+0x74a>
 80152e8:	42b3      	cmp	r3, r6
 80152ea:	9a08      	ldr	r2, [sp, #32]
 80152ec:	bfa8      	it	ge
 80152ee:	4633      	movge	r3, r6
 80152f0:	eba8 0803 	sub.w	r8, r8, r3
 80152f4:	1af6      	subs	r6, r6, r3
 80152f6:	1ad3      	subs	r3, r2, r3
 80152f8:	9308      	str	r3, [sp, #32]
 80152fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152fc:	b1f3      	cbz	r3, 801533c <_dtoa_r+0x78c>
 80152fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015300:	2b00      	cmp	r3, #0
 8015302:	f000 80b7 	beq.w	8015474 <_dtoa_r+0x8c4>
 8015306:	b18c      	cbz	r4, 801532c <_dtoa_r+0x77c>
 8015308:	4629      	mov	r1, r5
 801530a:	4622      	mov	r2, r4
 801530c:	4658      	mov	r0, fp
 801530e:	f000 fc11 	bl	8015b34 <__pow5mult>
 8015312:	464a      	mov	r2, r9
 8015314:	4601      	mov	r1, r0
 8015316:	4605      	mov	r5, r0
 8015318:	4658      	mov	r0, fp
 801531a:	f000 fb61 	bl	80159e0 <__multiply>
 801531e:	4649      	mov	r1, r9
 8015320:	9004      	str	r0, [sp, #16]
 8015322:	4658      	mov	r0, fp
 8015324:	f000 fa92 	bl	801584c <_Bfree>
 8015328:	9b04      	ldr	r3, [sp, #16]
 801532a:	4699      	mov	r9, r3
 801532c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801532e:	1b1a      	subs	r2, r3, r4
 8015330:	d004      	beq.n	801533c <_dtoa_r+0x78c>
 8015332:	4649      	mov	r1, r9
 8015334:	4658      	mov	r0, fp
 8015336:	f000 fbfd 	bl	8015b34 <__pow5mult>
 801533a:	4681      	mov	r9, r0
 801533c:	2101      	movs	r1, #1
 801533e:	4658      	mov	r0, fp
 8015340:	f000 fb38 	bl	80159b4 <__i2b>
 8015344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015346:	4604      	mov	r4, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 81cf 	beq.w	80156ec <_dtoa_r+0xb3c>
 801534e:	461a      	mov	r2, r3
 8015350:	4601      	mov	r1, r0
 8015352:	4658      	mov	r0, fp
 8015354:	f000 fbee 	bl	8015b34 <__pow5mult>
 8015358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801535a:	2b01      	cmp	r3, #1
 801535c:	4604      	mov	r4, r0
 801535e:	f300 8095 	bgt.w	801548c <_dtoa_r+0x8dc>
 8015362:	9b02      	ldr	r3, [sp, #8]
 8015364:	2b00      	cmp	r3, #0
 8015366:	f040 8087 	bne.w	8015478 <_dtoa_r+0x8c8>
 801536a:	9b03      	ldr	r3, [sp, #12]
 801536c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015370:	2b00      	cmp	r3, #0
 8015372:	f040 8089 	bne.w	8015488 <_dtoa_r+0x8d8>
 8015376:	9b03      	ldr	r3, [sp, #12]
 8015378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801537c:	0d1b      	lsrs	r3, r3, #20
 801537e:	051b      	lsls	r3, r3, #20
 8015380:	b12b      	cbz	r3, 801538e <_dtoa_r+0x7de>
 8015382:	9b08      	ldr	r3, [sp, #32]
 8015384:	3301      	adds	r3, #1
 8015386:	9308      	str	r3, [sp, #32]
 8015388:	f108 0801 	add.w	r8, r8, #1
 801538c:	2301      	movs	r3, #1
 801538e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 81b0 	beq.w	80156f8 <_dtoa_r+0xb48>
 8015398:	6923      	ldr	r3, [r4, #16]
 801539a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801539e:	6918      	ldr	r0, [r3, #16]
 80153a0:	f000 fabc 	bl	801591c <__hi0bits>
 80153a4:	f1c0 0020 	rsb	r0, r0, #32
 80153a8:	9b08      	ldr	r3, [sp, #32]
 80153aa:	4418      	add	r0, r3
 80153ac:	f010 001f 	ands.w	r0, r0, #31
 80153b0:	d077      	beq.n	80154a2 <_dtoa_r+0x8f2>
 80153b2:	f1c0 0320 	rsb	r3, r0, #32
 80153b6:	2b04      	cmp	r3, #4
 80153b8:	dd6b      	ble.n	8015492 <_dtoa_r+0x8e2>
 80153ba:	9b08      	ldr	r3, [sp, #32]
 80153bc:	f1c0 001c 	rsb	r0, r0, #28
 80153c0:	4403      	add	r3, r0
 80153c2:	4480      	add	r8, r0
 80153c4:	4406      	add	r6, r0
 80153c6:	9308      	str	r3, [sp, #32]
 80153c8:	f1b8 0f00 	cmp.w	r8, #0
 80153cc:	dd05      	ble.n	80153da <_dtoa_r+0x82a>
 80153ce:	4649      	mov	r1, r9
 80153d0:	4642      	mov	r2, r8
 80153d2:	4658      	mov	r0, fp
 80153d4:	f000 fc08 	bl	8015be8 <__lshift>
 80153d8:	4681      	mov	r9, r0
 80153da:	9b08      	ldr	r3, [sp, #32]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	dd05      	ble.n	80153ec <_dtoa_r+0x83c>
 80153e0:	4621      	mov	r1, r4
 80153e2:	461a      	mov	r2, r3
 80153e4:	4658      	mov	r0, fp
 80153e6:	f000 fbff 	bl	8015be8 <__lshift>
 80153ea:	4604      	mov	r4, r0
 80153ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d059      	beq.n	80154a6 <_dtoa_r+0x8f6>
 80153f2:	4621      	mov	r1, r4
 80153f4:	4648      	mov	r0, r9
 80153f6:	f000 fc63 	bl	8015cc0 <__mcmp>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	da53      	bge.n	80154a6 <_dtoa_r+0x8f6>
 80153fe:	1e7b      	subs	r3, r7, #1
 8015400:	9304      	str	r3, [sp, #16]
 8015402:	4649      	mov	r1, r9
 8015404:	2300      	movs	r3, #0
 8015406:	220a      	movs	r2, #10
 8015408:	4658      	mov	r0, fp
 801540a:	f000 fa41 	bl	8015890 <__multadd>
 801540e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015410:	4681      	mov	r9, r0
 8015412:	2b00      	cmp	r3, #0
 8015414:	f000 8172 	beq.w	80156fc <_dtoa_r+0xb4c>
 8015418:	2300      	movs	r3, #0
 801541a:	4629      	mov	r1, r5
 801541c:	220a      	movs	r2, #10
 801541e:	4658      	mov	r0, fp
 8015420:	f000 fa36 	bl	8015890 <__multadd>
 8015424:	9b00      	ldr	r3, [sp, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	4605      	mov	r5, r0
 801542a:	dc67      	bgt.n	80154fc <_dtoa_r+0x94c>
 801542c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801542e:	2b02      	cmp	r3, #2
 8015430:	dc41      	bgt.n	80154b6 <_dtoa_r+0x906>
 8015432:	e063      	b.n	80154fc <_dtoa_r+0x94c>
 8015434:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015436:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801543a:	e746      	b.n	80152ca <_dtoa_r+0x71a>
 801543c:	9b07      	ldr	r3, [sp, #28]
 801543e:	1e5c      	subs	r4, r3, #1
 8015440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015442:	42a3      	cmp	r3, r4
 8015444:	bfbf      	itttt	lt
 8015446:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015448:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801544a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801544c:	1ae3      	sublt	r3, r4, r3
 801544e:	bfb4      	ite	lt
 8015450:	18d2      	addlt	r2, r2, r3
 8015452:	1b1c      	subge	r4, r3, r4
 8015454:	9b07      	ldr	r3, [sp, #28]
 8015456:	bfbc      	itt	lt
 8015458:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801545a:	2400      	movlt	r4, #0
 801545c:	2b00      	cmp	r3, #0
 801545e:	bfb5      	itete	lt
 8015460:	eba8 0603 	sublt.w	r6, r8, r3
 8015464:	9b07      	ldrge	r3, [sp, #28]
 8015466:	2300      	movlt	r3, #0
 8015468:	4646      	movge	r6, r8
 801546a:	e730      	b.n	80152ce <_dtoa_r+0x71e>
 801546c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801546e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015470:	4646      	mov	r6, r8
 8015472:	e735      	b.n	80152e0 <_dtoa_r+0x730>
 8015474:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015476:	e75c      	b.n	8015332 <_dtoa_r+0x782>
 8015478:	2300      	movs	r3, #0
 801547a:	e788      	b.n	801538e <_dtoa_r+0x7de>
 801547c:	3fe00000 	.word	0x3fe00000
 8015480:	40240000 	.word	0x40240000
 8015484:	40140000 	.word	0x40140000
 8015488:	9b02      	ldr	r3, [sp, #8]
 801548a:	e780      	b.n	801538e <_dtoa_r+0x7de>
 801548c:	2300      	movs	r3, #0
 801548e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015490:	e782      	b.n	8015398 <_dtoa_r+0x7e8>
 8015492:	d099      	beq.n	80153c8 <_dtoa_r+0x818>
 8015494:	9a08      	ldr	r2, [sp, #32]
 8015496:	331c      	adds	r3, #28
 8015498:	441a      	add	r2, r3
 801549a:	4498      	add	r8, r3
 801549c:	441e      	add	r6, r3
 801549e:	9208      	str	r2, [sp, #32]
 80154a0:	e792      	b.n	80153c8 <_dtoa_r+0x818>
 80154a2:	4603      	mov	r3, r0
 80154a4:	e7f6      	b.n	8015494 <_dtoa_r+0x8e4>
 80154a6:	9b07      	ldr	r3, [sp, #28]
 80154a8:	9704      	str	r7, [sp, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	dc20      	bgt.n	80154f0 <_dtoa_r+0x940>
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	dd1e      	ble.n	80154f4 <_dtoa_r+0x944>
 80154b6:	9b00      	ldr	r3, [sp, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f47f aec0 	bne.w	801523e <_dtoa_r+0x68e>
 80154be:	4621      	mov	r1, r4
 80154c0:	2205      	movs	r2, #5
 80154c2:	4658      	mov	r0, fp
 80154c4:	f000 f9e4 	bl	8015890 <__multadd>
 80154c8:	4601      	mov	r1, r0
 80154ca:	4604      	mov	r4, r0
 80154cc:	4648      	mov	r0, r9
 80154ce:	f000 fbf7 	bl	8015cc0 <__mcmp>
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f77f aeb3 	ble.w	801523e <_dtoa_r+0x68e>
 80154d8:	4656      	mov	r6, sl
 80154da:	2331      	movs	r3, #49	@ 0x31
 80154dc:	f806 3b01 	strb.w	r3, [r6], #1
 80154e0:	9b04      	ldr	r3, [sp, #16]
 80154e2:	3301      	adds	r3, #1
 80154e4:	9304      	str	r3, [sp, #16]
 80154e6:	e6ae      	b.n	8015246 <_dtoa_r+0x696>
 80154e8:	9c07      	ldr	r4, [sp, #28]
 80154ea:	9704      	str	r7, [sp, #16]
 80154ec:	4625      	mov	r5, r4
 80154ee:	e7f3      	b.n	80154d8 <_dtoa_r+0x928>
 80154f0:	9b07      	ldr	r3, [sp, #28]
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	f000 8104 	beq.w	8015704 <_dtoa_r+0xb54>
 80154fc:	2e00      	cmp	r6, #0
 80154fe:	dd05      	ble.n	801550c <_dtoa_r+0x95c>
 8015500:	4629      	mov	r1, r5
 8015502:	4632      	mov	r2, r6
 8015504:	4658      	mov	r0, fp
 8015506:	f000 fb6f 	bl	8015be8 <__lshift>
 801550a:	4605      	mov	r5, r0
 801550c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801550e:	2b00      	cmp	r3, #0
 8015510:	d05a      	beq.n	80155c8 <_dtoa_r+0xa18>
 8015512:	6869      	ldr	r1, [r5, #4]
 8015514:	4658      	mov	r0, fp
 8015516:	f000 f959 	bl	80157cc <_Balloc>
 801551a:	4606      	mov	r6, r0
 801551c:	b928      	cbnz	r0, 801552a <_dtoa_r+0x97a>
 801551e:	4b84      	ldr	r3, [pc, #528]	@ (8015730 <_dtoa_r+0xb80>)
 8015520:	4602      	mov	r2, r0
 8015522:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015526:	f7ff bb5a 	b.w	8014bde <_dtoa_r+0x2e>
 801552a:	692a      	ldr	r2, [r5, #16]
 801552c:	3202      	adds	r2, #2
 801552e:	0092      	lsls	r2, r2, #2
 8015530:	f105 010c 	add.w	r1, r5, #12
 8015534:	300c      	adds	r0, #12
 8015536:	f7ff faa2 	bl	8014a7e <memcpy>
 801553a:	2201      	movs	r2, #1
 801553c:	4631      	mov	r1, r6
 801553e:	4658      	mov	r0, fp
 8015540:	f000 fb52 	bl	8015be8 <__lshift>
 8015544:	f10a 0301 	add.w	r3, sl, #1
 8015548:	9307      	str	r3, [sp, #28]
 801554a:	9b00      	ldr	r3, [sp, #0]
 801554c:	4453      	add	r3, sl
 801554e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015550:	9b02      	ldr	r3, [sp, #8]
 8015552:	f003 0301 	and.w	r3, r3, #1
 8015556:	462f      	mov	r7, r5
 8015558:	930a      	str	r3, [sp, #40]	@ 0x28
 801555a:	4605      	mov	r5, r0
 801555c:	9b07      	ldr	r3, [sp, #28]
 801555e:	4621      	mov	r1, r4
 8015560:	3b01      	subs	r3, #1
 8015562:	4648      	mov	r0, r9
 8015564:	9300      	str	r3, [sp, #0]
 8015566:	f7ff fa98 	bl	8014a9a <quorem>
 801556a:	4639      	mov	r1, r7
 801556c:	9002      	str	r0, [sp, #8]
 801556e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015572:	4648      	mov	r0, r9
 8015574:	f000 fba4 	bl	8015cc0 <__mcmp>
 8015578:	462a      	mov	r2, r5
 801557a:	9008      	str	r0, [sp, #32]
 801557c:	4621      	mov	r1, r4
 801557e:	4658      	mov	r0, fp
 8015580:	f000 fbba 	bl	8015cf8 <__mdiff>
 8015584:	68c2      	ldr	r2, [r0, #12]
 8015586:	4606      	mov	r6, r0
 8015588:	bb02      	cbnz	r2, 80155cc <_dtoa_r+0xa1c>
 801558a:	4601      	mov	r1, r0
 801558c:	4648      	mov	r0, r9
 801558e:	f000 fb97 	bl	8015cc0 <__mcmp>
 8015592:	4602      	mov	r2, r0
 8015594:	4631      	mov	r1, r6
 8015596:	4658      	mov	r0, fp
 8015598:	920e      	str	r2, [sp, #56]	@ 0x38
 801559a:	f000 f957 	bl	801584c <_Bfree>
 801559e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80155a2:	9e07      	ldr	r6, [sp, #28]
 80155a4:	ea43 0102 	orr.w	r1, r3, r2
 80155a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155aa:	4319      	orrs	r1, r3
 80155ac:	d110      	bne.n	80155d0 <_dtoa_r+0xa20>
 80155ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80155b2:	d029      	beq.n	8015608 <_dtoa_r+0xa58>
 80155b4:	9b08      	ldr	r3, [sp, #32]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	dd02      	ble.n	80155c0 <_dtoa_r+0xa10>
 80155ba:	9b02      	ldr	r3, [sp, #8]
 80155bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80155c0:	9b00      	ldr	r3, [sp, #0]
 80155c2:	f883 8000 	strb.w	r8, [r3]
 80155c6:	e63f      	b.n	8015248 <_dtoa_r+0x698>
 80155c8:	4628      	mov	r0, r5
 80155ca:	e7bb      	b.n	8015544 <_dtoa_r+0x994>
 80155cc:	2201      	movs	r2, #1
 80155ce:	e7e1      	b.n	8015594 <_dtoa_r+0x9e4>
 80155d0:	9b08      	ldr	r3, [sp, #32]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	db04      	blt.n	80155e0 <_dtoa_r+0xa30>
 80155d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80155d8:	430b      	orrs	r3, r1
 80155da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80155dc:	430b      	orrs	r3, r1
 80155de:	d120      	bne.n	8015622 <_dtoa_r+0xa72>
 80155e0:	2a00      	cmp	r2, #0
 80155e2:	dded      	ble.n	80155c0 <_dtoa_r+0xa10>
 80155e4:	4649      	mov	r1, r9
 80155e6:	2201      	movs	r2, #1
 80155e8:	4658      	mov	r0, fp
 80155ea:	f000 fafd 	bl	8015be8 <__lshift>
 80155ee:	4621      	mov	r1, r4
 80155f0:	4681      	mov	r9, r0
 80155f2:	f000 fb65 	bl	8015cc0 <__mcmp>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	dc03      	bgt.n	8015602 <_dtoa_r+0xa52>
 80155fa:	d1e1      	bne.n	80155c0 <_dtoa_r+0xa10>
 80155fc:	f018 0f01 	tst.w	r8, #1
 8015600:	d0de      	beq.n	80155c0 <_dtoa_r+0xa10>
 8015602:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015606:	d1d8      	bne.n	80155ba <_dtoa_r+0xa0a>
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	2339      	movs	r3, #57	@ 0x39
 801560c:	7013      	strb	r3, [r2, #0]
 801560e:	4633      	mov	r3, r6
 8015610:	461e      	mov	r6, r3
 8015612:	3b01      	subs	r3, #1
 8015614:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015618:	2a39      	cmp	r2, #57	@ 0x39
 801561a:	d052      	beq.n	80156c2 <_dtoa_r+0xb12>
 801561c:	3201      	adds	r2, #1
 801561e:	701a      	strb	r2, [r3, #0]
 8015620:	e612      	b.n	8015248 <_dtoa_r+0x698>
 8015622:	2a00      	cmp	r2, #0
 8015624:	dd07      	ble.n	8015636 <_dtoa_r+0xa86>
 8015626:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801562a:	d0ed      	beq.n	8015608 <_dtoa_r+0xa58>
 801562c:	9a00      	ldr	r2, [sp, #0]
 801562e:	f108 0301 	add.w	r3, r8, #1
 8015632:	7013      	strb	r3, [r2, #0]
 8015634:	e608      	b.n	8015248 <_dtoa_r+0x698>
 8015636:	9b07      	ldr	r3, [sp, #28]
 8015638:	9a07      	ldr	r2, [sp, #28]
 801563a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801563e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015640:	4293      	cmp	r3, r2
 8015642:	d028      	beq.n	8015696 <_dtoa_r+0xae6>
 8015644:	4649      	mov	r1, r9
 8015646:	2300      	movs	r3, #0
 8015648:	220a      	movs	r2, #10
 801564a:	4658      	mov	r0, fp
 801564c:	f000 f920 	bl	8015890 <__multadd>
 8015650:	42af      	cmp	r7, r5
 8015652:	4681      	mov	r9, r0
 8015654:	f04f 0300 	mov.w	r3, #0
 8015658:	f04f 020a 	mov.w	r2, #10
 801565c:	4639      	mov	r1, r7
 801565e:	4658      	mov	r0, fp
 8015660:	d107      	bne.n	8015672 <_dtoa_r+0xac2>
 8015662:	f000 f915 	bl	8015890 <__multadd>
 8015666:	4607      	mov	r7, r0
 8015668:	4605      	mov	r5, r0
 801566a:	9b07      	ldr	r3, [sp, #28]
 801566c:	3301      	adds	r3, #1
 801566e:	9307      	str	r3, [sp, #28]
 8015670:	e774      	b.n	801555c <_dtoa_r+0x9ac>
 8015672:	f000 f90d 	bl	8015890 <__multadd>
 8015676:	4629      	mov	r1, r5
 8015678:	4607      	mov	r7, r0
 801567a:	2300      	movs	r3, #0
 801567c:	220a      	movs	r2, #10
 801567e:	4658      	mov	r0, fp
 8015680:	f000 f906 	bl	8015890 <__multadd>
 8015684:	4605      	mov	r5, r0
 8015686:	e7f0      	b.n	801566a <_dtoa_r+0xaba>
 8015688:	9b00      	ldr	r3, [sp, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	bfcc      	ite	gt
 801568e:	461e      	movgt	r6, r3
 8015690:	2601      	movle	r6, #1
 8015692:	4456      	add	r6, sl
 8015694:	2700      	movs	r7, #0
 8015696:	4649      	mov	r1, r9
 8015698:	2201      	movs	r2, #1
 801569a:	4658      	mov	r0, fp
 801569c:	f000 faa4 	bl	8015be8 <__lshift>
 80156a0:	4621      	mov	r1, r4
 80156a2:	4681      	mov	r9, r0
 80156a4:	f000 fb0c 	bl	8015cc0 <__mcmp>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	dcb0      	bgt.n	801560e <_dtoa_r+0xa5e>
 80156ac:	d102      	bne.n	80156b4 <_dtoa_r+0xb04>
 80156ae:	f018 0f01 	tst.w	r8, #1
 80156b2:	d1ac      	bne.n	801560e <_dtoa_r+0xa5e>
 80156b4:	4633      	mov	r3, r6
 80156b6:	461e      	mov	r6, r3
 80156b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80156bc:	2a30      	cmp	r2, #48	@ 0x30
 80156be:	d0fa      	beq.n	80156b6 <_dtoa_r+0xb06>
 80156c0:	e5c2      	b.n	8015248 <_dtoa_r+0x698>
 80156c2:	459a      	cmp	sl, r3
 80156c4:	d1a4      	bne.n	8015610 <_dtoa_r+0xa60>
 80156c6:	9b04      	ldr	r3, [sp, #16]
 80156c8:	3301      	adds	r3, #1
 80156ca:	9304      	str	r3, [sp, #16]
 80156cc:	2331      	movs	r3, #49	@ 0x31
 80156ce:	f88a 3000 	strb.w	r3, [sl]
 80156d2:	e5b9      	b.n	8015248 <_dtoa_r+0x698>
 80156d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80156d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015734 <_dtoa_r+0xb84>
 80156da:	b11b      	cbz	r3, 80156e4 <_dtoa_r+0xb34>
 80156dc:	f10a 0308 	add.w	r3, sl, #8
 80156e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80156e2:	6013      	str	r3, [r2, #0]
 80156e4:	4650      	mov	r0, sl
 80156e6:	b019      	add	sp, #100	@ 0x64
 80156e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156ee:	2b01      	cmp	r3, #1
 80156f0:	f77f ae37 	ble.w	8015362 <_dtoa_r+0x7b2>
 80156f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80156f8:	2001      	movs	r0, #1
 80156fa:	e655      	b.n	80153a8 <_dtoa_r+0x7f8>
 80156fc:	9b00      	ldr	r3, [sp, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f77f aed6 	ble.w	80154b0 <_dtoa_r+0x900>
 8015704:	4656      	mov	r6, sl
 8015706:	4621      	mov	r1, r4
 8015708:	4648      	mov	r0, r9
 801570a:	f7ff f9c6 	bl	8014a9a <quorem>
 801570e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015712:	f806 8b01 	strb.w	r8, [r6], #1
 8015716:	9b00      	ldr	r3, [sp, #0]
 8015718:	eba6 020a 	sub.w	r2, r6, sl
 801571c:	4293      	cmp	r3, r2
 801571e:	ddb3      	ble.n	8015688 <_dtoa_r+0xad8>
 8015720:	4649      	mov	r1, r9
 8015722:	2300      	movs	r3, #0
 8015724:	220a      	movs	r2, #10
 8015726:	4658      	mov	r0, fp
 8015728:	f000 f8b2 	bl	8015890 <__multadd>
 801572c:	4681      	mov	r9, r0
 801572e:	e7ea      	b.n	8015706 <_dtoa_r+0xb56>
 8015730:	08016d45 	.word	0x08016d45
 8015734:	08016cc9 	.word	0x08016cc9

08015738 <_free_r>:
 8015738:	b538      	push	{r3, r4, r5, lr}
 801573a:	4605      	mov	r5, r0
 801573c:	2900      	cmp	r1, #0
 801573e:	d041      	beq.n	80157c4 <_free_r+0x8c>
 8015740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015744:	1f0c      	subs	r4, r1, #4
 8015746:	2b00      	cmp	r3, #0
 8015748:	bfb8      	it	lt
 801574a:	18e4      	addlt	r4, r4, r3
 801574c:	f7fe fa94 	bl	8013c78 <__malloc_lock>
 8015750:	4a1d      	ldr	r2, [pc, #116]	@ (80157c8 <_free_r+0x90>)
 8015752:	6813      	ldr	r3, [r2, #0]
 8015754:	b933      	cbnz	r3, 8015764 <_free_r+0x2c>
 8015756:	6063      	str	r3, [r4, #4]
 8015758:	6014      	str	r4, [r2, #0]
 801575a:	4628      	mov	r0, r5
 801575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015760:	f7fe ba90 	b.w	8013c84 <__malloc_unlock>
 8015764:	42a3      	cmp	r3, r4
 8015766:	d908      	bls.n	801577a <_free_r+0x42>
 8015768:	6820      	ldr	r0, [r4, #0]
 801576a:	1821      	adds	r1, r4, r0
 801576c:	428b      	cmp	r3, r1
 801576e:	bf01      	itttt	eq
 8015770:	6819      	ldreq	r1, [r3, #0]
 8015772:	685b      	ldreq	r3, [r3, #4]
 8015774:	1809      	addeq	r1, r1, r0
 8015776:	6021      	streq	r1, [r4, #0]
 8015778:	e7ed      	b.n	8015756 <_free_r+0x1e>
 801577a:	461a      	mov	r2, r3
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	b10b      	cbz	r3, 8015784 <_free_r+0x4c>
 8015780:	42a3      	cmp	r3, r4
 8015782:	d9fa      	bls.n	801577a <_free_r+0x42>
 8015784:	6811      	ldr	r1, [r2, #0]
 8015786:	1850      	adds	r0, r2, r1
 8015788:	42a0      	cmp	r0, r4
 801578a:	d10b      	bne.n	80157a4 <_free_r+0x6c>
 801578c:	6820      	ldr	r0, [r4, #0]
 801578e:	4401      	add	r1, r0
 8015790:	1850      	adds	r0, r2, r1
 8015792:	4283      	cmp	r3, r0
 8015794:	6011      	str	r1, [r2, #0]
 8015796:	d1e0      	bne.n	801575a <_free_r+0x22>
 8015798:	6818      	ldr	r0, [r3, #0]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	6053      	str	r3, [r2, #4]
 801579e:	4408      	add	r0, r1
 80157a0:	6010      	str	r0, [r2, #0]
 80157a2:	e7da      	b.n	801575a <_free_r+0x22>
 80157a4:	d902      	bls.n	80157ac <_free_r+0x74>
 80157a6:	230c      	movs	r3, #12
 80157a8:	602b      	str	r3, [r5, #0]
 80157aa:	e7d6      	b.n	801575a <_free_r+0x22>
 80157ac:	6820      	ldr	r0, [r4, #0]
 80157ae:	1821      	adds	r1, r4, r0
 80157b0:	428b      	cmp	r3, r1
 80157b2:	bf04      	itt	eq
 80157b4:	6819      	ldreq	r1, [r3, #0]
 80157b6:	685b      	ldreq	r3, [r3, #4]
 80157b8:	6063      	str	r3, [r4, #4]
 80157ba:	bf04      	itt	eq
 80157bc:	1809      	addeq	r1, r1, r0
 80157be:	6021      	streq	r1, [r4, #0]
 80157c0:	6054      	str	r4, [r2, #4]
 80157c2:	e7ca      	b.n	801575a <_free_r+0x22>
 80157c4:	bd38      	pop	{r3, r4, r5, pc}
 80157c6:	bf00      	nop
 80157c8:	200061cc 	.word	0x200061cc

080157cc <_Balloc>:
 80157cc:	b570      	push	{r4, r5, r6, lr}
 80157ce:	69c6      	ldr	r6, [r0, #28]
 80157d0:	4604      	mov	r4, r0
 80157d2:	460d      	mov	r5, r1
 80157d4:	b976      	cbnz	r6, 80157f4 <_Balloc+0x28>
 80157d6:	2010      	movs	r0, #16
 80157d8:	f7fe f99c 	bl	8013b14 <malloc>
 80157dc:	4602      	mov	r2, r0
 80157de:	61e0      	str	r0, [r4, #28]
 80157e0:	b920      	cbnz	r0, 80157ec <_Balloc+0x20>
 80157e2:	4b18      	ldr	r3, [pc, #96]	@ (8015844 <_Balloc+0x78>)
 80157e4:	4818      	ldr	r0, [pc, #96]	@ (8015848 <_Balloc+0x7c>)
 80157e6:	216b      	movs	r1, #107	@ 0x6b
 80157e8:	f000 fd7e 	bl	80162e8 <__assert_func>
 80157ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157f0:	6006      	str	r6, [r0, #0]
 80157f2:	60c6      	str	r6, [r0, #12]
 80157f4:	69e6      	ldr	r6, [r4, #28]
 80157f6:	68f3      	ldr	r3, [r6, #12]
 80157f8:	b183      	cbz	r3, 801581c <_Balloc+0x50>
 80157fa:	69e3      	ldr	r3, [r4, #28]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015802:	b9b8      	cbnz	r0, 8015834 <_Balloc+0x68>
 8015804:	2101      	movs	r1, #1
 8015806:	fa01 f605 	lsl.w	r6, r1, r5
 801580a:	1d72      	adds	r2, r6, #5
 801580c:	0092      	lsls	r2, r2, #2
 801580e:	4620      	mov	r0, r4
 8015810:	f000 fd88 	bl	8016324 <_calloc_r>
 8015814:	b160      	cbz	r0, 8015830 <_Balloc+0x64>
 8015816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801581a:	e00e      	b.n	801583a <_Balloc+0x6e>
 801581c:	2221      	movs	r2, #33	@ 0x21
 801581e:	2104      	movs	r1, #4
 8015820:	4620      	mov	r0, r4
 8015822:	f000 fd7f 	bl	8016324 <_calloc_r>
 8015826:	69e3      	ldr	r3, [r4, #28]
 8015828:	60f0      	str	r0, [r6, #12]
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1e4      	bne.n	80157fa <_Balloc+0x2e>
 8015830:	2000      	movs	r0, #0
 8015832:	bd70      	pop	{r4, r5, r6, pc}
 8015834:	6802      	ldr	r2, [r0, #0]
 8015836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801583a:	2300      	movs	r3, #0
 801583c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015840:	e7f7      	b.n	8015832 <_Balloc+0x66>
 8015842:	bf00      	nop
 8015844:	08016cd6 	.word	0x08016cd6
 8015848:	08016d56 	.word	0x08016d56

0801584c <_Bfree>:
 801584c:	b570      	push	{r4, r5, r6, lr}
 801584e:	69c6      	ldr	r6, [r0, #28]
 8015850:	4605      	mov	r5, r0
 8015852:	460c      	mov	r4, r1
 8015854:	b976      	cbnz	r6, 8015874 <_Bfree+0x28>
 8015856:	2010      	movs	r0, #16
 8015858:	f7fe f95c 	bl	8013b14 <malloc>
 801585c:	4602      	mov	r2, r0
 801585e:	61e8      	str	r0, [r5, #28]
 8015860:	b920      	cbnz	r0, 801586c <_Bfree+0x20>
 8015862:	4b09      	ldr	r3, [pc, #36]	@ (8015888 <_Bfree+0x3c>)
 8015864:	4809      	ldr	r0, [pc, #36]	@ (801588c <_Bfree+0x40>)
 8015866:	218f      	movs	r1, #143	@ 0x8f
 8015868:	f000 fd3e 	bl	80162e8 <__assert_func>
 801586c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015870:	6006      	str	r6, [r0, #0]
 8015872:	60c6      	str	r6, [r0, #12]
 8015874:	b13c      	cbz	r4, 8015886 <_Bfree+0x3a>
 8015876:	69eb      	ldr	r3, [r5, #28]
 8015878:	6862      	ldr	r2, [r4, #4]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015880:	6021      	str	r1, [r4, #0]
 8015882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015886:	bd70      	pop	{r4, r5, r6, pc}
 8015888:	08016cd6 	.word	0x08016cd6
 801588c:	08016d56 	.word	0x08016d56

08015890 <__multadd>:
 8015890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015894:	690d      	ldr	r5, [r1, #16]
 8015896:	4607      	mov	r7, r0
 8015898:	460c      	mov	r4, r1
 801589a:	461e      	mov	r6, r3
 801589c:	f101 0c14 	add.w	ip, r1, #20
 80158a0:	2000      	movs	r0, #0
 80158a2:	f8dc 3000 	ldr.w	r3, [ip]
 80158a6:	b299      	uxth	r1, r3
 80158a8:	fb02 6101 	mla	r1, r2, r1, r6
 80158ac:	0c1e      	lsrs	r6, r3, #16
 80158ae:	0c0b      	lsrs	r3, r1, #16
 80158b0:	fb02 3306 	mla	r3, r2, r6, r3
 80158b4:	b289      	uxth	r1, r1
 80158b6:	3001      	adds	r0, #1
 80158b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80158bc:	4285      	cmp	r5, r0
 80158be:	f84c 1b04 	str.w	r1, [ip], #4
 80158c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80158c6:	dcec      	bgt.n	80158a2 <__multadd+0x12>
 80158c8:	b30e      	cbz	r6, 801590e <__multadd+0x7e>
 80158ca:	68a3      	ldr	r3, [r4, #8]
 80158cc:	42ab      	cmp	r3, r5
 80158ce:	dc19      	bgt.n	8015904 <__multadd+0x74>
 80158d0:	6861      	ldr	r1, [r4, #4]
 80158d2:	4638      	mov	r0, r7
 80158d4:	3101      	adds	r1, #1
 80158d6:	f7ff ff79 	bl	80157cc <_Balloc>
 80158da:	4680      	mov	r8, r0
 80158dc:	b928      	cbnz	r0, 80158ea <__multadd+0x5a>
 80158de:	4602      	mov	r2, r0
 80158e0:	4b0c      	ldr	r3, [pc, #48]	@ (8015914 <__multadd+0x84>)
 80158e2:	480d      	ldr	r0, [pc, #52]	@ (8015918 <__multadd+0x88>)
 80158e4:	21ba      	movs	r1, #186	@ 0xba
 80158e6:	f000 fcff 	bl	80162e8 <__assert_func>
 80158ea:	6922      	ldr	r2, [r4, #16]
 80158ec:	3202      	adds	r2, #2
 80158ee:	f104 010c 	add.w	r1, r4, #12
 80158f2:	0092      	lsls	r2, r2, #2
 80158f4:	300c      	adds	r0, #12
 80158f6:	f7ff f8c2 	bl	8014a7e <memcpy>
 80158fa:	4621      	mov	r1, r4
 80158fc:	4638      	mov	r0, r7
 80158fe:	f7ff ffa5 	bl	801584c <_Bfree>
 8015902:	4644      	mov	r4, r8
 8015904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015908:	3501      	adds	r5, #1
 801590a:	615e      	str	r6, [r3, #20]
 801590c:	6125      	str	r5, [r4, #16]
 801590e:	4620      	mov	r0, r4
 8015910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015914:	08016d45 	.word	0x08016d45
 8015918:	08016d56 	.word	0x08016d56

0801591c <__hi0bits>:
 801591c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015920:	4603      	mov	r3, r0
 8015922:	bf36      	itet	cc
 8015924:	0403      	lslcc	r3, r0, #16
 8015926:	2000      	movcs	r0, #0
 8015928:	2010      	movcc	r0, #16
 801592a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801592e:	bf3c      	itt	cc
 8015930:	021b      	lslcc	r3, r3, #8
 8015932:	3008      	addcc	r0, #8
 8015934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015938:	bf3c      	itt	cc
 801593a:	011b      	lslcc	r3, r3, #4
 801593c:	3004      	addcc	r0, #4
 801593e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015942:	bf3c      	itt	cc
 8015944:	009b      	lslcc	r3, r3, #2
 8015946:	3002      	addcc	r0, #2
 8015948:	2b00      	cmp	r3, #0
 801594a:	db05      	blt.n	8015958 <__hi0bits+0x3c>
 801594c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015950:	f100 0001 	add.w	r0, r0, #1
 8015954:	bf08      	it	eq
 8015956:	2020      	moveq	r0, #32
 8015958:	4770      	bx	lr

0801595a <__lo0bits>:
 801595a:	6803      	ldr	r3, [r0, #0]
 801595c:	4602      	mov	r2, r0
 801595e:	f013 0007 	ands.w	r0, r3, #7
 8015962:	d00b      	beq.n	801597c <__lo0bits+0x22>
 8015964:	07d9      	lsls	r1, r3, #31
 8015966:	d421      	bmi.n	80159ac <__lo0bits+0x52>
 8015968:	0798      	lsls	r0, r3, #30
 801596a:	bf49      	itett	mi
 801596c:	085b      	lsrmi	r3, r3, #1
 801596e:	089b      	lsrpl	r3, r3, #2
 8015970:	2001      	movmi	r0, #1
 8015972:	6013      	strmi	r3, [r2, #0]
 8015974:	bf5c      	itt	pl
 8015976:	6013      	strpl	r3, [r2, #0]
 8015978:	2002      	movpl	r0, #2
 801597a:	4770      	bx	lr
 801597c:	b299      	uxth	r1, r3
 801597e:	b909      	cbnz	r1, 8015984 <__lo0bits+0x2a>
 8015980:	0c1b      	lsrs	r3, r3, #16
 8015982:	2010      	movs	r0, #16
 8015984:	b2d9      	uxtb	r1, r3
 8015986:	b909      	cbnz	r1, 801598c <__lo0bits+0x32>
 8015988:	3008      	adds	r0, #8
 801598a:	0a1b      	lsrs	r3, r3, #8
 801598c:	0719      	lsls	r1, r3, #28
 801598e:	bf04      	itt	eq
 8015990:	091b      	lsreq	r3, r3, #4
 8015992:	3004      	addeq	r0, #4
 8015994:	0799      	lsls	r1, r3, #30
 8015996:	bf04      	itt	eq
 8015998:	089b      	lsreq	r3, r3, #2
 801599a:	3002      	addeq	r0, #2
 801599c:	07d9      	lsls	r1, r3, #31
 801599e:	d403      	bmi.n	80159a8 <__lo0bits+0x4e>
 80159a0:	085b      	lsrs	r3, r3, #1
 80159a2:	f100 0001 	add.w	r0, r0, #1
 80159a6:	d003      	beq.n	80159b0 <__lo0bits+0x56>
 80159a8:	6013      	str	r3, [r2, #0]
 80159aa:	4770      	bx	lr
 80159ac:	2000      	movs	r0, #0
 80159ae:	4770      	bx	lr
 80159b0:	2020      	movs	r0, #32
 80159b2:	4770      	bx	lr

080159b4 <__i2b>:
 80159b4:	b510      	push	{r4, lr}
 80159b6:	460c      	mov	r4, r1
 80159b8:	2101      	movs	r1, #1
 80159ba:	f7ff ff07 	bl	80157cc <_Balloc>
 80159be:	4602      	mov	r2, r0
 80159c0:	b928      	cbnz	r0, 80159ce <__i2b+0x1a>
 80159c2:	4b05      	ldr	r3, [pc, #20]	@ (80159d8 <__i2b+0x24>)
 80159c4:	4805      	ldr	r0, [pc, #20]	@ (80159dc <__i2b+0x28>)
 80159c6:	f240 1145 	movw	r1, #325	@ 0x145
 80159ca:	f000 fc8d 	bl	80162e8 <__assert_func>
 80159ce:	2301      	movs	r3, #1
 80159d0:	6144      	str	r4, [r0, #20]
 80159d2:	6103      	str	r3, [r0, #16]
 80159d4:	bd10      	pop	{r4, pc}
 80159d6:	bf00      	nop
 80159d8:	08016d45 	.word	0x08016d45
 80159dc:	08016d56 	.word	0x08016d56

080159e0 <__multiply>:
 80159e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e4:	4614      	mov	r4, r2
 80159e6:	690a      	ldr	r2, [r1, #16]
 80159e8:	6923      	ldr	r3, [r4, #16]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	bfa8      	it	ge
 80159ee:	4623      	movge	r3, r4
 80159f0:	460f      	mov	r7, r1
 80159f2:	bfa4      	itt	ge
 80159f4:	460c      	movge	r4, r1
 80159f6:	461f      	movge	r7, r3
 80159f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80159fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015a00:	68a3      	ldr	r3, [r4, #8]
 8015a02:	6861      	ldr	r1, [r4, #4]
 8015a04:	eb0a 0609 	add.w	r6, sl, r9
 8015a08:	42b3      	cmp	r3, r6
 8015a0a:	b085      	sub	sp, #20
 8015a0c:	bfb8      	it	lt
 8015a0e:	3101      	addlt	r1, #1
 8015a10:	f7ff fedc 	bl	80157cc <_Balloc>
 8015a14:	b930      	cbnz	r0, 8015a24 <__multiply+0x44>
 8015a16:	4602      	mov	r2, r0
 8015a18:	4b44      	ldr	r3, [pc, #272]	@ (8015b2c <__multiply+0x14c>)
 8015a1a:	4845      	ldr	r0, [pc, #276]	@ (8015b30 <__multiply+0x150>)
 8015a1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015a20:	f000 fc62 	bl	80162e8 <__assert_func>
 8015a24:	f100 0514 	add.w	r5, r0, #20
 8015a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015a2c:	462b      	mov	r3, r5
 8015a2e:	2200      	movs	r2, #0
 8015a30:	4543      	cmp	r3, r8
 8015a32:	d321      	bcc.n	8015a78 <__multiply+0x98>
 8015a34:	f107 0114 	add.w	r1, r7, #20
 8015a38:	f104 0214 	add.w	r2, r4, #20
 8015a3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015a40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015a44:	9302      	str	r3, [sp, #8]
 8015a46:	1b13      	subs	r3, r2, r4
 8015a48:	3b15      	subs	r3, #21
 8015a4a:	f023 0303 	bic.w	r3, r3, #3
 8015a4e:	3304      	adds	r3, #4
 8015a50:	f104 0715 	add.w	r7, r4, #21
 8015a54:	42ba      	cmp	r2, r7
 8015a56:	bf38      	it	cc
 8015a58:	2304      	movcc	r3, #4
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	9b02      	ldr	r3, [sp, #8]
 8015a5e:	9103      	str	r1, [sp, #12]
 8015a60:	428b      	cmp	r3, r1
 8015a62:	d80c      	bhi.n	8015a7e <__multiply+0x9e>
 8015a64:	2e00      	cmp	r6, #0
 8015a66:	dd03      	ble.n	8015a70 <__multiply+0x90>
 8015a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d05b      	beq.n	8015b28 <__multiply+0x148>
 8015a70:	6106      	str	r6, [r0, #16]
 8015a72:	b005      	add	sp, #20
 8015a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a78:	f843 2b04 	str.w	r2, [r3], #4
 8015a7c:	e7d8      	b.n	8015a30 <__multiply+0x50>
 8015a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015a82:	f1ba 0f00 	cmp.w	sl, #0
 8015a86:	d024      	beq.n	8015ad2 <__multiply+0xf2>
 8015a88:	f104 0e14 	add.w	lr, r4, #20
 8015a8c:	46a9      	mov	r9, r5
 8015a8e:	f04f 0c00 	mov.w	ip, #0
 8015a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015a96:	f8d9 3000 	ldr.w	r3, [r9]
 8015a9a:	fa1f fb87 	uxth.w	fp, r7
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	fb0a 330b 	mla	r3, sl, fp, r3
 8015aa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015aa8:	f8d9 7000 	ldr.w	r7, [r9]
 8015aac:	4463      	add	r3, ip
 8015aae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015ab2:	fb0a c70b 	mla	r7, sl, fp, ip
 8015ab6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015ac0:	4572      	cmp	r2, lr
 8015ac2:	f849 3b04 	str.w	r3, [r9], #4
 8015ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015aca:	d8e2      	bhi.n	8015a92 <__multiply+0xb2>
 8015acc:	9b01      	ldr	r3, [sp, #4]
 8015ace:	f845 c003 	str.w	ip, [r5, r3]
 8015ad2:	9b03      	ldr	r3, [sp, #12]
 8015ad4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015ad8:	3104      	adds	r1, #4
 8015ada:	f1b9 0f00 	cmp.w	r9, #0
 8015ade:	d021      	beq.n	8015b24 <__multiply+0x144>
 8015ae0:	682b      	ldr	r3, [r5, #0]
 8015ae2:	f104 0c14 	add.w	ip, r4, #20
 8015ae6:	46ae      	mov	lr, r5
 8015ae8:	f04f 0a00 	mov.w	sl, #0
 8015aec:	f8bc b000 	ldrh.w	fp, [ip]
 8015af0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015af4:	fb09 770b 	mla	r7, r9, fp, r7
 8015af8:	4457      	add	r7, sl
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015b00:	f84e 3b04 	str.w	r3, [lr], #4
 8015b04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b0c:	f8be 3000 	ldrh.w	r3, [lr]
 8015b10:	fb09 330a 	mla	r3, r9, sl, r3
 8015b14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015b18:	4562      	cmp	r2, ip
 8015b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b1e:	d8e5      	bhi.n	8015aec <__multiply+0x10c>
 8015b20:	9f01      	ldr	r7, [sp, #4]
 8015b22:	51eb      	str	r3, [r5, r7]
 8015b24:	3504      	adds	r5, #4
 8015b26:	e799      	b.n	8015a5c <__multiply+0x7c>
 8015b28:	3e01      	subs	r6, #1
 8015b2a:	e79b      	b.n	8015a64 <__multiply+0x84>
 8015b2c:	08016d45 	.word	0x08016d45
 8015b30:	08016d56 	.word	0x08016d56

08015b34 <__pow5mult>:
 8015b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b38:	4615      	mov	r5, r2
 8015b3a:	f012 0203 	ands.w	r2, r2, #3
 8015b3e:	4607      	mov	r7, r0
 8015b40:	460e      	mov	r6, r1
 8015b42:	d007      	beq.n	8015b54 <__pow5mult+0x20>
 8015b44:	4c25      	ldr	r4, [pc, #148]	@ (8015bdc <__pow5mult+0xa8>)
 8015b46:	3a01      	subs	r2, #1
 8015b48:	2300      	movs	r3, #0
 8015b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b4e:	f7ff fe9f 	bl	8015890 <__multadd>
 8015b52:	4606      	mov	r6, r0
 8015b54:	10ad      	asrs	r5, r5, #2
 8015b56:	d03d      	beq.n	8015bd4 <__pow5mult+0xa0>
 8015b58:	69fc      	ldr	r4, [r7, #28]
 8015b5a:	b97c      	cbnz	r4, 8015b7c <__pow5mult+0x48>
 8015b5c:	2010      	movs	r0, #16
 8015b5e:	f7fd ffd9 	bl	8013b14 <malloc>
 8015b62:	4602      	mov	r2, r0
 8015b64:	61f8      	str	r0, [r7, #28]
 8015b66:	b928      	cbnz	r0, 8015b74 <__pow5mult+0x40>
 8015b68:	4b1d      	ldr	r3, [pc, #116]	@ (8015be0 <__pow5mult+0xac>)
 8015b6a:	481e      	ldr	r0, [pc, #120]	@ (8015be4 <__pow5mult+0xb0>)
 8015b6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015b70:	f000 fbba 	bl	80162e8 <__assert_func>
 8015b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b78:	6004      	str	r4, [r0, #0]
 8015b7a:	60c4      	str	r4, [r0, #12]
 8015b7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b84:	b94c      	cbnz	r4, 8015b9a <__pow5mult+0x66>
 8015b86:	f240 2171 	movw	r1, #625	@ 0x271
 8015b8a:	4638      	mov	r0, r7
 8015b8c:	f7ff ff12 	bl	80159b4 <__i2b>
 8015b90:	2300      	movs	r3, #0
 8015b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b96:	4604      	mov	r4, r0
 8015b98:	6003      	str	r3, [r0, #0]
 8015b9a:	f04f 0900 	mov.w	r9, #0
 8015b9e:	07eb      	lsls	r3, r5, #31
 8015ba0:	d50a      	bpl.n	8015bb8 <__pow5mult+0x84>
 8015ba2:	4631      	mov	r1, r6
 8015ba4:	4622      	mov	r2, r4
 8015ba6:	4638      	mov	r0, r7
 8015ba8:	f7ff ff1a 	bl	80159e0 <__multiply>
 8015bac:	4631      	mov	r1, r6
 8015bae:	4680      	mov	r8, r0
 8015bb0:	4638      	mov	r0, r7
 8015bb2:	f7ff fe4b 	bl	801584c <_Bfree>
 8015bb6:	4646      	mov	r6, r8
 8015bb8:	106d      	asrs	r5, r5, #1
 8015bba:	d00b      	beq.n	8015bd4 <__pow5mult+0xa0>
 8015bbc:	6820      	ldr	r0, [r4, #0]
 8015bbe:	b938      	cbnz	r0, 8015bd0 <__pow5mult+0x9c>
 8015bc0:	4622      	mov	r2, r4
 8015bc2:	4621      	mov	r1, r4
 8015bc4:	4638      	mov	r0, r7
 8015bc6:	f7ff ff0b 	bl	80159e0 <__multiply>
 8015bca:	6020      	str	r0, [r4, #0]
 8015bcc:	f8c0 9000 	str.w	r9, [r0]
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	e7e4      	b.n	8015b9e <__pow5mult+0x6a>
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bda:	bf00      	nop
 8015bdc:	08016db0 	.word	0x08016db0
 8015be0:	08016cd6 	.word	0x08016cd6
 8015be4:	08016d56 	.word	0x08016d56

08015be8 <__lshift>:
 8015be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bec:	460c      	mov	r4, r1
 8015bee:	6849      	ldr	r1, [r1, #4]
 8015bf0:	6923      	ldr	r3, [r4, #16]
 8015bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015bf6:	68a3      	ldr	r3, [r4, #8]
 8015bf8:	4607      	mov	r7, r0
 8015bfa:	4691      	mov	r9, r2
 8015bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c00:	f108 0601 	add.w	r6, r8, #1
 8015c04:	42b3      	cmp	r3, r6
 8015c06:	db0b      	blt.n	8015c20 <__lshift+0x38>
 8015c08:	4638      	mov	r0, r7
 8015c0a:	f7ff fddf 	bl	80157cc <_Balloc>
 8015c0e:	4605      	mov	r5, r0
 8015c10:	b948      	cbnz	r0, 8015c26 <__lshift+0x3e>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b28      	ldr	r3, [pc, #160]	@ (8015cb8 <__lshift+0xd0>)
 8015c16:	4829      	ldr	r0, [pc, #164]	@ (8015cbc <__lshift+0xd4>)
 8015c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015c1c:	f000 fb64 	bl	80162e8 <__assert_func>
 8015c20:	3101      	adds	r1, #1
 8015c22:	005b      	lsls	r3, r3, #1
 8015c24:	e7ee      	b.n	8015c04 <__lshift+0x1c>
 8015c26:	2300      	movs	r3, #0
 8015c28:	f100 0114 	add.w	r1, r0, #20
 8015c2c:	f100 0210 	add.w	r2, r0, #16
 8015c30:	4618      	mov	r0, r3
 8015c32:	4553      	cmp	r3, sl
 8015c34:	db33      	blt.n	8015c9e <__lshift+0xb6>
 8015c36:	6920      	ldr	r0, [r4, #16]
 8015c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c3c:	f104 0314 	add.w	r3, r4, #20
 8015c40:	f019 091f 	ands.w	r9, r9, #31
 8015c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c4c:	d02b      	beq.n	8015ca6 <__lshift+0xbe>
 8015c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8015c52:	468a      	mov	sl, r1
 8015c54:	2200      	movs	r2, #0
 8015c56:	6818      	ldr	r0, [r3, #0]
 8015c58:	fa00 f009 	lsl.w	r0, r0, r9
 8015c5c:	4310      	orrs	r0, r2
 8015c5e:	f84a 0b04 	str.w	r0, [sl], #4
 8015c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c66:	459c      	cmp	ip, r3
 8015c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8015c6c:	d8f3      	bhi.n	8015c56 <__lshift+0x6e>
 8015c6e:	ebac 0304 	sub.w	r3, ip, r4
 8015c72:	3b15      	subs	r3, #21
 8015c74:	f023 0303 	bic.w	r3, r3, #3
 8015c78:	3304      	adds	r3, #4
 8015c7a:	f104 0015 	add.w	r0, r4, #21
 8015c7e:	4584      	cmp	ip, r0
 8015c80:	bf38      	it	cc
 8015c82:	2304      	movcc	r3, #4
 8015c84:	50ca      	str	r2, [r1, r3]
 8015c86:	b10a      	cbz	r2, 8015c8c <__lshift+0xa4>
 8015c88:	f108 0602 	add.w	r6, r8, #2
 8015c8c:	3e01      	subs	r6, #1
 8015c8e:	4638      	mov	r0, r7
 8015c90:	612e      	str	r6, [r5, #16]
 8015c92:	4621      	mov	r1, r4
 8015c94:	f7ff fdda 	bl	801584c <_Bfree>
 8015c98:	4628      	mov	r0, r5
 8015c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	e7c5      	b.n	8015c32 <__lshift+0x4a>
 8015ca6:	3904      	subs	r1, #4
 8015ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8015cb0:	459c      	cmp	ip, r3
 8015cb2:	d8f9      	bhi.n	8015ca8 <__lshift+0xc0>
 8015cb4:	e7ea      	b.n	8015c8c <__lshift+0xa4>
 8015cb6:	bf00      	nop
 8015cb8:	08016d45 	.word	0x08016d45
 8015cbc:	08016d56 	.word	0x08016d56

08015cc0 <__mcmp>:
 8015cc0:	690a      	ldr	r2, [r1, #16]
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	6900      	ldr	r0, [r0, #16]
 8015cc6:	1a80      	subs	r0, r0, r2
 8015cc8:	b530      	push	{r4, r5, lr}
 8015cca:	d10e      	bne.n	8015cea <__mcmp+0x2a>
 8015ccc:	3314      	adds	r3, #20
 8015cce:	3114      	adds	r1, #20
 8015cd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015cd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015cd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015cdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ce0:	4295      	cmp	r5, r2
 8015ce2:	d003      	beq.n	8015cec <__mcmp+0x2c>
 8015ce4:	d205      	bcs.n	8015cf2 <__mcmp+0x32>
 8015ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cea:	bd30      	pop	{r4, r5, pc}
 8015cec:	42a3      	cmp	r3, r4
 8015cee:	d3f3      	bcc.n	8015cd8 <__mcmp+0x18>
 8015cf0:	e7fb      	b.n	8015cea <__mcmp+0x2a>
 8015cf2:	2001      	movs	r0, #1
 8015cf4:	e7f9      	b.n	8015cea <__mcmp+0x2a>
	...

08015cf8 <__mdiff>:
 8015cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfc:	4689      	mov	r9, r1
 8015cfe:	4606      	mov	r6, r0
 8015d00:	4611      	mov	r1, r2
 8015d02:	4648      	mov	r0, r9
 8015d04:	4614      	mov	r4, r2
 8015d06:	f7ff ffdb 	bl	8015cc0 <__mcmp>
 8015d0a:	1e05      	subs	r5, r0, #0
 8015d0c:	d112      	bne.n	8015d34 <__mdiff+0x3c>
 8015d0e:	4629      	mov	r1, r5
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7ff fd5b 	bl	80157cc <_Balloc>
 8015d16:	4602      	mov	r2, r0
 8015d18:	b928      	cbnz	r0, 8015d26 <__mdiff+0x2e>
 8015d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8015e18 <__mdiff+0x120>)
 8015d1c:	f240 2137 	movw	r1, #567	@ 0x237
 8015d20:	483e      	ldr	r0, [pc, #248]	@ (8015e1c <__mdiff+0x124>)
 8015d22:	f000 fae1 	bl	80162e8 <__assert_func>
 8015d26:	2301      	movs	r3, #1
 8015d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d2c:	4610      	mov	r0, r2
 8015d2e:	b003      	add	sp, #12
 8015d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d34:	bfbc      	itt	lt
 8015d36:	464b      	movlt	r3, r9
 8015d38:	46a1      	movlt	r9, r4
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015d40:	bfba      	itte	lt
 8015d42:	461c      	movlt	r4, r3
 8015d44:	2501      	movlt	r5, #1
 8015d46:	2500      	movge	r5, #0
 8015d48:	f7ff fd40 	bl	80157cc <_Balloc>
 8015d4c:	4602      	mov	r2, r0
 8015d4e:	b918      	cbnz	r0, 8015d58 <__mdiff+0x60>
 8015d50:	4b31      	ldr	r3, [pc, #196]	@ (8015e18 <__mdiff+0x120>)
 8015d52:	f240 2145 	movw	r1, #581	@ 0x245
 8015d56:	e7e3      	b.n	8015d20 <__mdiff+0x28>
 8015d58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015d5c:	6926      	ldr	r6, [r4, #16]
 8015d5e:	60c5      	str	r5, [r0, #12]
 8015d60:	f109 0310 	add.w	r3, r9, #16
 8015d64:	f109 0514 	add.w	r5, r9, #20
 8015d68:	f104 0e14 	add.w	lr, r4, #20
 8015d6c:	f100 0b14 	add.w	fp, r0, #20
 8015d70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015d74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015d78:	9301      	str	r3, [sp, #4]
 8015d7a:	46d9      	mov	r9, fp
 8015d7c:	f04f 0c00 	mov.w	ip, #0
 8015d80:	9b01      	ldr	r3, [sp, #4]
 8015d82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015d86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015d8a:	9301      	str	r3, [sp, #4]
 8015d8c:	fa1f f38a 	uxth.w	r3, sl
 8015d90:	4619      	mov	r1, r3
 8015d92:	b283      	uxth	r3, r0
 8015d94:	1acb      	subs	r3, r1, r3
 8015d96:	0c00      	lsrs	r0, r0, #16
 8015d98:	4463      	add	r3, ip
 8015d9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015d9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015da8:	4576      	cmp	r6, lr
 8015daa:	f849 3b04 	str.w	r3, [r9], #4
 8015dae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015db2:	d8e5      	bhi.n	8015d80 <__mdiff+0x88>
 8015db4:	1b33      	subs	r3, r6, r4
 8015db6:	3b15      	subs	r3, #21
 8015db8:	f023 0303 	bic.w	r3, r3, #3
 8015dbc:	3415      	adds	r4, #21
 8015dbe:	3304      	adds	r3, #4
 8015dc0:	42a6      	cmp	r6, r4
 8015dc2:	bf38      	it	cc
 8015dc4:	2304      	movcc	r3, #4
 8015dc6:	441d      	add	r5, r3
 8015dc8:	445b      	add	r3, fp
 8015dca:	461e      	mov	r6, r3
 8015dcc:	462c      	mov	r4, r5
 8015dce:	4544      	cmp	r4, r8
 8015dd0:	d30e      	bcc.n	8015df0 <__mdiff+0xf8>
 8015dd2:	f108 0103 	add.w	r1, r8, #3
 8015dd6:	1b49      	subs	r1, r1, r5
 8015dd8:	f021 0103 	bic.w	r1, r1, #3
 8015ddc:	3d03      	subs	r5, #3
 8015dde:	45a8      	cmp	r8, r5
 8015de0:	bf38      	it	cc
 8015de2:	2100      	movcc	r1, #0
 8015de4:	440b      	add	r3, r1
 8015de6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015dea:	b191      	cbz	r1, 8015e12 <__mdiff+0x11a>
 8015dec:	6117      	str	r7, [r2, #16]
 8015dee:	e79d      	b.n	8015d2c <__mdiff+0x34>
 8015df0:	f854 1b04 	ldr.w	r1, [r4], #4
 8015df4:	46e6      	mov	lr, ip
 8015df6:	0c08      	lsrs	r0, r1, #16
 8015df8:	fa1c fc81 	uxtah	ip, ip, r1
 8015dfc:	4471      	add	r1, lr
 8015dfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015e02:	b289      	uxth	r1, r1
 8015e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015e08:	f846 1b04 	str.w	r1, [r6], #4
 8015e0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015e10:	e7dd      	b.n	8015dce <__mdiff+0xd6>
 8015e12:	3f01      	subs	r7, #1
 8015e14:	e7e7      	b.n	8015de6 <__mdiff+0xee>
 8015e16:	bf00      	nop
 8015e18:	08016d45 	.word	0x08016d45
 8015e1c:	08016d56 	.word	0x08016d56

08015e20 <__d2b>:
 8015e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015e24:	460f      	mov	r7, r1
 8015e26:	2101      	movs	r1, #1
 8015e28:	ec59 8b10 	vmov	r8, r9, d0
 8015e2c:	4616      	mov	r6, r2
 8015e2e:	f7ff fccd 	bl	80157cc <_Balloc>
 8015e32:	4604      	mov	r4, r0
 8015e34:	b930      	cbnz	r0, 8015e44 <__d2b+0x24>
 8015e36:	4602      	mov	r2, r0
 8015e38:	4b23      	ldr	r3, [pc, #140]	@ (8015ec8 <__d2b+0xa8>)
 8015e3a:	4824      	ldr	r0, [pc, #144]	@ (8015ecc <__d2b+0xac>)
 8015e3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8015e40:	f000 fa52 	bl	80162e8 <__assert_func>
 8015e44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e4c:	b10d      	cbz	r5, 8015e52 <__d2b+0x32>
 8015e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015e52:	9301      	str	r3, [sp, #4]
 8015e54:	f1b8 0300 	subs.w	r3, r8, #0
 8015e58:	d023      	beq.n	8015ea2 <__d2b+0x82>
 8015e5a:	4668      	mov	r0, sp
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	f7ff fd7c 	bl	801595a <__lo0bits>
 8015e62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015e66:	b1d0      	cbz	r0, 8015e9e <__d2b+0x7e>
 8015e68:	f1c0 0320 	rsb	r3, r0, #32
 8015e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8015e70:	430b      	orrs	r3, r1
 8015e72:	40c2      	lsrs	r2, r0
 8015e74:	6163      	str	r3, [r4, #20]
 8015e76:	9201      	str	r2, [sp, #4]
 8015e78:	9b01      	ldr	r3, [sp, #4]
 8015e7a:	61a3      	str	r3, [r4, #24]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	bf0c      	ite	eq
 8015e80:	2201      	moveq	r2, #1
 8015e82:	2202      	movne	r2, #2
 8015e84:	6122      	str	r2, [r4, #16]
 8015e86:	b1a5      	cbz	r5, 8015eb2 <__d2b+0x92>
 8015e88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015e8c:	4405      	add	r5, r0
 8015e8e:	603d      	str	r5, [r7, #0]
 8015e90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015e94:	6030      	str	r0, [r6, #0]
 8015e96:	4620      	mov	r0, r4
 8015e98:	b003      	add	sp, #12
 8015e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e9e:	6161      	str	r1, [r4, #20]
 8015ea0:	e7ea      	b.n	8015e78 <__d2b+0x58>
 8015ea2:	a801      	add	r0, sp, #4
 8015ea4:	f7ff fd59 	bl	801595a <__lo0bits>
 8015ea8:	9b01      	ldr	r3, [sp, #4]
 8015eaa:	6163      	str	r3, [r4, #20]
 8015eac:	3020      	adds	r0, #32
 8015eae:	2201      	movs	r2, #1
 8015eb0:	e7e8      	b.n	8015e84 <__d2b+0x64>
 8015eb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015eb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015eba:	6038      	str	r0, [r7, #0]
 8015ebc:	6918      	ldr	r0, [r3, #16]
 8015ebe:	f7ff fd2d 	bl	801591c <__hi0bits>
 8015ec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015ec6:	e7e5      	b.n	8015e94 <__d2b+0x74>
 8015ec8:	08016d45 	.word	0x08016d45
 8015ecc:	08016d56 	.word	0x08016d56

08015ed0 <_malloc_usable_size_r>:
 8015ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ed4:	1f18      	subs	r0, r3, #4
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bfbc      	itt	lt
 8015eda:	580b      	ldrlt	r3, [r1, r0]
 8015edc:	18c0      	addlt	r0, r0, r3
 8015ede:	4770      	bx	lr

08015ee0 <__ssputs_r>:
 8015ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee4:	688e      	ldr	r6, [r1, #8]
 8015ee6:	461f      	mov	r7, r3
 8015ee8:	42be      	cmp	r6, r7
 8015eea:	680b      	ldr	r3, [r1, #0]
 8015eec:	4682      	mov	sl, r0
 8015eee:	460c      	mov	r4, r1
 8015ef0:	4690      	mov	r8, r2
 8015ef2:	d82d      	bhi.n	8015f50 <__ssputs_r+0x70>
 8015ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ef8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015efc:	d026      	beq.n	8015f4c <__ssputs_r+0x6c>
 8015efe:	6965      	ldr	r5, [r4, #20]
 8015f00:	6909      	ldr	r1, [r1, #16]
 8015f02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f06:	eba3 0901 	sub.w	r9, r3, r1
 8015f0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f0e:	1c7b      	adds	r3, r7, #1
 8015f10:	444b      	add	r3, r9
 8015f12:	106d      	asrs	r5, r5, #1
 8015f14:	429d      	cmp	r5, r3
 8015f16:	bf38      	it	cc
 8015f18:	461d      	movcc	r5, r3
 8015f1a:	0553      	lsls	r3, r2, #21
 8015f1c:	d527      	bpl.n	8015f6e <__ssputs_r+0x8e>
 8015f1e:	4629      	mov	r1, r5
 8015f20:	f7fd fe2a 	bl	8013b78 <_malloc_r>
 8015f24:	4606      	mov	r6, r0
 8015f26:	b360      	cbz	r0, 8015f82 <__ssputs_r+0xa2>
 8015f28:	6921      	ldr	r1, [r4, #16]
 8015f2a:	464a      	mov	r2, r9
 8015f2c:	f7fe fda7 	bl	8014a7e <memcpy>
 8015f30:	89a3      	ldrh	r3, [r4, #12]
 8015f32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f3a:	81a3      	strh	r3, [r4, #12]
 8015f3c:	6126      	str	r6, [r4, #16]
 8015f3e:	6165      	str	r5, [r4, #20]
 8015f40:	444e      	add	r6, r9
 8015f42:	eba5 0509 	sub.w	r5, r5, r9
 8015f46:	6026      	str	r6, [r4, #0]
 8015f48:	60a5      	str	r5, [r4, #8]
 8015f4a:	463e      	mov	r6, r7
 8015f4c:	42be      	cmp	r6, r7
 8015f4e:	d900      	bls.n	8015f52 <__ssputs_r+0x72>
 8015f50:	463e      	mov	r6, r7
 8015f52:	6820      	ldr	r0, [r4, #0]
 8015f54:	4632      	mov	r2, r6
 8015f56:	4641      	mov	r1, r8
 8015f58:	f7fe fc4d 	bl	80147f6 <memmove>
 8015f5c:	68a3      	ldr	r3, [r4, #8]
 8015f5e:	1b9b      	subs	r3, r3, r6
 8015f60:	60a3      	str	r3, [r4, #8]
 8015f62:	6823      	ldr	r3, [r4, #0]
 8015f64:	4433      	add	r3, r6
 8015f66:	6023      	str	r3, [r4, #0]
 8015f68:	2000      	movs	r0, #0
 8015f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6e:	462a      	mov	r2, r5
 8015f70:	f7fd fe96 	bl	8013ca0 <_realloc_r>
 8015f74:	4606      	mov	r6, r0
 8015f76:	2800      	cmp	r0, #0
 8015f78:	d1e0      	bne.n	8015f3c <__ssputs_r+0x5c>
 8015f7a:	6921      	ldr	r1, [r4, #16]
 8015f7c:	4650      	mov	r0, sl
 8015f7e:	f7ff fbdb 	bl	8015738 <_free_r>
 8015f82:	230c      	movs	r3, #12
 8015f84:	f8ca 3000 	str.w	r3, [sl]
 8015f88:	89a3      	ldrh	r3, [r4, #12]
 8015f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f8e:	81a3      	strh	r3, [r4, #12]
 8015f90:	f04f 30ff 	mov.w	r0, #4294967295
 8015f94:	e7e9      	b.n	8015f6a <__ssputs_r+0x8a>
	...

08015f98 <_svfiprintf_r>:
 8015f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f9c:	4698      	mov	r8, r3
 8015f9e:	898b      	ldrh	r3, [r1, #12]
 8015fa0:	061b      	lsls	r3, r3, #24
 8015fa2:	b09d      	sub	sp, #116	@ 0x74
 8015fa4:	4607      	mov	r7, r0
 8015fa6:	460d      	mov	r5, r1
 8015fa8:	4614      	mov	r4, r2
 8015faa:	d510      	bpl.n	8015fce <_svfiprintf_r+0x36>
 8015fac:	690b      	ldr	r3, [r1, #16]
 8015fae:	b973      	cbnz	r3, 8015fce <_svfiprintf_r+0x36>
 8015fb0:	2140      	movs	r1, #64	@ 0x40
 8015fb2:	f7fd fde1 	bl	8013b78 <_malloc_r>
 8015fb6:	6028      	str	r0, [r5, #0]
 8015fb8:	6128      	str	r0, [r5, #16]
 8015fba:	b930      	cbnz	r0, 8015fca <_svfiprintf_r+0x32>
 8015fbc:	230c      	movs	r3, #12
 8015fbe:	603b      	str	r3, [r7, #0]
 8015fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fc4:	b01d      	add	sp, #116	@ 0x74
 8015fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fca:	2340      	movs	r3, #64	@ 0x40
 8015fcc:	616b      	str	r3, [r5, #20]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fd2:	2320      	movs	r3, #32
 8015fd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fdc:	2330      	movs	r3, #48	@ 0x30
 8015fde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801617c <_svfiprintf_r+0x1e4>
 8015fe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015fe6:	f04f 0901 	mov.w	r9, #1
 8015fea:	4623      	mov	r3, r4
 8015fec:	469a      	mov	sl, r3
 8015fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ff2:	b10a      	cbz	r2, 8015ff8 <_svfiprintf_r+0x60>
 8015ff4:	2a25      	cmp	r2, #37	@ 0x25
 8015ff6:	d1f9      	bne.n	8015fec <_svfiprintf_r+0x54>
 8015ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8015ffc:	d00b      	beq.n	8016016 <_svfiprintf_r+0x7e>
 8015ffe:	465b      	mov	r3, fp
 8016000:	4622      	mov	r2, r4
 8016002:	4629      	mov	r1, r5
 8016004:	4638      	mov	r0, r7
 8016006:	f7ff ff6b 	bl	8015ee0 <__ssputs_r>
 801600a:	3001      	adds	r0, #1
 801600c:	f000 80a7 	beq.w	801615e <_svfiprintf_r+0x1c6>
 8016010:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016012:	445a      	add	r2, fp
 8016014:	9209      	str	r2, [sp, #36]	@ 0x24
 8016016:	f89a 3000 	ldrb.w	r3, [sl]
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 809f 	beq.w	801615e <_svfiprintf_r+0x1c6>
 8016020:	2300      	movs	r3, #0
 8016022:	f04f 32ff 	mov.w	r2, #4294967295
 8016026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801602a:	f10a 0a01 	add.w	sl, sl, #1
 801602e:	9304      	str	r3, [sp, #16]
 8016030:	9307      	str	r3, [sp, #28]
 8016032:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016036:	931a      	str	r3, [sp, #104]	@ 0x68
 8016038:	4654      	mov	r4, sl
 801603a:	2205      	movs	r2, #5
 801603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016040:	484e      	ldr	r0, [pc, #312]	@ (801617c <_svfiprintf_r+0x1e4>)
 8016042:	f7ea f8cd 	bl	80001e0 <memchr>
 8016046:	9a04      	ldr	r2, [sp, #16]
 8016048:	b9d8      	cbnz	r0, 8016082 <_svfiprintf_r+0xea>
 801604a:	06d0      	lsls	r0, r2, #27
 801604c:	bf44      	itt	mi
 801604e:	2320      	movmi	r3, #32
 8016050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016054:	0711      	lsls	r1, r2, #28
 8016056:	bf44      	itt	mi
 8016058:	232b      	movmi	r3, #43	@ 0x2b
 801605a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801605e:	f89a 3000 	ldrb.w	r3, [sl]
 8016062:	2b2a      	cmp	r3, #42	@ 0x2a
 8016064:	d015      	beq.n	8016092 <_svfiprintf_r+0xfa>
 8016066:	9a07      	ldr	r2, [sp, #28]
 8016068:	4654      	mov	r4, sl
 801606a:	2000      	movs	r0, #0
 801606c:	f04f 0c0a 	mov.w	ip, #10
 8016070:	4621      	mov	r1, r4
 8016072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016076:	3b30      	subs	r3, #48	@ 0x30
 8016078:	2b09      	cmp	r3, #9
 801607a:	d94b      	bls.n	8016114 <_svfiprintf_r+0x17c>
 801607c:	b1b0      	cbz	r0, 80160ac <_svfiprintf_r+0x114>
 801607e:	9207      	str	r2, [sp, #28]
 8016080:	e014      	b.n	80160ac <_svfiprintf_r+0x114>
 8016082:	eba0 0308 	sub.w	r3, r0, r8
 8016086:	fa09 f303 	lsl.w	r3, r9, r3
 801608a:	4313      	orrs	r3, r2
 801608c:	9304      	str	r3, [sp, #16]
 801608e:	46a2      	mov	sl, r4
 8016090:	e7d2      	b.n	8016038 <_svfiprintf_r+0xa0>
 8016092:	9b03      	ldr	r3, [sp, #12]
 8016094:	1d19      	adds	r1, r3, #4
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	9103      	str	r1, [sp, #12]
 801609a:	2b00      	cmp	r3, #0
 801609c:	bfbb      	ittet	lt
 801609e:	425b      	neglt	r3, r3
 80160a0:	f042 0202 	orrlt.w	r2, r2, #2
 80160a4:	9307      	strge	r3, [sp, #28]
 80160a6:	9307      	strlt	r3, [sp, #28]
 80160a8:	bfb8      	it	lt
 80160aa:	9204      	strlt	r2, [sp, #16]
 80160ac:	7823      	ldrb	r3, [r4, #0]
 80160ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80160b0:	d10a      	bne.n	80160c8 <_svfiprintf_r+0x130>
 80160b2:	7863      	ldrb	r3, [r4, #1]
 80160b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80160b6:	d132      	bne.n	801611e <_svfiprintf_r+0x186>
 80160b8:	9b03      	ldr	r3, [sp, #12]
 80160ba:	1d1a      	adds	r2, r3, #4
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	9203      	str	r2, [sp, #12]
 80160c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80160c4:	3402      	adds	r4, #2
 80160c6:	9305      	str	r3, [sp, #20]
 80160c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801618c <_svfiprintf_r+0x1f4>
 80160cc:	7821      	ldrb	r1, [r4, #0]
 80160ce:	2203      	movs	r2, #3
 80160d0:	4650      	mov	r0, sl
 80160d2:	f7ea f885 	bl	80001e0 <memchr>
 80160d6:	b138      	cbz	r0, 80160e8 <_svfiprintf_r+0x150>
 80160d8:	9b04      	ldr	r3, [sp, #16]
 80160da:	eba0 000a 	sub.w	r0, r0, sl
 80160de:	2240      	movs	r2, #64	@ 0x40
 80160e0:	4082      	lsls	r2, r0
 80160e2:	4313      	orrs	r3, r2
 80160e4:	3401      	adds	r4, #1
 80160e6:	9304      	str	r3, [sp, #16]
 80160e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160ec:	4824      	ldr	r0, [pc, #144]	@ (8016180 <_svfiprintf_r+0x1e8>)
 80160ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160f2:	2206      	movs	r2, #6
 80160f4:	f7ea f874 	bl	80001e0 <memchr>
 80160f8:	2800      	cmp	r0, #0
 80160fa:	d036      	beq.n	801616a <_svfiprintf_r+0x1d2>
 80160fc:	4b21      	ldr	r3, [pc, #132]	@ (8016184 <_svfiprintf_r+0x1ec>)
 80160fe:	bb1b      	cbnz	r3, 8016148 <_svfiprintf_r+0x1b0>
 8016100:	9b03      	ldr	r3, [sp, #12]
 8016102:	3307      	adds	r3, #7
 8016104:	f023 0307 	bic.w	r3, r3, #7
 8016108:	3308      	adds	r3, #8
 801610a:	9303      	str	r3, [sp, #12]
 801610c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801610e:	4433      	add	r3, r6
 8016110:	9309      	str	r3, [sp, #36]	@ 0x24
 8016112:	e76a      	b.n	8015fea <_svfiprintf_r+0x52>
 8016114:	fb0c 3202 	mla	r2, ip, r2, r3
 8016118:	460c      	mov	r4, r1
 801611a:	2001      	movs	r0, #1
 801611c:	e7a8      	b.n	8016070 <_svfiprintf_r+0xd8>
 801611e:	2300      	movs	r3, #0
 8016120:	3401      	adds	r4, #1
 8016122:	9305      	str	r3, [sp, #20]
 8016124:	4619      	mov	r1, r3
 8016126:	f04f 0c0a 	mov.w	ip, #10
 801612a:	4620      	mov	r0, r4
 801612c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016130:	3a30      	subs	r2, #48	@ 0x30
 8016132:	2a09      	cmp	r2, #9
 8016134:	d903      	bls.n	801613e <_svfiprintf_r+0x1a6>
 8016136:	2b00      	cmp	r3, #0
 8016138:	d0c6      	beq.n	80160c8 <_svfiprintf_r+0x130>
 801613a:	9105      	str	r1, [sp, #20]
 801613c:	e7c4      	b.n	80160c8 <_svfiprintf_r+0x130>
 801613e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016142:	4604      	mov	r4, r0
 8016144:	2301      	movs	r3, #1
 8016146:	e7f0      	b.n	801612a <_svfiprintf_r+0x192>
 8016148:	ab03      	add	r3, sp, #12
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	462a      	mov	r2, r5
 801614e:	4b0e      	ldr	r3, [pc, #56]	@ (8016188 <_svfiprintf_r+0x1f0>)
 8016150:	a904      	add	r1, sp, #16
 8016152:	4638      	mov	r0, r7
 8016154:	f7fd fe72 	bl	8013e3c <_printf_float>
 8016158:	1c42      	adds	r2, r0, #1
 801615a:	4606      	mov	r6, r0
 801615c:	d1d6      	bne.n	801610c <_svfiprintf_r+0x174>
 801615e:	89ab      	ldrh	r3, [r5, #12]
 8016160:	065b      	lsls	r3, r3, #25
 8016162:	f53f af2d 	bmi.w	8015fc0 <_svfiprintf_r+0x28>
 8016166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016168:	e72c      	b.n	8015fc4 <_svfiprintf_r+0x2c>
 801616a:	ab03      	add	r3, sp, #12
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	462a      	mov	r2, r5
 8016170:	4b05      	ldr	r3, [pc, #20]	@ (8016188 <_svfiprintf_r+0x1f0>)
 8016172:	a904      	add	r1, sp, #16
 8016174:	4638      	mov	r0, r7
 8016176:	f7fe f8f9 	bl	801436c <_printf_i>
 801617a:	e7ed      	b.n	8016158 <_svfiprintf_r+0x1c0>
 801617c:	08016eb0 	.word	0x08016eb0
 8016180:	08016eba 	.word	0x08016eba
 8016184:	08013e3d 	.word	0x08013e3d
 8016188:	08015ee1 	.word	0x08015ee1
 801618c:	08016eb6 	.word	0x08016eb6

08016190 <__sflush_r>:
 8016190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	0716      	lsls	r6, r2, #28
 801619a:	4605      	mov	r5, r0
 801619c:	460c      	mov	r4, r1
 801619e:	d454      	bmi.n	801624a <__sflush_r+0xba>
 80161a0:	684b      	ldr	r3, [r1, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	dc02      	bgt.n	80161ac <__sflush_r+0x1c>
 80161a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dd48      	ble.n	801623e <__sflush_r+0xae>
 80161ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80161ae:	2e00      	cmp	r6, #0
 80161b0:	d045      	beq.n	801623e <__sflush_r+0xae>
 80161b2:	2300      	movs	r3, #0
 80161b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80161b8:	682f      	ldr	r7, [r5, #0]
 80161ba:	6a21      	ldr	r1, [r4, #32]
 80161bc:	602b      	str	r3, [r5, #0]
 80161be:	d030      	beq.n	8016222 <__sflush_r+0x92>
 80161c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80161c2:	89a3      	ldrh	r3, [r4, #12]
 80161c4:	0759      	lsls	r1, r3, #29
 80161c6:	d505      	bpl.n	80161d4 <__sflush_r+0x44>
 80161c8:	6863      	ldr	r3, [r4, #4]
 80161ca:	1ad2      	subs	r2, r2, r3
 80161cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80161ce:	b10b      	cbz	r3, 80161d4 <__sflush_r+0x44>
 80161d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80161d2:	1ad2      	subs	r2, r2, r3
 80161d4:	2300      	movs	r3, #0
 80161d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80161d8:	6a21      	ldr	r1, [r4, #32]
 80161da:	4628      	mov	r0, r5
 80161dc:	47b0      	blx	r6
 80161de:	1c43      	adds	r3, r0, #1
 80161e0:	89a3      	ldrh	r3, [r4, #12]
 80161e2:	d106      	bne.n	80161f2 <__sflush_r+0x62>
 80161e4:	6829      	ldr	r1, [r5, #0]
 80161e6:	291d      	cmp	r1, #29
 80161e8:	d82b      	bhi.n	8016242 <__sflush_r+0xb2>
 80161ea:	4a2a      	ldr	r2, [pc, #168]	@ (8016294 <__sflush_r+0x104>)
 80161ec:	410a      	asrs	r2, r1
 80161ee:	07d6      	lsls	r6, r2, #31
 80161f0:	d427      	bmi.n	8016242 <__sflush_r+0xb2>
 80161f2:	2200      	movs	r2, #0
 80161f4:	6062      	str	r2, [r4, #4]
 80161f6:	04d9      	lsls	r1, r3, #19
 80161f8:	6922      	ldr	r2, [r4, #16]
 80161fa:	6022      	str	r2, [r4, #0]
 80161fc:	d504      	bpl.n	8016208 <__sflush_r+0x78>
 80161fe:	1c42      	adds	r2, r0, #1
 8016200:	d101      	bne.n	8016206 <__sflush_r+0x76>
 8016202:	682b      	ldr	r3, [r5, #0]
 8016204:	b903      	cbnz	r3, 8016208 <__sflush_r+0x78>
 8016206:	6560      	str	r0, [r4, #84]	@ 0x54
 8016208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801620a:	602f      	str	r7, [r5, #0]
 801620c:	b1b9      	cbz	r1, 801623e <__sflush_r+0xae>
 801620e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016212:	4299      	cmp	r1, r3
 8016214:	d002      	beq.n	801621c <__sflush_r+0x8c>
 8016216:	4628      	mov	r0, r5
 8016218:	f7ff fa8e 	bl	8015738 <_free_r>
 801621c:	2300      	movs	r3, #0
 801621e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016220:	e00d      	b.n	801623e <__sflush_r+0xae>
 8016222:	2301      	movs	r3, #1
 8016224:	4628      	mov	r0, r5
 8016226:	47b0      	blx	r6
 8016228:	4602      	mov	r2, r0
 801622a:	1c50      	adds	r0, r2, #1
 801622c:	d1c9      	bne.n	80161c2 <__sflush_r+0x32>
 801622e:	682b      	ldr	r3, [r5, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0c6      	beq.n	80161c2 <__sflush_r+0x32>
 8016234:	2b1d      	cmp	r3, #29
 8016236:	d001      	beq.n	801623c <__sflush_r+0xac>
 8016238:	2b16      	cmp	r3, #22
 801623a:	d11e      	bne.n	801627a <__sflush_r+0xea>
 801623c:	602f      	str	r7, [r5, #0]
 801623e:	2000      	movs	r0, #0
 8016240:	e022      	b.n	8016288 <__sflush_r+0xf8>
 8016242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016246:	b21b      	sxth	r3, r3
 8016248:	e01b      	b.n	8016282 <__sflush_r+0xf2>
 801624a:	690f      	ldr	r7, [r1, #16]
 801624c:	2f00      	cmp	r7, #0
 801624e:	d0f6      	beq.n	801623e <__sflush_r+0xae>
 8016250:	0793      	lsls	r3, r2, #30
 8016252:	680e      	ldr	r6, [r1, #0]
 8016254:	bf08      	it	eq
 8016256:	694b      	ldreq	r3, [r1, #20]
 8016258:	600f      	str	r7, [r1, #0]
 801625a:	bf18      	it	ne
 801625c:	2300      	movne	r3, #0
 801625e:	eba6 0807 	sub.w	r8, r6, r7
 8016262:	608b      	str	r3, [r1, #8]
 8016264:	f1b8 0f00 	cmp.w	r8, #0
 8016268:	dde9      	ble.n	801623e <__sflush_r+0xae>
 801626a:	6a21      	ldr	r1, [r4, #32]
 801626c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801626e:	4643      	mov	r3, r8
 8016270:	463a      	mov	r2, r7
 8016272:	4628      	mov	r0, r5
 8016274:	47b0      	blx	r6
 8016276:	2800      	cmp	r0, #0
 8016278:	dc08      	bgt.n	801628c <__sflush_r+0xfc>
 801627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801627e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016282:	81a3      	strh	r3, [r4, #12]
 8016284:	f04f 30ff 	mov.w	r0, #4294967295
 8016288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801628c:	4407      	add	r7, r0
 801628e:	eba8 0800 	sub.w	r8, r8, r0
 8016292:	e7e7      	b.n	8016264 <__sflush_r+0xd4>
 8016294:	dfbffffe 	.word	0xdfbffffe

08016298 <_fflush_r>:
 8016298:	b538      	push	{r3, r4, r5, lr}
 801629a:	690b      	ldr	r3, [r1, #16]
 801629c:	4605      	mov	r5, r0
 801629e:	460c      	mov	r4, r1
 80162a0:	b913      	cbnz	r3, 80162a8 <_fflush_r+0x10>
 80162a2:	2500      	movs	r5, #0
 80162a4:	4628      	mov	r0, r5
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	b118      	cbz	r0, 80162b2 <_fflush_r+0x1a>
 80162aa:	6a03      	ldr	r3, [r0, #32]
 80162ac:	b90b      	cbnz	r3, 80162b2 <_fflush_r+0x1a>
 80162ae:	f7fe fa09 	bl	80146c4 <__sinit>
 80162b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d0f3      	beq.n	80162a2 <_fflush_r+0xa>
 80162ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80162bc:	07d0      	lsls	r0, r2, #31
 80162be:	d404      	bmi.n	80162ca <_fflush_r+0x32>
 80162c0:	0599      	lsls	r1, r3, #22
 80162c2:	d402      	bmi.n	80162ca <_fflush_r+0x32>
 80162c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162c6:	f7fe fbd8 	bl	8014a7a <__retarget_lock_acquire_recursive>
 80162ca:	4628      	mov	r0, r5
 80162cc:	4621      	mov	r1, r4
 80162ce:	f7ff ff5f 	bl	8016190 <__sflush_r>
 80162d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80162d4:	07da      	lsls	r2, r3, #31
 80162d6:	4605      	mov	r5, r0
 80162d8:	d4e4      	bmi.n	80162a4 <_fflush_r+0xc>
 80162da:	89a3      	ldrh	r3, [r4, #12]
 80162dc:	059b      	lsls	r3, r3, #22
 80162de:	d4e1      	bmi.n	80162a4 <_fflush_r+0xc>
 80162e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162e2:	f7fe fbcb 	bl	8014a7c <__retarget_lock_release_recursive>
 80162e6:	e7dd      	b.n	80162a4 <_fflush_r+0xc>

080162e8 <__assert_func>:
 80162e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162ea:	4614      	mov	r4, r2
 80162ec:	461a      	mov	r2, r3
 80162ee:	4b09      	ldr	r3, [pc, #36]	@ (8016314 <__assert_func+0x2c>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	4605      	mov	r5, r0
 80162f4:	68d8      	ldr	r0, [r3, #12]
 80162f6:	b954      	cbnz	r4, 801630e <__assert_func+0x26>
 80162f8:	4b07      	ldr	r3, [pc, #28]	@ (8016318 <__assert_func+0x30>)
 80162fa:	461c      	mov	r4, r3
 80162fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016300:	9100      	str	r1, [sp, #0]
 8016302:	462b      	mov	r3, r5
 8016304:	4905      	ldr	r1, [pc, #20]	@ (801631c <__assert_func+0x34>)
 8016306:	f000 f841 	bl	801638c <fiprintf>
 801630a:	f7fd fbfb 	bl	8013b04 <abort>
 801630e:	4b04      	ldr	r3, [pc, #16]	@ (8016320 <__assert_func+0x38>)
 8016310:	e7f4      	b.n	80162fc <__assert_func+0x14>
 8016312:	bf00      	nop
 8016314:	20000110 	.word	0x20000110
 8016318:	08016f06 	.word	0x08016f06
 801631c:	08016ed8 	.word	0x08016ed8
 8016320:	08016ecb 	.word	0x08016ecb

08016324 <_calloc_r>:
 8016324:	b570      	push	{r4, r5, r6, lr}
 8016326:	fba1 5402 	umull	r5, r4, r1, r2
 801632a:	b93c      	cbnz	r4, 801633c <_calloc_r+0x18>
 801632c:	4629      	mov	r1, r5
 801632e:	f7fd fc23 	bl	8013b78 <_malloc_r>
 8016332:	4606      	mov	r6, r0
 8016334:	b928      	cbnz	r0, 8016342 <_calloc_r+0x1e>
 8016336:	2600      	movs	r6, #0
 8016338:	4630      	mov	r0, r6
 801633a:	bd70      	pop	{r4, r5, r6, pc}
 801633c:	220c      	movs	r2, #12
 801633e:	6002      	str	r2, [r0, #0]
 8016340:	e7f9      	b.n	8016336 <_calloc_r+0x12>
 8016342:	462a      	mov	r2, r5
 8016344:	4621      	mov	r1, r4
 8016346:	f7fe fa70 	bl	801482a <memset>
 801634a:	e7f5      	b.n	8016338 <_calloc_r+0x14>

0801634c <__ascii_mbtowc>:
 801634c:	b082      	sub	sp, #8
 801634e:	b901      	cbnz	r1, 8016352 <__ascii_mbtowc+0x6>
 8016350:	a901      	add	r1, sp, #4
 8016352:	b142      	cbz	r2, 8016366 <__ascii_mbtowc+0x1a>
 8016354:	b14b      	cbz	r3, 801636a <__ascii_mbtowc+0x1e>
 8016356:	7813      	ldrb	r3, [r2, #0]
 8016358:	600b      	str	r3, [r1, #0]
 801635a:	7812      	ldrb	r2, [r2, #0]
 801635c:	1e10      	subs	r0, r2, #0
 801635e:	bf18      	it	ne
 8016360:	2001      	movne	r0, #1
 8016362:	b002      	add	sp, #8
 8016364:	4770      	bx	lr
 8016366:	4610      	mov	r0, r2
 8016368:	e7fb      	b.n	8016362 <__ascii_mbtowc+0x16>
 801636a:	f06f 0001 	mvn.w	r0, #1
 801636e:	e7f8      	b.n	8016362 <__ascii_mbtowc+0x16>

08016370 <__ascii_wctomb>:
 8016370:	4603      	mov	r3, r0
 8016372:	4608      	mov	r0, r1
 8016374:	b141      	cbz	r1, 8016388 <__ascii_wctomb+0x18>
 8016376:	2aff      	cmp	r2, #255	@ 0xff
 8016378:	d904      	bls.n	8016384 <__ascii_wctomb+0x14>
 801637a:	228a      	movs	r2, #138	@ 0x8a
 801637c:	601a      	str	r2, [r3, #0]
 801637e:	f04f 30ff 	mov.w	r0, #4294967295
 8016382:	4770      	bx	lr
 8016384:	700a      	strb	r2, [r1, #0]
 8016386:	2001      	movs	r0, #1
 8016388:	4770      	bx	lr
	...

0801638c <fiprintf>:
 801638c:	b40e      	push	{r1, r2, r3}
 801638e:	b503      	push	{r0, r1, lr}
 8016390:	4601      	mov	r1, r0
 8016392:	ab03      	add	r3, sp, #12
 8016394:	4805      	ldr	r0, [pc, #20]	@ (80163ac <fiprintf+0x20>)
 8016396:	f853 2b04 	ldr.w	r2, [r3], #4
 801639a:	6800      	ldr	r0, [r0, #0]
 801639c:	9301      	str	r3, [sp, #4]
 801639e:	f000 f831 	bl	8016404 <_vfiprintf_r>
 80163a2:	b002      	add	sp, #8
 80163a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80163a8:	b003      	add	sp, #12
 80163aa:	4770      	bx	lr
 80163ac:	20000110 	.word	0x20000110

080163b0 <__sfputc_r>:
 80163b0:	6893      	ldr	r3, [r2, #8]
 80163b2:	3b01      	subs	r3, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	b410      	push	{r4}
 80163b8:	6093      	str	r3, [r2, #8]
 80163ba:	da08      	bge.n	80163ce <__sfputc_r+0x1e>
 80163bc:	6994      	ldr	r4, [r2, #24]
 80163be:	42a3      	cmp	r3, r4
 80163c0:	db01      	blt.n	80163c6 <__sfputc_r+0x16>
 80163c2:	290a      	cmp	r1, #10
 80163c4:	d103      	bne.n	80163ce <__sfputc_r+0x1e>
 80163c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163ca:	f000 b933 	b.w	8016634 <__swbuf_r>
 80163ce:	6813      	ldr	r3, [r2, #0]
 80163d0:	1c58      	adds	r0, r3, #1
 80163d2:	6010      	str	r0, [r2, #0]
 80163d4:	7019      	strb	r1, [r3, #0]
 80163d6:	4608      	mov	r0, r1
 80163d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163dc:	4770      	bx	lr

080163de <__sfputs_r>:
 80163de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163e0:	4606      	mov	r6, r0
 80163e2:	460f      	mov	r7, r1
 80163e4:	4614      	mov	r4, r2
 80163e6:	18d5      	adds	r5, r2, r3
 80163e8:	42ac      	cmp	r4, r5
 80163ea:	d101      	bne.n	80163f0 <__sfputs_r+0x12>
 80163ec:	2000      	movs	r0, #0
 80163ee:	e007      	b.n	8016400 <__sfputs_r+0x22>
 80163f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163f4:	463a      	mov	r2, r7
 80163f6:	4630      	mov	r0, r6
 80163f8:	f7ff ffda 	bl	80163b0 <__sfputc_r>
 80163fc:	1c43      	adds	r3, r0, #1
 80163fe:	d1f3      	bne.n	80163e8 <__sfputs_r+0xa>
 8016400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016404 <_vfiprintf_r>:
 8016404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	460d      	mov	r5, r1
 801640a:	b09d      	sub	sp, #116	@ 0x74
 801640c:	4614      	mov	r4, r2
 801640e:	4698      	mov	r8, r3
 8016410:	4606      	mov	r6, r0
 8016412:	b118      	cbz	r0, 801641c <_vfiprintf_r+0x18>
 8016414:	6a03      	ldr	r3, [r0, #32]
 8016416:	b90b      	cbnz	r3, 801641c <_vfiprintf_r+0x18>
 8016418:	f7fe f954 	bl	80146c4 <__sinit>
 801641c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801641e:	07d9      	lsls	r1, r3, #31
 8016420:	d405      	bmi.n	801642e <_vfiprintf_r+0x2a>
 8016422:	89ab      	ldrh	r3, [r5, #12]
 8016424:	059a      	lsls	r2, r3, #22
 8016426:	d402      	bmi.n	801642e <_vfiprintf_r+0x2a>
 8016428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801642a:	f7fe fb26 	bl	8014a7a <__retarget_lock_acquire_recursive>
 801642e:	89ab      	ldrh	r3, [r5, #12]
 8016430:	071b      	lsls	r3, r3, #28
 8016432:	d501      	bpl.n	8016438 <_vfiprintf_r+0x34>
 8016434:	692b      	ldr	r3, [r5, #16]
 8016436:	b99b      	cbnz	r3, 8016460 <_vfiprintf_r+0x5c>
 8016438:	4629      	mov	r1, r5
 801643a:	4630      	mov	r0, r6
 801643c:	f000 f938 	bl	80166b0 <__swsetup_r>
 8016440:	b170      	cbz	r0, 8016460 <_vfiprintf_r+0x5c>
 8016442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016444:	07dc      	lsls	r4, r3, #31
 8016446:	d504      	bpl.n	8016452 <_vfiprintf_r+0x4e>
 8016448:	f04f 30ff 	mov.w	r0, #4294967295
 801644c:	b01d      	add	sp, #116	@ 0x74
 801644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016452:	89ab      	ldrh	r3, [r5, #12]
 8016454:	0598      	lsls	r0, r3, #22
 8016456:	d4f7      	bmi.n	8016448 <_vfiprintf_r+0x44>
 8016458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801645a:	f7fe fb0f 	bl	8014a7c <__retarget_lock_release_recursive>
 801645e:	e7f3      	b.n	8016448 <_vfiprintf_r+0x44>
 8016460:	2300      	movs	r3, #0
 8016462:	9309      	str	r3, [sp, #36]	@ 0x24
 8016464:	2320      	movs	r3, #32
 8016466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801646a:	f8cd 800c 	str.w	r8, [sp, #12]
 801646e:	2330      	movs	r3, #48	@ 0x30
 8016470:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016620 <_vfiprintf_r+0x21c>
 8016474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016478:	f04f 0901 	mov.w	r9, #1
 801647c:	4623      	mov	r3, r4
 801647e:	469a      	mov	sl, r3
 8016480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016484:	b10a      	cbz	r2, 801648a <_vfiprintf_r+0x86>
 8016486:	2a25      	cmp	r2, #37	@ 0x25
 8016488:	d1f9      	bne.n	801647e <_vfiprintf_r+0x7a>
 801648a:	ebba 0b04 	subs.w	fp, sl, r4
 801648e:	d00b      	beq.n	80164a8 <_vfiprintf_r+0xa4>
 8016490:	465b      	mov	r3, fp
 8016492:	4622      	mov	r2, r4
 8016494:	4629      	mov	r1, r5
 8016496:	4630      	mov	r0, r6
 8016498:	f7ff ffa1 	bl	80163de <__sfputs_r>
 801649c:	3001      	adds	r0, #1
 801649e:	f000 80a7 	beq.w	80165f0 <_vfiprintf_r+0x1ec>
 80164a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164a4:	445a      	add	r2, fp
 80164a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80164a8:	f89a 3000 	ldrb.w	r3, [sl]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	f000 809f 	beq.w	80165f0 <_vfiprintf_r+0x1ec>
 80164b2:	2300      	movs	r3, #0
 80164b4:	f04f 32ff 	mov.w	r2, #4294967295
 80164b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164bc:	f10a 0a01 	add.w	sl, sl, #1
 80164c0:	9304      	str	r3, [sp, #16]
 80164c2:	9307      	str	r3, [sp, #28]
 80164c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80164ca:	4654      	mov	r4, sl
 80164cc:	2205      	movs	r2, #5
 80164ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d2:	4853      	ldr	r0, [pc, #332]	@ (8016620 <_vfiprintf_r+0x21c>)
 80164d4:	f7e9 fe84 	bl	80001e0 <memchr>
 80164d8:	9a04      	ldr	r2, [sp, #16]
 80164da:	b9d8      	cbnz	r0, 8016514 <_vfiprintf_r+0x110>
 80164dc:	06d1      	lsls	r1, r2, #27
 80164de:	bf44      	itt	mi
 80164e0:	2320      	movmi	r3, #32
 80164e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164e6:	0713      	lsls	r3, r2, #28
 80164e8:	bf44      	itt	mi
 80164ea:	232b      	movmi	r3, #43	@ 0x2b
 80164ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164f0:	f89a 3000 	ldrb.w	r3, [sl]
 80164f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80164f6:	d015      	beq.n	8016524 <_vfiprintf_r+0x120>
 80164f8:	9a07      	ldr	r2, [sp, #28]
 80164fa:	4654      	mov	r4, sl
 80164fc:	2000      	movs	r0, #0
 80164fe:	f04f 0c0a 	mov.w	ip, #10
 8016502:	4621      	mov	r1, r4
 8016504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016508:	3b30      	subs	r3, #48	@ 0x30
 801650a:	2b09      	cmp	r3, #9
 801650c:	d94b      	bls.n	80165a6 <_vfiprintf_r+0x1a2>
 801650e:	b1b0      	cbz	r0, 801653e <_vfiprintf_r+0x13a>
 8016510:	9207      	str	r2, [sp, #28]
 8016512:	e014      	b.n	801653e <_vfiprintf_r+0x13a>
 8016514:	eba0 0308 	sub.w	r3, r0, r8
 8016518:	fa09 f303 	lsl.w	r3, r9, r3
 801651c:	4313      	orrs	r3, r2
 801651e:	9304      	str	r3, [sp, #16]
 8016520:	46a2      	mov	sl, r4
 8016522:	e7d2      	b.n	80164ca <_vfiprintf_r+0xc6>
 8016524:	9b03      	ldr	r3, [sp, #12]
 8016526:	1d19      	adds	r1, r3, #4
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	9103      	str	r1, [sp, #12]
 801652c:	2b00      	cmp	r3, #0
 801652e:	bfbb      	ittet	lt
 8016530:	425b      	neglt	r3, r3
 8016532:	f042 0202 	orrlt.w	r2, r2, #2
 8016536:	9307      	strge	r3, [sp, #28]
 8016538:	9307      	strlt	r3, [sp, #28]
 801653a:	bfb8      	it	lt
 801653c:	9204      	strlt	r2, [sp, #16]
 801653e:	7823      	ldrb	r3, [r4, #0]
 8016540:	2b2e      	cmp	r3, #46	@ 0x2e
 8016542:	d10a      	bne.n	801655a <_vfiprintf_r+0x156>
 8016544:	7863      	ldrb	r3, [r4, #1]
 8016546:	2b2a      	cmp	r3, #42	@ 0x2a
 8016548:	d132      	bne.n	80165b0 <_vfiprintf_r+0x1ac>
 801654a:	9b03      	ldr	r3, [sp, #12]
 801654c:	1d1a      	adds	r2, r3, #4
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	9203      	str	r2, [sp, #12]
 8016552:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016556:	3402      	adds	r4, #2
 8016558:	9305      	str	r3, [sp, #20]
 801655a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016630 <_vfiprintf_r+0x22c>
 801655e:	7821      	ldrb	r1, [r4, #0]
 8016560:	2203      	movs	r2, #3
 8016562:	4650      	mov	r0, sl
 8016564:	f7e9 fe3c 	bl	80001e0 <memchr>
 8016568:	b138      	cbz	r0, 801657a <_vfiprintf_r+0x176>
 801656a:	9b04      	ldr	r3, [sp, #16]
 801656c:	eba0 000a 	sub.w	r0, r0, sl
 8016570:	2240      	movs	r2, #64	@ 0x40
 8016572:	4082      	lsls	r2, r0
 8016574:	4313      	orrs	r3, r2
 8016576:	3401      	adds	r4, #1
 8016578:	9304      	str	r3, [sp, #16]
 801657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801657e:	4829      	ldr	r0, [pc, #164]	@ (8016624 <_vfiprintf_r+0x220>)
 8016580:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016584:	2206      	movs	r2, #6
 8016586:	f7e9 fe2b 	bl	80001e0 <memchr>
 801658a:	2800      	cmp	r0, #0
 801658c:	d03f      	beq.n	801660e <_vfiprintf_r+0x20a>
 801658e:	4b26      	ldr	r3, [pc, #152]	@ (8016628 <_vfiprintf_r+0x224>)
 8016590:	bb1b      	cbnz	r3, 80165da <_vfiprintf_r+0x1d6>
 8016592:	9b03      	ldr	r3, [sp, #12]
 8016594:	3307      	adds	r3, #7
 8016596:	f023 0307 	bic.w	r3, r3, #7
 801659a:	3308      	adds	r3, #8
 801659c:	9303      	str	r3, [sp, #12]
 801659e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165a0:	443b      	add	r3, r7
 80165a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80165a4:	e76a      	b.n	801647c <_vfiprintf_r+0x78>
 80165a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80165aa:	460c      	mov	r4, r1
 80165ac:	2001      	movs	r0, #1
 80165ae:	e7a8      	b.n	8016502 <_vfiprintf_r+0xfe>
 80165b0:	2300      	movs	r3, #0
 80165b2:	3401      	adds	r4, #1
 80165b4:	9305      	str	r3, [sp, #20]
 80165b6:	4619      	mov	r1, r3
 80165b8:	f04f 0c0a 	mov.w	ip, #10
 80165bc:	4620      	mov	r0, r4
 80165be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165c2:	3a30      	subs	r2, #48	@ 0x30
 80165c4:	2a09      	cmp	r2, #9
 80165c6:	d903      	bls.n	80165d0 <_vfiprintf_r+0x1cc>
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d0c6      	beq.n	801655a <_vfiprintf_r+0x156>
 80165cc:	9105      	str	r1, [sp, #20]
 80165ce:	e7c4      	b.n	801655a <_vfiprintf_r+0x156>
 80165d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80165d4:	4604      	mov	r4, r0
 80165d6:	2301      	movs	r3, #1
 80165d8:	e7f0      	b.n	80165bc <_vfiprintf_r+0x1b8>
 80165da:	ab03      	add	r3, sp, #12
 80165dc:	9300      	str	r3, [sp, #0]
 80165de:	462a      	mov	r2, r5
 80165e0:	4b12      	ldr	r3, [pc, #72]	@ (801662c <_vfiprintf_r+0x228>)
 80165e2:	a904      	add	r1, sp, #16
 80165e4:	4630      	mov	r0, r6
 80165e6:	f7fd fc29 	bl	8013e3c <_printf_float>
 80165ea:	4607      	mov	r7, r0
 80165ec:	1c78      	adds	r0, r7, #1
 80165ee:	d1d6      	bne.n	801659e <_vfiprintf_r+0x19a>
 80165f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80165f2:	07d9      	lsls	r1, r3, #31
 80165f4:	d405      	bmi.n	8016602 <_vfiprintf_r+0x1fe>
 80165f6:	89ab      	ldrh	r3, [r5, #12]
 80165f8:	059a      	lsls	r2, r3, #22
 80165fa:	d402      	bmi.n	8016602 <_vfiprintf_r+0x1fe>
 80165fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165fe:	f7fe fa3d 	bl	8014a7c <__retarget_lock_release_recursive>
 8016602:	89ab      	ldrh	r3, [r5, #12]
 8016604:	065b      	lsls	r3, r3, #25
 8016606:	f53f af1f 	bmi.w	8016448 <_vfiprintf_r+0x44>
 801660a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801660c:	e71e      	b.n	801644c <_vfiprintf_r+0x48>
 801660e:	ab03      	add	r3, sp, #12
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	462a      	mov	r2, r5
 8016614:	4b05      	ldr	r3, [pc, #20]	@ (801662c <_vfiprintf_r+0x228>)
 8016616:	a904      	add	r1, sp, #16
 8016618:	4630      	mov	r0, r6
 801661a:	f7fd fea7 	bl	801436c <_printf_i>
 801661e:	e7e4      	b.n	80165ea <_vfiprintf_r+0x1e6>
 8016620:	08016eb0 	.word	0x08016eb0
 8016624:	08016eba 	.word	0x08016eba
 8016628:	08013e3d 	.word	0x08013e3d
 801662c:	080163df 	.word	0x080163df
 8016630:	08016eb6 	.word	0x08016eb6

08016634 <__swbuf_r>:
 8016634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016636:	460e      	mov	r6, r1
 8016638:	4614      	mov	r4, r2
 801663a:	4605      	mov	r5, r0
 801663c:	b118      	cbz	r0, 8016646 <__swbuf_r+0x12>
 801663e:	6a03      	ldr	r3, [r0, #32]
 8016640:	b90b      	cbnz	r3, 8016646 <__swbuf_r+0x12>
 8016642:	f7fe f83f 	bl	80146c4 <__sinit>
 8016646:	69a3      	ldr	r3, [r4, #24]
 8016648:	60a3      	str	r3, [r4, #8]
 801664a:	89a3      	ldrh	r3, [r4, #12]
 801664c:	071a      	lsls	r2, r3, #28
 801664e:	d501      	bpl.n	8016654 <__swbuf_r+0x20>
 8016650:	6923      	ldr	r3, [r4, #16]
 8016652:	b943      	cbnz	r3, 8016666 <__swbuf_r+0x32>
 8016654:	4621      	mov	r1, r4
 8016656:	4628      	mov	r0, r5
 8016658:	f000 f82a 	bl	80166b0 <__swsetup_r>
 801665c:	b118      	cbz	r0, 8016666 <__swbuf_r+0x32>
 801665e:	f04f 37ff 	mov.w	r7, #4294967295
 8016662:	4638      	mov	r0, r7
 8016664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	6922      	ldr	r2, [r4, #16]
 801666a:	1a98      	subs	r0, r3, r2
 801666c:	6963      	ldr	r3, [r4, #20]
 801666e:	b2f6      	uxtb	r6, r6
 8016670:	4283      	cmp	r3, r0
 8016672:	4637      	mov	r7, r6
 8016674:	dc05      	bgt.n	8016682 <__swbuf_r+0x4e>
 8016676:	4621      	mov	r1, r4
 8016678:	4628      	mov	r0, r5
 801667a:	f7ff fe0d 	bl	8016298 <_fflush_r>
 801667e:	2800      	cmp	r0, #0
 8016680:	d1ed      	bne.n	801665e <__swbuf_r+0x2a>
 8016682:	68a3      	ldr	r3, [r4, #8]
 8016684:	3b01      	subs	r3, #1
 8016686:	60a3      	str	r3, [r4, #8]
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	1c5a      	adds	r2, r3, #1
 801668c:	6022      	str	r2, [r4, #0]
 801668e:	701e      	strb	r6, [r3, #0]
 8016690:	6962      	ldr	r2, [r4, #20]
 8016692:	1c43      	adds	r3, r0, #1
 8016694:	429a      	cmp	r2, r3
 8016696:	d004      	beq.n	80166a2 <__swbuf_r+0x6e>
 8016698:	89a3      	ldrh	r3, [r4, #12]
 801669a:	07db      	lsls	r3, r3, #31
 801669c:	d5e1      	bpl.n	8016662 <__swbuf_r+0x2e>
 801669e:	2e0a      	cmp	r6, #10
 80166a0:	d1df      	bne.n	8016662 <__swbuf_r+0x2e>
 80166a2:	4621      	mov	r1, r4
 80166a4:	4628      	mov	r0, r5
 80166a6:	f7ff fdf7 	bl	8016298 <_fflush_r>
 80166aa:	2800      	cmp	r0, #0
 80166ac:	d0d9      	beq.n	8016662 <__swbuf_r+0x2e>
 80166ae:	e7d6      	b.n	801665e <__swbuf_r+0x2a>

080166b0 <__swsetup_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4b29      	ldr	r3, [pc, #164]	@ (8016758 <__swsetup_r+0xa8>)
 80166b4:	4605      	mov	r5, r0
 80166b6:	6818      	ldr	r0, [r3, #0]
 80166b8:	460c      	mov	r4, r1
 80166ba:	b118      	cbz	r0, 80166c4 <__swsetup_r+0x14>
 80166bc:	6a03      	ldr	r3, [r0, #32]
 80166be:	b90b      	cbnz	r3, 80166c4 <__swsetup_r+0x14>
 80166c0:	f7fe f800 	bl	80146c4 <__sinit>
 80166c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166c8:	0719      	lsls	r1, r3, #28
 80166ca:	d422      	bmi.n	8016712 <__swsetup_r+0x62>
 80166cc:	06da      	lsls	r2, r3, #27
 80166ce:	d407      	bmi.n	80166e0 <__swsetup_r+0x30>
 80166d0:	2209      	movs	r2, #9
 80166d2:	602a      	str	r2, [r5, #0]
 80166d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166d8:	81a3      	strh	r3, [r4, #12]
 80166da:	f04f 30ff 	mov.w	r0, #4294967295
 80166de:	e033      	b.n	8016748 <__swsetup_r+0x98>
 80166e0:	0758      	lsls	r0, r3, #29
 80166e2:	d512      	bpl.n	801670a <__swsetup_r+0x5a>
 80166e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166e6:	b141      	cbz	r1, 80166fa <__swsetup_r+0x4a>
 80166e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166ec:	4299      	cmp	r1, r3
 80166ee:	d002      	beq.n	80166f6 <__swsetup_r+0x46>
 80166f0:	4628      	mov	r0, r5
 80166f2:	f7ff f821 	bl	8015738 <_free_r>
 80166f6:	2300      	movs	r3, #0
 80166f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80166fa:	89a3      	ldrh	r3, [r4, #12]
 80166fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016700:	81a3      	strh	r3, [r4, #12]
 8016702:	2300      	movs	r3, #0
 8016704:	6063      	str	r3, [r4, #4]
 8016706:	6923      	ldr	r3, [r4, #16]
 8016708:	6023      	str	r3, [r4, #0]
 801670a:	89a3      	ldrh	r3, [r4, #12]
 801670c:	f043 0308 	orr.w	r3, r3, #8
 8016710:	81a3      	strh	r3, [r4, #12]
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	b94b      	cbnz	r3, 801672a <__swsetup_r+0x7a>
 8016716:	89a3      	ldrh	r3, [r4, #12]
 8016718:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801671c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016720:	d003      	beq.n	801672a <__swsetup_r+0x7a>
 8016722:	4621      	mov	r1, r4
 8016724:	4628      	mov	r0, r5
 8016726:	f000 f83f 	bl	80167a8 <__smakebuf_r>
 801672a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801672e:	f013 0201 	ands.w	r2, r3, #1
 8016732:	d00a      	beq.n	801674a <__swsetup_r+0x9a>
 8016734:	2200      	movs	r2, #0
 8016736:	60a2      	str	r2, [r4, #8]
 8016738:	6962      	ldr	r2, [r4, #20]
 801673a:	4252      	negs	r2, r2
 801673c:	61a2      	str	r2, [r4, #24]
 801673e:	6922      	ldr	r2, [r4, #16]
 8016740:	b942      	cbnz	r2, 8016754 <__swsetup_r+0xa4>
 8016742:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016746:	d1c5      	bne.n	80166d4 <__swsetup_r+0x24>
 8016748:	bd38      	pop	{r3, r4, r5, pc}
 801674a:	0799      	lsls	r1, r3, #30
 801674c:	bf58      	it	pl
 801674e:	6962      	ldrpl	r2, [r4, #20]
 8016750:	60a2      	str	r2, [r4, #8]
 8016752:	e7f4      	b.n	801673e <__swsetup_r+0x8e>
 8016754:	2000      	movs	r0, #0
 8016756:	e7f7      	b.n	8016748 <__swsetup_r+0x98>
 8016758:	20000110 	.word	0x20000110

0801675c <__swhatbuf_r>:
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	460c      	mov	r4, r1
 8016760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016764:	2900      	cmp	r1, #0
 8016766:	b096      	sub	sp, #88	@ 0x58
 8016768:	4615      	mov	r5, r2
 801676a:	461e      	mov	r6, r3
 801676c:	da0d      	bge.n	801678a <__swhatbuf_r+0x2e>
 801676e:	89a3      	ldrh	r3, [r4, #12]
 8016770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016774:	f04f 0100 	mov.w	r1, #0
 8016778:	bf14      	ite	ne
 801677a:	2340      	movne	r3, #64	@ 0x40
 801677c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016780:	2000      	movs	r0, #0
 8016782:	6031      	str	r1, [r6, #0]
 8016784:	602b      	str	r3, [r5, #0]
 8016786:	b016      	add	sp, #88	@ 0x58
 8016788:	bd70      	pop	{r4, r5, r6, pc}
 801678a:	466a      	mov	r2, sp
 801678c:	f000 f848 	bl	8016820 <_fstat_r>
 8016790:	2800      	cmp	r0, #0
 8016792:	dbec      	blt.n	801676e <__swhatbuf_r+0x12>
 8016794:	9901      	ldr	r1, [sp, #4]
 8016796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801679a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801679e:	4259      	negs	r1, r3
 80167a0:	4159      	adcs	r1, r3
 80167a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80167a6:	e7eb      	b.n	8016780 <__swhatbuf_r+0x24>

080167a8 <__smakebuf_r>:
 80167a8:	898b      	ldrh	r3, [r1, #12]
 80167aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167ac:	079d      	lsls	r5, r3, #30
 80167ae:	4606      	mov	r6, r0
 80167b0:	460c      	mov	r4, r1
 80167b2:	d507      	bpl.n	80167c4 <__smakebuf_r+0x1c>
 80167b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80167b8:	6023      	str	r3, [r4, #0]
 80167ba:	6123      	str	r3, [r4, #16]
 80167bc:	2301      	movs	r3, #1
 80167be:	6163      	str	r3, [r4, #20]
 80167c0:	b003      	add	sp, #12
 80167c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167c4:	ab01      	add	r3, sp, #4
 80167c6:	466a      	mov	r2, sp
 80167c8:	f7ff ffc8 	bl	801675c <__swhatbuf_r>
 80167cc:	9f00      	ldr	r7, [sp, #0]
 80167ce:	4605      	mov	r5, r0
 80167d0:	4639      	mov	r1, r7
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7fd f9d0 	bl	8013b78 <_malloc_r>
 80167d8:	b948      	cbnz	r0, 80167ee <__smakebuf_r+0x46>
 80167da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167de:	059a      	lsls	r2, r3, #22
 80167e0:	d4ee      	bmi.n	80167c0 <__smakebuf_r+0x18>
 80167e2:	f023 0303 	bic.w	r3, r3, #3
 80167e6:	f043 0302 	orr.w	r3, r3, #2
 80167ea:	81a3      	strh	r3, [r4, #12]
 80167ec:	e7e2      	b.n	80167b4 <__smakebuf_r+0xc>
 80167ee:	89a3      	ldrh	r3, [r4, #12]
 80167f0:	6020      	str	r0, [r4, #0]
 80167f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167f6:	81a3      	strh	r3, [r4, #12]
 80167f8:	9b01      	ldr	r3, [sp, #4]
 80167fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80167fe:	b15b      	cbz	r3, 8016818 <__smakebuf_r+0x70>
 8016800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016804:	4630      	mov	r0, r6
 8016806:	f000 f81d 	bl	8016844 <_isatty_r>
 801680a:	b128      	cbz	r0, 8016818 <__smakebuf_r+0x70>
 801680c:	89a3      	ldrh	r3, [r4, #12]
 801680e:	f023 0303 	bic.w	r3, r3, #3
 8016812:	f043 0301 	orr.w	r3, r3, #1
 8016816:	81a3      	strh	r3, [r4, #12]
 8016818:	89a3      	ldrh	r3, [r4, #12]
 801681a:	431d      	orrs	r5, r3
 801681c:	81a5      	strh	r5, [r4, #12]
 801681e:	e7cf      	b.n	80167c0 <__smakebuf_r+0x18>

08016820 <_fstat_r>:
 8016820:	b538      	push	{r3, r4, r5, lr}
 8016822:	4d07      	ldr	r5, [pc, #28]	@ (8016840 <_fstat_r+0x20>)
 8016824:	2300      	movs	r3, #0
 8016826:	4604      	mov	r4, r0
 8016828:	4608      	mov	r0, r1
 801682a:	4611      	mov	r1, r2
 801682c:	602b      	str	r3, [r5, #0]
 801682e:	f7f2 f8d5 	bl	80089dc <_fstat>
 8016832:	1c43      	adds	r3, r0, #1
 8016834:	d102      	bne.n	801683c <_fstat_r+0x1c>
 8016836:	682b      	ldr	r3, [r5, #0]
 8016838:	b103      	cbz	r3, 801683c <_fstat_r+0x1c>
 801683a:	6023      	str	r3, [r4, #0]
 801683c:	bd38      	pop	{r3, r4, r5, pc}
 801683e:	bf00      	nop
 8016840:	2000630c 	.word	0x2000630c

08016844 <_isatty_r>:
 8016844:	b538      	push	{r3, r4, r5, lr}
 8016846:	4d06      	ldr	r5, [pc, #24]	@ (8016860 <_isatty_r+0x1c>)
 8016848:	2300      	movs	r3, #0
 801684a:	4604      	mov	r4, r0
 801684c:	4608      	mov	r0, r1
 801684e:	602b      	str	r3, [r5, #0]
 8016850:	f7f2 f8d4 	bl	80089fc <_isatty>
 8016854:	1c43      	adds	r3, r0, #1
 8016856:	d102      	bne.n	801685e <_isatty_r+0x1a>
 8016858:	682b      	ldr	r3, [r5, #0]
 801685a:	b103      	cbz	r3, 801685e <_isatty_r+0x1a>
 801685c:	6023      	str	r3, [r4, #0]
 801685e:	bd38      	pop	{r3, r4, r5, pc}
 8016860:	2000630c 	.word	0x2000630c

08016864 <_init>:
 8016864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016866:	bf00      	nop
 8016868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801686a:	bc08      	pop	{r3}
 801686c:	469e      	mov	lr, r3
 801686e:	4770      	bx	lr

08016870 <_fini>:
 8016870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016872:	bf00      	nop
 8016874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016876:	bc08      	pop	{r3}
 8016878:	469e      	mov	lr, r3
 801687a:	4770      	bx	lr
