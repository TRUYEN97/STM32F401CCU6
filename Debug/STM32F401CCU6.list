
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08019c40  08019c40  0001ac40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3f8  0801a3f8  0001c2cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3f8  0801a3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a400  0801a400  0001c2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a400  0801a400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0801a408  0801a408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0801a410  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006048  200002cc  0801a6dc  0001c2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006314  0801a6dc  0001c314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00097473  00000000  00000000  0001c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c8fe  00000000  00000000  000b376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00006200  00000000  00000000  000c0070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00004aef  00000000  00000000  000c6270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024863  00000000  00000000  000cad5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b3e6  00000000  00000000  000ef5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5679  00000000  00000000  0013a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00200021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001e1a4  00000000  00000000  00200064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0021e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08019c24 	.word	0x08019c24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08019c24 	.word	0x08019c24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b96a 	b.w	80011a0 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9d08      	ldr	r5, [sp, #32]
 8000eea:	460c      	mov	r4, r1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d14e      	bne.n	8000f8e <__udivmoddi4+0xaa>
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	458c      	cmp	ip, r1
 8000ef4:	4686      	mov	lr, r0
 8000ef6:	fab2 f282 	clz	r2, r2
 8000efa:	d962      	bls.n	8000fc2 <__udivmoddi4+0xde>
 8000efc:	b14a      	cbz	r2, 8000f12 <__udivmoddi4+0x2e>
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	4091      	lsls	r1, r2
 8000f04:	fa20 f303 	lsr.w	r3, r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	4319      	orrs	r1, r3
 8000f0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f f68c 	uxth.w	r6, ip
 8000f1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f22:	fb07 1114 	mls	r1, r7, r4, r1
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb04 f106 	mul.w	r1, r4, r6
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d90a      	bls.n	8000f48 <__udivmoddi4+0x64>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f3a:	f080 8112 	bcs.w	8001162 <__udivmoddi4+0x27e>
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	f240 810f 	bls.w	8001162 <__udivmoddi4+0x27e>
 8000f44:	3c02      	subs	r4, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1a59      	subs	r1, r3, r1
 8000f4a:	fa1f f38e 	uxth.w	r3, lr
 8000f4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f52:	fb07 1110 	mls	r1, r7, r0, r1
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f606 	mul.w	r6, r0, r6
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	d90a      	bls.n	8000f78 <__udivmoddi4+0x94>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f6a:	f080 80fc 	bcs.w	8001166 <__udivmoddi4+0x282>
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	f240 80f9 	bls.w	8001166 <__udivmoddi4+0x282>
 8000f74:	4463      	add	r3, ip
 8000f76:	3802      	subs	r0, #2
 8000f78:	1b9b      	subs	r3, r3, r6
 8000f7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f7e:	2100      	movs	r1, #0
 8000f80:	b11d      	cbz	r5, 8000f8a <__udivmoddi4+0xa6>
 8000f82:	40d3      	lsrs	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	e9c5 3200 	strd	r3, r2, [r5]
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d905      	bls.n	8000f9e <__udivmoddi4+0xba>
 8000f92:	b10d      	cbz	r5, 8000f98 <__udivmoddi4+0xb4>
 8000f94:	e9c5 0100 	strd	r0, r1, [r5]
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e7f5      	b.n	8000f8a <__udivmoddi4+0xa6>
 8000f9e:	fab3 f183 	clz	r1, r3
 8000fa2:	2900      	cmp	r1, #0
 8000fa4:	d146      	bne.n	8001034 <__udivmoddi4+0x150>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d302      	bcc.n	8000fb0 <__udivmoddi4+0xcc>
 8000faa:	4290      	cmp	r0, r2
 8000fac:	f0c0 80f0 	bcc.w	8001190 <__udivmoddi4+0x2ac>
 8000fb0:	1a86      	subs	r6, r0, r2
 8000fb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d0e6      	beq.n	8000f8a <__udivmoddi4+0xa6>
 8000fbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000fc0:	e7e3      	b.n	8000f8a <__udivmoddi4+0xa6>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	f040 8090 	bne.w	80010e8 <__udivmoddi4+0x204>
 8000fc8:	eba1 040c 	sub.w	r4, r1, ip
 8000fcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd0:	fa1f f78c 	uxth.w	r7, ip
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fde:	fb08 4416 	mls	r4, r8, r6, r4
 8000fe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fe6:	fb07 f006 	mul.w	r0, r7, r6
 8000fea:	4298      	cmp	r0, r3
 8000fec:	d908      	bls.n	8001000 <__udivmoddi4+0x11c>
 8000fee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ff6:	d202      	bcs.n	8000ffe <__udivmoddi4+0x11a>
 8000ff8:	4298      	cmp	r0, r3
 8000ffa:	f200 80cd 	bhi.w	8001198 <__udivmoddi4+0x2b4>
 8000ffe:	4626      	mov	r6, r4
 8001000:	1a1c      	subs	r4, r3, r0
 8001002:	fa1f f38e 	uxth.w	r3, lr
 8001006:	fbb4 f0f8 	udiv	r0, r4, r8
 800100a:	fb08 4410 	mls	r4, r8, r0, r4
 800100e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001012:	fb00 f707 	mul.w	r7, r0, r7
 8001016:	429f      	cmp	r7, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x148>
 800101a:	eb1c 0303 	adds.w	r3, ip, r3
 800101e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001022:	d202      	bcs.n	800102a <__udivmoddi4+0x146>
 8001024:	429f      	cmp	r7, r3
 8001026:	f200 80b0 	bhi.w	800118a <__udivmoddi4+0x2a6>
 800102a:	4620      	mov	r0, r4
 800102c:	1bdb      	subs	r3, r3, r7
 800102e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001032:	e7a5      	b.n	8000f80 <__udivmoddi4+0x9c>
 8001034:	f1c1 0620 	rsb	r6, r1, #32
 8001038:	408b      	lsls	r3, r1
 800103a:	fa22 f706 	lsr.w	r7, r2, r6
 800103e:	431f      	orrs	r7, r3
 8001040:	fa20 fc06 	lsr.w	ip, r0, r6
 8001044:	fa04 f301 	lsl.w	r3, r4, r1
 8001048:	ea43 030c 	orr.w	r3, r3, ip
 800104c:	40f4      	lsrs	r4, r6
 800104e:	fa00 f801 	lsl.w	r8, r0, r1
 8001052:	0c38      	lsrs	r0, r7, #16
 8001054:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001058:	fbb4 fef0 	udiv	lr, r4, r0
 800105c:	fa1f fc87 	uxth.w	ip, r7
 8001060:	fb00 441e 	mls	r4, r0, lr, r4
 8001064:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001068:	fb0e f90c 	mul.w	r9, lr, ip
 800106c:	45a1      	cmp	r9, r4
 800106e:	fa02 f201 	lsl.w	r2, r2, r1
 8001072:	d90a      	bls.n	800108a <__udivmoddi4+0x1a6>
 8001074:	193c      	adds	r4, r7, r4
 8001076:	f10e 3aff 	add.w	sl, lr, #4294967295
 800107a:	f080 8084 	bcs.w	8001186 <__udivmoddi4+0x2a2>
 800107e:	45a1      	cmp	r9, r4
 8001080:	f240 8081 	bls.w	8001186 <__udivmoddi4+0x2a2>
 8001084:	f1ae 0e02 	sub.w	lr, lr, #2
 8001088:	443c      	add	r4, r7
 800108a:	eba4 0409 	sub.w	r4, r4, r9
 800108e:	fa1f f983 	uxth.w	r9, r3
 8001092:	fbb4 f3f0 	udiv	r3, r4, r0
 8001096:	fb00 4413 	mls	r4, r0, r3, r4
 800109a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800109e:	fb03 fc0c 	mul.w	ip, r3, ip
 80010a2:	45a4      	cmp	ip, r4
 80010a4:	d907      	bls.n	80010b6 <__udivmoddi4+0x1d2>
 80010a6:	193c      	adds	r4, r7, r4
 80010a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80010ac:	d267      	bcs.n	800117e <__udivmoddi4+0x29a>
 80010ae:	45a4      	cmp	ip, r4
 80010b0:	d965      	bls.n	800117e <__udivmoddi4+0x29a>
 80010b2:	3b02      	subs	r3, #2
 80010b4:	443c      	add	r4, r7
 80010b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010ba:	fba0 9302 	umull	r9, r3, r0, r2
 80010be:	eba4 040c 	sub.w	r4, r4, ip
 80010c2:	429c      	cmp	r4, r3
 80010c4:	46ce      	mov	lr, r9
 80010c6:	469c      	mov	ip, r3
 80010c8:	d351      	bcc.n	800116e <__udivmoddi4+0x28a>
 80010ca:	d04e      	beq.n	800116a <__udivmoddi4+0x286>
 80010cc:	b155      	cbz	r5, 80010e4 <__udivmoddi4+0x200>
 80010ce:	ebb8 030e 	subs.w	r3, r8, lr
 80010d2:	eb64 040c 	sbc.w	r4, r4, ip
 80010d6:	fa04 f606 	lsl.w	r6, r4, r6
 80010da:	40cb      	lsrs	r3, r1
 80010dc:	431e      	orrs	r6, r3
 80010de:	40cc      	lsrs	r4, r1
 80010e0:	e9c5 6400 	strd	r6, r4, [r5]
 80010e4:	2100      	movs	r1, #0
 80010e6:	e750      	b.n	8000f8a <__udivmoddi4+0xa6>
 80010e8:	f1c2 0320 	rsb	r3, r2, #32
 80010ec:	fa20 f103 	lsr.w	r1, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	fa24 f303 	lsr.w	r3, r4, r3
 80010f8:	4094      	lsls	r4, r2
 80010fa:	430c      	orrs	r4, r1
 80010fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001100:	fa00 fe02 	lsl.w	lr, r0, r2
 8001104:	fa1f f78c 	uxth.w	r7, ip
 8001108:	fbb3 f0f8 	udiv	r0, r3, r8
 800110c:	fb08 3110 	mls	r1, r8, r0, r3
 8001110:	0c23      	lsrs	r3, r4, #16
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb00 f107 	mul.w	r1, r0, r7
 800111a:	4299      	cmp	r1, r3
 800111c:	d908      	bls.n	8001130 <__udivmoddi4+0x24c>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f100 36ff 	add.w	r6, r0, #4294967295
 8001126:	d22c      	bcs.n	8001182 <__udivmoddi4+0x29e>
 8001128:	4299      	cmp	r1, r3
 800112a:	d92a      	bls.n	8001182 <__udivmoddi4+0x29e>
 800112c:	3802      	subs	r0, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a5b      	subs	r3, r3, r1
 8001132:	b2a4      	uxth	r4, r4
 8001134:	fbb3 f1f8 	udiv	r1, r3, r8
 8001138:	fb08 3311 	mls	r3, r8, r1, r3
 800113c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001140:	fb01 f307 	mul.w	r3, r1, r7
 8001144:	42a3      	cmp	r3, r4
 8001146:	d908      	bls.n	800115a <__udivmoddi4+0x276>
 8001148:	eb1c 0404 	adds.w	r4, ip, r4
 800114c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001150:	d213      	bcs.n	800117a <__udivmoddi4+0x296>
 8001152:	42a3      	cmp	r3, r4
 8001154:	d911      	bls.n	800117a <__udivmoddi4+0x296>
 8001156:	3902      	subs	r1, #2
 8001158:	4464      	add	r4, ip
 800115a:	1ae4      	subs	r4, r4, r3
 800115c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001160:	e739      	b.n	8000fd6 <__udivmoddi4+0xf2>
 8001162:	4604      	mov	r4, r0
 8001164:	e6f0      	b.n	8000f48 <__udivmoddi4+0x64>
 8001166:	4608      	mov	r0, r1
 8001168:	e706      	b.n	8000f78 <__udivmoddi4+0x94>
 800116a:	45c8      	cmp	r8, r9
 800116c:	d2ae      	bcs.n	80010cc <__udivmoddi4+0x1e8>
 800116e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001172:	eb63 0c07 	sbc.w	ip, r3, r7
 8001176:	3801      	subs	r0, #1
 8001178:	e7a8      	b.n	80010cc <__udivmoddi4+0x1e8>
 800117a:	4631      	mov	r1, r6
 800117c:	e7ed      	b.n	800115a <__udivmoddi4+0x276>
 800117e:	4603      	mov	r3, r0
 8001180:	e799      	b.n	80010b6 <__udivmoddi4+0x1d2>
 8001182:	4630      	mov	r0, r6
 8001184:	e7d4      	b.n	8001130 <__udivmoddi4+0x24c>
 8001186:	46d6      	mov	lr, sl
 8001188:	e77f      	b.n	800108a <__udivmoddi4+0x1a6>
 800118a:	4463      	add	r3, ip
 800118c:	3802      	subs	r0, #2
 800118e:	e74d      	b.n	800102c <__udivmoddi4+0x148>
 8001190:	4606      	mov	r6, r0
 8001192:	4623      	mov	r3, r4
 8001194:	4608      	mov	r0, r1
 8001196:	e70f      	b.n	8000fb8 <__udivmoddi4+0xd4>
 8001198:	3e02      	subs	r6, #2
 800119a:	4463      	add	r3, ip
 800119c:	e730      	b.n	8001000 <__udivmoddi4+0x11c>
 800119e:	bf00      	nop

080011a0 <__aeabi_idiv0>:
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <_ZN10TimeTickerC1Em>:
 *  Created on: Dec 11, 2024
 *      Author: Admin
 */
#include <Common/TimeTicker.h>

TimeTicker::TimeTicker(TickType_t delayTime) :
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
		delayTime(delayTime), lastTime(getCurrentTimeMS()) {
 80011ae:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <_ZN10TimeTickerC1Em+0x2c>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f80a 	bl	80011d4 <_ZN10TimeTicker16getCurrentTimeMSEv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
}
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08019e3c 	.word	0x08019e3c

080011d4 <_ZN10TimeTicker16getCurrentTimeMSEv>:

TickType_t TimeTicker::getCurrentTimeMS() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	return (xTaskGetTickCount() * 1000) / configTICK_RATE_HZ;
 80011dc:	f013 fb8c 	bl	80148f8 <xTaskGetTickCount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <_ZN10TimeTicker16getCurrentTimeMSEv+0x28>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <_ZN10TimeTicker8getDeltaEv>:

TickType_t TimeTicker::getDelta() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	TickType_t currentTime = getCurrentTimeMS();
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
 8001212:	60f8      	str	r0, [r7, #12]
	if (this->lastTime > currentTime) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	429a      	cmp	r2, r3
 800121c:	d202      	bcs.n	8001224 <_ZN10TimeTicker8getDeltaEv+0x24>
		this->lastTime = 0;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
	}
	return currentTime - this->lastTime;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZNK10TimeTicker12getDelayTimeEv>:

TickType_t TimeTicker::getDelayTime() const{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	return this->delayTime;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_ZN10TimeTicker5resetEv>:

void TimeTicker::reset() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	this->lastTime = getCurrentTimeMS();
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN10TimeTicker6onTimeEv>:

void TimeTicker::setDelayTime(TickType_t delayTime) {
	this->delayTime = delayTime;
}

bool TimeTicker::onTime() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	return getDelta() <= this->delayTime;
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffc3 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	bf94      	ite	ls
 8001284:	2301      	movls	r3, #1
 8001286:	2300      	movhi	r3, #0
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>:

  FORCE_INLINE size_t size() const {
    return str_ ? ::strlen(str_) : 0;
  }

  char operator[](size_t i) const {
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
  }
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
  }
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_ZN11EncodeModelC1Ev>:
 *  Created on: Dec 12, 2024
 *      Author: Admin
 */
#include "Model/EncodeModel.h"

EncodeModel::EncodeModel(): distance(0), speed(0), carStatus(CAR_STOP) {
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	721a      	strb	r2, [r3, #8]

}
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZNK11EncodeModel11getDistanceEv>:

float EncodeModel::getDistance() const {
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return this->distance;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
}
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZNK11EncodeModel8getSpeedEv>:
float EncodeModel::getSpeed() const {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	return this->speed;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_ZN11EncodeModel11setDistanceEf>:
float EncodeModel::getCarStatus() const {
	return this->carStatus;
}
void EncodeModel::setDistance(float distance) {
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	ed87 0a00 	vstr	s0, [r7]
	this->distance = distance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_ZN11EncodeModel8setSpeedEf>:
void EncodeModel::setSpeed(float speed) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	ed87 0a00 	vstr	s0, [r7]
	this->speed = speed;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	605a      	str	r2, [r3, #4]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>:
void EncodeModel::setCarStatus(CarStatus carStatus) {
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
	this->carStatus = carStatus;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	721a      	strb	r2, [r3, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN11EncodeModel13resetDistanceEv>:
void EncodeModel::resetDistance() {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	this->distance = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN15ModelManagementC1Ev>:
#include "Model/ModelManagement.h"

ModelManagement *ModelManagement::instance = nullptr;
SemaphoreHandle_t ModelManagement::mutex = nullptr;

ModelManagement::ModelManagement() :
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
		sensorModel(new SensorModel()),
 80013b8:	2010      	movs	r0, #16
 80013ba:	f015 fc77 	bl	8016cac <_Znwj>
 80013be:	4603      	mov	r3, r0
 80013c0:	461c      	mov	r4, r3
 80013c2:	4620      	mov	r0, r4
 80013c4:	f000 f86e 	bl	80014a4 <_ZN11SensorModelC1Ev>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601c      	str	r4, [r3, #0]
		testModeModel(new TestModeModel()),
 80013cc:	2048      	movs	r0, #72	@ 0x48
 80013ce:	f015 fc6d 	bl	8016cac <_Znwj>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
 80013d6:	4620      	mov	r0, r4
 80013d8:	f007 feca 	bl	8009170 <_ZN13TestModeModelC1Ev>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605c      	str	r4, [r3, #4]
		locationModel(new LocationModel(0,0)) {
 80013e0:	2044      	movs	r0, #68	@ 0x44
 80013e2:	f015 fc63 	bl	8016cac <_Znwj>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461c      	mov	r4, r3
 80013ea:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 8001418 <_ZN15ModelManagementC1Ev+0x68>
 80013ee:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001418 <_ZN15ModelManagementC1Ev+0x68>
 80013f2:	4620      	mov	r0, r4
 80013f4:	f007 faf8 	bl	80089e8 <_ZN13LocationModelC1Edd>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	609c      	str	r4, [r3, #8]
	this->testModeModel->setLocation(this->locationModel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f007 ffa8 	bl	800935c <_ZN13TestModeModel11setLocationEPK13LocationModel>
}
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
	...

08001420 <_ZN15ModelManagement11getInstanceEv>:
ModelManagement::~ModelManagement() {

}

ModelManagement& ModelManagement::getInstance() {
 8001420:	b598      	push	{r3, r4, r7, lr}
 8001422:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <_ZN15ModelManagement11getInstanceEv+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d126      	bne.n	800147a <_ZN15ModelManagement11getInstanceEv+0x5a>
		if (mutex == nullptr) {
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <_ZN15ModelManagement11getInstanceEv+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <_ZN15ModelManagement11getInstanceEv+0x20>
			mutex = xSemaphoreCreateMutex();
 8001434:	2001      	movs	r0, #1
 8001436:	f012 f91a 	bl	801366e <xQueueCreateMutex>
 800143a:	4603      	mov	r3, r0
 800143c:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_ZN15ModelManagement11getInstanceEv+0x68>)
 800143e:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mutex, portMAX_DELAY) == pdPASS) {
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_ZN15ModelManagement11getInstanceEv+0x68>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	4618      	mov	r0, r3
 800144a:	f012 fc3b 	bl	8013cc4 <xQueueSemaphoreTake>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00d      	beq.n	800147a <_ZN15ModelManagement11getInstanceEv+0x5a>
			if (instance == nullptr) {
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <_ZN15ModelManagement11getInstanceEv+0x64>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <_ZN15ModelManagement11getInstanceEv+0x5a>
				instance = new ModelManagement();
 8001466:	200c      	movs	r0, #12
 8001468:	f015 fc20 	bl	8016cac <_Znwj>
 800146c:	4603      	mov	r3, r0
 800146e:	461c      	mov	r4, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff9d 	bl	80013b0 <_ZN15ModelManagementC1Ev>
 8001476:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <_ZN15ModelManagement11getInstanceEv+0x64>)
 8001478:	601c      	str	r4, [r3, #0]
			}
		}
	}
	return *instance;
 800147a:	4b02      	ldr	r3, [pc, #8]	@ (8001484 <_ZN15ModelManagement11getInstanceEv+0x64>)
 800147c:	681b      	ldr	r3, [r3, #0]
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd98      	pop	{r3, r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	200002e8 	.word	0x200002e8
 8001488:	200002ec 	.word	0x200002ec

0800148c <_ZN15ModelManagement14getSensorModelEv>:

SensorModel* ModelManagement::getSensorModel() {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return sensorModel;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_ZN11SensorModelC1Ev>:
 *      Author: Admin
 */

#include "Model/SensorModel.h"

SensorModel::SensorModel() :
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
		nt(false), np(false), cm(false), at(false), pt(false), t1(false), t2(
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	705a      	strb	r2, [r3, #1]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	709a      	strb	r2, [r3, #2]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	70da      	strb	r2, [r3, #3]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	711a      	strb	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	715a      	strb	r2, [r3, #5]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	719a      	strb	r2, [r3, #6]
				false), t3(false), gear(0), rpm(0), encodeModel(
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	71da      	strb	r2, [r3, #7]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	721a      	strb	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	815a      	strh	r2, [r3, #10]
				new EncodeModel()) {
 80014e8:	200c      	movs	r0, #12
 80014ea:	f015 fbdf 	bl	8016cac <_Znwj>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461c      	mov	r4, r3
				false), t3(false), gear(0), rpm(0), encodeModel(
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff feed 	bl	80012d2 <_ZN11EncodeModelC1Ev>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60dc      	str	r4, [r3, #12]
}
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <_ZN11SensorModel13resetDistanceEv>:

void SensorModel::setDistance(float distance) {
	this->encodeModel->setDistance(distance);
}

void SensorModel::resetDistance() {
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	this->encodeModel->resetDistance();
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff3e 	bl	8001394 <_ZN11EncodeModel13resetDistanceEv>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_ZN11SensorModel5setAtEb>:

void SensorModel::setAt(bool at) {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	this->at = at;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	70da      	strb	r2, [r3, #3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_ZNK11SensorModel14getEncodeModelEv>:

EncodeModel* SensorModel::getEncodeModel() const {
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	return this->encodeModel;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_ZNK11SensorModel4isCmEv>:

bool SensorModel::isCm() const {
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	return cm;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	789b      	ldrb	r3, [r3, #2]
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_ZN11SensorModel5setCmEb>:

void SensorModel::setCm(bool cm) {
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
	this->cm = cm;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	709a      	strb	r2, [r3, #2]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN11SensorModel7setGearEh>:

uint8_t SensorModel::getGear() const {
	return gear;
}

void SensorModel::setGear(uint8_t gear) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	this->gear = gear;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	721a      	strb	r2, [r3, #8]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_ZNK11SensorModel4isNpEv>:

bool SensorModel::isNp() const {
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return np;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	785b      	ldrb	r3, [r3, #1]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_ZN11SensorModel5setNpEb>:

void SensorModel::setNp(bool np) {
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
	this->np = np;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	705a      	strb	r2, [r3, #1]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_ZNK11SensorModel4isNtEv>:

bool SensorModel::isNt() const {
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	return nt;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN11SensorModel5setNtEb>:

void SensorModel::setNt(bool nt) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	this->nt = nt;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_ZN11SensorModel5setPtEb>:

bool SensorModel::isPt() const {
	return pt;
}

void SensorModel::setPt(bool pt) {
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
	this->pt = pt;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	711a      	strb	r2, [r3, #4]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_ZNK11SensorModel6getRpmEv>:

uint16_t SensorModel::getRpm() const {
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	return rpm;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	895b      	ldrh	r3, [r3, #10]
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_ZN11SensorModel6setRpmEt>:

void SensorModel::setRpm(uint16_t rpm) {
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
	this->rpm = rpm;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	815a      	strh	r2, [r3, #10]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_ZN11SensorModel5setT1Eb>:

bool SensorModel::isT1() const {
	return t1;
}

void SensorModel::setT1(bool t1) {
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
	this->t1 = t1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	715a      	strb	r2, [r3, #5]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN11SensorModel5setT2Eb>:

bool SensorModel::isT2() const {
	return t2;
}

void SensorModel::setT2(bool t2) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
	this->t2 = t2;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	719a      	strb	r2, [r3, #6]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_ZN11SensorModel5setT3Eb>:

bool SensorModel::isT3() const {
	return t3;
}

void SensorModel::setT3(bool t3) {
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
	this->t3 = t3;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	71da      	strb	r2, [r3, #7]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
    return malloc(size);
 80016ce:	6838      	ldr	r0, [r7, #0]
 80016d0:	f015 fc00 	bl	8016ed4 <malloc>
 80016d4:	4603      	mov	r3, r0
  }
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
    free(ptr);
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f015 fbfb 	bl	8016ee4 <free>
  }
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f015 fca3 	bl	8017050 <realloc>
 800170a:	4603      	mov	r3, r0
  }
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8001718:	4b02      	ldr	r3, [pc, #8]	@ (8001724 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000000 	.word	0x20000000

08001728 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>:
 public:
  enum Ownership { Copied, Linked };

  JsonString() : data_(0), size_(0), ownership_(Linked) {}

  JsonString(const char* data, Ownership ownership = Linked)
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	71fb      	strb	r3, [r7, #7]
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE+0x24>
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f7fe fd9c 	bl	8000280 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	e000      	b.n	800174e <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE+0x26>
 800174c:	2300      	movs	r3, #0
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	6053      	str	r3, [r2, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	721a      	strb	r2, [r3, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>:

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	721a      	strb	r2, [r3, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    return data_;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
  }
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>:
  bool isLinked() const {
    return ownership_ == Linked;
  }

  // Returns length of the string.
  size_t size() const {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    return size_;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
  }
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>:
    if (!collection)
      return;
    collection->clear(resources);
  }

  SlotId head() const {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    return head_;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	881b      	ldrh	r3, [r3, #0]
  }
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	4013      	ands	r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11ArduinoJson8V721HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>:
    return p;
  }

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffed 	bl	8001806 <_ZN11ArduinoJson8V721HB226detail14VariantContentC1Ev>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	711a      	strb	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001838:	80da      	strh	r2, [r3, #6]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    return next_;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	88db      	ldrh	r3, [r3, #6]
  }
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN11ArduinoJson8V721HB226detail10StringPoolC1Ev>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringPool {
 public:
  StringPool() = default;
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	621a      	str	r2, [r3, #32]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2204      	movs	r2, #4
 8001890:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN11ArduinoJson8V721HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	711a      	strb	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3308      	adds	r3, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffca 	bl	800185c <_ZN11ArduinoJson8V721HB226detail10StringPoolC1Ev>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	330c      	adds	r3, #12
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffd3 	bl	8001878 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    return data_;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
  }
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_ZNK11ArduinoJson8V721HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
    return resources_;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
  }
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffb1 	bl	80018a8 <_ZN11ArduinoJson8V721HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3338      	adds	r3, #56	@ 0x38
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff66 	bl	800181c <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZNK11ArduinoJson8V721HB2212JsonDocumentcvNS0_16JsonVariantConstEEv>:

  operator JsonVariant() {
    return getVariant();
  }

  operator JsonVariantConst() const {
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    return getVariant();
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f805 	bl	8001978 <_ZNK11ArduinoJson8V721HB2212JsonDocument10getVariantEv>
 800196e:	bf00      	nop
  }
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNK11ArduinoJson8V721HB2212JsonDocument10getVariantEv>:
 private:
  JsonVariant getVariant() {
    return JsonVariant(&data_, &resources_);
  }

  JsonVariantConst getVariant() const {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    return JsonVariantConst(&data_, &resources_);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3338      	adds	r3, #56	@ 0x38
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa6 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>:
inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
  variant->clear(this);
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
}

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	330c      	adds	r3, #12
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f9a9 	bl	8001d04 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>:
inline void ResourceManager::freeExtension(SlotId id) {
  auto p = getExtension(id);
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
}

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	330c      	adds	r3, #12
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f997 	bl	8001d04 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80019d6:	4603      	mov	r3, r0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 f816 	bl	8001a1c <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb>
 80019f0:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 80019f2:	e002      	b.n	80019fa <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3302      	adds	r3, #2
 80019f8:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d1f2      	bne.n	80019f4 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
  }
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb>:
      p += 2;
    }
  }

 private:
  static const char* escapeTable(bool isSerializing) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x14>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e000      	b.n	8001a32 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x16>
 8001a30:	2300      	movs	r3, #0
 8001a32:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8001a34:	4413      	add	r3, r2
  }
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	08019c40 	.word	0x08019c40

08001a48 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <_ZN11ArduinoJson8V721HB226detail5pow10Ei+0x24>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fff4 	bl	8001a48 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	e000      	b.n	8001a6e <_ZN11ArduinoJson8V721HB226detail5pow10Ei+0x26>
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b08c      	sub	sp, #48	@ 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	ed87 0b00 	vstr	d0, [r7]
 8001a84:	460b      	mov	r3, r1
 8001a86:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8001a88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ffdb 	bl	8001a48 <_ZN11ArduinoJson8V721HB226detail5pow10Ei>
 8001a92:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8001a94:	463b      	mov	r3, r7
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f95a 	bl	8001d50 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8001aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f886 	bl	8000bb8 <__aeabi_d2uiz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	e011      	b.n	8001ada <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x62>
    maxDecimalPart /= 10;
 8001ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8001be8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8001ac2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	4a45      	ldr	r2, [pc, #276]	@ (8001be8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d8ea      	bhi.n	8001ab6 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x3e>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8001ae0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ae6:	f7fe fd15 	bl	8000514 <__aeabi_ui2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe fbd1 	bl	8000298 <__aeabi_dsub>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4614      	mov	r4, r2
 8001afc:	461d      	mov	r5, r3
 8001afe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b00:	f7fe fd08 	bl	8000514 <__aeabi_ui2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
  JsonFloat remainder =
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fd7c 	bl	8000608 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2304 	strd	r2, r3, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8001b18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b1c:	f7ff f84c 	bl	8000bb8 <__aeabi_d2uiz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8001b24:	69f8      	ldr	r0, [r7, #28]
 8001b26:	f7fe fcf5 	bl	8000514 <__aeabi_ui2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b32:	f7fe fbb1 	bl	8000298 <__aeabi_dsub>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8001b3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	f7fe fba9 	bl	800029c <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f831 	bl	8000bb8 <__aeabi_d2uiz>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d320      	bcc.n	8001ba8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
    decimal = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    integral++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8001b70:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d017      	beq.n	8001ba8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d914      	bls.n	8001ba8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
      exponent++;
 8001b7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8001b8e:	e00b      	b.n	8001ba8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x130>
    decimal /= 10;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8001b9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8001ba8:	69f9      	ldr	r1, [r7, #28]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x170>)
 8001bac:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	1aca      	subs	r2, r1, r3
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d103      	bne.n	8001bc8 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x150>
 8001bc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	dce3      	bgt.n	8001b90 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda+0x118>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001bd8:	811a      	strh	r2, [r3, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	7afa      	ldrb	r2, [r7, #11]
 8001bde:	729a      	strb	r2, [r3, #10]
}
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	3730      	adds	r7, #48	@ 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	cccccccd 	.word	0xcccccccd

08001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:
  type_ = VariantType::Null;
}

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	791b      	ldrb	r3, [r3, #4]
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fdeb 	bl	80017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8001c02:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6838      	ldr	r0, [r7, #0]
 8001c10:	f7ff fed4 	bl	80019bc <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>
 8001c14:	4603      	mov	r3, r0
             : nullptr;
 8001c16:	e000      	b.n	8001c1a <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <_ZN9BaseModelC1Ev>:
 *  Created on: Dec 15, 2024
 *      Author: Admin
 */
#include "Model/Process/BaseModel.h"

BaseModel::BaseModel() :
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
		data() {
 8001c2c:	4a08      	ldr	r2, [pc, #32]	@ (8001c50 <_ZN9BaseModelC1Ev+0x2c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	1d1c      	adds	r4, r3, #4
 8001c36:	f7ff fd6d 	bl	8001714 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fe77 	bl	8001932 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>
}
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08019ed8 	.word	0x08019ed8

08001c54 <_ZNK9BaseModel6toJsonEv>:

const JsonDocument& BaseModel::toJson() const {
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	return this->data;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_ZNK9BaseModel8toStringB5cxx11Ev>:

std::string BaseModel::toString() const {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	std::string jsonString;
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f015 f879 	bl	8016d6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	serializeJson(this->data, jsonString);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	1d1a      	adds	r2, r3, #4
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe67 	bl	800195a <_ZNK11ArduinoJson8V721HB2212JsonDocumentcvNS0_16JsonVariantConstEEv>
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c96:	f000 f939 	bl	8001f0c <_ZN11ArduinoJson8V721HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_6detail9enable_ifIXntsrNS8_10is_pointerIT_EE5valueEjE4typeENS0_16JsonVariantConstERSB_>
	return jsonString;
 8001c9a:	bf00      	nop
}
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    return client.getData();
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fe28 	bl	8001902 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst7getDataEv>
 8001cb2:	4603      	mov	r3, r0
  }
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fe28 	bl	800191a <_ZNK11ArduinoJson8V721HB2216JsonVariantConst18getResourceManagerEv>
 8001cca:	4603      	mov	r3, r0
  }
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    return size_;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
  }
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    return data_;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
  }
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  void freeSlot(Slot<T> slot) {
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
    freeList_ = slot.id();
  }

  T* getSlot(SlotId id) const {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e012      	b.n	8001d44 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	09db      	lsrs	r3, r3, #7
 8001d22:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d2a:	81bb      	strh	r3, [r7, #12]
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	89ba      	ldrh	r2, [r7, #12]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f8fa 	bl	8001f34 <_ZNK11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	bf00      	nop
  }
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0000      	movs	r0, r0
	...

08001d50 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 8001d60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d64:	2201      	movs	r2, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d72:	a362      	add	r3, pc, #392	@ (adr r3, 8001efc <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1ac>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fecc 	bl	8000b14 <__aeabi_dcmpge>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04a      	beq.n	8001e18 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xc8>
    for (; index >= 0; index--) {
 8001d82:	e045      	b.n	8001e10 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xc0>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d8a:	f000 f8e5 	bl	8001f58 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f8eb 	bl	8001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001da2:	ec53 2b10 	vmov	r2, r3, d0
 8001da6:	2101      	movs	r1, #1
 8001da8:	460e      	mov	r6, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe feb1 	bl	8000b14 <__aeabi_dcmpge>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x6c>
 8001db8:	2300      	movs	r3, #0
 8001dba:	461e      	mov	r6, r3
 8001dbc:	b2f3      	uxtb	r3, r6
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01d      	beq.n	8001dfe <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xae>
        value *= traits::negativeBinaryPowersOfTen()[index];
 8001dc2:	f000 f8f1 	bl	8001fa8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f8cf 	bl	8001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001dda:	ec51 0b10 	vmov	r0, r1, d0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fc10 	bl	8000608 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
        powersOf10 = int16_t(powersOf10 + bit);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	8bfb      	ldrh	r3, [r7, #30]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	105b      	asrs	r3, r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8001e04:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	777b      	strb	r3, [r7, #29]
 8001e10:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	dab5      	bge.n	8001d84 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x34>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	f7fe fe7f 	bl	8000b28 <__aeabi_dcmpgt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d05c      	beq.n	8001eea <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x19a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e36:	a333      	add	r3, pc, #204	@ (adr r3, 8001f04 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1b4>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fe60 	bl	8000b00 <__aeabi_dcmple>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d051      	beq.n	8001eea <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x19a>
    for (; index >= 0; index--) {
 8001e46:	e04c      	b.n	8001ee2 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x192>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e4e:	f000 f8ab 	bl	8001fa8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8001e52:	4603      	mov	r3, r0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f889 	bl	8001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001e66:	ec51 0b10 	vmov	r0, r1, d0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x1a8>)
 8001e70:	f7fe fbca 	bl	8000608 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	2101      	movs	r1, #1
 8001e7a:	460e      	mov	r6, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fe34 	bl	8000aec <__aeabi_dcmplt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x13e>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	461e      	mov	r6, r3
 8001e8e:	b2f3      	uxtb	r3, r6
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01d      	beq.n	8001ed0 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0x180>
        value *= traits::positiveBinaryPowersOfTen()[index];
 8001e94:	f000 f860 	bl	8001f58 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f866 	bl	8001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 8001eac:	ec51 0b10 	vmov	r0, r1, d0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fba7 	bl	8000608 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	e9c1 2300 	strd	r2, r3, [r1]
        powersOf10 = int16_t(powersOf10 - bit);
 8001ec4:	8bfa      	ldrh	r2, [r7, #30]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	105b      	asrs	r3, r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8001ed6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	777b      	strb	r3, [r7, #29]
 8001ee2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	daae      	bge.n	8001e48 <_ZN11ArduinoJson8V721HB226detail9normalizeIdEEsRT_+0xf8>
  return powersOf10;
 8001eea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40240000 	.word	0x40240000
 8001efc:	00000000 	.word	0x00000000
 8001f00:	416312d0 	.word	0x416312d0
 8001f04:	88e368f1 	.word	0x88e368f1
 8001f08:	3ee4f8b5 	.word	0x3ee4f8b5

08001f0c <_ZN11ArduinoJson8V721HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_6detail9enable_ifIXntsrNS8_10is_pointerIT_EE5valueEjE4typeENS0_16JsonVariantConstERSB_>:

// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <typename TDestination>
detail::enable_if_t<!detail::is_pointer<TDestination>::value, size_t>
serializeJson(JsonVariantConst source, TDestination& destination) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f1a:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f26:	f000 f84f 	bl	8001fc8 <_ZN11ArduinoJson8V721HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 8001f2a:	4603      	mov	r3, r0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZNK11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
      return {};
    auto index = usage_++;
    return {slots_ + index, SlotId(index)};
  }

  T* getSlot(SlotId id) const {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
    ARDUINOJSON_ASSERT(id < usage_);
    return slots_ + id;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
  }
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
      (mantissa_type(1) << mantissa_bits) - 1;

  using exponent_type = int16_t;
  static const exponent_type exponent_max = 308;

  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
            0x4693B8B5B5056E17,  // 1e32
            0x4D384F03E93FF9F5,  // 1e64
            0x5A827748F9301D32,  // 1e128
            0x75154FDD7F73BF3C,  // 1e256
        });
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f84a 	bl	8001ffc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>
 8001f68:	687b      	ldr	r3, [r7, #4]
  }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	08019e40 	.word	0x08019e40

08001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f844 	bl	800201a <_ZN11ArduinoJson8V721HB226detail8pgm_readIdEET_PKS3_>
 8001f92:	eeb0 7a40 	vmov.f32	s14, s0
 8001f96:	eef0 7a60 	vmov.f32	s15, s1
  }
 8001f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9e:	eef0 0a67 	vmov.f32	s1, s15
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:

  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
            0x3949F623D5A8A733,  // 1e-32
            0x32A50FFD44F4A73D,  // 1e-64
            0x255BBA08CF8C979D,  // 1e-128
            0x0AC8062864AC6F43   // 1e-256
        });
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4904      	ldr	r1, [pc, #16]	@ (8001fc4 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f822 	bl	8001ffc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>
 8001fb8:	687b      	ldr	r3, [r7, #4]
  }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08019e88 	.word	0x08019e88

08001fc8 <_ZN11ArduinoJson8V721HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fd6:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f82d 	bl	800203e <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fee:	f000 f836 	bl	800205e <_ZN11ArduinoJson8V721HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8001ff2:	4603      	mov	r3, r0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_ZN11ArduinoJson8V721HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return *p;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	ec43 2b17 	vmov	d7, r2, r3
}
 800202c:	eeb0 0a47 	vmov.f32	s0, s14
 8002030:	eef0 0a67 	vmov.f32	s1, s15
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	601a      	str	r2, [r3, #0]
    str.clear();
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f014 fed5 	bl	8016dfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZN11ArduinoJson8V721HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800205e:	b580      	push	{r7, lr}
 8002060:	b08a      	sub	sp, #40	@ 0x28
 8002062:	af00      	add	r7, sp, #0
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	e883 0003 	stmia.w	r3, {r0, r1}
 800206c:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe16 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8002078:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe1c 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8002084:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f81f 	bl	80020d2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	461a      	mov	r2, r3
 800209a:	6a39      	ldr	r1, [r7, #32]
 800209c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800209e:	f000 f82b 	bl	80020f8 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3728      	adds	r7, #40	@ 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f822 	bl	800212c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
        return visit.visit(nullptr);
    }
  }

  template <typename TVisitor>
  static typename TVisitor::result_type accept(const VariantData* var,
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
                                               const ResourceManager* resources,
                                               TVisitor& visit) {
    if (var != 0)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f81c 	bl	800214c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 8002114:	4603      	mov	r3, r0
 8002116:	e005      	b.n	8002124 <_ZN11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
    else
      return visit.visit(nullptr);
 8002118:	2100      	movs	r1, #0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f948 	bl	80023b0 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8002120:	4603      	mov	r3, r0
 8002122:	bf00      	nop
  }
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	463a      	mov	r2, r7
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f94b 	bl	80023d8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 800214c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002150:	b08e      	sub	sp, #56	@ 0x38
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff fd45 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8002162:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	3b03      	subs	r3, #3
 800216a:	2b3d      	cmp	r3, #61	@ 0x3d
 800216c:	f200 8114 	bhi.w	8002398 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x24c>
 8002170:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	08002303 	.word	0x08002303
 800217c:	080022b9 	.word	0x080022b9
 8002180:	080022d9 	.word	0x080022d9
 8002184:	0800237f 	.word	0x0800237f
 8002188:	08002399 	.word	0x08002399
 800218c:	08002399 	.word	0x08002399
 8002190:	08002399 	.word	0x08002399
 8002194:	08002347 	.word	0x08002347
 8002198:	08002399 	.word	0x08002399
 800219c:	0800232f 	.word	0x0800232f
 80021a0:	08002399 	.word	0x08002399
 80021a4:	08002271 	.word	0x08002271
 80021a8:	08002399 	.word	0x08002399
 80021ac:	08002399 	.word	0x08002399
 80021b0:	08002399 	.word	0x08002399
 80021b4:	08002399 	.word	0x08002399
 80021b8:	08002399 	.word	0x08002399
 80021bc:	08002399 	.word	0x08002399
 80021c0:	08002399 	.word	0x08002399
 80021c4:	08002399 	.word	0x08002399
 80021c8:	08002399 	.word	0x08002399
 80021cc:	08002399 	.word	0x08002399
 80021d0:	08002399 	.word	0x08002399
 80021d4:	0800236f 	.word	0x0800236f
 80021d8:	08002399 	.word	0x08002399
 80021dc:	0800235f 	.word	0x0800235f
 80021e0:	08002399 	.word	0x08002399
 80021e4:	08002285 	.word	0x08002285
 80021e8:	08002399 	.word	0x08002399
 80021ec:	080022ab 	.word	0x080022ab
 80021f0:	08002399 	.word	0x08002399
 80021f4:	08002399 	.word	0x08002399
 80021f8:	08002399 	.word	0x08002399
 80021fc:	08002399 	.word	0x08002399
 8002200:	08002399 	.word	0x08002399
 8002204:	08002399 	.word	0x08002399
 8002208:	08002399 	.word	0x08002399
 800220c:	08002399 	.word	0x08002399
 8002210:	08002399 	.word	0x08002399
 8002214:	08002399 	.word	0x08002399
 8002218:	08002399 	.word	0x08002399
 800221c:	08002399 	.word	0x08002399
 8002220:	08002399 	.word	0x08002399
 8002224:	08002399 	.word	0x08002399
 8002228:	08002399 	.word	0x08002399
 800222c:	08002399 	.word	0x08002399
 8002230:	08002399 	.word	0x08002399
 8002234:	08002399 	.word	0x08002399
 8002238:	08002399 	.word	0x08002399
 800223c:	08002399 	.word	0x08002399
 8002240:	08002399 	.word	0x08002399
 8002244:	08002399 	.word	0x08002399
 8002248:	08002399 	.word	0x08002399
 800224c:	08002399 	.word	0x08002399
 8002250:	08002399 	.word	0x08002399
 8002254:	08002399 	.word	0x08002399
 8002258:	08002399 	.word	0x08002399
 800225c:	08002399 	.word	0x08002399
 8002260:	08002399 	.word	0x08002399
 8002264:	08002399 	.word	0x08002399
 8002268:	08002399 	.word	0x08002399
 800226c:	0800229d 	.word	0x0800229d
        return visit.visit(content_.asFloat);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f000 f8bf 	bl	80023fe <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8002280:	4603      	mov	r3, r0
 8002282:	e08f      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asDouble);
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	ed93 7b00 	vldr	d7, [r3]
 800228a:	eeb0 0a47 	vmov.f32	s0, s14
 800228e:	eef0 0a67 	vmov.f32	s1, s15
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f000 f8c7 	bl	8002426 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8002298:	4603      	mov	r3, r0
 800229a:	e083      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asArray);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4619      	mov	r1, r3
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f000 f8d4 	bl	800244e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 80022a6:	4603      	mov	r3, r0
 80022a8:	e07c      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asObject);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4619      	mov	r1, r3
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f000 f90b 	bl	80024ca <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 80022b4:	4603      	mov	r3, r0
 80022b6:	e075      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(JsonString(content_.asLinkedString));
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2201      	movs	r2, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fa30 	bl	8001728 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 f945 	bl	800255e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80022d4:	4603      	mov	r3, r0
 80022d6:	e065      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80022e6:	461a      	mov	r2, r3
 80022e8:	f107 0020 	add.w	r0, r7, #32
 80022ec:	2300      	movs	r3, #0
 80022ee:	f7ff fa38 	bl	8001762 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f000 f930 	bl	800255e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80022fe:	4603      	mov	r3, r0
                                      JsonString::Copied));
 8002300:	e050      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(RawString(content_.asOwnedString->data,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 8002310:	461a      	mov	r2, r3
 8002312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fec8 	bl	80020ac <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>
 800231c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002320:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f000 f939 	bl	800259c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 800232a:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 800232c:	e03a      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	17da      	asrs	r2, r3, #31
 8002334:	4698      	mov	r8, r3
 8002336:	4691      	mov	r9, r2
 8002338:	4642      	mov	r2, r8
 800233a:	464b      	mov	r3, r9
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f000 f94c 	bl	80025da <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 8002342:	4603      	mov	r3, r0
 8002344:	e02e      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	461c      	mov	r4, r3
 800234e:	4615      	mov	r5, r2
 8002350:	4622      	mov	r2, r4
 8002352:	462b      	mov	r3, r5
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	f000 f954 	bl	8002602 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 800235a:	4603      	mov	r3, r0
 800235c:	e022      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asInt64);
 800235e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f000 f938 	bl	80025da <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 800236a:	4603      	mov	r3, r0
 800236c:	e01a      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(extension->asUint64);
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	68b8      	ldr	r0, [r7, #8]
 8002376:	f000 f944 	bl	8002602 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 800237a:	4603      	mov	r3, r0
 800237c:	e012      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(content_.asBoolean != 0);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4619      	mov	r1, r3
 800238e:	68b8      	ldr	r0, [r7, #8]
 8002390:	f000 f94b 	bl	800262a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 8002394:	4603      	mov	r3, r0
 8002396:	e005      	b.n	80023a4 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x258>
        return visit.visit(nullptr);
 8002398:	2100      	movs	r1, #0
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f000 f808 	bl	80023b0 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 80023a0:	4603      	mov	r3, r0
 80023a2:	bf00      	nop
  }
 80023a4:	4618      	mov	r0, r3
 80023a6:	3738      	adds	r7, #56	@ 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023ae:	bf00      	nop

080023b0 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4905      	ldr	r1, [pc, #20]	@ (80023d4 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f947 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f957 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80023ca:	4603      	mov	r3, r0
  }
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	08019c54 	.word	0x08019c54

080023d8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	ed97 0a00 	vldr	s0, [r7]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f97b 	bl	800270c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f92e 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800241c:	4603      	mov	r3, r0
  }
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	ed97 0b00 	vldr	d0, [r7]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f97c 	bl	8002736 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f91a 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002444:	4603      	mov	r3, r0
  }
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    write('[');
 8002458:	215b      	movs	r1, #91	@ 0x5b
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f97b 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f9ac 	bl	80017c0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>
 8002468:	4603      	mov	r3, r0
 800246a:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 800246c:	e01c      	b.n	80024a8 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	89fa      	ldrh	r2, [r7, #14]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fa8e 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 800247c:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68b8      	ldr	r0, [r7, #8]
 8002488:	f7ff fe60 	bl	800214c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f7ff f9d9 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8002492:	4603      	mov	r3, r0
 8002494:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 80024a0:	212c      	movs	r1, #44	@ 0x2c
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f957 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d1dd      	bne.n	800246e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 80024b2:	215d      	movs	r1, #93	@ 0x5d
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f94e 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8dc 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80024c0:	4603      	mov	r3, r0
  }
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
    write('{');
 80024d4:	217b      	movs	r1, #123	@ 0x7b
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f93d 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f96e 	bl	80017c0 <_ZNK11ArduinoJson8V721HB226detail14CollectionData4headEv>
 80024e4:	4603      	mov	r3, r0
 80024e6:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 80024e8:	2301      	movs	r3, #1
 80024ea:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 80024ec:	e026      	b.n	800253c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	89fa      	ldrh	r2, [r7, #14]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fa4e 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 80024fc:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	461a      	mov	r2, r3
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68b8      	ldr	r0, [r7, #8]
 8002508:	f7ff fe20 	bl	800214c <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f7ff f999 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8002512:	4603      	mov	r3, r0
 8002514:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8002526:	233a      	movs	r3, #58	@ 0x3a
 8002528:	e000      	b.n	800252c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 800252a:	232c      	movs	r3, #44	@ 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f911 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	f083 0301 	eor.w	r3, r3, #1
 800253a:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002542:	4293      	cmp	r3, r2
 8002544:	d1d3      	bne.n	80024ee <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8002546:	217d      	movs	r1, #125	@ 0x7d
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f904 	bl	8002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f892 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002554:	4603      	mov	r3, r0
  }
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 800255e:	b5b0      	push	{r4, r5, r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	4638      	mov	r0, r7
 8002568:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 800256c:	68fc      	ldr	r4, [r7, #12]
 800256e:	463b      	mov	r3, r7
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f90d 	bl	8001790 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 8002576:	4605      	mov	r5, r0
 8002578:	463b      	mov	r3, r7
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f914 	bl	80017a8 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4629      	mov	r1, r5
 8002586:	4620      	mov	r0, r4
 8002588:	f000 f8f5 	bl	8002776 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f873 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002592:	4603      	mov	r3, r0
  }
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}

0800259c <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 80025aa:	68fc      	ldr	r4, [r7, #12]
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb9c 	bl	8001cec <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4dataEv>
 80025b4:	4605      	mov	r5, r0
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fb8b 	bl	8001cd4 <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4sizeEv>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4629      	mov	r1, r5
 80025c4:	4620      	mov	r0, r4
 80025c6:	f000 f8fb 	bl	80027c0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f854 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80025d0:	4603      	mov	r3, r0
  }
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bdb0      	pop	{r4, r5, r7, pc}

080025da <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ec:	4608      	mov	r0, r1
 80025ee:	f000 f8f7 	bl	80027e0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f840 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80025f8:	4603      	mov	r3, r0
  }
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002614:	4608      	mov	r0, r1
 8002616:	f000 f907 	bl	8002828 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f82c 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002620:	4603      	mov	r3, r0
  }
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f929 	bl	8002894 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f818 	bl	8002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002648:	4603      	mov	r3, r0
  }
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8002652:	b590      	push	{r4, r7, lr}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 800265c:	687c      	ldr	r4, [r7, #4]
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7fd fe0e 	bl	8000280 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	4620      	mov	r0, r4
 800266c:	f000 f92c 	bl	80028c8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <_ZNK11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f936 	bl	80028f4 <_ZNK11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8002688:	4603      	mov	r3, r0
  }
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8002692:	b590      	push	{r4, r7, lr}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 800269c:	2301      	movs	r3, #1
 800269e:	461c      	mov	r4, r3
 80026a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026a8:	f7fe fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_+0x24>
 80026b2:	2300      	movs	r3, #0
 80026b4:	461c      	mov	r4, r3
 80026b6:	b2e3      	uxtb	r3, r4
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}

080026c0 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d6:	f7fe f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x42>
 80026e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	f7fd fdd8 	bl	800029c <__adddf3>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026f4:	f7fe f9f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x42>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_+0x44>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8002718:	6838      	ldr	r0, [r7, #0]
 800271a:	f7fd ff1d 	bl	8000558 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	2106      	movs	r1, #6
 8002724:	ec43 2b10 	vmov	d0, r2, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8f1 	bl	8002910 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8002742:	2109      	movs	r1, #9
 8002744:	ed97 0b00 	vldr	d0, [r7]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f8e1 	bl	8002910 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_ZN11ArduinoJson8V721HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f933 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8002782:	2122      	movs	r1, #34	@ 0x22
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f925 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 800278a:	e007      	b.n	800279c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	60ba      	str	r2, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f92c 	bl	80029f4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ed      	bne.n	800278c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 80027b0:	2122      	movs	r1, #34	@ 0x22
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f90e 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f878 	bl	80028c8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 80027ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da0c      	bge.n	800280e <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 80027f4:	212d      	movs	r1, #45	@ 0x2d
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f8ec 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80027fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002800:	2100      	movs	r1, #0
 8002802:	4254      	negs	r4, r2
 8002804:	eb61 0503 	sbc.w	r5, r1, r3
 8002808:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800280c:	e003      	b.n	8002816 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 800280e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002812:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 8002816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f804 	bl	8002828 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bdb0      	pop	{r4, r5, r7, pc}

08002828 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	3316      	adds	r3, #22
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8002840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002844:	f04f 020a 	mov.w	r2, #10
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f7fe fb32 	bl	8000eb4 <__aeabi_uldivmod>
 8002850:	b2d3      	uxtb	r3, r2
 8002852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002854:	3a01      	subs	r2, #1
 8002856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002858:	3330      	adds	r3, #48	@ 0x30
 800285a:	b2da      	uxtb	r2, r3
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002864:	f04f 020a 	mov.w	r2, #10
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f7fe fb22 	bl	8000eb4 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8002878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287c:	4313      	orrs	r3, r2
 800287e:	d1df      	bne.n	8002840 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8002880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8e1 	bl	8002a4c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
    if (value)
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 80028a6:	4906      	ldr	r1, [pc, #24]	@ (80028c0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fed2 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80028ae:	e003      	b.n	80028b8 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 80028b0:	4904      	ldr	r1, [pc, #16]	@ (80028c4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fecd 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	08019c5c 	.word	0x08019c5c
 80028c4:	08019c64 	.word	0x08019c64

080028c8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f8c8 	bl	8002a70 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	441a      	add	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
  }
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_ZNK11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    return writer_.count();
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f8c8 	bl	8002a94 <_ZNK11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 8002904:	4603      	mov	r3, r0
  }
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	ed87 0b00 	vstr	d0, [r7]
 800291c:	460b      	mov	r3, r1
 800291e:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8002920:	ed97 0b00 	vldr	d0, [r7]
 8002924:	f7ff feb5 	bl	8002692 <_ZN11ArduinoJson8V721HB226detail5isnanIdEEbT_>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 800292e:	4928      	ldr	r1, [pc, #160]	@ (80029d0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xc0>)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fe8e 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8002936:	e048      	b.n	80029ca <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
    if (isinf(value))
 8002938:	ed97 0b00 	vldr	d0, [r7]
 800293c:	f7ff fec0 	bl	80026c0 <_ZN11ArduinoJson8V721HB226detail5isinfIdEEbT_>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 8002946:	4922      	ldr	r1, [pc, #136]	@ (80029d0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xc0>)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fe82 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800294e:	e03c      	b.n	80029ca <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
    if (value < 0.0) {
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800295c:	f7fe f8c6 	bl	8000aec <__aeabi_dcmplt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x6a>
      writeRaw('-');
 8002966:	212d      	movs	r1, #45	@ 0x2d
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f833 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 800296e:	683c      	ldr	r4, [r7, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002976:	e9c7 4500 	strd	r4, r5, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002982:	4611      	mov	r1, r2
 8002984:	ed97 0b00 	vldr	d0, [r7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f875 	bl	8001a78 <_ZN11ArduinoJson8V721HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f88a 	bl	8002aac <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 8002998:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x9e>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80029a6:	4619      	mov	r1, r3
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8b1 	bl	8002b10 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 80029ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xba>
      writeRaw('e');
 80029b6:	2165      	movs	r1, #101	@ 0x65
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f80b 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 80029be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029c2:	4619      	mov	r1, r3
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f8e7 	bl	8002b98 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	08019c54 	.word	0x08019c54

080029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f8f3 	bl	8002bd2 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe ffec 	bl	80019e0 <_ZN11ArduinoJson8V721HB226detail14EscapeSequence10escapeCharEc>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 8002a12:	215c      	movs	r1, #92	@ 0x5c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ffdd 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffd8 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8002a24:	e00c      	b.n	8002a40 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ffcf 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8002a36:	e003      	b.n	8002a40 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8002a38:	4903      	ldr	r1, [pc, #12]	@ (8002a48 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe09 	bl	8002652 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	08019c6c 	.word	0x08019c6c

08002a4c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a58:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a60:	461a      	mov	r2, r3
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	f7ff ff30 	bl	80028c8 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f014 f9fd 	bl	8016e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8002a8a:	687b      	ldr	r3, [r7, #4]
  }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZNK11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    return count_;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
  }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	3316      	adds	r3, #22
 8002abc:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	1aca      	subs	r2, r1, r3
 8002ad6:	b2d3      	uxtb	r3, r2
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	3a01      	subs	r2, #1
 8002adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ade:	3330      	adds	r3, #48	@ 0x30
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	4a08      	ldr	r2, [pc, #32]	@ (8002b0c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	603b      	str	r3, [r7, #0]
    } while (value);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e4      	bne.n	8002ac2 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ffa5 	bl	8002a4c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	@ 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	cccccccd 	.word	0xcccccccd

08002b10 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	3310      	adds	r3, #16
 8002b24:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 8002b2a:	e017      	b.n	8002b5c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8002b30:	fba3 2301 	umull	r2, r3, r3, r1
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	1aca      	subs	r2, r1, r3
 8002b40:	b2d3      	uxtb	r3, r2
 8002b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b44:	3a01      	subs	r2, #1
 8002b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b48:	3330      	adds	r3, #48	@ 0x30
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4a10      	ldr	r2, [pc, #64]	@ (8002b94 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	3a01      	subs	r2, #1
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	71fa      	strb	r2, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1da      	bne.n	8002b2c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	222e      	movs	r2, #46	@ 0x2e
 8002b80:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff ff60 	bl	8002a4c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	@ 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	cccccccd 	.word	0xcccccccd

08002b98 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8002ba4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da07      	bge.n	8002bbc <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8002bac:	212d      	movs	r1, #45	@ 0x2d
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff10 	bl	80029d4 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	81fb      	strh	r3, [r7, #14]
 8002bba:	e001      	b.n	8002bc0 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f81b 	bl	8002c00 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_ZN11ArduinoJson8V721HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f83f 	bl	8002c68 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	605a      	str	r2, [r3, #4]
  }
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	3316      	adds	r3, #22
 8002c12:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8002c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c20:	08d9      	lsrs	r1, r3, #3
 8002c22:	460b      	mov	r3, r1
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c32:	3a01      	subs	r2, #1
 8002c34:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c36:	3330      	adds	r3, #48	@ 0x30
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	807b      	strh	r3, [r7, #2]
    } while (value);
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e3      	bne.n	8002c18 <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fef9 	bl	8002a4c <_ZN11ArduinoJson8V721HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	cccccccd 	.word	0xcccccccd

08002c68 <_ZN11ArduinoJson8V721HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f014 f8c3 	bl	8016e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8002c82:	2301      	movs	r3, #1
  }
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN11ArduinoJson8V721HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3309      	adds	r3, #9
  }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d301      	bcc.n	8002cba <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e01b      	b.n	8002cf2 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffe6 	bl	8002c8c <_ZN11ArduinoJson8V721HB226detail10StringNode13sizeForLengthEj>
 8002cc0:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d201      	bcs.n	8002cce <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e011      	b.n	8002cf2 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	4798      	blx	r3
 8002cda:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2201      	movs	r2, #1
 8002cee:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  }
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:
    else
      allocator->deallocate(node);
    return newNode;
  }

  static void destroy(StringNode* node, Allocator* allocator) {
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	4798      	blx	r3
  }
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_ZN11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringC1EPKc>:
  ZeroTerminatedRamString(const char* str) : str_(str) {}
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>:
  bool isNull() const {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    return !str_;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
  }
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString4dataEv>:
  const char* data() const {
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
    return str_;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
  }
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <_ZN11ArduinoJson8V721HB226detail19StaticStringAdapterC1EPKc>:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ffca 	bl	8002d1a <_ZN11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringC1EPKc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_ZNK11ArduinoJson8V721HB226detail19StaticStringAdapter8isLinkedEv>:
  bool isLinked() const {
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    return true;
 8002d98:	2301      	movs	r3, #1
  }
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_ZN11ArduinoJson8V721HB226detail13StringAdapterIPKcvE5adaptES4_>:
  static AdaptedString adapt(const char* p) {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ffdc 	bl	8002d72 <_ZN11ArduinoJson8V721HB226detail19StaticStringAdapterC1EPKc>
 8002dba:	68fb      	ldr	r3, [r7, #12]
  }
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>:
  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>:
  bool isNull() const {
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
    return !str_;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
  }
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>:
  size_t size() const {
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    return size_;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
  }
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4dataEv>:

  const char* data() const {
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    return str_;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
  }
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_ZN11ArduinoJson8V721HB2210JsonStringC1Ev>:
  JsonString() : data_(0), size_(0), ownership_(Linked) {}
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	721a      	strb	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_ZNK11ArduinoJson8V721HB2210JsonString8isLinkedEv>:
  bool isLinked() const {
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7a1b      	ldrb	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
  }
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <_ZN11ArduinoJson8V721HB226detail17JsonStringAdapterC1ERKNS0_10JsonStringE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class JsonStringAdapter : public SizedRamString {
 public:
  JsonStringAdapter(const JsonString& s)
 8002e86:	b5b0      	push	{r4, r5, r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
      : SizedRamString(s.c_str(), s.size()), linked_(s.isLinked()) {}
 8002e90:	687c      	ldr	r4, [r7, #4]
 8002e92:	6838      	ldr	r0, [r7, #0]
 8002e94:	f7fe fc7c 	bl	8001790 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 8002e98:	4605      	mov	r5, r0
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f7fe fc84 	bl	80017a8 <_ZNK11ArduinoJson8V721HB2210JsonString4sizeEv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff ff8c 	bl	8002dc4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	f7ff ffd9 	bl	8002e64 <_ZNK11ArduinoJson8V721HB2210JsonString8isLinkedEv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	721a      	strb	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}

08002ec4 <_ZNK11ArduinoJson8V721HB226detail17JsonStringAdapter8isLinkedEv>:

  bool isLinked() const {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    return linked_;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7a1b      	ldrb	r3, [r3, #8]
  }
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_ZN11ArduinoJson8V721HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:

template <>
struct StringAdapter<JsonString> {
  using AdaptedString = JsonStringAdapter;

  static AdaptedString adapt(const JsonString& s) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    return AdaptedString(s);
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffcc 	bl	8002e86 <_ZN11ArduinoJson8V721HB226detail17JsonStringAdapterC1ERKNS0_10JsonStringE>
  }
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	601a      	str	r2, [r3, #0]
  }
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	e029      	b.n	8002f86 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3308      	adds	r3, #8
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d11f      	bne.n	8002f7c <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	889b      	ldrh	r3, [r3, #4]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	809a      	strh	r2, [r3, #4]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e003      	b.n	8002f72 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	6938      	ldr	r0, [r7, #16]
 8002f76:	f7ff fec0 	bl	8002cfa <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002f7a:	e008      	b.n	8002f8e <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1d2      	bne.n	8002f32 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 8002f8c:	e000      	b.n	8002f90 <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8002f8e:	bf00      	nop
    }
  }
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002faa:	809a      	strh	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>:
  bool done() const {
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_ZNK11ArduinoJson8V721HB226detail18CollectionIteratorneERKS2_>:
  bool operator!=(const CollectionIterator& other) const {
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
  }
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>:
  VariantData* operator->() {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    return data();
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f805 	bl	800301c <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 8003012:	4603      	mov	r3, r0
  }
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>:
  VariantData* data() {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
  }
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>:
  const VariantData* data() const {
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(slot_);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
  }
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZN11ArduinoJson8V721HB226detail14CollectionDatanwEjPv>:
  static void* operator new(size_t, void* p) noexcept {
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    return p;
 8003056:	683b      	ldr	r3, [r7, #0]
  }
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPS2_PNS1_15ResourceManagerE>:
  static void clear(CollectionData* collection, ResourceManager* resources) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
    if (!collection)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPS2_PNS1_15ResourceManagerE+0x1a>
    collection->clear(resources);
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 feda 	bl	8003e30 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>
 800307c:	e000      	b.n	8003080 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPS2_PNS1_15ResourceManagerE+0x1c>
      return;
 800307e:	bf00      	nop
  }
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZN11ArduinoJson8V721HB226detail19collectionToVariantEPKNS1_14CollectionDataE>:
 private:
  Slot<VariantData> getPreviousSlot(VariantData*, const ResourceManager*) const;
};

inline const VariantData* collectionToVariant(
    const CollectionData* collection) {
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  const void* data = collection;  // prevent warning cast-align
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<const VariantData*>(data);
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_ZN11ArduinoJson8V721HB226detail19collectionToVariantEPNS1_14CollectionDataE>:

inline VariantData* collectionToVariant(CollectionData* collection) {
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 80030ac:	68fb      	ldr	r3, [r7, #12]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_ZN11ArduinoJson8V721HB226detail10ObjectData6removeENS1_18CollectionIteratorEPNS1_15ResourceManagerE>:
    if (!obj)
      return;
    obj->removeMember(key, resources);
  }

  void remove(iterator it, ResourceManager* resources) {
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	1d38      	adds	r0, r7, #4
 80030c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80030c8:	603b      	str	r3, [r7, #0]
    CollectionData::removePair(it, resources);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1d3a      	adds	r2, r7, #4
 80030d0:	ca06      	ldmia	r2, {r1, r2}
 80030d2:	f000 ff71 	bl	8003fb8 <_ZN11ArduinoJson8V721HB226detail14CollectionData10removePairENS1_18CollectionIteratorEPNS1_15ResourceManagerE>
  }
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_ZN11ArduinoJson8V721HB226detail11VariantDatanwEjPv>:
  static void* operator new(size_t, void* p) noexcept {
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
    return p;
 80030e8:	683b      	ldr	r3, [r7, #0]
  }
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>:
  void setNext(SlotId slot) {
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	887a      	ldrh	r2, [r7, #2]
 8003106:	80da      	strh	r2, [r3, #6]
  }
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_ZN11ArduinoJson8V721HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f86c 	bl	80031fa <_ZNK11ArduinoJson8V721HB226detail11VariantData7isArrayEv>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <_ZN11ArduinoJson8V721HB226detail11VariantData7asArrayEv+0x18>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	e000      	b.n	800312e <_ZN11ArduinoJson8V721HB226detail11VariantData7asArrayEv+0x1a>
 800312c:	2300      	movs	r3, #0
  }
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asArrayEv>:

  const ArrayData* asArray() const {
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ffe8 	bl	8003114 <_ZN11ArduinoJson8V721HB226detail11VariantData7asArrayEv>
 8003144:	4603      	mov	r3, r0
  }
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv>:

  CollectionData* asCollection() {
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f860 	bl	800321c <_ZNK11ArduinoJson8V721HB226detail11VariantData12isCollectionEv>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv+0x18>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	e000      	b.n	8003168 <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv+0x1a>
 8003166:	2300      	movs	r3, #0
  }
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f881 	bl	8003280 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isObjectEv>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv+0x18>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	e000      	b.n	800318a <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv+0x1a>
 8003188:	2300      	movs	r3, #0
  }
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffe8 	bl	8003170 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 80031a0:	4603      	mov	r3, r0
  }
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
    switch (type_) {
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	791b      	ldrb	r3, [r3, #4]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d002      	beq.n	80031c2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x18>
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d008      	beq.n	80031d2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x28>
 80031c0:	e014      	b.n	80031ec <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x42>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, JsonString::Linked);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe faac 	bl	8001728 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 80031d0:	e00f      	b.n	80031f2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x48>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length, JsonString::Copied);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	88db      	ldrh	r3, [r3, #6]
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fabc 	bl	8001762 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 80031ea:	e002      	b.n	80031f2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv+0x48>
      default:
        return JsonString();
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fe25 	bl	8002e3c <_ZN11ArduinoJson8V721HB2210JsonStringC1Ev>
    }
  }
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZNK11ArduinoJson8V721HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
  }
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_ZNK11ArduinoJson8V721HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	791b      	ldrb	r3, [r3, #4]
 8003228:	2160      	movs	r1, #96	@ 0x60
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fad4 	bl	80017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003230:	4603      	mov	r3, r0
  }
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>:
      default:
        return false;
    }
  }

  bool isNull() const {
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	791b      	ldrb	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
  }
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_ZN11ArduinoJson8V721HB226detail11VariantData6isNullEPKS2_>:

  static bool isNull(const VariantData* var) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    if (!var)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <_ZN11ArduinoJson8V721HB226detail11VariantData6isNullEPKS2_+0x12>
      return true;
 800326a:	2301      	movs	r3, #1
 800326c:	e004      	b.n	8003278 <_ZN11ArduinoJson8V721HB226detail11VariantData6isNullEPKS2_+0x1c>
    return var->isNull();
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffe3 	bl	800323a <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>
 8003274:	4603      	mov	r3, r0
 8003276:	bf00      	nop
  }
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isObjectEv>:

  bool isObject() const {
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	2b20      	cmp	r3, #32
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
  }
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv>:

  bool isString() const {
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	791b      	ldrb	r3, [r3, #4]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d101      	bne.n	80032be <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x1c>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv+0x1e>
 80032be:	2300      	movs	r3, #0
  }
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <_ZN11ArduinoJson8V721HB226detail11VariantData10setBooleanEb>:

  void reset() {  // TODO: remove
    type_ = VariantType::Null;
  }

  void setBoolean(bool value) {
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2206      	movs	r2, #6
 80032dc:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	701a      	strb	r2, [r3, #0]
  }
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringEPNS1_10StringNodeE>:

  template <typename T>
  enable_if_t<is_unsigned<T>::value, bool> setInteger(
      T value, ResourceManager* resources);

  void setRawString(StringNode* s) {
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::RawString;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2203      	movs	r2, #3
 80032fe:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	601a      	str	r2, [r3, #0]
  }
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <_ZN11ArduinoJson8V721HB226detail11VariantData15setLinkedStringEPKc>:
      return;
    var->clear(resources);
    var->setString(value, resources);
  }

  void setLinkedString(const char* s) {
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	601a      	str	r2, [r3, #0]
  }
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_ZN11ArduinoJson8V721HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:

  void setOwnedString(StringNode* s) {
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2205      	movs	r2, #5
 8003342:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	601a      	str	r2, [r3, #0]
  }
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZN11ArduinoJson8V721HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800336c:	805a      	strh	r2, [r3, #2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_ZN11ArduinoJson8V721HB226detail9ArrayDataC1Ev>:

#include <Json/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ffe5 	bl	8003356 <_ZN11ArduinoJson8V721HB226detail14CollectionDataC1Ev>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2240      	movs	r2, #64	@ 0x40
 80033a2:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4619      	mov	r1, r3
 80033a8:	2004      	movs	r0, #4
 80033aa:	f7ff fe4f 	bl	800304c <_ZN11ArduinoJson8V721HB226detail14CollectionDatanwEjPv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEv+0x2c>
 80033b4:	2200      	movs	r2, #0
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	2200      	movs	r2, #0
 80033ba:	805a      	strh	r2, [r3, #2]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffdd 	bl	800337c <_ZN11ArduinoJson8V721HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 80033c2:	687b      	ldr	r3, [r7, #4]
  }
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEPS2_PNS1_15ResourceManagerE>:

  static ArrayData* toArray(VariantData* var, ResourceManager* resources) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
    if (!var)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEPS2_PNS1_15ResourceManagerE+0x14>
      return 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	e008      	b.n	80033f2 <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEPS2_PNS1_15ResourceManagerE+0x26>
    var->clear(resources);
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 f8b7 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return &var->toArray();
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ffd4 	bl	8003396 <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEv>
 80033ee:	4603      	mov	r3, r0
 80033f0:	bf00      	nop
  }
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZN11ArduinoJson8V721HB226detail10ObjectDataC1Ev>:
class ObjectData : public CollectionData {
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ffa6 	bl	8003356 <_ZN11ArduinoJson8V721HB226detail14CollectionDataC1Ev>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>:

  ObjectData& toObject() {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	2004      	movs	r0, #4
 8003428:	f7ff fe10 	bl	800304c <_ZN11ArduinoJson8V721HB226detail14CollectionDatanwEjPv>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv+0x2c>
 8003432:	2200      	movs	r2, #0
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	805a      	strh	r2, [r3, #2]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ffdd 	bl	80033fa <_ZN11ArduinoJson8V721HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8003440:	687b      	ldr	r3, [r7, #4]
  }
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEPS2_PNS1_15ResourceManagerE>:

  static ObjectData* toObject(VariantData* var, ResourceManager* resources) {
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
    if (!var)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEPS2_PNS1_15ResourceManagerE+0x14>
      return 0;
 800345a:	2300      	movs	r3, #0
 800345c:	e008      	b.n	8003470 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEPS2_PNS1_15ResourceManagerE+0x26>
    var->clear(resources);
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 f878 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return &var->toObject();
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffd4 	bl	8003414 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>
 800346c:	4603      	mov	r3, r0
 800346e:	bf00      	nop
  }
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPS2_PNS1_15ResourceManagerE>:
  }

  // Release the resources used by this variant and set it to null.
  void clear(ResourceManager* resources);

  static void clear(VariantData* var, ResourceManager* resources) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
    if (!var)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPS2_PNS1_15ResourceManagerE+0x1a>
      return;
    var->clear(resources);
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f863 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
 8003490:	e000      	b.n	8003494 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPS2_PNS1_15ResourceManagerE+0x1c>
      return;
 8003492:	bf00      	nop
  }
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>:

  size_t size() const {
    return variantPools_.size() + stringPool_.size();
  }

  bool overflowed() const {
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
    return overflowed_;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
  }
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_ZN11ArduinoJson8V721HB226detail15ResourceManager17dereferenceStringEPKc>:

  void destroyString(StringNode* node) {
    StringNode::destroy(node, allocator_);
  }

  void dereferenceString(const char* s) {
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0008 	add.w	r0, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	f7ff fd26 	bl	8002f1a <_ZN11ArduinoJson8V721HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1Ev>:
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst6isNullEv>:
  bool isNull() const {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    return detail::VariantData::isNull(data_);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fea9 	bl	800325c <_ZN11ArduinoJson8V721HB226detail11VariantData6isNullEPKS2_>
 800350a:	4603      	mov	r3, r0
  }
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZNK11ArduinoJson8V721HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
    return resources_;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
  }
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZNK11ArduinoJson8V721HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    return data_;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
  }
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_ZNK11ArduinoJson8V721HB2211JsonVariant15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
    return data_;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
  }
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE6toJsonES2_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<JsonVariantConst> : private detail::VariantAttorney {
  static void toJson(JsonVariantConst src, JsonVariant dst) {
 8003582:	b590      	push	{r4, r7, lr}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	f107 0408 	add.w	r4, r7, #8
 800358c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003590:	4639      	mov	r1, r7
 8003592:	e881 000c 	stmia.w	r1, {r2, r3}
    copyVariant(dst, src);
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	cb0c      	ldmia	r3, {r2, r3}
 800359c:	4639      	mov	r1, r7
 800359e:	c903      	ldmia	r1, {r0, r1}
 80035a0:	f000 ffaf 	bl	8004502 <_ZN11ArduinoJson8V721HB226detail11copyVariantENS0_11JsonVariantENS0_16JsonVariantConstE>
  }
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}

080035ac <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>:

  static JsonVariantConst fromJson(JsonVariantConst src) {
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	e883 0006 	stmia.w	r3, {r1, r2}
    return JsonVariantConst(getData(src), getResourceManager(src));
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fb71 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80035c2:	4604      	mov	r4, r0
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fb78 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	4621      	mov	r1, r4
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7fe f982 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorC1Ev>:

class JsonArrayConstIterator {
  friend class JsonArray;

 public:
  JsonArrayConstIterator() {}
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fcd3 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>:
  explicit JsonArrayConstIterator(detail::ArrayData::iterator iterator,
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	1d38      	adds	r0, r7, #4
 8003604:	e880 0006 	stmia.w	r0, {r1, r2}
 8003608:	603b      	str	r3, [r7, #0]
                                  const detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003614:	e882 0003 	stmia.w	r2, {r0, r1}
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_ZNK11ArduinoJson8V721HB2222JsonArrayConstIteratordeEv>:

  JsonVariantConst operator*() const {
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
    return JsonVariantConst(iterator_.data(), resources_);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fcfb 	bl	8003034 <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 800363e:	4601      	mov	r1, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	461a      	mov	r2, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe f948 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNK11ArduinoJson8V721HB2222JsonArrayConstIteratorneERKS1_>:

  bool operator==(const JsonArrayConstIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayConstIterator& other) const {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fcb9 	bl	8002fdc <_ZNK11ArduinoJson8V721HB226detail18CollectionIteratorneERKS2_>
 800366a:	4603      	mov	r3, r0
  }
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorppEv>:

  JsonArrayConstIterator& operator++() {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fb0c 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 800368a:	687b      	ldr	r3, [r7, #4]
  }
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ZNK11ArduinoJson8V721HB2214JsonArrayConst5beginEv>:
 public:
  using iterator = JsonArrayConstIterator;

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarrayconst/begin/
  iterator begin() const {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    if (!data_)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <_ZNK11ArduinoJson8V721HB2214JsonArrayConst5beginEv+0x1a>
      return iterator();
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff9a 	bl	80035e0 <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorC1Ev>
 80036ac:	e011      	b.n	80036d2 <_ZNK11ArduinoJson8V721HB2214JsonArrayConst5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4619      	mov	r1, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fb13 	bl	8003ce8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	ca06      	ldmia	r2, {r1, r2}
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff94 	bl	80035fa <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>
  }
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZNK11ArduinoJson8V721HB2214JsonArrayConst3endEv>:

  // Returns an iterator to the element following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarrayconst/end/
  iterator end() const {
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
    return iterator();
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff7b 	bl	80035e0 <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorC1Ev>
  }
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>:

  // Creates an unbound reference.
  JsonArrayConst() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonArrayConst(const detail::ArrayData* data,
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
                 const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZNK11ArduinoJson8V721HB2214JsonArrayConst6isNullEv>:
    return JsonVariantConst(getData(), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarrayconst/isnull/
  bool isNull() const {
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
  }
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <_ZN11ArduinoJson8V721HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE>:
    return iterator();
  }

  // Copies an array.
  // https://arduinojson.org/v7/api/jsonarray/set/
  bool set(JsonArrayConst src) const {
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	e883 0006 	stmia.w	r3, {r1, r2}
    if (!data_)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x1a>
      return false;
 8003776:	2300      	movs	r3, #0
 8003778:	e038      	b.n	80037ec <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x8c>

    clear();
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f83a 	bl	80037f4 <_ZNK11ArduinoJson8V721HB229JsonArray5clearEv>
    for (auto element : src) {
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
 8003784:	f107 0320 	add.w	r3, r7, #32
 8003788:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff82 	bl	8003694 <_ZNK11ArduinoJson8V721HB2214JsonArrayConst5beginEv>
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff9f 	bl	80036da <_ZNK11ArduinoJson8V721HB2214JsonArrayConst3endEv>
 800379c:	e01a      	b.n	80037d4 <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x74>
 800379e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037a2:	f107 0220 	add.w	r2, r7, #32
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff3f 	bl	800362c <_ZNK11ArduinoJson8V721HB2222JsonArrayConstIteratordeEv>
      if (!add(element))
 80037ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f001 fa1b 	bl	8004bf0 <_ZNK11ArduinoJson8V721HB229JsonArray3addINS0_16JsonVariantConstEEEbRKT_>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f083 0301 	eor.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x6a>
        return false;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e010      	b.n	80037ec <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x8c>
    for (auto element : src) {
 80037ca:	f107 0320 	add.w	r3, r7, #32
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff50 	bl	8003674 <_ZN11ArduinoJson8V721HB2222JsonArrayConstIteratorppEv>
 80037d4:	f107 0214 	add.w	r2, r7, #20
 80037d8:	f107 0320 	add.w	r3, r7, #32
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff38 	bl	8003654 <_ZNK11ArduinoJson8V721HB2222JsonArrayConstIteratorneERKS1_>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE+0x3e>
    }

    return true;
 80037ea:	2301      	movs	r3, #1
  }
 80037ec:	4618      	mov	r0, r3
 80037ee:	3738      	adds	r7, #56	@ 0x38
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZNK11ArduinoJson8V721HB229JsonArray5clearEv>:
      remove(variant.template as<size_t>());
  }

  // Removes all the elements of the array.
  // https://arduinojson.org/v7/api/jsonarray/clear/
  void clear() const {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    detail::ArrayData::clear(data_, resources_);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f7ff fc2c 	bl	8003064 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPS2_PNS1_15ResourceManagerE>
  }
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZN11ArduinoJson8V721HB2213JsonPairConstC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>:

// A read-only key-value pair.
// https://arduinojson.org/v7/api/jsonobjectconst/begin_end/
class JsonPairConst {
 public:
  JsonPairConst(detail::ObjectData::iterator iterator,
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	@ 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	1d38      	adds	r0, r7, #4
 800381e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003822:	603b      	str	r3, [r7, #0]
                const detail::ResourceManager* resources) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb08 	bl	8002e3c <_ZN11ArduinoJson8V721HB2210JsonStringC1Ev>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	330c      	adds	r3, #12
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe50 	bl	80034d6 <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1Ev>
    if (!iterator.done()) {
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fbbe 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 800383e:	4603      	mov	r3, r0
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02b      	beq.n	80038a2 <_ZN11ArduinoJson8V721HB2213JsonPairConstC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE+0x8e>
      key_ = iterator->asString();
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fbd9 	bl	8003004 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>
 8003852:	4602      	mov	r2, r0
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fca5 	bl	80031aa <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	461a      	mov	r2, r3
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	cb03      	ldmia	r3!, {r0, r1}
 800386a:	6010      	str	r0, [r2, #0]
 800386c:	6051      	str	r1, [r2, #4]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	7213      	strb	r3, [r2, #8]
      iterator.next(resources);
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fa13 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
      value_ = JsonVariantConst(iterator.data(), resources);
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fbcc 	bl	800301c <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 8003884:	4601      	mov	r1, r0
 8003886:	f107 0320 	add.w	r3, r7, #32
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe f825 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	330c      	adds	r3, #12
 8003896:	f107 0220 	add.w	r2, r7, #32
 800389a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800389e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
  }
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	@ 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZNK11ArduinoJson8V721HB2213JsonPairConst3keyEv>:

  // Returns the key.
  JsonString key() const {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
    return key_;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80038bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_ZNK11ArduinoJson8V721HB2213JsonPairConst5valueEv>:

  // Returns the value.
  JsonVariantConst value() const {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
    return value_;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038e0:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorC1Ev>:

class JsonObjectConstIterator {
  friend class JsonObject;

 public:
  JsonObjectConstIterator() {}
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fb4b 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>:

  explicit JsonObjectConstIterator(detail::ObjectData::iterator iterator,
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	1d38      	adds	r0, r7, #4
 8003914:	e880 0006 	stmia.w	r0, {r1, r2}
 8003918:	603b      	str	r3, [r7, #0]
                                   const detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	461a      	mov	r2, r3
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003924:	e882 0003 	stmia.w	r2, {r0, r1}
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZNK11ArduinoJson8V721HB2223JsonObjectConstIteratordeEv>:

  JsonPairConst operator*() const {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    return JsonPairConst(iterator_, resources_);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	ca06      	ldmia	r2, {r1, r2}
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff60 	bl	8003814 <_ZN11ArduinoJson8V721HB2213JsonPairConstC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>
  }
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_ZNK11ArduinoJson8V721HB2223JsonObjectConstIteratorneERKS1_>:

  bool operator==(const JsonObjectConstIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonObjectConstIterator& other) const {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb35 	bl	8002fdc <_ZNK11ArduinoJson8V721HB226detail18CollectionIteratorneERKS2_>
 8003972:	4603      	mov	r3, r0
  }
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorppEv>:

  JsonObjectConstIterator& operator++() {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);  // key
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f000 f988 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    iterator_.next(resources_);  // value
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f981 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 80039a0:	687b      	ldr	r3, [r7, #4]
  }
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>:

  // Creates an unbound reference.
  JsonObjectConst() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonObjectConst(const detail::ObjectData* data,
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
                  const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_ZNK11ArduinoJson8V721HB2215JsonObjectConstcvNS0_16JsonVariantConstEEv>:

  operator JsonVariantConst() const {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    return JsonVariantConst(getData(), resources_);
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f000 f83a 	bl	8003a54 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst7getDataEv>
 80039e0:	4601      	mov	r1, r0
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd ff77 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst5beginEv>:
    return data_ ? data_->size(resources_) : 0;
  }

  // Returns an iterator to the first key-value pair of the object.
  // https://arduinojson.org/v7/api/jsonobjectconst/begin/
  iterator begin() const {
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
    if (!data_)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst5beginEv+0x1a>
      return iterator();
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff71 	bl	80038f0 <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorC1Ev>
 8003a0e:	e011      	b.n	8003a34 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f962 	bl	8003ce8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f107 0208 	add.w	r2, r7, #8
 8003a2c:	ca06      	ldmia	r2, {r1, r2}
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff6b 	bl	800390a <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorC1ENS0_6detail18CollectionIteratorEPKNS2_15ResourceManagerE>
  }
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZNK11ArduinoJson8V721HB2215JsonObjectConst3endEv>:

  // Returns an iterator following the last key-value pair of the object.
  // https://arduinojson.org/v7/api/jsonobjectconst/end/
  iterator end() const {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    return iterator();
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff52 	bl	80038f0 <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorC1Ev>
  }
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  const detail::VariantData* getData() const {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fb10 	bl	8003086 <_ZN11ArduinoJson8V721HB226detail19collectionToVariantEPKNS1_14CollectionDataE>
 8003a66:	4603      	mov	r3, r0
  }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZN11ArduinoJson8V721HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_ZNK11ArduinoJson8V721HB2210JsonObject5clearEv>:
    return iterator();
  }

  // Removes all the members of the object.
  // https://arduinojson.org/v7/api/jsonobject/clear/
  void clear() const {
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
    detail::ObjectData::clear(data_, resources_);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f7ff fadb 	bl	8003064 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPS2_PNS1_15ResourceManagerE>
  }
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE>:

  // Copies an object.
  // https://arduinojson.org/v7/api/jsonobject/set/
  bool set(JsonObjectConst src) {
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b09c      	sub	sp, #112	@ 0x70
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	e883 0006 	stmia.w	r3, {r1, r2}
    if (!data_ || !src.data_)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0x1c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0x20>
      return false;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e052      	b.n	8003b7c <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0xc6>

    clear();
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7ff ffdd 	bl	8003a96 <_ZNK11ArduinoJson8V721HB2210JsonObject5clearEv>
    for (auto kvp : src) {
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ae0:	f107 0320 	add.w	r3, r7, #32
 8003ae4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ff85 	bl	80039f6 <_ZNK11ArduinoJson8V721HB2215JsonObjectConst5beginEv>
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ffa2 	bl	8003a3c <_ZNK11ArduinoJson8V721HB2215JsonObjectConst3endEv>
 8003af8:	e034      	b.n	8003b64 <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0xae>
 8003afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003afe:	f107 0220 	add.w	r2, r7, #32
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff19 	bl	800393c <_ZNK11ArduinoJson8V721HB2223JsonObjectConstIteratordeEv>
      if (!operator[](kvp.key()).set(kvp.value()))
 8003b0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003b0e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fec9 	bl	80038ac <_ZNK11ArduinoJson8V721HB2213JsonPairConst3keyEv>
 8003b1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b1e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f875 	bl	8004c14 <_ZNK11ArduinoJson8V721HB2210JsonObjectixINS0_10JsonStringEEENS0_6detail9enable_ifIXsrNS4_8IsStringIT_vEE5valueENS4_11MemberProxyIS1_S7_EEE4typeERKS7_>
 8003b2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b2e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fec9 	bl	80038cc <_ZNK11ArduinoJson8V721HB2213JsonPairConst5valueEv>
 8003b3a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8003b3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f884 	bl	8004c52 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE3setINS0_16JsonVariantConstEEEbRKT_>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0xa4>
        return false;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e010      	b.n	8003b7c <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0xc6>
    for (auto kvp : src) {
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff0c 	bl	800397c <_ZN11ArduinoJson8V721HB2223JsonObjectConstIteratorppEv>
 8003b64:	f107 0214 	add.w	r2, r7, #20
 8003b68:	f107 0320 	add.w	r3, r7, #32
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fef4 	bl	800395c <_ZNK11ArduinoJson8V721HB2223JsonObjectConstIteratorneERKS1_>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1bf      	bne.n	8003afa <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE+0x44>
    }

    return true;
 8003b7a:	2301      	movs	r3, #1
  }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3770      	adds	r7, #112	@ 0x70
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZNK11ArduinoJson8V721HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
    return resources_;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
  }
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_ZNK11ArduinoJson8V721HB2210JsonObject15getOrCreateDataEv>:

  detail::VariantData* getData() const {
    return detail::collectionToVariant(data_);
  }

  detail::VariantData* getOrCreateData() const {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fa79 	bl	80030a0 <_ZN11ArduinoJson8V721HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003bae:	4603      	mov	r3, r0
  }
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZN11ArduinoJson8V721HB2212JsonDocument18getResourceManagerEv>:

  detail::ResourceManager* getResourceManager() {
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    return &resources_;
 8003bc0:	687b      	ldr	r3, [r7, #4]
  }
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN11ArduinoJson8V721HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
    return &data_;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3338      	adds	r3, #56	@ 0x38
  }
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZN11ArduinoJson8V721HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
    return &data_;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3338      	adds	r3, #56	@ 0x38
  }
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <_ZN11ArduinoJson8V721HB2213convertToJsonERKNS0_12JsonDocumentENS0_11JsonVariantE>:

  detail::ResourceManager resources_;
  detail::VariantData data_;
};

inline void convertToJson(const JsonDocument& src, JsonVariant dst) {
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	e883 0006 	stmia.w	r3, {r1, r2}
  dst.set(src.as<JsonVariantConst>());
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f82b 	bl	8004c6e <_ZNK11ArduinoJson8V721HB2212JsonDocument2asINS0_16JsonVariantConstEEET_v>
 8003c18:	f107 0210 	add.w	r2, r7, #16
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f83b 	bl	8004c9c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_16JsonVariantConstEEEbRKT_>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>:
    return ComparerBase::visit(lhs);
  }
};

struct NullComparer : ComparerBase {
  CompareResult visit(nullptr_t) {
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
    return COMPARE_RESULT_EQUAL;
 8003c38:	2301      	movs	r3, #1
  }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZN11ArduinoJson8V721HB226detail8ComparerIDnvEC1EDn>:
  using ComparerBase::visit;
};

template <>
struct Comparer<nullptr_t, void> : NullComparer {
  explicit Comparer(nullptr_t) : NullComparer() {}
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <Json/Variant/VariantCompare.hpp>
#include <Json/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fddd 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	e001      	b.n	8003c94 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	80da      	strh	r2, [r3, #6]
}
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	88db      	ldrh	r3, [r3, #6]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6838      	ldr	r0, [r7, #0]
 8003cb4:	f7fd fe70 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	88da      	ldrh	r2, [r3, #6]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fdb6 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	80da      	strh	r2, [r3, #6]
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fe4c 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003d00:	4601      	mov	r1, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ffa8 	bl	8003c5e <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_ZN11ArduinoJson8V721HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8003d16:	b590      	push	{r4, r7, lr}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	1d38      	adds	r0, r7, #4
 8003d20:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d24:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	885b      	ldrh	r3, [r3, #2]
 8003d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d019      	beq.n	8003d66 <_ZN11ArduinoJson8V721HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	885b      	ldrh	r3, [r3, #2]
 8003d36:	4619      	mov	r1, r3
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f7fd fe2d 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003d3e:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8003d40:	697c      	ldr	r4, [r7, #20]
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 ffd4 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff f9d1 	bl	80030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 ffcb 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8003d64:	e00f      	b.n	8003d86 <_ZN11ArduinoJson8V721HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ffc2 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 ffba 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	805a      	strh	r2, [r3, #2]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}

08003d8e <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8003d8e:	b082      	sub	sp, #8
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	1d38      	adds	r0, r7, #4
 8003d9a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ffb1 	bl	8004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8003da8:	4604      	mov	r4, r0
 8003daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 ff9f 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4619      	mov	r1, r3
 8003db8:	4620      	mov	r0, r4
 8003dba:	f7ff f99c 	bl	80030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	885b      	ldrh	r3, [r3, #2]
 8003dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01a      	beq.n	8003e00 <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	885b      	ldrh	r3, [r3, #2]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003dd2:	f7fd fde1 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003dd6:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003dd8:	697c      	ldr	r4, [r7, #20]
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 ff88 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4619      	mov	r1, r3
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff f985 	bl	80030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8003dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 ff7e 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8003dfe:	e010      	b.n	8003e22 <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 ff75 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8003e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff6c 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	805a      	strh	r2, [r3, #2]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	4770      	bx	lr

08003e30 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8003e40:	e01b      	b.n	8003e7a <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8003e42:	8afb      	ldrh	r3, [r7, #22]
 8003e44:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8003e46:	8afb      	ldrh	r3, [r7, #22]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6838      	ldr	r0, [r7, #0]
 8003e4c:	f7fd fda4 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003e50:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8003e52:	6938      	ldr	r0, [r7, #16]
 8003e54:	f7fd fcf6 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003e5c:	683c      	ldr	r4, [r7, #0]
 8003e5e:	8aba      	ldrh	r2, [r7, #20]
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ff5b 	bl	8004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 f91b 	bl	80040b0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d1de      	bne.n	8003e42 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e8a:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e92:	805a      	strh	r2, [r3, #2]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}

08003e9c <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE>:

inline Slot<VariantData> CollectionData::getPreviousSlot(
    VariantData* target, const ResourceManager* resources) const {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  auto prev = Slot<VariantData>();
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 ff4d 	bl	8004d4a <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1Ev>
  auto currentId = head_;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	83fb      	strh	r3, [r7, #30]
  while (currentId != NULL_SLOT) {
 8003eb6:	e01d      	b.n	8003ef4 <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE+0x58>
    auto currentSlot = resources->getVariant(currentId);
 8003eb8:	8bfb      	ldrh	r3, [r7, #30]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6838      	ldr	r0, [r7, #0]
 8003ebe:	f7fd fd6b 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003ec2:	61b8      	str	r0, [r7, #24]
    if (currentSlot == target)
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d019      	beq.n	8003f00 <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE+0x64>
      break;
    prev = Slot<VariantData>(currentSlot, currentId);
 8003ecc:	8bfa      	ldrh	r2, [r7, #30]
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 ff24 	bl	8004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f107 0210 	add.w	r2, r7, #16
 8003ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee4:	6018      	str	r0, [r3, #0]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	8019      	strh	r1, [r3, #0]
    currentId = currentSlot->next();
 8003eea:	69b8      	ldr	r0, [r7, #24]
 8003eec:	f7fd fcaa 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	83fb      	strh	r3, [r7, #30]
  while (currentId != NULL_SLOT) {
 8003ef4:	8bfb      	ldrh	r3, [r7, #30]
 8003ef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d1dc      	bne.n	8003eb8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE+0x1c>
  }
  return prev;
 8003efe:	e000      	b.n	8003f02 <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE+0x66>
      break;
 8003f00:	bf00      	nop
  return prev;
 8003f02:	bf00      	nop
}
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE>:

inline void CollectionData::removeOne(iterator it, ResourceManager* resources) {
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b08b      	sub	sp, #44	@ 0x2c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	1d38      	adds	r0, r7, #4
 8003f16:	e880 0006 	stmia.w	r0, {r1, r2}
 8003f1a:	603b      	str	r3, [r7, #0]
  if (it.done())
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f84b 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d142      	bne.n	8003fb0 <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0xa4>
    return;
  auto curr = it.slot_;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  auto prev = getPreviousSlot(curr, resources);
 8003f2e:	f107 0010 	add.w	r0, r7, #16
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f7ff ffb0 	bl	8003e9c <_ZNK11ArduinoJson8V721HB226detail14CollectionData15getPreviousSlotEPNS1_11VariantDataEPKNS1_15ResourceManagerE>
  auto next = curr->next();
 8003f3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f3e:	f7fd fc81 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (prev)
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 feb4 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0x62>
    prev->setNext(next);
 8003f56:	f107 0310 	add.w	r3, r7, #16
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fed5 	bl	8004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f7ff f8c5 	bl	80030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>
 8003f6c:	e002      	b.n	8003f74 <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0x68>
  else
    head_ = next;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003f72:	801a      	strh	r2, [r3, #0]
  if (next == NULL_SLOT)
 8003f74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d108      	bne.n	8003f90 <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0x84>
    tail_ = prev.id();
 8003f7e:	f107 0310 	add.w	r3, r7, #16
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 feb5 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	805a      	strh	r2, [r3, #2]
  resources->freeVariant({it.slot_, it.currentId_});
 8003f90:	683c      	ldr	r4, [r7, #0]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	893a      	ldrh	r2, [r7, #8]
 8003f96:	f107 0318 	add.w	r3, r7, #24
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fec1 	bl	8004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003fa0:	f107 0318 	add.w	r3, r7, #24
 8003fa4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 f881 	bl	80040b0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
 8003fae:	e000      	b.n	8003fb2 <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0xa6>
    return;
 8003fb0:	bf00      	nop
}
 8003fb2:	372c      	adds	r7, #44	@ 0x2c
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd90      	pop	{r4, r7, pc}

08003fb8 <_ZN11ArduinoJson8V721HB226detail14CollectionData10removePairENS1_18CollectionIteratorEPNS1_15ResourceManagerE>:

inline void CollectionData::removePair(ObjectData::iterator it,
                                       ResourceManager* resources) {
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b08b      	sub	sp, #44	@ 0x2c
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	1d38      	adds	r0, r7, #4
 8003fc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8003fc6:	603b      	str	r3, [r7, #0]
  if (it.done())
 8003fc8:	1d3b      	adds	r3, r7, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fff5 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d128      	bne.n	8004028 <_ZN11ArduinoJson8V721HB226detail14CollectionData10removePairENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0x70>
    return;

  auto keySlot = it.slot_;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24

  auto valueId = it.nextId_;
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	847b      	strh	r3, [r7, #34]	@ 0x22
  auto valueSlot = resources->getVariant(valueId);
 8003fde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6838      	ldr	r0, [r7, #0]
 8003fe4:	f7fd fcd8 	bl	8001998 <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10getVariantEt>
 8003fe8:	61f8      	str	r0, [r7, #28]

  // remove value slot
  keySlot->setNext(valueSlot->next());
 8003fea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003fec:	69f8      	ldr	r0, [r7, #28]
 8003fee:	f7fd fc29 	bl	8001844 <_ZNK11ArduinoJson8V721HB226detail11VariantData4nextEv>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff f87d 	bl	80030f6 <_ZN11ArduinoJson8V721HB226detail11VariantData7setNextEt>
  resources->freeVariant({valueSlot, valueId});
 8003ffc:	683c      	ldr	r4, [r7, #0]
 8003ffe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fe8b 	bl	8004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004014:	4620      	mov	r0, r4
 8004016:	f000 f84b 	bl	80040b0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>

  // remove key slot
  removeOne(it, resources);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1d3a      	adds	r2, r7, #4
 800401e:	ca06      	ldmia	r2, {r1, r2}
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ff73 	bl	8003f0c <_ZN11ArduinoJson8V721HB226detail14CollectionData9removeOneENS1_18CollectionIteratorEPNS1_15ResourceManagerE>
 8004026:	e000      	b.n	800402a <_ZN11ArduinoJson8V721HB226detail14CollectionData10removePairENS1_18CollectionIteratorEPNS1_15ResourceManagerE+0x72>
    return;
 8004028:	bf00      	nop
}
 800402a:	372c      	adds	r7, #44	@ 0x2c
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}

08004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>:
inline Slot<VariantData> ResourceManager::allocVariant() {
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f103 010c 	add.w	r1, r3, #12
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	f107 0308 	add.w	r3, r7, #8
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe90 	bl	8004d6e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 800404e:	f107 0308 	add.w	r3, r7, #8
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fece 	bl	8004df4 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004058:	4603      	mov	r3, r0
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	711a      	strb	r2, [r3, #4]
    return {};
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fe6d 	bl	8004d4a <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8004070:	e01a      	b.n	80040a8 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x78>
  return {new (&p->variant) VariantData, p.id()};
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fecd 	bl	8004e16 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800407c:	4603      	mov	r3, r0
 800407e:	4619      	mov	r1, r3
 8004080:	2008      	movs	r0, #8
 8004082:	f7ff f82c 	bl	80030de <_ZN11ArduinoJson8V721HB226detail11VariantDatanwEjPv>
 8004086:	4604      	mov	r4, r0
 8004088:	2c00      	cmp	r4, #0
 800408a:	d002      	beq.n	8004092 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv+0x62>
 800408c:	4620      	mov	r0, r4
 800408e:	f7fd fbc5 	bl	800181c <_ZN11ArduinoJson8V721HB226detail11VariantDataC1Ev>
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fec9 	bl	8004e2e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	4621      	mov	r1, r4
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fe3d 	bl	8004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd90      	pop	{r4, r7, pc}

080040b0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:
inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fe22 	bl	8004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 80040c6:	4603      	mov	r3, r0
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fa43 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f103 040c 	add.w	r4, r3, #12
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fdfe 	bl	8004cda <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80040de:	4603      	mov	r3, r0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 feb0 	bl	8004e46 <_ZN11ArduinoJson8V721HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 80040e6:	4605      	mov	r5, r0
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fe01 	bl	8004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	f107 0310 	add.w	r3, r7, #16
 80040f8:	4629      	mov	r1, r5
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 feb0 	bl	8004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8004100:	f107 0310 	add.w	r3, r7, #16
 8004104:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004108:	4620      	mov	r0, r4
 800410a:	f000 febd 	bl	8004e88 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}

08004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>:
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8004116:	b590      	push	{r4, r7, lr}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f103 010c 	add.w	r1, r3, #12
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f107 0308 	add.w	r3, r7, #8
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fe1d 	bl	8004d6e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fe5b 	bl	8004df4 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800413e:	4603      	mov	r3, r0
 8004140:	f083 0301 	eor.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	711a      	strb	r2, [r3, #4]
    return {};
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 feb4 	bl	8004ebe <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8004156:	e011      	b.n	800417c <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv+0x66>
  return {&p->extension, p.id()};
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe5a 	bl	8004e16 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8004162:	4603      	mov	r3, r0
 8004164:	461c      	mov	r4, r3
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fe5f 	bl	8004e2e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4621      	mov	r1, r4
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 feb3 	bl	8004ee2 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bd90      	pop	{r4, r7, pc}

08004184 <_ZN11ArduinoJson8V721HB226detail15ResourceManager13freeExtensionEt>:
inline void ResourceManager::freeExtension(SlotId id) {
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fd fc11 	bl	80019bc <_ZNK11ArduinoJson8V721HB226detail15ResourceManager12getExtensionEt>
 800419a:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f103 040c 	add.w	r4, r3, #12
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	f107 030c 	add.w	r3, r7, #12
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fe58 	bl	8004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 fe65 	bl	8004e88 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}

080041c6 <_ZN11ArduinoJson8V721HB229ConverterIbvE6toJsonEbNS0_11JsonVariantE>:
  }
};

template <>
struct Converter<bool> : private detail::VariantAttorney {
  static bool toJson(bool src, JsonVariant dst) {
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	e883 0006 	stmia.w	r3, {r1, r2}
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
    auto data = getData(dst);
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fcfd 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80041de:	6178      	str	r0, [r7, #20]
    if (!data)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <_ZN11ArduinoJson8V721HB229ConverterIbvE6toJsonEbNS0_11JsonVariantE+0x24>
      return false;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e00e      	b.n	8004208 <_ZN11ArduinoJson8V721HB229ConverterIbvE6toJsonEbNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fe9d 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80041f2:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 80041f4:	6939      	ldr	r1, [r7, #16]
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f000 f9ad 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    data->setBoolean(src);
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	4619      	mov	r1, r3
 8004200:	6978      	ldr	r0, [r7, #20]
 8004202:	f7ff f863 	bl	80032cc <_ZN11ArduinoJson8V721HB226detail11VariantData10setBooleanEb>
    return true;
 8004206:	2301      	movs	r3, #1
  }
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 8004210:	b5b0      	push	{r4, r5, r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	e883 0006 	stmia.w	r3, {r1, r2}
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fcd9 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8004226:	4604      	mov	r4, r0
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fe8b 	bl	8004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800422e:	4605      	mov	r5, r0
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fe7a 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	4629      	mov	r1, r5
 800423e:	4620      	mov	r0, r4
 8004240:	f000 fe8c 	bl	8004f5c <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>
                                   getResourceManager(dst));
  }
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bdb0      	pop	{r4, r5, r7, pc}

0800424c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:

  static const char* fromJson(JsonVariantConst src) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	463b      	mov	r3, r7
 8004254:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8004258:	463b      	mov	r3, r7
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fd22 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8004260:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00c      	beq.n	8004282 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe ff9b 	bl	80031aa <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	4618      	mov	r0, r3
 800427a:	f7fd fa89 	bl	8001790 <_ZNK11ArduinoJson8V721HB2210JsonString5c_strEv>
 800427e:	4603      	mov	r3, r0
 8004280:	e000      	b.n	8004284 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8004282:	2300      	movs	r3, #0
  }
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:

  static bool checkJson(JsonVariantConst src) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	463b      	mov	r3, r7
 8004294:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8004298:	463b      	mov	r3, r7
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fd02 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80042a0:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7fe fffa 	bl	80032a2 <_ZNK11ArduinoJson8V721HB226detail11VariantData8isStringEv>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 80042b8:	2300      	movs	r3, #0
  }
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_ZN11ArduinoJson8V721HB229ConverterINS0_10JsonStringEvE6toJsonES2_NS0_11JsonVariantE>:
};

template <>
struct Converter<JsonString> : private detail::VariantAttorney {
  static void toJson(JsonString src, JsonVariant dst) {
 80042c2:	b082      	sub	sp, #8
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b08b      	sub	sp, #44	@ 0x2c
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	1d3c      	adds	r4, r7, #4
 80042cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
 80042d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fc7e 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80042dc:	4604      	mov	r4, r0
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	1d3a      	adds	r2, r7, #4
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe50 	bl	8004f8c <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
 80042ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fe1b 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80042f6:	4603      	mov	r3, r0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fe52 	bl	8004faa <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>
                                   getResourceManager(dst));
  }
 8004306:	bf00      	nop
 8004308:	3724      	adds	r7, #36	@ 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004310:	b002      	add	sp, #8
 8004312:	4770      	bx	lr

08004314 <_ZN11ArduinoJson8V721HB229ConverterIDnvE6toJsonEDnNS0_11JsonVariantE>:
  }
};

template <>
struct Converter<detail::nullptr_t> : private detail::VariantAttorney {
  static void toJson(detail::nullptr_t, JsonVariant dst) {
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	e883 0006 	stmia.w	r3, {r1, r2}
    detail::VariantData::clear(getData(dst), getResourceManager(dst));
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fc57 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800432a:	4604      	mov	r4, r0
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fdfc 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8004334:	4603      	mov	r3, r0
 8004336:	4619      	mov	r1, r3
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff f89d 	bl	8003478 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPS2_PNS1_15ResourceManagerE>
  }
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bd90      	pop	{r4, r7, pc}

08004346 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE6toJsonES2_NS0_11JsonVariantE>:

#endif

template <>
struct Converter<JsonArrayConst> : private detail::VariantAttorney {
  static void toJson(JsonArrayConst src, JsonVariant dst) {
 8004346:	b590      	push	{r4, r7, lr}
 8004348:	b089      	sub	sp, #36	@ 0x24
 800434a:	af00      	add	r7, sp, #0
 800434c:	f107 0408 	add.w	r4, r7, #8
 8004350:	e884 0003 	stmia.w	r4, {r0, r1}
 8004354:	4639      	mov	r1, r7
 8004356:	e881 000c 	stmia.w	r1, {r2, r3}
    if (src.isNull())
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff f9da 	bl	8003718 <_ZNK11ArduinoJson8V721HB2214JsonArrayConst6isNullEv>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE6toJsonES2_NS0_11JsonVariantE+0x38>
      dst.set(nullptr);
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	f107 0214 	add.w	r2, r7, #20
 8004372:	463b      	mov	r3, r7
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fe31 	bl	8004fde <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIDnEEbRKT_>
    else
      dst.to<JsonArray>().set(src);
  }
 800437c:	e00e      	b.n	800439c <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE6toJsonES2_NS0_11JsonVariantE+0x56>
      dst.to<JsonArray>().set(src);
 800437e:	f107 0318 	add.w	r3, r7, #24
 8004382:	463a      	mov	r2, r7
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fe37 	bl	8004ffa <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE2toINS0_9JsonArrayEEENS1_9enable_ifIXsrNS1_7is_sameIT_S6_EE5valueES6_E4typeEv>
 800438c:	f107 0018 	add.w	r0, r7, #24
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004398:	f7ff f9e2 	bl	8003760 <_ZNK11ArduinoJson8V721HB229JsonArray3setENS0_14JsonArrayConstE>
  }
 800439c:	bf00      	nop
 800439e:	3724      	adds	r7, #36	@ 0x24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}

080043a4 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE8fromJsonENS0_16JsonVariantConstE>:

  static JsonArrayConst fromJson(JsonVariantConst src) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fc75 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80043ba:	6178      	str	r0, [r7, #20]
    auto array = data ? data->asArray() : nullptr;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE8fromJsonENS0_16JsonVariantConstE+0x28>
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7fe feb7 	bl	8003136 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asArrayEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	e000      	b.n	80043ce <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
    return JsonArrayConst(array, getResourceManager(src));
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc72 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	6939      	ldr	r1, [r7, #16]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff f987 	bl	80036f2 <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>
  }
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE9checkJsonENS0_16JsonVariantConstE>:

  static bool checkJson(JsonVariantConst src) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	463b      	mov	r3, r7
 80043f4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80043f8:	463b      	mov	r3, r7
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fc52 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8004400:	60f8      	str	r0, [r7, #12]
    return data && data->isArray();
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7fe fef6 	bl	80031fa <_ZNK11ArduinoJson8V721HB226detail11VariantData7isArrayEv>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8004418:	2300      	movs	r3, #0
  }
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE6toJsonENS0_16JsonVariantConstENS0_11JsonVariantE>:
  }
};

template <>
struct Converter<JsonObjectConst> : private detail::VariantAttorney {
  static void toJson(JsonVariantConst src, JsonVariant dst) {
 8004422:	b590      	push	{r4, r7, lr}
 8004424:	b08b      	sub	sp, #44	@ 0x2c
 8004426:	af00      	add	r7, sp, #0
 8004428:	f107 0408 	add.w	r4, r7, #8
 800442c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004430:	4639      	mov	r1, r7
 8004432:	e881 000c 	stmia.w	r1, {r2, r3}
    if (src.isNull())
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff f85c 	bl	80034f8 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst6isNullEv>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE6toJsonENS0_16JsonVariantConstENS0_11JsonVariantE+0x38>
      dst.set(nullptr);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	f107 0214 	add.w	r2, r7, #20
 800444e:	463b      	mov	r3, r7
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fdc3 	bl	8004fde <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIDnEEbRKT_>
    else
      dst.to<JsonObject>().set(src);
  }
 8004458:	e016      	b.n	8004488 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE6toJsonENS0_16JsonVariantConstENS0_11JsonVariantE+0x66>
      dst.to<JsonObject>().set(src);
 800445a:	f107 0318 	add.w	r3, r7, #24
 800445e:	463a      	mov	r2, r7
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fde8 	bl	8005038 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE2toINS0_10JsonObjectEEENS1_9enable_ifIXsrNS1_7is_sameIT_S6_EE5valueES6_E4typeEv>
 8004468:	f107 0320 	add.w	r3, r7, #32
 800446c:	f107 0208 	add.w	r2, r7, #8
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fdff 	bl	8005076 <_ZNK11ArduinoJson8V721HB2216JsonVariantConstcvT_INS0_15JsonObjectConstEEEv>
 8004478:	f107 0018 	add.w	r0, r7, #24
 800447c:	f107 0320 	add.w	r3, r7, #32
 8004480:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004484:	f7ff fb17 	bl	8003ab6 <_ZN11ArduinoJson8V721HB2210JsonObject3setENS0_15JsonObjectConstE>
  }
 8004488:	bf00      	nop
 800448a:	372c      	adds	r7, #44	@ 0x2c
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}

08004490 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE8fromJsonENS0_16JsonVariantConstE>:

  static JsonObjectConst fromJson(JsonVariantConst src) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd fbff 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80044a6:	6178      	str	r0, [r7, #20]
    auto object = data != 0 ? data->asObject() : nullptr;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE8fromJsonENS0_16JsonVariantConstE+0x28>
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7fe fe6f 	bl	8003192 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 80044b4:	4603      	mov	r3, r0
 80044b6:	e000      	b.n	80044ba <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
    return JsonObjectConst(object, getResourceManager(src));
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd fbfc 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fa6d 	bl	80039aa <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>
  }
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopierC1ENS0_11JsonVariantE>:

class JsonVariantCopier {
 public:
  using result_type = bool;

  JsonVariantCopier(JsonVariant dst) : dst_(dst) {}
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	e883 0006 	stmia.w	r3, {r1, r2}
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	461a      	mov	r2, r3
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <_ZN11ArduinoJson8V721HB226detail11copyVariantENS0_11JsonVariantENS0_16JsonVariantConstE>:

 private:
  JsonVariant dst_;
};

inline bool copyVariant(JsonVariant dst, JsonVariantConst src) {
 8004502:	b590      	push	{r4, r7, lr}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	f107 0408 	add.w	r4, r7, #8
 800450c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004510:	4639      	mov	r1, r7
 8004512:	e881 000c 	stmia.w	r1, {r2, r3}
  if (dst.isUnbound())
 8004516:	f107 0308 	add.w	r3, r7, #8
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fdba 	bl	8005094 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE9isUnboundEv>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <_ZN11ArduinoJson8V721HB226detail11copyVariantENS0_11JsonVariantENS0_16JsonVariantConstE+0x28>
    return false;
 8004526:	2300      	movs	r3, #0
 8004528:	e011      	b.n	800454e <_ZN11ArduinoJson8V721HB226detail11copyVariantENS0_11JsonVariantENS0_16JsonVariantConstE+0x4c>
  JsonVariantCopier copier(dst);
 800452a:	f107 0010 	add.w	r0, r7, #16
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004536:	f7ff ffcf 	bl	80044d8 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopierC1ENS0_11JsonVariantE>
  return accept(src, copier);
 800453a:	f107 0310 	add.w	r3, r7, #16
 800453e:	461a      	mov	r2, r3
 8004540:	463b      	mov	r3, r7
 8004542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004546:	f000 fdb6 	bl	80050b6 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_17JsonVariantCopierEEENT_11result_typeENS0_16JsonVariantConstERS4_>
 800454a:	4603      	mov	r3, r0
 800454c:	bf00      	nop
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	bd90      	pop	{r4, r7, pc}

08004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
inline void VariantData::clear(ResourceManager* resources) {
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	791b      	ldrb	r3, [r3, #4]
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd f936 	bl	80017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	4619      	mov	r1, r3
 800457a:	6838      	ldr	r0, [r7, #0]
 800457c:	f7fe ff99 	bl	80034b2 <_ZN11ArduinoJson8V721HB226detail15ResourceManager17dereferenceStringEPKc>
  if (type_ & VariantTypeBits::ExtensionBit)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	2110      	movs	r1, #16
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd f926 	bl	80017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	6838      	ldr	r0, [r7, #0]
 800459a:	f7ff fdf3 	bl	8004184 <_ZN11ArduinoJson8V721HB226detail15ResourceManager13freeExtensionEt>
  auto collection = asCollection();
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fe fdd5 	bl	800314e <_ZN11ArduinoJson8V721HB226detail11VariantData12asCollectionEv>
 80045a4:	60f8      	str	r0, [r7, #12]
  if (collection)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fc3e 	bl	8003e30 <_ZN11ArduinoJson8V721HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>
  type_ = VariantType::Null;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	711a      	strb	r2, [r3, #4]
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>:
#include <Json/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	4603      	mov	r3, r0
 80045ca:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80045d0:	d904      	bls.n	80045dc <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1a>
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b39      	cmp	r3, #57	@ 0x39
 80045d6:	d801      	bhi.n	80045dc <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1a>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <_ZN11ArduinoJson8V721HB226detail7isdigitEc+0x1c>
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	ed87 0a00 	vstr	s0, [r7]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	e9c7 2300 	strd	r2, r3, [r7]
 800462c:	68f9      	ldr	r1, [r7, #12]
 800462e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004632:	e9c1 2300 	strd	r2, r3, [r1]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	e9c7 2300 	strd	r2, r3, [r7]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004656:	e9c1 2300 	strd	r2, r3, [r1]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	ed87 0b00 	vstr	d0, [r7]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467a:	e9c1 2300 	strd	r2, r3, [r1]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3308      	adds	r3, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ffa3 	bl	80045ea <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ev>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	ed87 0a00 	vstr	s0, [r7]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3308      	adds	r3, #8
 80046c4:	ed97 0a00 	vldr	s0, [r7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff99 	bl	8004600 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ef>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	e9c7 2300 	strd	r2, r3, [r7]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2202      	movs	r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f103 0108 	add.w	r1, r3, #8
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	4608      	mov	r0, r1
 80046f6:	f7ff ff93 	bl	8004620 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ex>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	e9c7 2300 	strd	r2, r3, [r7]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2203      	movs	r2, #3
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f103 0108 	add.w	r1, r3, #8
 800471c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004720:	4608      	mov	r0, r1
 8004722:	f7ff ff8f 	bl	8004644 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ey>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	ed87 0b00 	vstr	d0, [r7]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3308      	adds	r3, #8
 8004746:	ed97 0b00 	vldr	d0, [r7]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff8c 	bl	8004668 <_ZN11ArduinoJson8V721HB226detail11NumberValueC1Ed>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>:
    return value_.asDouble;
  }
#endif
};

inline Number parseNumber(const char* s) {
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	ed2d 8b02 	vpush	{d8}
 8004764:	b0a8      	sub	sp, #160	@ 0xa0
 8004766:	af00      	add	r7, sp, #0
 8004768:	6578      	str	r0, [r7, #84]	@ 0x54
 800476a:	6539      	str	r1, [r7, #80]	@ 0x50
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  switch (*s) {
 8004772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b2b      	cmp	r3, #43	@ 0x2b
 8004778:	d008      	beq.n	800478c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x30>
 800477a:	2b2d      	cmp	r3, #45	@ 0x2d
 800477c:	d10a      	bne.n	8004794 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x38>
    case '-':
      is_negative = true;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
      s++;
 8004784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004786:	3301      	adds	r3, #1
 8004788:	653b      	str	r3, [r7, #80]	@ 0x50
      break;
 800478a:	e003      	b.n	8004794 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x38>
    case '+':
      s++;
 800478c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800478e:	3301      	adds	r3, #1
 8004790:	653b      	str	r3, [r7, #80]	@ 0x50
      break;
 8004792:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8004794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff12 	bl	80045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 800479e:	4603      	mov	r3, r0
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5a>
 80047aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80047b0:	d001      	beq.n	80047b6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5a>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x5c>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x68>
    return Number();
 80047bc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80047be:	f7ff ff65 	bl	800468c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>
 80047c2:	e201      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>

  mantissa_t mantissa = 0;
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  exponent_t exponent_offset = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  const mantissa_t maxUint = JsonUInt(-1);
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

  while (isdigit(*s)) {
 80047e2:	e054      	b.n	800488e <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x132>
    uint8_t digit = uint8_t(*s - '0');
 80047e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3b30      	subs	r3, #48	@ 0x30
 80047ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (mantissa > maxUint / 10)
 80047ee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80047f2:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 80047f6:	49b2      	ldr	r1, [pc, #712]	@ (8004ac0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x364>)
 80047f8:	418b      	sbcs	r3, r1
 80047fa:	d251      	bcs.n	80048a0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa *= 10;
 80047fc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004800:	4622      	mov	r2, r4
 8004802:	462b      	mov	r3, r5
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0099      	lsls	r1, r3, #2
 800480e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004812:	0090      	lsls	r0, r2, #2
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	eb12 0804 	adds.w	r8, r2, r4
 800481c:	eb43 0905 	adc.w	r9, r3, r5
 8004820:	eb18 0308 	adds.w	r3, r8, r8
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	eb49 0309 	adc.w	r3, r9, r9
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004830:	e9c7 8924 	strd	r8, r9, [r7, #144]	@ 0x90
    if (mantissa > maxUint - digit)
 8004834:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004838:	2200      	movs	r2, #0
 800483a:	643b      	str	r3, [r7, #64]	@ 0x40
 800483c:	647a      	str	r2, [r7, #68]	@ 0x44
 800483e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004842:	460b      	mov	r3, r1
 8004844:	43db      	mvns	r3, r3
 8004846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004848:	4613      	mov	r3, r2
 800484a:	43db      	mvns	r3, r3
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800484e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004852:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8004856:	4621      	mov	r1, r4
 8004858:	4291      	cmp	r1, r2
 800485a:	4629      	mov	r1, r5
 800485c:	eb71 0303 	sbcs.w	r3, r1, r3
 8004860:	d320      	bcc.n	80048a4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x148>
      break;
    mantissa += digit;
 8004862:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004866:	2200      	movs	r2, #0
 8004868:	633b      	str	r3, [r7, #48]	@ 0x30
 800486a:	637a      	str	r2, [r7, #52]	@ 0x34
 800486c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004870:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004874:	4621      	mov	r1, r4
 8004876:	1851      	adds	r1, r2, r1
 8004878:	6139      	str	r1, [r7, #16]
 800487a:	4629      	mov	r1, r5
 800487c:	414b      	adcs	r3, r1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004884:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
    s++;
 8004888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800488a:	3301      	adds	r3, #1
 800488c:	653b      	str	r3, [r7, #80]	@ 0x50
  while (isdigit(*s)) {
 800488e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fe95 	bl	80045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1a2      	bne.n	80047e4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x88>
 800489e:	e002      	b.n	80048a6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x14a>
      break;
 80048a0:	bf00      	nop
 80048a2:	e000      	b.n	80048a6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x14a>
      break;
 80048a4:	bf00      	nop
  }

  if (*s == '\0') {
 80048a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d136      	bne.n	800491c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1c0>
    if (is_negative) {
 80048ae:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d019      	beq.n	80048ea <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x18e>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80048be:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 80048c2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80048c6:	2a01      	cmp	r2, #1
 80048c8:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 80048cc:	d226      	bcs.n	800491c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1c0>
        return Number(JsonInteger(~mantissa + 1));
 80048ce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80048d2:	2100      	movs	r1, #0
 80048d4:	4250      	negs	r0, r2
 80048d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80048d8:	eb61 0303 	sbc.w	r3, r1, r3
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80048e4:	f7ff fef8 	bl	80046d8 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ex>
 80048e8:	e16e      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
      }
    } else {
      return Number(JsonUInt(mantissa));
 80048ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80048ee:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80048f0:	f7ff ff08 	bl	8004704 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ey>
 80048f4:	e168      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 80048f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80048fa:	f04f 020a 	mov.w	r2, #10
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f7fc fad7 	bl	8000eb4 <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    exponent_offset++;
 800490e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8004912:	b29b      	uxth	r3, r3
 8004914:	3301      	adds	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  while (mantissa > traits::mantissa_max) {
 800491c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004924:	d2e7      	bcs.n	80048f6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004926:	e009      	b.n	800493c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1e0>
    exponent_offset++;
 8004928:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3301      	adds	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    s++;
 8004936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004938:	3301      	adds	r3, #1
 800493a:	653b      	str	r3, [r7, #80]	@ 0x50
  while (isdigit(*s)) {
 800493c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fe3e 	bl	80045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ed      	bne.n	8004928 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x1cc>
  }

  if (*s == '.') {
 800494c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b2e      	cmp	r3, #46	@ 0x2e
 8004952:	d14c      	bne.n	80049ee <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x292>
    s++;
 8004954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004956:	3301      	adds	r3, #1
 8004958:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 800495a:	e040      	b.n	80049de <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 800495c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004960:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004964:	4957      	ldr	r1, [pc, #348]	@ (8004ac4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x368>)
 8004966:	418b      	sbcs	r3, r1
 8004968:	d236      	bcs.n	80049d8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800496a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800496e:	4622      	mov	r2, r4
 8004970:	462b      	mov	r3, r5
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004980:	0090      	lsls	r0, r2, #2
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	eb12 0a04 	adds.w	sl, r2, r4
 800498a:	eb43 0b05 	adc.w	fp, r3, r5
 800498e:	eb1a 030a 	adds.w	r3, sl, sl
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	eb4b 030b 	adc.w	r3, fp, fp
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800499e:	4652      	mov	r2, sl
 80049a0:	465b      	mov	r3, fp
 80049a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049a4:	7809      	ldrb	r1, [r1, #0]
 80049a6:	3930      	subs	r1, #48	@ 0x30
 80049a8:	b2c9      	uxtb	r1, r1
 80049aa:	b2c9      	uxtb	r1, r1
 80049ac:	2000      	movs	r0, #0
 80049ae:	6239      	str	r1, [r7, #32]
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80049b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049b6:	4621      	mov	r1, r4
 80049b8:	1851      	adds	r1, r2, r1
 80049ba:	6039      	str	r1, [r7, #0]
 80049bc:	4629      	mov	r1, r5
 80049be:	414b      	adcs	r3, r1
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80049c6:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
        exponent_offset--;
 80049ca:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
      }
      s++;
 80049d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049da:	3301      	adds	r3, #1
 80049dc:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 80049de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fded 	bl	80045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1b6      	bne.n	800495c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x200>
    }
  }

  int exponent = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (*s == 'e' || *s == 'E') {
 80049f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b65      	cmp	r3, #101	@ 0x65
 80049fa:	d003      	beq.n	8004a04 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2a8>
 80049fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b45      	cmp	r3, #69	@ 0x45
 8004a02:	d179      	bne.n	8004af8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x39c>
    s++;
 8004a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a06:	3301      	adds	r3, #1
 8004a08:	653b      	str	r3, [r7, #80]	@ 0x50
    bool negative_exponent = false;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (*s == '-') {
 8004a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a16:	d106      	bne.n	8004a26 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2ca>
      negative_exponent = true;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      s++;
 8004a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a20:	3301      	adds	r3, #1
 8004a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a24:	e057      	b.n	8004ad6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
    } else if (*s == '+') {
 8004a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8004a2c:	d153      	bne.n	8004ad6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
      s++;
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a30:	3301      	adds	r3, #1
 8004a32:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    while (isdigit(*s)) {
 8004a34:	e04f      	b.n	8004ad6 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x37a>
      exponent = exponent * 10 + (*s - '0');
 8004a36:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	461a      	mov	r2, r3
 8004a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	3b30      	subs	r3, #48	@ 0x30
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      if (exponent + exponent_offset > traits::exponent_max) {
 8004a50:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	@ 0x8e
 8004a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a58:	4413      	add	r3, r2
 8004a5a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8004a5e:	dd37      	ble.n	8004ad0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x374>
        if (negative_exponent)
 8004a60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x32a>
          return Number(is_negative ? -0.0f : 0.0f);
 8004a68:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x31a>
 8004a70:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004ac8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x36c>
 8004a74:	e001      	b.n	8004a7a <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x31e>
 8004a76:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004acc <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x370>
 8004a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004a80:	f7ff fe15 	bl	80046ae <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>
 8004a84:	e0a0      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8004a86:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x348>
 8004a8e:	f000 fb51 	bl	8005134 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>
 8004a92:	ec53 2b10 	vmov	r2, r3, d0
 8004a96:	ee08 2a10 	vmov	s16, r2
 8004a9a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004a9e:	ee08 3a90 	vmov	s17, r3
 8004aa2:	e005      	b.n	8004ab0 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x354>
 8004aa4:	f000 fb46 	bl	8005134 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>
 8004aa8:	eeb0 8a40 	vmov.f32	s16, s0
 8004aac:	eef0 8a60 	vmov.f32	s17, s1
 8004ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8004ab4:	eef0 0a68 	vmov.f32	s1, s17
 8004ab8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004aba:	f7ff fe39 	bl	8004730 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>
 8004abe:	e083      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
 8004ac0:	19999999 	.word	0x19999999
 8004ac4:	00019999 	.word	0x00019999
 8004ac8:	80000000 	.word	0x80000000
 8004acc:	00000000 	.word	0x00000000
      }
      s++;
 8004ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	653b      	str	r3, [r7, #80]	@ 0x50
    while (isdigit(*s)) {
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd71 	bl	80045c2 <_ZN11ArduinoJson8V721HB226detail7isdigitEc>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1a7      	bne.n	8004a36 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x2da>
    }
    if (negative_exponent)
 8004ae6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x39c>
      exponent = -exponent;
 8004aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af2:	425b      	negs	r3, r3
 8004af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  }
  exponent += exponent_offset;
 8004af8:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8004afc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004b00:	4413      	add	r3, r2
 8004b02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8004b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3ba>
    return Number();
 8004b0e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004b10:	f7ff fdbc 	bl	800468c <_ZN11ArduinoJson8V721HB226detail6NumberC1Ev>
 8004b14:	e058      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8004b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b1a:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8004b1e:	db0a      	blt.n	8004b36 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3da>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b24:	2b26      	cmp	r3, #38	@ 0x26
 8004b26:	dc06      	bgt.n	8004b36 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3da>
                  exponent > FloatTraits<float>::exponent_max ||
 8004b28:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004b2c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004b30:	f173 0300 	sbcs.w	r3, r3, #0
 8004b34:	d301      	bcc.n	8004b3a <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3de>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x3e0>
 8004b3a:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004b40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d022      	beq.n	8004b8e <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x432>
    auto final_result = make_float(double(mantissa), exponent);
 8004b48:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8004b4c:	f7fb fd26 	bl	800059c <__aeabi_ul2d>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004b58:	ec43 2b10 	vmov	d0, r2, r3
 8004b5c:	f000 fafc 	bl	8005158 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_>
 8004b60:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8004b64:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d006      	beq.n	8004b7a <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x41e>
 8004b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b72:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b78:	e003      	b.n	8004b82 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x426>
 8004b7a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8004b7e:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8004b82:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8004b86:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004b88:	f7ff fdd2 	bl	8004730 <_ZN11ArduinoJson8V721HB226detail6NumberC1Ed>
 8004b8c:	e01c      	b.n	8004bc8 <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x46c>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8004b8e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8004b92:	f7fc f949 	bl	8000e28 <__aeabi_ul2f>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004b9c:	ee00 3a10 	vmov	s0, r3
 8004ba0:	f000 fb1f 	bl	80051e2 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_>
 8004ba4:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    return Number(is_negative ? -final_result : final_result);
 8004ba8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x45e>
 8004bb0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004bb4:	eef1 7a67 	vneg.f32	s15, s15
 8004bb8:	e001      	b.n	8004bbe <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc+0x462>
 8004bba:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004bc4:	f7ff fd73 	bl	80046ae <_ZN11ArduinoJson8V721HB226detail6NumberC1Ef>
  }
}
 8004bc8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004bca:	37a0      	adds	r7, #160	@ 0xa0
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	ecbd 8b02 	vpop	{d8}
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd6:	bf00      	nop

08004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fe fcb6 	bl	8003552 <_ZNK11ArduinoJson8V721HB2211JsonVariant7getDataEv>
 8004be6:	4603      	mov	r3, r0
  }
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_ZNK11ArduinoJson8V721HB229JsonArray3addINS0_16JsonVariantConstEEEbRKT_>:
  bool add(const T& value) const {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
    return detail::ArrayData::addValue(data_, value, resources_);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6839      	ldr	r1, [r7, #0]
 8004c06:	f000 fbe1 	bl	80053cc <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbPS2_OT_PNS1_15ResourceManagerE>
 8004c0a:	4603      	mov	r3, r0
  }
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZNK11ArduinoJson8V721HB2210JsonObjectixINS0_10JsonStringEEENS0_6detail9enable_ifIXsrNS4_8IsStringIT_vEE5valueENS4_11MemberProxyIS1_S7_EEE4typeERKS7_>:
  operator[](const TString& key) const {
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b089      	sub	sp, #36	@ 0x24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
    return {*this, key};
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	466c      	mov	r4, sp
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c38:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f107 0210 	add.w	r2, r7, #16
 8004c42:	ca06      	ldmia	r2, {r1, r2}
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fbd7 	bl	80053f8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEC1ES3_S4_>
  }
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}

08004c52 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE3setINS0_16JsonVariantConstEEEbRKT_>:
  FORCE_INLINE bool is() const;

  // Copies the specified value.
  // https://arduinojson.org/v7/api/jsonvariant/set/
  template <typename T>
  bool set(const T& value) const {
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fbe9 	bl	8005436 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_>
 8004c64:	4603      	mov	r3, r0
  }
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZNK11ArduinoJson8V721HB2212JsonDocument2asINS0_16JsonVariantConstEEET_v>:
  T as() const {
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
    return getVariant().template as<T>();
 8004c78:	f107 0308 	add.w	r3, r7, #8
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc fe7a 	bl	8001978 <_ZNK11ArduinoJson8V721HB2212JsonDocument10getVariantEv>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f107 0208 	add.w	r2, r7, #8
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fbe5 	bl	800545c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIS1_Lb1EEET_v>
 8004c92:	bf00      	nop
  }
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_16JsonVariantConstEEEbRKT_>:
  bool set(const T& value) const {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fbe7 	bl	800547c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_>
 8004cae:	4603      	mov	r3, r0
  }
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  explicit operator bool() const {
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
  }
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>:
  T* ptr() const {
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
  }
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
    return id_;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	889b      	ldrh	r3, [r3, #4]
  }
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>:
  T* operator->() const {
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
  }
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	809a      	strh	r2, [r3, #4]
  }
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <_ZN11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d5e:	809a      	strh	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b088      	sub	sp, #32
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d005      	beq.n	8004d92 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fb89 	bl	80054a2 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004d90:	e02c      	b.n	8004dec <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fb9b 	bl	80054dc <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f822 	bl	8004df4 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dc2:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004dc6:	e011      	b.n	8004dec <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f000 fbc3 	bl	8005556 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004dd0:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fbf8 	bl	80055ce <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004dde:	e005      	b.n	8004dec <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fb79 	bl	80054dc <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004dea:	bf00      	nop
  }
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
  }
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
  }
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
    return id_;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	889b      	ldrh	r3, [r3, #4]
  }
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <_ZN11ArduinoJson8V721HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	809a      	strh	r2, [r3, #4]
  }
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fbaa 	bl	80055f2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea4:	8013      	strh	r3, [r2, #0]
    freeList_ = slot.id();
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ffc0 	bl	8004e2e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ed2:	809a      	strh	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80fb      	strh	r3, [r7, #6]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	809a      	strh	r2, [r3, #4]
  }
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fb74 	bl	800560a <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004f22:	bf00      	nop
}
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fe fb00 	bl	800353a <_ZNK11ArduinoJson8V721HB2211JsonVariant18getResourceManagerEv>
 8004f3a:	4603      	mov	r3, r0
  }
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fd ff2a 	bl	8002da6 <_ZN11ArduinoJson8V721HB226detail13StringAdapterIPKcvE5adaptES4_>
 8004f52:	4603      	mov	r3, r0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>:
  static void setString(VariantData* var, TAdaptedString value,
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
    if (!var)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x28>
    var->clear(resources);
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff faf0 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    var->setString(value, resources);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fb7e 	bl	800567e <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>
 8004f82:	e000      	b.n	8004f86 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x2a>
      return;
 8004f84:	bf00      	nop
  }
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>:
typename StringAdapter<TString>::AdaptedString adaptString(const TString& s) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  return StringAdapter<TString>::adapt(s);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd ff9e 	bl	8002edc <_ZN11ArduinoJson8V721HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004fa0:	bf00      	nop
}
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>:
  static void setString(VariantData* var, TAdaptedString value,
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x2c>
    var->clear(resources);
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fac8 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    var->setString(value, resources);
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	463b      	mov	r3, r7
 8004fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd0:	f000 fb8d 	bl	80056ee <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE>
 8004fd4:	e000      	b.n	8004fd8 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x2e>
      return;
 8004fd6:	bf00      	nop
  }
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIDnEEbRKT_>:
  bool set(const T& value) const {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fbb5 	bl	800575a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_>
 8004ff0:	4603      	mov	r3, r0
  }
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE2toINS0_9JsonArrayEEENS1_9enable_ifIXsrNS1_7is_sameIT_S6_EE5valueES6_E4typeEv>:
}

template <typename TDerived>
template <typename T>
inline enable_if_t<is_same<T, JsonArray>::value, JsonArray>
VariantRefBase<TDerived>::to() const {
 8004ffa:	b590      	push	{r4, r7, lr}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  return JsonArray(
      VariantData::toArray(getOrCreateData(), getResourceManager()),
      getResourceManager());
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f000 fbbb 	bl	8005780 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE15getOrCreateDataEv>
 800500a:	4604      	mov	r4, r0
 800500c:	6838      	ldr	r0, [r7, #0]
 800500e:	f000 fbc7 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005012:	4603      	mov	r3, r0
 8005014:	4619      	mov	r1, r3
 8005016:	4620      	mov	r0, r4
 8005018:	f7fe f9d8 	bl	80033cc <_ZN11ArduinoJson8V721HB226detail11VariantData7toArrayEPS2_PNS1_15ResourceManagerE>
 800501c:	4604      	mov	r4, r0
 800501e:	6838      	ldr	r0, [r7, #0]
 8005020:	f000 fbbe 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	4621      	mov	r1, r4
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fe fb85 	bl	800373a <_ZN11ArduinoJson8V721HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
}
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bd90      	pop	{r4, r7, pc}

08005038 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE2toINS0_10JsonObjectEEENS1_9enable_ifIXsrNS1_7is_sameIT_S6_EE5valueES6_E4typeEv>:

template <typename TDerived>
template <typename T>
enable_if_t<is_same<T, JsonObject>::value, JsonObject>
VariantRefBase<TDerived>::to() const {
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  return JsonObject(
      VariantData::toObject(getOrCreateData(), getResourceManager()),
      getResourceManager());
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f000 fb9c 	bl	8005780 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE15getOrCreateDataEv>
 8005048:	4604      	mov	r4, r0
 800504a:	6838      	ldr	r0, [r7, #0]
 800504c:	f000 fba8 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005050:	4603      	mov	r3, r0
 8005052:	4619      	mov	r1, r3
 8005054:	4620      	mov	r0, r4
 8005056:	f7fe f9f8 	bl	800344a <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEPS2_PNS1_15ResourceManagerE>
 800505a:	4604      	mov	r4, r0
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	f000 fb9f 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	4621      	mov	r1, r4
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe fd01 	bl	8003a70 <_ZN11ArduinoJson8V721HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
}
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}

08005076 <_ZNK11ArduinoJson8V721HB2216JsonVariantConstcvT_INS0_15JsonObjectConstEEEv>:
  operator T() const {
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
    return as<T>();
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fbab 	bl	80057e0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asINS0_15JsonObjectConstELb1EEET_v>
 800508a:	bf00      	nop
  }
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE9isUnboundEv>:
  bool isUnbound() const {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
    return !getData();
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fbaf 	bl	8005800 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
  }
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_17JsonVariantCopierEEENT_11result_typeENS0_16JsonVariantConstERS4_>:
  TVisitor* visitor_;
  const ResourceManager* resources_;
};

template <typename TVisitor>
typename TVisitor::result_type accept(JsonVariantConst variant,
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b088      	sub	sp, #32
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	f107 0308 	add.w	r3, r7, #8
 80050c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80050c4:	607a      	str	r2, [r7, #4]
                                      TVisitor& visit) {
  auto data = VariantAttorney::getData(variant);
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc fdea 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80050d0:	61f8      	str	r0, [r7, #28]
  if (!data)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_17JsonVariantCopierEEENT_11result_typeENS0_16JsonVariantConstERS4_+0x2e>
    return visit.visit(nullptr);
 80050d8:	2100      	movs	r1, #0
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fba0 	bl	8005820 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIDnEEbT_>
 80050e0:	4603      	mov	r3, r0
 80050e2:	e015      	b.n	8005110 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_17JsonVariantCopierEEENT_11result_typeENS0_16JsonVariantConstERS4_+0x5a>
  auto resources = VariantAttorney::getResourceManager(variant);
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fc fde7 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80050ee:	61b8      	str	r0, [r7, #24]
  VisitorAdapter<TVisitor> adapter(visit, resources);
 80050f0:	f107 0310 	add.w	r3, r7, #16
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fba1 	bl	8005840 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEEC1ERS3_PKNS1_15ResourceManagerE>
  return data->accept(adapter, resources);
 80050fe:	f107 0310 	add.w	r3, r7, #16
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4619      	mov	r1, r3
 8005106:	69f8      	ldr	r0, [r7, #28]
 8005108:	f000 fbae 	bl	8005868 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE>
 800510c:	4603      	mov	r3, r0
 800510e:	bf00      	nop
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isINS0_14JsonArrayConstEEENS0_6detail9enable_ifIXsrNS4_7is_sameINS4_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005126:	f7ff f961 	bl	80043ec <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE9checkJsonENS0_16JsonVariantConstE>
 800512a:	4603      	mov	r3, r0
  }
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	4905      	ldr	r1, [pc, #20]	@ (8005154 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE3infEv+0x20>)
 800513e:	f000 fcc7 	bl	8005ad0 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8005142:	eeb0 7a40 	vmov.f32	s14, s0
 8005146:	eef0 7a60 	vmov.f32	s15, s1
  }
 800514a:	eeb0 0a47 	vmov.f32	s0, s14
 800514e:	eef0 0a67 	vmov.f32	s1, s15
 8005152:	bd80      	pop	{r7, pc}
 8005154:	7ff00000 	.word	0x7ff00000

08005158 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	ed87 0b02 	vstr	d0, [r7, #8]
 8005162:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	dd04      	ble.n	8005174 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800516a:	f7fc fef5 	bl	8001f58 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800516e:	4603      	mov	r3, r0
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e003      	b.n	800517c <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8005174:	f7fc ff18 	bl	8001fa8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8005178:	4603      	mov	r3, r0
 800517a:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	dc02      	bgt.n	8005188 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	425b      	negs	r3, r3
 8005186:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
 800518c:	e01b      	b.n	80051c6 <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 8005198:	7dfa      	ldrb	r2, [r7, #23]
 800519a:	f107 0310 	add.w	r3, r7, #16
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fc fee9 	bl	8001f78 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIdEixEi>
 80051a6:	ec53 2b10 	vmov	r2, r3, d0
 80051aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051ae:	f7fb fa2b 	bl	8000608 <__aeabi_dmul>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	105b      	asrs	r3, r3, #1
 80051be:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	3301      	adds	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e0      	bne.n	800518e <_ZN11ArduinoJson8V721HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80051cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80051d4:	eeb0 0a47 	vmov.f32	s0, s14
 80051d8:	eef0 0a67 	vmov.f32	s1, s15
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80051ec:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dd04      	ble.n	80051fe <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 80051f4:	f000 fc80 	bl	8005af8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 80051f8:	4603      	mov	r3, r0
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	e003      	b.n	8005206 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 80051fe:	f000 fc8b 	bl	8005b18 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8005202:	4603      	mov	r3, r0
 8005204:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	dc02      	bgt.n	8005212 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	425b      	negs	r3, r3
 8005210:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
 8005216:	e019      	b.n	800524c <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc84 	bl	8005b38 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIfEixEi>
 8005230:	eeb0 7a40 	vmov.f32	s14, s0
 8005234:	edd7 7a01 	vldr	s15, [r7, #4]
 8005238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523c:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	105b      	asrs	r3, r3, #1
 8005244:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	3301      	adds	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e2      	bne.n	8005218 <_ZN11ArduinoJson8V721HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	ee07 3a90 	vmov	s15, r3
}
 8005258:	eeb0 0a67 	vmov.f32	s0, s15
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>:
  operator[](TChar* key) {
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
    return {*this, key};
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fc90 	bl	8005b98 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEC1ES4_S6_>
  }
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>:
    this->set(src);
    return *this;
  }

  template <typename T>
  MemberProxy& operator=(T* src) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
    this->set(src);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc96 	bl	8005bbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS6_EEbPT_>
    return *this;
 8005292:	687b      	ldr	r3, [r7, #4]
  }
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>:
  operator[](TChar* key) const {
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
        data_.getMember(detail::adaptString(key), &resources_), &resources_);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fe48 	bl	8004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80052b4:	4601      	mov	r1, r0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fc8e 	bl	8005bdc <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>
 80052c0:	4601      	mov	r1, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7fc fb08 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
  }
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}

080052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>:
	JsonDocument data;
	BaseModel();
public:
	BaseModel(const BaseModel&) = delete;
	template<typename T>
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
			const T &defaultValue) {
		if (jsonVariant == nullptr) {
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	f107 020c 	add.w	r2, r7, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052ec:	f000 fcaa 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x28>
			return defaultValue;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	e00d      	b.n	8005318 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x44>
		}
		return jsonVariant.template is<T>() ?
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fc2f 	bl	8005b60 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIPKcEENS0_6detail9enable_ifIXsrNS5_7is_sameINS5_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fc37 	bl	8005b7c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIPKcLb1EEET_v>
 800530e:	4603      	mov	r3, r0
 8005310:	e001      	b.n	8005316 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_+0x42>
		return jsonVariant.template is<T>() ?
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 8005316:	bf00      	nop
	}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
		if (jsonVariant == nullptr) {
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	f107 0214 	add.w	r2, r7, #20
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800533a:	f000 fc83 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_+0x32>
			return defaultValue;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800534c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005350:	e011      	b.n	8005376 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_+0x56>
		return jsonVariant.template is<T>() ?
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f7ff fee0 	bl	8005118 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isINS0_14JsonArrayConstEEENS0_6detail9enable_ifIXsrNS4_7is_sameINS4_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_+0x4a>
				jsonVariant.template as<T>() : defaultValue;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa2c 	bl	80057c0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asINS0_14JsonArrayConstELb1EEET_v>
 8005368:	e005      	b.n	8005376 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_+0x56>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005372:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>:
  detail::enable_if_t<detail::IsString<TChar*>::value> remove(TChar* key) {
 800537e:	b5b0      	push	{r4, r5, r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
    detail::VariantData::removeMember(getData(), detail::adaptString(key),
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fe fc20 	bl	8003bce <_ZN11ArduinoJson8V721HB2212JsonDocument7getDataEv>
 800538e:	4604      	mov	r4, r0
 8005390:	6838      	ldr	r0, [r7, #0]
 8005392:	f7ff fdd7 	bl	8004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8005396:	4605      	mov	r5, r0
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe fc0d 	bl	8003bb8 <_ZN11ArduinoJson8V721HB2212JsonDocument18getResourceManagerEv>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	4629      	mov	r1, r5
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 fc74 	bl	8005c92 <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>
  }
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bdb0      	pop	{r4, r5, r7, pc}

080053b2 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	00db      	lsls	r3, r3, #3
  }
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbPS2_OT_PNS1_15ResourceManagerE>:

  template <typename T>
  bool addValue(T&& value, ResourceManager* resources);

  template <typename T>
  static bool addValue(ArrayData* array, T&& value,
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
                       ResourceManager* resources) {
    if (!array)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbPS2_OT_PNS1_15ResourceManagerE+0x16>
      return false;
 80053de:	2300      	movs	r3, #0
 80053e0:	e006      	b.n	80053f0 <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbPS2_OT_PNS1_15ResourceManagerE+0x24>
    return array->addValue(value, resources);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fc67 	bl	8005cba <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE>
 80053ec:	4603      	mov	r3, r0
 80053ee:	bf00      	nop
  }
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEC1ES3_S4_>:
  MemberProxy(TUpstream upstream, TStringRef key)
 80053f8:	b082      	sub	sp, #8
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	1d38      	adds	r0, r7, #4
 8005404:	e880 0006 	stmia.w	r0, {r1, r2}
 8005408:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3304      	adds	r3, #4
 800540e:	1d3a      	adds	r2, r7, #4
 8005410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005414:	e883 0003 	stmia.w	r3, {r0, r1}
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	330c      	adds	r3, #12
 800541c:	f107 021c 	add.w	r2, r7, #28
 8005420:	ca07      	ldmia	r2, {r0, r1, r2}
 8005422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	b002      	add	sp, #8
 8005434:	4770      	bx	lr

08005436 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_>:
      const {
    return getVariant();
  }

  template <typename TConverter, typename T>
  bool doSet(T&& value) const {
 8005436:	b590      	push	{r4, r7, lr}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8005440:	6838      	ldr	r0, [r7, #0]
 8005442:	f000 fcb1 	bl	8005da8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_16JsonVariantConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005446:	4603      	mov	r3, r0
 8005448:	4622      	mov	r2, r4
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fcb6 	bl	8005dbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8005452:	4603      	mov	r3, r0
        detail::forward<T>(value),
        is_same<typename function_traits<
                    decltype(&TConverter::toJson)>::return_type,
                bool>{});
  }
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bd90      	pop	{r4, r7, pc}

0800545c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIS1_Lb1EEET_v>:
  T as() const {
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800546e:	f7fe f89d 	bl	80035ac <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>
 8005472:	bf00      	nop
  }
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_>:
  bool doSet(T&& value) const {
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f000 fc8e 	bl	8005da8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_16JsonVariantConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800548c:	4603      	mov	r3, r0
 800548e:	4622      	mov	r2, r4
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fcbd 	bl	8005e12 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8005498:	4603      	mov	r3, r0
  }
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}

080054a2 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:
      capacity_ = count_;
    }
  }

 private:
  Slot<T> allocFromFreeList() {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b0:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b6:	4619      	mov	r1, r3
 80054b8:	6838      	ldr	r0, [r7, #0]
 80054ba:	f7fc fc23 	bl	8001d04 <_ZNK11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80054be:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fcc6 	bl	8004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054ea:	3b01      	subs	r3, #1
 80054ec:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	441a      	add	r2, r3
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fcb1 	bl	8005e66 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fc73 	bl	8004df4 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800550e:	4603      	mov	r3, r0
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f857 	bl	80055ce <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005520:	e015      	b.n	800554e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f863 	bl	80055f2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800552c:	4605      	mov	r5, r0
 800552e:	8afb      	ldrh	r3, [r7, #22]
 8005530:	01db      	lsls	r3, r3, #7
 8005532:	b29c      	uxth	r4, r3
 8005534:	f107 030c 	add.w	r3, r7, #12
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fc78 	bl	8004e2e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800553e:	4603      	mov	r3, r0
 8005540:	4423      	add	r3, r4
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	4629      	mov	r1, r5
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fc89 	bl	8004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bdb0      	pop	{r4, r5, r7, pc}

08005556 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005568:	429a      	cmp	r2, r3
 800556a:	d10b      	bne.n	8005584 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fca5 	bl	8005ebe <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8005574:	4603      	mov	r3, r0
 8005576:	f083 0301 	eor.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 800558a:	2300      	movs	r3, #0
 800558c:	e01b      	b.n	80055c6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005596:	1c59      	adds	r1, r3, #1
 8005598:	b288      	uxth	r0, r1
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	8488      	strh	r0, [r1, #36]	@ 0x24
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b0:	d102      	bne.n	80055b8 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	68b8      	ldr	r0, [r7, #8]
 80055c0:	f000 fcc2 	bl	8005f48 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 80055c4:	68bb      	ldr	r3, [r7, #8]
  }
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055e2:	809a      	strh	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
    return ptr_;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
  }
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = SizedRamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7fd fbd2 	bl	8002dc4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>
  }
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e019      	b.n	800566e <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_+0x46>
      if (stringEquals(str, adaptString(node->data, node->length)))
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f103 0108 	add.w	r1, r3, #8
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	88db      	ldrh	r3, [r3, #6]
 8005644:	461a      	mov	r2, r3
 8005646:	f107 030c 	add.w	r3, r7, #12
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fc5d 	bl	8004f0a <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	f107 030c 	add.w	r3, r7, #12
 8005656:	cb0c      	ldmia	r3, {r2, r3}
 8005658:	c903      	ldmia	r1, {r0, r1}
 800565a:	f000 fc9b 	bl	8005f94 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_+0x40>
        return node;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	e006      	b.n	8005676 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_+0x4e>
    for (auto node = strings_; node; node = node->next) {
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e2      	bne.n	800563a <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005674:	2300      	movs	r3, #0
  }
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>:
inline bool VariantData::setString(TAdaptedString value,
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  if (value.isNull())
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd fb52 	bl	8002d38 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800569a:	2300      	movs	r3, #0
 800569c:	e023      	b.n	80056e6 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  if (value.isLinked()) {
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fb74 	bl	8002d90 <_ZNK11ArduinoJson8V721HB226detail19StaticStringAdapter8isLinkedEv>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x48>
    setLinkedString(value.data());
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fd fb51 	bl	8002d5a <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString4dataEv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4619      	mov	r1, r3
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7fd fe28 	bl	8003312 <_ZN11ArduinoJson8V721HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e00f      	b.n	80056e6 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  auto dup = resources->saveString(value);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fca3 	bl	8006016 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_>
 80056d0:	6178      	str	r0, [r7, #20]
  if (dup) {
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x66>
    setOwnedString(dup);
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7fd fe2a 	bl	8003334 <_ZN11ArduinoJson8V721HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE+0x68>
  return false;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE>:
inline bool VariantData::setString(TAdaptedString value,
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	4638      	mov	r0, r7
 80056f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (value.isNull())
 80056fc:	463b      	mov	r3, r7
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fb73 	bl	8002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800570a:	2300      	movs	r3, #0
 800570c:	e021      	b.n	8005752 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x64>
  if (value.isLinked()) {
 800570e:	463b      	mov	r3, r7
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd fbd7 	bl	8002ec4 <_ZNK11ArduinoJson8V721HB226detail17JsonStringAdapter8isLinkedEv>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800571c:	463b      	mov	r3, r7
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd fb80 	bl	8002e24 <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4dataEv>
 8005724:	4603      	mov	r3, r0
 8005726:	4619      	mov	r1, r3
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7fd fdf2 	bl	8003312 <_ZN11ArduinoJson8V721HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800572e:	2301      	movs	r3, #1
 8005730:	e00f      	b.n	8005752 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x64>
  auto dup = resources->saveString(value);
 8005732:	6a38      	ldr	r0, [r7, #32]
 8005734:	463b      	mov	r3, r7
 8005736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005738:	f000 fc90 	bl	800605c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_>
 800573c:	6178      	str	r0, [r7, #20]
  if (dup) {
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7fd fdf4 	bl	8003334 <_ZN11ArduinoJson8V721HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE+0x64>
  return false;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_>:
  bool doSet(T&& value) const {
 800575a:	b590      	push	{r4, r7, lr}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8005764:	6838      	ldr	r0, [r7, #0]
 8005766:	f000 fc9f 	bl	80060a8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKDnEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800576a:	4603      	mov	r3, r0
 800576c:	4622      	mov	r2, r4
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fca4 	bl	80060be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_NS1_17integral_constantIbLb0EEE>
 8005776:	4603      	mov	r3, r0
  }
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fcc2 	bl	8006112 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 800578e:	4603      	mov	r3, r0
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fcc9 	bl	8006128 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS0_11JsonVariantEEEPNS1_11VariantDataERT_>
 8005796:	4603      	mov	r3, r0
  }
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fcb2 	bl	8006112 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fcc5 	bl	8006140 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80057b6:	4603      	mov	r3, r0
  }
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asINS0_14JsonArrayConstELb1EEET_v>:
  T as() const {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80057d2:	f7fe fde7 	bl	80043a4 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE8fromJsonENS0_16JsonVariantConstE>
 80057d6:	bf00      	nop
  }
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asINS0_15JsonObjectConstELb1EEET_v>:
  T as() const {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80057f2:	f7fe fe4d 	bl	8004490 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE8fromJsonENS0_16JsonVariantConstE>
 80057f6:	bf00      	nop
  }
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc82 	bl	8006112 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 800580e:	4603      	mov	r3, r0
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fca1 	bl	8006158 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005816:	4603      	mov	r3, r0
  }
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIDnEEbT_>:
  bool visit(T src) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    return dst_.set(src);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	463a      	mov	r2, r7
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fbd4 	bl	8004fde <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIDnEEbRKT_>
 8005836:	4603      	mov	r3, r0
  }
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEEC1ERS3_PKNS1_15ResourceManagerE>:
  VisitorAdapter(TVisitor& visitor, const ResourceManager* resources)
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
      : visitor_(&visitor), resources_(resources) {}
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 8005868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800586c:	b094      	sub	sp, #80	@ 0x50
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7fc f9b7 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800587e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    switch (type_) {
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	3b03      	subs	r3, #3
 8005886:	2b3d      	cmp	r3, #61	@ 0x3d
 8005888:	f200 8113 	bhi.w	8005ab2 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x24a>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x2c>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	08005a0f 	.word	0x08005a0f
 8005898:	080059c5 	.word	0x080059c5
 800589c:	080059e5 	.word	0x080059e5
 80058a0:	08005a91 	.word	0x08005a91
 80058a4:	08005ab3 	.word	0x08005ab3
 80058a8:	08005ab3 	.word	0x08005ab3
 80058ac:	08005ab3 	.word	0x08005ab3
 80058b0:	08005a57 	.word	0x08005a57
 80058b4:	08005ab3 	.word	0x08005ab3
 80058b8:	08005a39 	.word	0x08005a39
 80058bc:	08005ab3 	.word	0x08005ab3
 80058c0:	0800598d 	.word	0x0800598d
 80058c4:	08005ab3 	.word	0x08005ab3
 80058c8:	08005ab3 	.word	0x08005ab3
 80058cc:	08005ab3 	.word	0x08005ab3
 80058d0:	08005ab3 	.word	0x08005ab3
 80058d4:	08005ab3 	.word	0x08005ab3
 80058d8:	08005ab3 	.word	0x08005ab3
 80058dc:	08005ab3 	.word	0x08005ab3
 80058e0:	08005ab3 	.word	0x08005ab3
 80058e4:	08005ab3 	.word	0x08005ab3
 80058e8:	08005ab3 	.word	0x08005ab3
 80058ec:	08005ab3 	.word	0x08005ab3
 80058f0:	08005a83 	.word	0x08005a83
 80058f4:	08005ab3 	.word	0x08005ab3
 80058f8:	08005a75 	.word	0x08005a75
 80058fc:	08005ab3 	.word	0x08005ab3
 8005900:	0800599b 	.word	0x0800599b
 8005904:	08005ab3 	.word	0x08005ab3
 8005908:	080059b7 	.word	0x080059b7
 800590c:	08005ab3 	.word	0x08005ab3
 8005910:	08005ab3 	.word	0x08005ab3
 8005914:	08005ab3 	.word	0x08005ab3
 8005918:	08005ab3 	.word	0x08005ab3
 800591c:	08005ab3 	.word	0x08005ab3
 8005920:	08005ab3 	.word	0x08005ab3
 8005924:	08005ab3 	.word	0x08005ab3
 8005928:	08005ab3 	.word	0x08005ab3
 800592c:	08005ab3 	.word	0x08005ab3
 8005930:	08005ab3 	.word	0x08005ab3
 8005934:	08005ab3 	.word	0x08005ab3
 8005938:	08005ab3 	.word	0x08005ab3
 800593c:	08005ab3 	.word	0x08005ab3
 8005940:	08005ab3 	.word	0x08005ab3
 8005944:	08005ab3 	.word	0x08005ab3
 8005948:	08005ab3 	.word	0x08005ab3
 800594c:	08005ab3 	.word	0x08005ab3
 8005950:	08005ab3 	.word	0x08005ab3
 8005954:	08005ab3 	.word	0x08005ab3
 8005958:	08005ab3 	.word	0x08005ab3
 800595c:	08005ab3 	.word	0x08005ab3
 8005960:	08005ab3 	.word	0x08005ab3
 8005964:	08005ab3 	.word	0x08005ab3
 8005968:	08005ab3 	.word	0x08005ab3
 800596c:	08005ab3 	.word	0x08005ab3
 8005970:	08005ab3 	.word	0x08005ab3
 8005974:	08005ab3 	.word	0x08005ab3
 8005978:	08005ab3 	.word	0x08005ab3
 800597c:	08005ab3 	.word	0x08005ab3
 8005980:	08005ab3 	.word	0x08005ab3
 8005984:	08005ab3 	.word	0x08005ab3
 8005988:	080059a9 	.word	0x080059a9
        return visit.visit(content_.asFloat);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4619      	mov	r1, r3
 8005990:	68b8      	ldr	r0, [r7, #8]
 8005992:	f000 fbed 	bl	8006170 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIfEEbRKT_>
 8005996:	4603      	mov	r3, r0
 8005998:	e095      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asDouble);
 800599a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599c:	4619      	mov	r1, r3
 800599e:	68b8      	ldr	r0, [r7, #8]
 80059a0:	f000 fbfa 	bl	8006198 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIdEEbRKT_>
 80059a4:	4603      	mov	r3, r0
 80059a6:	e08e      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asArray);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4619      	mov	r1, r3
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	f000 fc09 	bl	80061c4 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitERKNS1_9ArrayDataE>
 80059b2:	4603      	mov	r3, r0
 80059b4:	e087      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asObject);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4619      	mov	r1, r3
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	f000 fc1d 	bl	80061fa <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitERKNS1_10ObjectDataE>
 80059c0:	4603      	mov	r3, r0
 80059c2:	e080      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asLinkedString));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	2201      	movs	r2, #1
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fb feaa 	bl	8001728 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	4619      	mov	r1, r3
 80059da:	68b8      	ldr	r0, [r7, #8]
 80059dc:	f000 fc28 	bl	8006230 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitINS0_10JsonStringEEEbRKT_>
 80059e0:	4603      	mov	r3, r0
 80059e2:	e070      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length,
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80059f2:	461a      	mov	r2, r3
 80059f4:	f107 001c 	add.w	r0, r7, #28
 80059f8:	2300      	movs	r3, #0
 80059fa:	f7fb feb2 	bl	8001762 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	4619      	mov	r1, r3
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f000 fc13 	bl	8006230 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitINS0_10JsonStringEEEbRKT_>
 8005a0a:	4603      	mov	r3, r0
                                      JsonString::Copied));
 8005a0c:	e05b      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(RawString(content_.asOwnedString->data,
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fc fb42 	bl	80020ac <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>
 8005a28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f000 fc0e 	bl	8006250 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitINS0_15SerializedValueIPKcEEEEbRKT_>
 8005a34:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 8005a36:	e046      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	17da      	asrs	r2, r3, #31
 8005a3e:	4698      	mov	r8, r3
 8005a40:	4691      	mov	r9, r2
 8005a42:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8005a46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68b8      	ldr	r0, [r7, #8]
 8005a4e:	f000 fc10 	bl	8006272 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIxEEbRKT_>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e037      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	461c      	mov	r4, r3
 8005a5e:	4615      	mov	r5, r2
 8005a60:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8005a64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005a68:	4619      	mov	r1, r3
 8005a6a:	68b8      	ldr	r0, [r7, #8]
 8005a6c:	f000 fc13 	bl	8006296 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIyEEbRKT_>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e028      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asInt64);
 8005a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a76:	4619      	mov	r1, r3
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f000 fbfa 	bl	8006272 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIxEEbRKT_>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	e021      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asUint64);
 8005a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a84:	4619      	mov	r1, r3
 8005a86:	68b8      	ldr	r0, [r7, #8]
 8005a88:	f000 fc05 	bl	8006296 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIyEEbRKT_>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	e01a      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asBoolean != 0);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005aa2:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	68b8      	ldr	r0, [r7, #8]
 8005aaa:	f000 fc06 	bl	80062ba <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIbEEbRKT_>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	e009      	b.n	8005ac6 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_17JsonVariantCopierEEEEENT_11result_typeERS7_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(nullptr);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005aba:	4619      	mov	r1, r3
 8005abc:	68b8      	ldr	r0, [r7, #8]
 8005abe:	f000 fc0e 	bl	80062de <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIDnEEbRKT_>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	bf00      	nop
  }
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3750      	adds	r7, #80	@ 0x50
 8005aca:	46bd      	mov	sp, r7
 8005acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ad0 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ade:	f000 fc0e 	bl	80062fe <_ZN11ArduinoJson8V721HB226detail10alias_castIdyEET_T0_>
 8005ae2:	eeb0 7a40 	vmov.f32	s14, s0
 8005ae6:	eef0 7a60 	vmov.f32	s15, s1
  }
 8005aea:	eeb0 0a47 	vmov.f32	s0, s14
 8005aee:	eef0 0a67 	vmov.f32	s1, s15
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fc11 	bl	800632a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>
 8005b08:	687b      	ldr	r3, [r7, #4]
  }
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08019efc 	.word	0x08019efc

08005b18 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	4904      	ldr	r1, [pc, #16]	@ (8005b34 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fc01 	bl	800632a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>
 8005b28:	687b      	ldr	r3, [r7, #4]
  }
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	08019f14 	.word	0x08019f14

08005b38 <_ZNK11ArduinoJson8V721HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fbfb 	bl	8006348 <_ZN11ArduinoJson8V721HB226detail8pgm_readIfEET_PKS3_>
 8005b52:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005b56:	eeb0 0a67 	vmov.f32	s0, s15
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIPKcEENS0_6detail9enable_ifIXsrNS5_7is_sameINS5_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b6e:	f7fe fb8d 	bl	800428c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8005b72:	4603      	mov	r3, r0
  }
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIPKcLb1EEET_v>:
  T as() const {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b8a:	f7fe fb5f 	bl	800424c <_ZN11ArduinoJson8V721HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8005b8e:	4603      	mov	r3, r0
  }
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEC1ES4_S6_>:
  MemberProxy(TUpstream upstream, TStringRef key)
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
      : upstream_(upstream), key_(key) {}
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS6_EEbPT_>:
  bool set(T* value) const {
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
    return doSet<Converter<T*>>(value);
 8005bc8:	463b      	mov	r3, r7
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fbca 	bl	8006366 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_>
 8005bd2:	4603      	mov	r3, r0
  }
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
    return ObjectData::getMember(asObject(), key, resources);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7fd fad2 	bl	8003192 <_ZNK11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fbc9 	bl	800638c <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8005bfa:	4603      	mov	r3, r0
  }
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbd4 	bl	80063ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fbdb 	bl	80063d0 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEPNS1_11VariantDataERT_>
 8005c1a:	4603      	mov	r3, r0
  }
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fbc4 	bl	80063ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fbd7 	bl	80063e8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_18getResourceManagerEERT_>
 8005c3a:	4603      	mov	r3, r0
  }
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>:
  friend bool operator==(TVariant lhs, T* rhs) {
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend enable_if_t<!is_base_of<VariantOperatorTag, T>::value, bool>
  operator==(TVariant lhs, const T& rhs) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c52:	607a      	str	r2, [r7, #4]
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c5e:	f000 fbcf 	bl	8006400 <_ZN11ArduinoJson8V721HB226detail7compareIDnEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
  }
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setINS0_14JsonArrayConstEEEbRKT_>:
  bool set(const T& value) const {
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fbd8 	bl	8006438 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_>
 8005c88:	4603      	mov	r3, r0
  }
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>:
  static void removeMember(VariantData* var, TAdaptedString key,
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
    if (!var)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x20>
    var->removeMember(key, resources);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fbd7 	bl	800645e <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvT_PNS1_15ResourceManagerE>
 8005cb0:	e000      	b.n	8005cb4 <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x22>
      return;
 8005cb2:	bf00      	nop
  }
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE>:
inline void ArrayData::removeElement(size_t index, ResourceManager* resources) {
  remove(at(index, resources), resources);
}

template <typename T>
inline bool ArrayData::addValue(T&& value, ResourceManager* resources) {
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b088      	sub	sp, #32
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(resources != nullptr);
  auto slot = resources->allocVariant();
 8005cc6:	f107 0318 	add.w	r3, r7, #24
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe f9af 	bl	8004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8005cd2:	f107 0318 	add.w	r3, r7, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe ffee 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f083 0301 	eor.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE+0x32>
    return false;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e02c      	b.n	8005d46 <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE+0x8c>
  JsonVariant variant(slot.ptr(), resources);
 8005cec:	f107 0318 	add.w	r3, r7, #24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fff2 	bl	8004cda <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fd fc08 	bl	8003514 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  if (!variant.set(detail::forward<T>(value))) {
 8005d04:	68b8      	ldr	r0, [r7, #8]
 8005d06:	f000 f84f 	bl	8005da8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_16JsonVariantConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f107 0310 	add.w	r3, r7, #16
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe ffc2 	bl	8004c9c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_16JsonVariantConstEEEbRKT_>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f083 0301 	eor.w	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE+0x7c>
    resources->freeVariant(slot);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f107 0318 	add.w	r3, r7, #24
 8005d2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d2e:	f7fe f9bf 	bl	80040b0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
    return false;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e007      	b.n	8005d46 <_ZN11ArduinoJson8V721HB226detail9ArrayData8addValueIRKNS0_16JsonVariantConstEEEbOT_PNS1_15ResourceManagerE+0x8c>
  }
  CollectionData::appendOne(slot, resources);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f107 0218 	add.w	r2, r7, #24
 8005d3e:	ca06      	ldmia	r2, {r1, r2}
 8005d40:	f7fd ffe9 	bl	8003d16 <_ZN11ArduinoJson8V721HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return true;
 8005d44:	2301      	movs	r3, #1
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <Json/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b088      	sub	sp, #32
 8005d52:	af02      	add	r7, sp, #8
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	4638      	mov	r0, r7
 8005d58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8005d5c:	f107 0010 	add.w	r0, r7, #16
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	463b      	mov	r3, r7
 8005d6a:	cb0c      	ldmia	r3, {r2, r3}
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	f000 fb89 	bl	8006484 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 8005d72:	f107 0310 	add.w	r3, r7, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fd f91f 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e00c      	b.n	8005da0 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 8005d86:	f107 0310 	add.w	r3, r7, #16
 8005d8a:	6a39      	ldr	r1, [r7, #32]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fd ff88 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 8005d92:	f107 0310 	add.w	r3, r7, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fd f940 	bl	800301c <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	bf00      	nop
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_16JsonVariantConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fbce 	bl	8006572 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE18getOrCreateVariantEv>
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	cb0c      	ldmia	r3, {r2, r3}
 8005dde:	c903      	ldmia	r1, {r0, r1}
 8005de0:	f7fd fbcf 	bl	8003582 <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fbda 	bl	800659e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE18getResourceManagerEv>
 8005dea:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8005df2:	69f8      	ldr	r0, [r7, #28]
 8005df4:	f7fd fb51 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f083 0301 	eor.w	r3, r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b088      	sub	sp, #32
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 8005e1e:	f107 0314 	add.w	r3, r7, #20
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fbca 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	cb0c      	ldmia	r3, {r2, r3}
 8005e32:	c903      	ldmia	r1, {r0, r1}
 8005e34:	f7fd fba5 	bl	8003582 <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff fcb1 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005e3e:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8005e46:	69f8      	ldr	r0, [r7, #28]
 8005e48:	f7fd fb27 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f083 0301 	eor.w	r3, r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
    if (!slots_)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fba8 	bl	80055ce <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005e7e:	e01a      	b.n	8005eb6 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	885a      	ldrh	r2, [r3, #2]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d303      	bcc.n	8005e94 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fb9e 	bl	80055ce <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005e92:	e010      	b.n	8005eb6 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	b291      	uxth	r1, r2
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	8051      	strh	r1, [r2, #2]
 8005ea0:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	89fb      	ldrh	r3, [r7, #14]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	89fa      	ldrh	r2, [r7, #14]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fe ffd5 	bl	8004e60 <_ZN11ArduinoJson8V721HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed0:	d101      	bne.n	8005ed6 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e034      	b.n	8005f40 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d114      	bne.n	8005f12 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	897a      	ldrh	r2, [r7, #10]
 8005ef0:	00d2      	lsls	r2, r2, #3
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	6838      	ldr	r0, [r7, #0]
 8005ef6:	4798      	blx	r3
 8005ef8:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e01d      	b.n	8005f40 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f011 ff97 	bl	8017e3e <memcpy>
 8005f10:	e00f      	b.n	8005f32 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6a11      	ldr	r1, [r2, #32]
 8005f1e:	897a      	ldrh	r2, [r7, #10]
 8005f20:	00d2      	lsls	r2, r2, #3
 8005f22:	6838      	ldr	r0, [r7, #0]
 8005f24:	4798      	blx	r3
 8005f26:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e006      	b.n	8005f40 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	897a      	ldrh	r2, [r7, #10]
 8005f3c:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8005f3e:	2301      	movs	r3, #1
  }
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	460b      	mov	r3, r1
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8005f56:	687d      	ldr	r5, [r7, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681c      	ldr	r4, [r3, #0]
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fa26 	bl	80053b2 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47a0      	blx	r4
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8005f7c:	897a      	ldrh	r2, [r7, #10]
 8005f7e:	e000      	b.n	8005f82 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 8005f80:	2200      	movs	r2, #0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	805a      	strh	r2, [r3, #2]
  }
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bdb0      	pop	{r4, r5, r7, pc}

08005f94 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b089      	sub	sp, #36	@ 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	f107 0408 	add.w	r4, r7, #8
 8005f9e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	e881 000c 	stmia.w	r1, {r2, r3}
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fc ff2d 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8005fb2:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fc ff28 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8005fbc:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d001      	beq.n	8005fca <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x36>
    return false;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e021      	b.n	800600e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e019      	b.n	8006004 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x70>
    if (s1[i] != s2[i])
 8005fd0:	f107 0308 	add.w	r3, r7, #8
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fb f96b 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461c      	mov	r4, r3
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fb f964 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8005fea:	4603      	mov	r3, r0
 8005fec:	429c      	cmp	r4, r3
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
      return false;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e007      	b.n	800600e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	429a      	cmp	r2, r3
 800600a:	d3e1      	bcc.n	8005fd0 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x3c>
  }
  return true;
 800600c:	2301      	movs	r3, #1
}
 800600e:	4618      	mov	r0, r3
 8006010:	3724      	adds	r7, #36	@ 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd90      	pop	{r4, r7, pc}

08006016 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
    if (str.isNull())
 8006020:	463b      	mov	r3, r7
 8006022:	4618      	mov	r0, r3
 8006024:	f7fc fe88 	bl	8002d38 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x1c>
      return 0;
 800602e:	2300      	movs	r3, #0
 8006030:	e010      	b.n	8006054 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x3e>
    auto node = stringPool_.add(str, allocator_);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f103 0008 	add.w	r0, r3, #8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	f000 fad3 	bl	80065ea <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 8006044:	60f8      	str	r0, [r7, #12]
    if (!node)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_+0x3c>
      overflowed_ = true;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	711a      	strb	r2, [r3, #4]
    return node;
 8006052:	68fb      	ldr	r3, [r7, #12]
  }
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4638      	mov	r0, r7
 8006066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800606a:	463b      	mov	r3, r7
 800606c:	4618      	mov	r0, r3
 800606e:	f7fc febc 	bl	8002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_+0x20>
      return 0;
 8006078:	2300      	movs	r3, #0
 800607a:	e011      	b.n	80060a0 <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f103 0008 	add.w	r0, r3, #8
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	463b      	mov	r3, r7
 800608a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800608c:	f000 faf1 	bl	8006672 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 8006090:	6178      	str	r0, [r7, #20]
    if (!node)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	711a      	strb	r2, [r3, #4]
    return node;
 800609e:	697b      	ldr	r3, [r7, #20]
  }
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKDnEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80060b0:	687b      	ldr	r3, [r7, #4]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 80060be:	b580      	push	{r7, lr}
 80060c0:	b088      	sub	sp, #32
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 80060ca:	f107 0314 	add.w	r3, r7, #20
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fa74 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80060de:	2000      	movs	r0, #0
 80060e0:	f7fe f918 	bl	8004314 <_ZN11ArduinoJson8V721HB229ConverterIDnvE6toJsonEDnNS0_11JsonVariantE>
  auto resources = getResourceManager();
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fb5b 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 80060ea:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 80060f2:	69f8      	ldr	r0, [r7, #28]
 80060f4:	f7fd f9d1 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f083 0301 	eor.w	r3, r3, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIDnvEERKDnEEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800611a:	687b      	ldr	r3, [r7, #4]
  }
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS0_11JsonVariantEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fd fa1a 	bl	800356a <_ZNK11ArduinoJson8V721HB2211JsonVariant15getOrCreateDataEv>
 8006136:	4603      	mov	r3, r0
  }
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fd f9f6 	bl	800353a <_ZNK11ArduinoJson8V721HB2211JsonVariant18getResourceManagerEv>
 800614e:	4603      	mov	r3, r0
  }
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7fd f9f6 	bl	8003552 <_ZNK11ArduinoJson8V721HB2211JsonVariant7getDataEv>
 8006166:	4603      	mov	r3, r0
  }
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIfEEbRKT_>:
  result_type visit(const T& value) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	edd3 7a00 	vldr	s15, [r3]
 8006184:	eeb0 0a67 	vmov.f32	s0, s15
 8006188:	4610      	mov	r0, r2
 800618a:	f000 fab2 	bl	80066f2 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIfEEbT_>
 800618e:	4603      	mov	r3, r0
  }
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIdEEbRKT_>:
  result_type visit(const T& value) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	ed93 7b00 	vldr	d7, [r3]
 80061ac:	eeb0 0a47 	vmov.f32	s0, s14
 80061b0:	eef0 0a67 	vmov.f32	s1, s15
 80061b4:	4610      	mov	r0, r2
 80061b6:	f000 faad 	bl	8006714 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIdEEbT_>
 80061ba:	4603      	mov	r3, r0
  }
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitERKNS1_9ArrayDataE>:
  result_type visit(const ArrayData& value) {
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonArrayConst(&value, resources_));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681c      	ldr	r4, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fd fa88 	bl	80036f2 <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 faa3 	bl	8006736 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_14JsonArrayConstEEEbT_>
 80061f0:	4603      	mov	r3, r0
  }
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd90      	pop	{r4, r7, pc}

080061fa <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitERKNS1_10ObjectDataE>:
  result_type visit(const ObjectData& value) {
 80061fa:	b590      	push	{r4, r7, lr}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonObjectConst(&value, resources_));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681c      	ldr	r4, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fbc9 	bl	80039aa <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fa9a 	bl	800675a <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_15JsonObjectConstEEEbT_>
 8006226:	4603      	mov	r3, r0
  }
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bd90      	pop	{r4, r7, pc}

08006230 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitINS0_10JsonStringEEEbRKT_>:
  result_type visit(const T& value) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006242:	f000 fa9c 	bl	800677e <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_10JsonStringEEEbT_>
 8006246:	4603      	mov	r3, r0
  }
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitINS0_15SerializedValueIPKcEEEEbRKT_>:
  result_type visit(const T& value) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006264:	f000 fa9d 	bl	80067a2 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_15SerializedValueIPKcEEEEbT_>
 8006268:	4603      	mov	r3, r0
  }
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIxEEbRKT_>:
  result_type visit(const T& value) {
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	4608      	mov	r0, r1
 8006288:	f000 fa9d 	bl	80067c6 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIxEEbT_>
 800628c:	4603      	mov	r3, r0
  }
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIyEEbRKT_>:
  result_type visit(const T& value) {
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4608      	mov	r0, r1
 80062ac:	f000 fa9c 	bl	80067e8 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIyEEbT_>
 80062b0:	4603      	mov	r3, r0
  }
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIbEEbRKT_>:
  result_type visit(const T& value) {
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f000 fa9b 	bl	800680a <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIbEEbT_>
 80062d4:	4603      	mov	r3, r0
  }
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_17JsonVariantCopierEE5visitIDnEEbRKT_>:
  result_type visit(const T& value) {
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fa96 	bl	8005820 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIDnEEbT_>
 80062f4:	4603      	mov	r3, r0
  }
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <_ZN11ArduinoJson8V721HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8006308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8006310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006314:	ec43 2b17 	vmov	d7, r2, r3
}
 8006318:	eeb0 0a47 	vmov.f32	s0, s14
 800631c:	eef0 0a67 	vmov.f32	s1, s15
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <_ZN11ArduinoJson8V721HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_ZN11ArduinoJson8V721HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return *p;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	ee07 3a90 	vmov	s15, r3
}
 8006358:	eeb0 0a67 	vmov.f32	s0, s15
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_>:
  bool doSet(T&& value) const {
 8006366:	b590      	push	{r4, r7, lr}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8006370:	6838      	ldr	r0, [r7, #0]
 8006372:	f000 fa5b 	bl	800682c <_ZN11ArduinoJson8V721HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006376:	4603      	mov	r3, r0
 8006378:	4622      	mov	r2, r4
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa60 	bl	8006842 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8006382:	4603      	mov	r3, r0
  }
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bd90      	pop	{r4, r7, pc}

0800638c <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
    if (!object)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x16>
      return nullptr;
 800639e:	2300      	movs	r3, #0
 80063a0:	e007      	b.n	80063b2 <_ZN11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x26>
    return object->getMember(key, resources);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fa76 	bl	800689a <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80063ae:	4603      	mov	r3, r0
 80063b0:	bf00      	nop
  }
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80063c2:	687b      	ldr	r3, [r7, #4]
  }
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa86 	bl	80068ea <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv>
 80063de:	4603      	mov	r3, r0
  }
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 faa1 	bl	8006938 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE18getResourceManagerEv>
 80063f6:	4603      	mov	r3, r0
  }
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <_ZN11ArduinoJson8V721HB226detail7compareIDnEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(static_cast<JsonVariantConst>(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	f107 0308 	add.w	r3, r7, #8
 800640a:	e883 0003 	stmia.w	r3, {r0, r1}
 800640e:	607a      	str	r2, [r7, #4]
  Comparer<T> comparer(rhs);
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fc15 	bl	8003c46 <_ZN11ArduinoJson8V721HB226detail8ComparerIDnvEC1EDn>
  return accept(lhs, comparer);
 800641c:	f107 0314 	add.w	r3, r7, #20
 8006420:	461a      	mov	r2, r3
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800642a:	f000 fa9e 	bl	800696a <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_>
 800642e:	4603      	mov	r3, r0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_>:
  bool doSet(T&& value) const {
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8006442:	6838      	ldr	r0, [r7, #0]
 8006444:	f000 fac2 	bl	80069cc <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_14JsonArrayConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006448:	4603      	mov	r3, r0
 800644a:	4622      	mov	r2, r4
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fac7 	bl	80069e2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8006454:	4603      	mov	r3, r0
  }
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}

0800645e <_ZN11ArduinoJson8V721HB226detail11VariantData12removeMemberINS1_19StaticStringAdapterEEEvT_PNS1_15ResourceManagerE>:
  void removeMember(TAdaptedString key, ResourceManager* resources) {
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
    ObjectData::removeMember(asObject(), key, resources);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7fc fe80 	bl	8003170 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8006470:	4603      	mov	r3, r0
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fadd 	bl	8006a36 <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>
  }
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8006484:	b082      	sub	sp, #8
 8006486:	b580      	push	{r7, lr}
 8006488:	b08e      	sub	sp, #56	@ 0x38
 800648a:	af02      	add	r7, sp, #8
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
 8006490:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8006494:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8006498:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800649c:	f7fc fca5 	bl	8002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fc fd75 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
 80064ac:	e05a      	b.n	8006564 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd fc13 	bl	8003ce8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80064c2:	e041      	b.n	8006548 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 80064c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d025      	beq.n	8006518 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fc fd97 	bl	8003004 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>
 80064d6:	4602      	mov	r2, r0
 80064d8:	f107 0314 	add.w	r3, r7, #20
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fc fe63 	bl	80031aa <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 80064e4:	f107 0320 	add.w	r3, r7, #32
 80064e8:	f107 0214 	add.w	r2, r7, #20
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fd4c 	bl	8004f8c <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
 80064f4:	466a      	mov	r2, sp
 80064f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006508:	ca07      	ldmia	r2, {r0, r1, r2}
 800650a:	f000 faa8 	bl	8006a5e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	461a      	mov	r2, r3
 8006522:	f107 030c 	add.w	r3, r7, #12
 8006526:	e893 0003 	ldmia.w	r3, {r0, r1}
 800652a:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 800652e:	e019      	b.n	8006564 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8006530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006534:	f083 0301 	eor.w	r3, r3, #1
 8006538:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 800653c:	f107 030c 	add.w	r3, r7, #12
 8006540:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd fbad 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	4618      	mov	r0, r3
 800654e:	f7fc fd34 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8006552:	4603      	mov	r3, r0
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1b2      	bne.n	80064c4 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_17JsonStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fc fd19 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
}
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	3730      	adds	r7, #48	@ 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800656e:	b002      	add	sp, #8
 8006570:	4770      	bx	lr

08006572 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 8006572:	b590      	push	{r4, r7, lr}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f000 fab0 	bl	8006ae2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE15getOrCreateDataEv>
 8006582:	4604      	mov	r4, r0
 8006584:	6838      	ldr	r0, [r7, #0]
 8006586:	f000 f80a 	bl	800659e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE18getResourceManagerEv>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	4621      	mov	r1, r4
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fc ffbf 	bl	8003514 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}

0800659e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 faab 	bl	8006b02 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE7derivedEv>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fab2 	bl	8006b18 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80065b4:	4603      	mov	r3, r0
  }
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 80065be:	b590      	push	{r4, r7, lr}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 80065c8:	6838      	ldr	r0, [r7, #0]
 80065ca:	f7ff f8d9 	bl	8005780 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE15getOrCreateDataEv>
 80065ce:	4604      	mov	r4, r0
 80065d0:	6838      	ldr	r0, [r7, #0]
 80065d2:	f7ff f8e5 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461a      	mov	r2, r3
 80065da:	4621      	mov	r1, r4
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fc ff99 	bl	8003514 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}

080065ea <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
    auto node = get(str);
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fb03 	bl	8006c08 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_>
 8006602:	6178      	str	r0, [r7, #20]
    if (node) {
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	889b      	ldrh	r3, [r3, #4]
 800660e:	3301      	adds	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	809a      	strh	r2, [r3, #4]
      return node;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	e027      	b.n	800666a <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x80>
    return str_ ? ::strlen(str_) : 0;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x42>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f7f9 fe2c 	bl	8000280 <strlen>
 8006628:	4603      	mov	r3, r0
 800662a:	e001      	b.n	8006630 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x46>
 800662c:	2300      	movs	r3, #0
 800662e:	bf00      	nop
    size_t n = str.size();
 8006630:	613b      	str	r3, [r7, #16]
    node = StringNode::create(n, allocator);
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	6938      	ldr	r0, [r7, #16]
 8006636:	f7fc fb35 	bl	8002ca4 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800663a:	6178      	str	r0, [r7, #20]
    if (!node)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x5c>
      return nullptr;
 8006642:	2300      	movs	r3, #0
 8006644:	e011      	b.n	800666a <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_19StaticStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x80>
    stringGetChars(str, node->data, n);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	3308      	adds	r3, #8
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4619      	mov	r1, r3
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f000 fb05 	bl	8006c5e <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	3308      	adds	r3, #8
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
    add(node);
 8006660:	6979      	ldr	r1, [r7, #20]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7fc fc47 	bl	8002ef6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 8006668:	697b      	ldr	r3, [r7, #20]
  }
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 8006672:	b580      	push	{r7, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af02      	add	r7, sp, #8
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	4638      	mov	r0, r7
 800667c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 8006680:	463b      	mov	r3, r7
 8006682:	4619      	mov	r1, r3
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fb0a 	bl	8006c9e <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_>
 800668a:	6178      	str	r0, [r7, #20]
    if (node) {
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	889b      	ldrh	r3, [r3, #4]
 8006696:	3301      	adds	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	809a      	strh	r2, [r3, #4]
      return node;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	e023      	b.n	80066ea <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 80066a2:	463b      	mov	r3, r7
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fc fbb1 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 80066aa:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 80066ac:	6a39      	ldr	r1, [r7, #32]
 80066ae:	6938      	ldr	r0, [r7, #16]
 80066b0:	f7fc faf8 	bl	8002ca4 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>
 80066b4:	6178      	str	r0, [r7, #20]
    if (!node)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 80066bc:	2300      	movs	r3, #0
 80066be:	e014      	b.n	80066ea <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_17JsonStringAdapterEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f103 0208 	add.w	r2, r3, #8
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4613      	mov	r3, r2
 80066cc:	463a      	mov	r2, r7
 80066ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80066d0:	f000 fb10 	bl	8006cf4 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_17JsonStringAdapterEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	3308      	adds	r3, #8
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
    add(node);
 80066e0:	6979      	ldr	r1, [r7, #20]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7fc fc07 	bl	8002ef6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 80066e8:	697b      	ldr	r3, [r7, #20]
  }
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIfEEbT_>:
  bool visit(T src) {
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	ed87 0a00 	vstr	s0, [r7]
    return dst_.set(src);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	463a      	mov	r2, r7
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fb15 	bl	8006d34 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIfEEbRKT_>
 800670a:	4603      	mov	r3, r0
  }
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIdEEbT_>:
  bool visit(T src) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	ed87 0b00 	vstr	d0, [r7]
    return dst_.set(src);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	463a      	mov	r2, r7
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fb12 	bl	8006d50 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIdEEbRKT_>
 800672c:	4603      	mov	r3, r0
  }
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_14JsonArrayConstEEEbT_>:
  bool visit(T src) {
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	e883 0006 	stmia.w	r3, {r1, r2}
    return dst_.set(src);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1d3a      	adds	r2, r7, #4
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb0e 	bl	8006d6c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_14JsonArrayConstEEEbRKT_>
 8006750:	4603      	mov	r3, r0
  }
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_15JsonObjectConstEEEbT_>:
  bool visit(T src) {
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	e883 0006 	stmia.w	r3, {r1, r2}
    return dst_.set(src);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1d3a      	adds	r2, r7, #4
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fb0a 	bl	8006d88 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_15JsonObjectConstEEEbRKT_>
 8006774:	4603      	mov	r3, r0
  }
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_10JsonStringEEEbT_>:
  bool visit(T src) {
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	4638      	mov	r0, r7
 8006788:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return dst_.set(src);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	463a      	mov	r2, r7
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fb06 	bl	8006da4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_10JsonStringEEEbRKT_>
 8006798:	4603      	mov	r3, r0
  }
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitINS0_15SerializedValueIPKcEEEEbT_>:
  bool visit(T src) {
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	e883 0006 	stmia.w	r3, {r1, r2}
    return dst_.set(src);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1d3a      	adds	r2, r7, #4
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fb02 	bl	8006dc0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_15SerializedValueIPKcEEEEbRKT_>
 80067bc:	4603      	mov	r3, r0
  }
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIxEEbT_>:
  bool visit(T src) {
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	e9c7 2300 	strd	r2, r3, [r7]
    return dst_.set(src);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	463a      	mov	r2, r7
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 faff 	bl	8006ddc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIxEEbRKT_>
 80067de:	4603      	mov	r3, r0
  }
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIyEEbT_>:
  bool visit(T src) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	e9c7 2300 	strd	r2, r3, [r7]
    return dst_.set(src);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	463a      	mov	r2, r7
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fafc 	bl	8006df8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIyEEbRKT_>
 8006800:	4603      	mov	r3, r0
  }
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <_ZN11ArduinoJson8V721HB226detail17JsonVariantCopier5visitIbEEbT_>:
  bool visit(T src) {
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
    return dst_.set(src);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	1cfa      	adds	r2, r7, #3
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f000 faf9 	bl	8006e14 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIbEEbRKT_>
 8006822:	4603      	mov	r3, r0
  }
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_ZN11ArduinoJson8V721HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006834:	687b      	ldr	r3, [r7, #4]
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8006842:	b590      	push	{r4, r7, lr}
 8006844:	b089      	sub	sp, #36	@ 0x24
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fae9 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006866:	4620      	mov	r0, r4
 8006868:	f7fd fcd2 	bl	8004210 <_ZN11ArduinoJson8V721HB229ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff f9d9 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8006872:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4e>
 800687a:	69f8      	ldr	r0, [r7, #28]
 800687c:	f7fc fe0d 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8006880:	4603      	mov	r3, r0
 8006882:	f083 0301 	eor.w	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4e>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS7_vEERS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x50>
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3724      	adds	r7, #36	@ 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd90      	pop	{r4, r7, pc}

0800689a <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
inline VariantData* ObjectData::getMember(
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  auto it = findKey(key, resources);
 80068a6:	f107 0010 	add.w	r0, r7, #16
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	f000 fafa 	bl	8006ea8 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80068b4:	f107 0310 	add.w	r3, r7, #16
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fc fb7e 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x2e>
    return nullptr;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e00c      	b.n	80068e2 <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x48>
  it.next(resources);
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fd f9e7 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc fb9f 	bl	800301c <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4dataEv>
 80068de:	4603      	mov	r3, r0
 80068e0:	bf00      	nop
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv>:
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), adaptString(key_),
        VariantAttorney::getResourceManager(upstream_));
  }

  VariantData* getOrCreateData() const {
 80068ea:	b5b0      	push	{r4, r5, r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb40 	bl	8006f7c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 80068fc:	60f8      	str	r0, [r7, #12]
    if (!data)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv+0x1e>
      return nullptr;
 8006904:	2300      	movs	r3, #0
 8006906:	e013      	b.n	8006930 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE15getOrCreateDataEv+0x46>
    return data->getOrAddMember(adaptString(key_),
 8006908:	68fc      	ldr	r4, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fb18 	bl	8004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8006914:	4605      	mov	r5, r0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fb3a 	bl	8006f94 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	4629      	mov	r1, r5
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fb40 	bl	8006fac <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>
 800692c:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800692e:	bf00      	nop
  }
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bdb0      	pop	{r4, r5, r7, pc}

08006938 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fb25 	bl	8006f94 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 800694a:	4603      	mov	r3, r0
  }
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_>:
typename TVisitor::result_type accept(JsonVariantConst variant,
 800696a:	b580      	push	{r7, lr}
 800696c:	b088      	sub	sp, #32
 800696e:	af00      	add	r7, sp, #0
 8006970:	f107 0308 	add.w	r3, r7, #8
 8006974:	e883 0003 	stmia.w	r3, {r0, r1}
 8006978:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(variant);
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	4618      	mov	r0, r3
 8006980:	f7fb f990 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8006984:	61f8      	str	r0, [r7, #28]
  if (!data)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_+0x2e>
    return visit.visit(nullptr);
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fd f94d 	bl	8003c2e <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>
 8006994:	4603      	mov	r3, r0
 8006996:	e015      	b.n	80069c4 <_ZN11ArduinoJson8V721HB226detail6acceptINS1_8ComparerIDnvEEEENT_11result_typeENS0_16JsonVariantConstERS5_+0x5a>
  auto resources = VariantAttorney::getResourceManager(variant);
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	4618      	mov	r0, r3
 800699e:	f7fb f98d 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80069a2:	61b8      	str	r0, [r7, #24]
  VisitorAdapter<TVisitor> adapter(visit, resources);
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fb2e 	bl	800700e <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEEC1ERS4_PKNS1_15ResourceManagerE>
  return data->accept(adapter, resources);
 80069b2:	f107 0310 	add.w	r3, r7, #16
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	4619      	mov	r1, r3
 80069ba:	69f8      	ldr	r0, [r7, #28]
 80069bc:	f000 fb3a 	bl	8007034 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	bf00      	nop
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_14JsonArrayConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b088      	sub	sp, #32
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 80069ee:	f107 0314 	add.w	r3, r7, #20
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fa1b 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	cb0c      	ldmia	r3, {r2, r3}
 8006a02:	c903      	ldmia	r1, {r0, r1}
 8006a04:	f7fd fc9f 	bl	8004346 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff f90b 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8006a0e:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8006a16:	69f8      	ldr	r0, [r7, #28]
 8006a18:	f7fc fd3f 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f083 0301 	eor.w	r3, r3, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE>:
  static void removeMember(ObjectData* obj, TAdaptedString key,
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
    if (!obj)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x20>
    obj->removeMember(key, resources);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fc24 	bl	800729c <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvT_PNS1_15ResourceManagerE>
 8006a54:	e000      	b.n	8006a58 <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvPS2_T_PNS1_15ResourceManagerE+0x22>
      return;
 8006a56:	bf00      	nop
  }
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8006a5e:	b082      	sub	sp, #8
 8006a60:	b590      	push	{r4, r7, lr}
 8006a62:	b089      	sub	sp, #36	@ 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	1d3c      	adds	r4, r7, #4
 8006a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  size_t size1 = s1.size();
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fc f9cb 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8006a76:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8006a78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fc f9c5 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8006a82:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e021      	b.n	8006ad4 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e019      	b.n	8006aca <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fa fc09 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006aa8:	69f9      	ldr	r1, [r7, #28]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fa fc01 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e007      	b.n	8006ad4 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3e1      	bcc.n	8006a96 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  return true;
 8006ad2:	2301      	movs	r3, #1
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3724      	adds	r7, #36	@ 0x24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006ade:	b002      	add	sp, #8
 8006ae0:	4770      	bx	lr

08006ae2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f809 	bl	8006b02 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE7derivedEv>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fbea 	bl	80072cc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEEEPNS1_11VariantDataERT_>
 8006af8:	4603      	mov	r3, r0
  }
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8006b0a:	687b      	ldr	r3, [r7, #4]
  }
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbdf 	bl	80072e4 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE18getResourceManagerEv>
 8006b26:	4603      	mov	r3, r0
  }
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIfEES3_RKT_>:
  TResult visit(const T&) {
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
    return TResult();
 8006b3a:	2300      	movs	r3, #0
  }
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIdEES3_RKT_>:
  TResult visit(const T&) {
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    return TResult();
 8006b52:	2300      	movs	r3, #0
  }
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15JsonObjectConstEEES3_RKT_>:
  TResult visit(const T&) {
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
    return TResult();
 8006b6a:	2300      	movs	r3, #0
  }
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_10JsonStringEEES3_RKT_>:
  TResult visit(const T&) {
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
    return TResult();
 8006b82:	2300      	movs	r3, #0
  }
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15SerializedValueIPKcEEEES3_RKT_>:
  TResult visit(const T&) {
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
    return TResult();
 8006b9a:	2300      	movs	r3, #0
  }
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIxEES3_RKT_>:
  TResult visit(const T&) {
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
    return TResult();
 8006bb2:	2300      	movs	r3, #0
  }
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIyEES3_RKT_>:
  TResult visit(const T&) {
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
    return TResult();
 8006bca:	2300      	movs	r3, #0
  }
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIbEES3_RKT_>:
  TResult visit(const T&) {
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
    return TResult();
 8006be2:	2300      	movs	r3, #0
  }
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_14JsonArrayConstEEES3_RKT_>:
  TResult visit(const T&) {
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
    return TResult();
 8006bfa:	2300      	movs	r3, #0
  }
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e019      	b.n	8006c4e <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x46>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f103 0108 	add.w	r1, r3, #8
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	88db      	ldrh	r3, [r3, #6]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe f96d 	bl	8004f0a <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f107 020c 	add.w	r2, r7, #12
 8006c36:	ca06      	ldmia	r2, {r1, r2}
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f000 fb61 	bl	8007300 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x40>
        return node;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	e006      	b.n	8006c56 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x4e>
    for (auto node = strings_; node; node = node->next) {
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e2      	bne.n	8006c1a <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_19StaticStringAdapterEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8006c54:	2300      	movs	r3, #0
  }
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 8006c5e:	b590      	push	{r4, r7, lr}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e00d      	b.n	8006c8c <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj+0x2e>
    p[i] = s[i];
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	18d4      	adds	r4, r2, r3
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fa fb08 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 8006c82:	4603      	mov	r3, r0
 8006c84:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3ed      	bcc.n	8006c70 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_19StaticStringAdapterEEEvT_Pcj+0x12>
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd90      	pop	{r4, r7, pc}

08006c9e <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b088      	sub	sp, #32
 8006ca2:	af02      	add	r7, sp, #8
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e019      	b.n	8006ce4 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_+0x46>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f103 0108 	add.w	r1, r3, #8
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	88db      	ldrh	r3, [r3, #6]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe f922 	bl	8004f0a <_ZN11ArduinoJson8V721HB226detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cd0:	f000 fb28 	bl	8007324 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_+0x40>
        return node;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	e006      	b.n	8006cec <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_+0x4e>
    for (auto node = strings_; node; node = node->next) {
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e2      	bne.n	8006cb0 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_17JsonStringAdapterEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8006cea:	2300      	movs	r3, #0
  }
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_17JsonStringAdapterEEEvT_Pcj>:
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	1d3c      	adds	r4, r7, #4
 8006cfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d00:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < n; i++) {
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e00c      	b.n	8006d22 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_17JsonStringAdapterEEEvT_Pcj+0x2e>
    p[i] = s[i];
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	18d4      	adds	r4, r2, r3
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	6979      	ldr	r1, [r7, #20]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fa facd 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d3ee      	bcc.n	8006d08 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_17JsonStringAdapterEEEvT_Pcj+0x14>
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd90      	pop	{r4, r7, pc}

08006d34 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIfEEbRKT_>:
  bool set(const T& value) const {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fb31 	bl	80073a8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIfvEERKfEEbOT0_>
 8006d46:	4603      	mov	r3, r0
  }
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIdEEbRKT_>:
  bool set(const T& value) const {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb36 	bl	80073ce <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>
 8006d62:	4603      	mov	r3, r0
  }
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_14JsonArrayConstEEEbRKT_>:
  bool set(const T& value) const {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb3b 	bl	80073f4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_>
 8006d7e:	4603      	mov	r3, r0
  }
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_15JsonObjectConstEEEbRKT_>:
  bool set(const T& value) const {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fb40 	bl	800741a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_>
 8006d9a:	4603      	mov	r3, r0
  }
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_10JsonStringEEEbRKT_>:
  bool set(const T& value) const {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb45 	bl	8007440 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_>
 8006db6:	4603      	mov	r3, r0
  }
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setINS0_15SerializedValueIPKcEEEEbRKT_>:
  bool set(const T& value) const {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb4a 	bl	8007466 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_>
 8006dd2:	4603      	mov	r3, r0
  }
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIxEEbRKT_>:
  bool set(const T& value) const {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb4f 	bl	800748c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIxvEERKxEEbOT0_>
 8006dee:	4603      	mov	r3, r0
  }
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIyEEbRKT_>:
  bool set(const T& value) const {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb54 	bl	80074b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIyvEERKyEEbOT0_>
 8006e0a:	4603      	mov	r3, r0
  }
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE3setIbEEbRKT_>:
  bool set(const T& value) const {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb59 	bl	80074d8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIbvEERKbEEbOT0_>
 8006e26:	4603      	mov	r3, r0
  }
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 8006e3a:	6838      	ldr	r0, [r7, #0]
 8006e3c:	f7fe fee2 	bl	8005c04 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE15getOrCreateDataEv>
 8006e40:	4604      	mov	r4, r0
 8006e42:	6838      	ldr	r0, [r7, #0]
 8006e44:	f7fe feee 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc fb60 	bl	8003514 <_ZN11ArduinoJson8V721HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd90      	pop	{r4, r7, pc}

08006e5c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
template <typename TOut, typename TIn>
enable_if_t<is_integral<TIn>::value && is_signed<TIn>::value &&
                is_integral<TOut>::value && is_signed<TOut>::value &&
                sizeof(TOut) < sizeof(TIn),
            bool>
canConvertNumber(TIn value) {
 8006e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8006e68:	f000 fb51 	bl	800750e <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIlvE6lowestEv>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	17da      	asrs	r2, r3, #31
 8006e70:	4698      	mov	r8, r3
 8006e72:	4691      	mov	r9, r2
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	4542      	cmp	r2, r8
 8006e7a:	eb73 0309 	sbcs.w	r3, r3, r9
 8006e7e:	db0d      	blt.n	8006e9c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8006e80:	f000 fb3d 	bl	80074fe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIlvE7highestEv>
 8006e84:	4603      	mov	r3, r0
 8006e86:	17da      	asrs	r2, r3, #31
 8006e88:	461c      	mov	r4, r3
 8006e8a:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8006e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e90:	4294      	cmp	r4, r2
 8006e92:	eb75 0303 	sbcs.w	r3, r5, r3
 8006e96:	db01      	blt.n	8006e9c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006ea8 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
inline ObjectData::iterator ObjectData::findKey(
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08e      	sub	sp, #56	@ 0x38
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  if (key.isNull())
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fb ff3d 	bl	8002d38 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x24>
    return iterator();
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7fc f866 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
 8006eca:	e053      	b.n	8006f74 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xcc>
  bool isKey = true;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fc ff04 	bl	8003ce8 <_ZNK11ArduinoJson8V721HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8006ee0:	e03a      	b.n	8006f58 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xb0>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8006ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01e      	beq.n	8006f28 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x80>
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fc f888 	bl	8003004 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorptEv>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	f107 031c 	add.w	r3, r7, #28
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fc f954 	bl	80031aa <_ZNK11ArduinoJson8V721HB226detail11VariantData8asStringEv>
 8006f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f06:	f107 021c 	add.w	r2, r7, #28
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe f83d 	bl	8004f8c <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
 8006f12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fb01 	bl	8007520 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_17JsonStringAdapterEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x80>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x82>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x98>
      return it;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	461a      	mov	r2, r3
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f3a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006f3e:	e019      	b.n	8006f74 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xcc>
    isKey = !isKey;
 8006f40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8006f4c:	f107 0314 	add.w	r3, r7, #20
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fc fea5 	bl	8003ca2 <_ZN11ArduinoJson8V721HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fc f82c 	bl	8002fba <_ZNK11ArduinoJson8V721HB226detail18CollectionIterator4doneEv>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f083 0301 	eor.w	r3, r3, #1
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1b9      	bne.n	8006ee2 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x3a>
  return iterator();
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7fc f811 	bl	8002f96 <_ZN11ArduinoJson8V721HB226detail18CollectionIteratorC1Ev>
}
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	3738      	adds	r7, #56	@ 0x38
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fc fe2e 	bl	8003be6 <_ZN11ArduinoJson8V721HB2212JsonDocument15getOrCreateDataEv>
 8006f8a:	4603      	mov	r3, r0
  }
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fc fe0b 	bl	8003bb8 <_ZN11ArduinoJson8V721HB2212JsonDocument18getResourceManagerEv>
 8006fa2:	4603      	mov	r3, r0
  }
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
    if (key.isNull())
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fb febb 	bl	8002d38 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamString6isNullEv>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e01c      	b.n	8007006 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5a>
    auto obj = isNull() ? &toObject() : asObject();
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7fc f934 	bl	800323a <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7fc fa1b 	bl	8003414 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	e003      	b.n	8006fea <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fc f8c4 	bl	8003170 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	617b      	str	r3, [r7, #20]
    if (!obj)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e007      	b.n	8007006 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5a>
    return obj->getOrAddMember(key, resources);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 faa0 	bl	8007542 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8007002:	4603      	mov	r3, r0
 8007004:	bf00      	nop
  }
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEEC1ERS4_PKNS1_15ResourceManagerE>:
  VisitorAdapter(TVisitor& visitor, const ResourceManager* resources)
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
      : visitor_(&visitor), resources_(resources) {}
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 8007034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007038:	b094      	sub	sp, #80	@ 0x50
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7fa fdd1 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800704a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    switch (type_) {
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	791b      	ldrb	r3, [r3, #4]
 8007050:	3b03      	subs	r3, #3
 8007052:	2b3d      	cmp	r3, #61	@ 0x3d
 8007054:	f200 8113 	bhi.w	800727e <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x24a>
 8007058:	a201      	add	r2, pc, #4	@ (adr r2, 8007060 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x2c>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	080071db 	.word	0x080071db
 8007064:	08007191 	.word	0x08007191
 8007068:	080071b1 	.word	0x080071b1
 800706c:	0800725d 	.word	0x0800725d
 8007070:	0800727f 	.word	0x0800727f
 8007074:	0800727f 	.word	0x0800727f
 8007078:	0800727f 	.word	0x0800727f
 800707c:	08007223 	.word	0x08007223
 8007080:	0800727f 	.word	0x0800727f
 8007084:	08007205 	.word	0x08007205
 8007088:	0800727f 	.word	0x0800727f
 800708c:	08007159 	.word	0x08007159
 8007090:	0800727f 	.word	0x0800727f
 8007094:	0800727f 	.word	0x0800727f
 8007098:	0800727f 	.word	0x0800727f
 800709c:	0800727f 	.word	0x0800727f
 80070a0:	0800727f 	.word	0x0800727f
 80070a4:	0800727f 	.word	0x0800727f
 80070a8:	0800727f 	.word	0x0800727f
 80070ac:	0800727f 	.word	0x0800727f
 80070b0:	0800727f 	.word	0x0800727f
 80070b4:	0800727f 	.word	0x0800727f
 80070b8:	0800727f 	.word	0x0800727f
 80070bc:	0800724f 	.word	0x0800724f
 80070c0:	0800727f 	.word	0x0800727f
 80070c4:	08007241 	.word	0x08007241
 80070c8:	0800727f 	.word	0x0800727f
 80070cc:	08007167 	.word	0x08007167
 80070d0:	0800727f 	.word	0x0800727f
 80070d4:	08007183 	.word	0x08007183
 80070d8:	0800727f 	.word	0x0800727f
 80070dc:	0800727f 	.word	0x0800727f
 80070e0:	0800727f 	.word	0x0800727f
 80070e4:	0800727f 	.word	0x0800727f
 80070e8:	0800727f 	.word	0x0800727f
 80070ec:	0800727f 	.word	0x0800727f
 80070f0:	0800727f 	.word	0x0800727f
 80070f4:	0800727f 	.word	0x0800727f
 80070f8:	0800727f 	.word	0x0800727f
 80070fc:	0800727f 	.word	0x0800727f
 8007100:	0800727f 	.word	0x0800727f
 8007104:	0800727f 	.word	0x0800727f
 8007108:	0800727f 	.word	0x0800727f
 800710c:	0800727f 	.word	0x0800727f
 8007110:	0800727f 	.word	0x0800727f
 8007114:	0800727f 	.word	0x0800727f
 8007118:	0800727f 	.word	0x0800727f
 800711c:	0800727f 	.word	0x0800727f
 8007120:	0800727f 	.word	0x0800727f
 8007124:	0800727f 	.word	0x0800727f
 8007128:	0800727f 	.word	0x0800727f
 800712c:	0800727f 	.word	0x0800727f
 8007130:	0800727f 	.word	0x0800727f
 8007134:	0800727f 	.word	0x0800727f
 8007138:	0800727f 	.word	0x0800727f
 800713c:	0800727f 	.word	0x0800727f
 8007140:	0800727f 	.word	0x0800727f
 8007144:	0800727f 	.word	0x0800727f
 8007148:	0800727f 	.word	0x0800727f
 800714c:	0800727f 	.word	0x0800727f
 8007150:	0800727f 	.word	0x0800727f
 8007154:	08007175 	.word	0x08007175
        return visit.visit(content_.asFloat);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4619      	mov	r1, r3
 800715c:	68b8      	ldr	r0, [r7, #8]
 800715e:	f000 fa0c 	bl	800757a <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIfEENS1_13CompareResultERKT_>
 8007162:	4603      	mov	r3, r0
 8007164:	e095      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asDouble);
 8007166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007168:	4619      	mov	r1, r3
 800716a:	68b8      	ldr	r0, [r7, #8]
 800716c:	f000 fa15 	bl	800759a <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIdEENS1_13CompareResultERKT_>
 8007170:	4603      	mov	r3, r0
 8007172:	e08e      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asArray);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4619      	mov	r1, r3
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	f000 fa1e 	bl	80075ba <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_9ArrayDataE>
 800717e:	4603      	mov	r3, r0
 8007180:	e087      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asObject);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4619      	mov	r1, r3
 8007186:	68b8      	ldr	r0, [r7, #8]
 8007188:	f000 fa31 	bl	80075ee <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_10ObjectDataE>
 800718c:	4603      	mov	r3, r0
 800718e:	e080      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asLinkedString));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6819      	ldr	r1, [r3, #0]
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	2201      	movs	r2, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f7fa fac4 	bl	8001728 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcNS1_9OwnershipE>
 80071a0:	f107 0310 	add.w	r3, r7, #16
 80071a4:	4619      	mov	r1, r3
 80071a6:	68b8      	ldr	r0, [r7, #8]
 80071a8:	f000 fa3b 	bl	8007622 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>
 80071ac:	4603      	mov	r3, r0
 80071ae:	e070      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length,
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80071be:	461a      	mov	r2, r3
 80071c0:	f107 001c 	add.w	r0, r7, #28
 80071c4:	2300      	movs	r3, #0
 80071c6:	f7fa facc 	bl	8001762 <_ZN11ArduinoJson8V721HB2210JsonStringC1EPKcjNS1_9OwnershipE>
 80071ca:	f107 031c 	add.w	r3, r7, #28
 80071ce:	4619      	mov	r1, r3
 80071d0:	68b8      	ldr	r0, [r7, #8]
 80071d2:	f000 fa26 	bl	8007622 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>
 80071d6:	4603      	mov	r3, r0
                                      JsonString::Copied));
 80071d8:	e05b      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(RawString(content_.asOwnedString->data,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 80071e8:	461a      	mov	r2, r3
 80071ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa ff5c 	bl	80020ac <_ZN11ArduinoJson8V721HB2215SerializedValueIPKcEC1ES3_j>
 80071f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80071f8:	4619      	mov	r1, r3
 80071fa:	68b8      	ldr	r0, [r7, #8]
 80071fc:	f000 fa21 	bl	8007642 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_15SerializedValueIPKcEEEENS1_13CompareResultERKT_>
 8007200:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 8007202:	e046      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	17da      	asrs	r2, r3, #31
 800720a:	4698      	mov	r8, r3
 800720c:	4691      	mov	r9, r2
 800720e:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8007212:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007216:	4619      	mov	r1, r3
 8007218:	68b8      	ldr	r0, [r7, #8]
 800721a:	f000 fa22 	bl	8007662 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>
 800721e:	4603      	mov	r3, r0
 8007220:	e037      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	461c      	mov	r4, r3
 800722a:	4615      	mov	r5, r2
 800722c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8007230:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007234:	4619      	mov	r1, r3
 8007236:	68b8      	ldr	r0, [r7, #8]
 8007238:	f000 fa23 	bl	8007682 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>
 800723c:	4603      	mov	r3, r0
 800723e:	e028      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asInt64);
 8007240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007242:	4619      	mov	r1, r3
 8007244:	68b8      	ldr	r0, [r7, #8]
 8007246:	f000 fa0c 	bl	8007662 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>
 800724a:	4603      	mov	r3, r0
 800724c:	e021      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(extension->asUint64);
 800724e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007250:	4619      	mov	r1, r3
 8007252:	68b8      	ldr	r0, [r7, #8]
 8007254:	f000 fa15 	bl	8007682 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>
 8007258:	4603      	mov	r3, r0
 800725a:	e01a      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(content_.asBoolean != 0);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bf14      	ite	ne
 8007264:	2301      	movne	r3, #1
 8007266:	2300      	moveq	r3, #0
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800726e:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8007272:	4619      	mov	r1, r3
 8007274:	68b8      	ldr	r0, [r7, #8]
 8007276:	f000 fa14 	bl	80076a2 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIbEENS1_13CompareResultERKT_>
 800727a:	4603      	mov	r3, r0
 800727c:	e009      	b.n	8007292 <_ZNK11ArduinoJson8V721HB226detail11VariantData6acceptINS1_14VisitorAdapterINS1_8ComparerIDnvEEEEEENT_11result_typeERS8_PKNS1_15ResourceManagerE+0x25e>
        return visit.visit(nullptr);
 800727e:	2300      	movs	r3, #0
 8007280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007282:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007286:	4619      	mov	r1, r3
 8007288:	68b8      	ldr	r0, [r7, #8]
 800728a:	f000 fa1a 	bl	80076c2 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIDnEENS1_13CompareResultERKT_>
 800728e:	4603      	mov	r3, r0
 8007290:	bf00      	nop
  }
 8007292:	4618      	mov	r0, r3
 8007294:	3750      	adds	r7, #80	@ 0x50
 8007296:	46bd      	mov	sp, r7
 8007298:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800729c <_ZN11ArduinoJson8V721HB226detail10ObjectData12removeMemberINS1_19StaticStringAdapterEEEvT_PNS1_15ResourceManagerE>:

template <typename TAdaptedString>
inline void ObjectData::removeMember(TAdaptedString key,
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
 80072a8:	f107 0010 	add.w	r0, r7, #16
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	f7ff fdf9 	bl	8006ea8 <_ZNK11ArduinoJson8V721HB226detail10ObjectData7findKeyINS1_19StaticStringAdapterEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f107 0210 	add.w	r2, r7, #16
 80072bc:	ca06      	ldmia	r2, {r1, r2}
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7fb fefb 	bl	80030ba <_ZN11ArduinoJson8V721HB226detail10ObjectData6removeENS1_18CollectionIteratorEPNS1_15ResourceManagerE>
}
 80072c4:	bf00      	nop
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS0_10JsonObjectENS0_10JsonStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa04 	bl	80076e2 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE15getOrCreateDataEv>
 80072da:	4603      	mov	r3, r0
  }
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fa22 	bl	800773a <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80072f6:	4603      	mov	r3, r0
  }
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	e883 0006 	stmia.w	r3, {r1, r2}
  return stringEquals(s2, s1);
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	1d3b      	adds	r3, r7, #4
 8007312:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007316:	f000 fa1c 	bl	8007752 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 800731a:	4603      	mov	r3, r0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007324:	b082      	sub	sp, #8
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b089      	sub	sp, #36	@ 0x24
 800732a:	af00      	add	r7, sp, #0
 800732c:	1d3c      	adds	r4, r7, #4
 800732e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
  size_t size1 = s1.size();
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fb fd68 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 800733c:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800733e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007342:	4618      	mov	r0, r3
 8007344:	f7fb fd62 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8007348:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	429a      	cmp	r2, r3
 8007350:	d001      	beq.n	8007356 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x32>
    return false;
 8007352:	2300      	movs	r3, #0
 8007354:	e021      	b.n	800739a <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e019      	b.n	8007390 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x6c>
    if (s1[i] != s2[i])
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	69f9      	ldr	r1, [r7, #28]
 8007360:	4618      	mov	r0, r3
 8007362:	f7f9 ffa6 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8007366:	4603      	mov	r3, r0
 8007368:	461c      	mov	r4, r3
 800736a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800736e:	69f9      	ldr	r1, [r7, #28]
 8007370:	4618      	mov	r0, r3
 8007372:	f7f9 ff9e 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8007376:	4603      	mov	r3, r0
 8007378:	429c      	cmp	r4, r3
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x66>
      return false;
 8007386:	2300      	movs	r3, #0
 8007388:	e007      	b.n	800739a <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x76>
  for (size_t i = 0; i < size1; i++) {
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	d3e1      	bcc.n	800735c <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_14SizedRamStringEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x38>
  return true;
 8007398:	2301      	movs	r3, #1
}
 800739a:	4618      	mov	r0, r3
 800739c:	3724      	adds	r7, #36	@ 0x24
 800739e:	46bd      	mov	sp, r7
 80073a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80073a4:	b002      	add	sp, #8
 80073a6:	4770      	bx	lr

080073a8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIfvEERKfEEbOT0_>:
  bool doSet(T&& value) const {
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80073b2:	6838      	ldr	r0, [r7, #0]
 80073b4:	f000 fa13 	bl	80077de <_ZN11ArduinoJson8V721HB226detail7forwardIRKfEEOT_RNS1_16remove_referenceIS5_E4typeE>
 80073b8:	4603      	mov	r3, r0
 80073ba:	4622      	mov	r2, r4
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa18 	bl	80077f4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIfvEERKfEEbOT0_NS1_17integral_constantIbLb1EEE>
 80073c4:	4603      	mov	r3, r0
  }
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}

080073ce <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>:
  bool doSet(T&& value) const {
 80073ce:	b590      	push	{r4, r7, lr}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80073d8:	6838      	ldr	r0, [r7, #0]
 80073da:	f000 fa2b 	bl	8007834 <_ZN11ArduinoJson8V721HB226detail7forwardIRKdEEOT_RNS1_16remove_referenceIS5_E4typeE>
 80073de:	4603      	mov	r3, r0
 80073e0:	4622      	mov	r2, r4
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa30 	bl	800784a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>
 80073ea:	4603      	mov	r3, r0
  }
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd90      	pop	{r4, r7, pc}

080073f4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_>:
  bool doSet(T&& value) const {
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80073fe:	6838      	ldr	r0, [r7, #0]
 8007400:	f7ff fae4 	bl	80069cc <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_14JsonArrayConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8007404:	4603      	mov	r3, r0
 8007406:	4622      	mov	r2, r4
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa3f 	bl	800788e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8007410:	4603      	mov	r3, r0
  }
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}

0800741a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_>:
  bool doSet(T&& value) const {
 800741a:	b590      	push	{r4, r7, lr}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8007424:	6838      	ldr	r0, [r7, #0]
 8007426:	f000 fa5c 	bl	80078e2 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_15JsonObjectConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800742a:	4603      	mov	r3, r0
 800742c:	4622      	mov	r2, r4
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa61 	bl	80078f8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8007436:	4603      	mov	r3, r0
  }
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	bd90      	pop	{r4, r7, pc}

08007440 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_>:
  bool doSet(T&& value) const {
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f000 fa85 	bl	800795a <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8007450:	4603      	mov	r3, r0
 8007452:	4622      	mov	r2, r4
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa8a 	bl	8007970 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>
 800745c:	4603      	mov	r3, r0
  }
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	bd90      	pop	{r4, r7, pc}

08007466 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_>:
  bool doSet(T&& value) const {
 8007466:	b590      	push	{r4, r7, lr}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8007470:	6838      	ldr	r0, [r7, #0]
 8007472:	f000 faa7 	bl	80079c4 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_15SerializedValueIPKcEEEEOT_RNS1_16remove_referenceIS9_E4typeE>
 8007476:	4603      	mov	r3, r0
 8007478:	4622      	mov	r2, r4
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 faac 	bl	80079da <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE>
 8007482:	4603      	mov	r3, r0
  }
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	bd90      	pop	{r4, r7, pc}

0800748c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIxvEERKxEEbOT0_>:
  bool doSet(T&& value) const {
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8007496:	6838      	ldr	r0, [r7, #0]
 8007498:	f000 fac9 	bl	8007a2e <_ZN11ArduinoJson8V721HB226detail7forwardIRKxEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800749c:	4603      	mov	r3, r0
 800749e:	4622      	mov	r2, r4
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 face 	bl	8007a44 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIxvEERKxEEbOT0_NS1_17integral_constantIbLb1EEE>
 80074a8:	4603      	mov	r3, r0
  }
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd90      	pop	{r4, r7, pc}

080074b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIyvEERKyEEbOT0_>:
  bool doSet(T&& value) const {
 80074b2:	b590      	push	{r4, r7, lr}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f000 fadc 	bl	8007a7a <_ZN11ArduinoJson8V721HB226detail7forwardIRKyEEOT_RNS1_16remove_referenceIS5_E4typeE>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4622      	mov	r2, r4
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fae1 	bl	8007a90 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIyvEERKyEEbOT0_NS1_17integral_constantIbLb1EEE>
 80074ce:	4603      	mov	r3, r0
  }
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd90      	pop	{r4, r7, pc}

080074d8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIbvEERKbEEbOT0_>:
  bool doSet(T&& value) const {
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80074e2:	6838      	ldr	r0, [r7, #0]
 80074e4:	f000 faef 	bl	8007ac6 <_ZN11ArduinoJson8V721HB226detail7forwardIRKbEEOT_RNS1_16remove_referenceIS5_E4typeE>
 80074e8:	4603      	mov	r3, r0
 80074ea:	4622      	mov	r2, r4
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 faf4 	bl	8007adc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIbvEERKbEEbOT0_NS1_17integral_constantIbLb1EEE>
 80074f4:	4603      	mov	r3, r0
  }
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd90      	pop	{r4, r7, pc}

080074fe <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIlvE7highestEv>:
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
    return T(T(1) << (sizeof(T) * 8 - 1));
  }
  static constexpr T highest() {
 80074fe:	b580      	push	{r7, lr}
 8007500:	af00      	add	r7, sp, #0
    return T(~lowest());
 8007502:	f000 f804 	bl	800750e <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIlvE6lowestEv>
 8007506:	4603      	mov	r3, r0
 8007508:	43db      	mvns	r3, r3
  }
 800750a:	4618      	mov	r0, r3
 800750c:	bd80      	pop	{r7, pc}

0800750e <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIlvE6lowestEv>:
  static constexpr T lowest() {
 800750e:	b480      	push	{r7}
 8007510:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8007512:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8007516:	4618      	mov	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_19StaticStringAdapterENS1_17JsonStringAdapterEEENS1_9enable_ifIXgtsrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	4638      	mov	r0, r7
 800752a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  return stringEquals(s2, s1);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	463a      	mov	r2, r7
 8007532:	ca07      	ldmia	r2, {r0, r1, r2}
 8007534:	f000 fb23 	bl	8007b7e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>
 8007538:	4603      	mov	r3, r0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
  auto data = getMember(key, resources);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff f9a1 	bl	800689a <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007558:	6178      	str	r0, [r7, #20]
  if (data)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x22>
    return data;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	e006      	b.n	8007572 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x30>
  return addMember(key, resources);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fb4b 	bl	8007c04 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800756e:	4603      	mov	r3, r0
 8007570:	bf00      	nop
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIfEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fad0 	bl	8006b30 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIfEES3_RKT_>
 8007590:	4603      	mov	r3, r0
  }
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIdEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff facc 	bl	8006b48 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIdEES3_RKT_>
 80075b0:	4603      	mov	r3, r0
  }
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_9ArrayDataE>:
  result_type visit(const ArrayData& value) {
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonArrayConst(&value, resources_));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681c      	ldr	r4, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fc f88d 	bl	80036f2 <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1EPKNS0_6detail9ArrayDataEPKNS2_15ResourceManagerE>
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	4619      	mov	r1, r3
 80075de:	4620      	mov	r0, r4
 80075e0:	f7ff fb06 	bl	8006bf0 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_14JsonArrayConstEEES3_RKT_>
 80075e4:	4603      	mov	r3, r0
  }
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}

080075ee <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitERKNS1_10ObjectDataE>:
  result_type visit(const ObjectData& value) {
 80075ee:	b590      	push	{r4, r7, lr}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
    return visitor_->visit(JsonObjectConst(&value, resources_));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681c      	ldr	r4, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fc f9cf 	bl	80039aa <_ZN11ArduinoJson8V721HB2215JsonObjectConstC1EPKNS0_6detail10ObjectDataEPKNS2_15ResourceManagerE>
 800760c:	f107 0308 	add.w	r3, r7, #8
 8007610:	4619      	mov	r1, r3
 8007612:	4620      	mov	r0, r4
 8007614:	f7ff faa4 	bl	8006b60 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15JsonObjectConstEEES3_RKT_>
 8007618:	4603      	mov	r3, r0
  }
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}

08007622 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_10JsonStringEEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff faa0 	bl	8006b78 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_10JsonStringEEES3_RKT_>
 8007638:	4603      	mov	r3, r0
  }
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitINS0_15SerializedValueIPKcEEEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fa9c 	bl	8006b90 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitINS0_15SerializedValueIPKcEEEES3_RKT_>
 8007658:	4603      	mov	r3, r0
  }
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIxEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fa98 	bl	8006ba8 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIxEES3_RKT_>
 8007678:	4603      	mov	r3, r0
  }
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIyEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fa94 	bl	8006bc0 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIyEES3_RKT_>
 8007698:	4603      	mov	r3, r0
  }
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIbEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fa90 	bl	8006bd8 <_ZN11ArduinoJson8V721HB226detail18JsonVariantVisitorINS1_13CompareResultEE5visitIbEES3_RKT_>
 80076b8:	4603      	mov	r3, r0
  }
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <_ZN11ArduinoJson8V721HB226detail14VisitorAdapterINS1_8ComparerIDnvEEE5visitIDnEENS1_13CompareResultERKT_>:
  result_type visit(const T& value) {
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
    return visitor_->visit(value);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fc faab 	bl	8003c2e <_ZN11ArduinoJson8V721HB226detail12NullComparer5visitEDn>
 80076d8:	4603      	mov	r3, r0
  }
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 80076e2:	b590      	push	{r4, r7, lr}
 80076e4:	b089      	sub	sp, #36	@ 0x24
 80076e6:	af02      	add	r7, sp, #8
 80076e8:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fadd 	bl	8007cae <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS0_10JsonObjectEEEPNS1_11VariantDataERT_>
 80076f4:	6178      	str	r0, [r7, #20]
    if (!data)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e018      	b.n	8007732 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyINS0_10JsonObjectENS0_10JsonStringEE15getOrCreateDataEv+0x50>
    return data->getOrAddMember(adaptString(key_),
 8007700:	697c      	ldr	r4, [r7, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f103 020c 	add.w	r2, r3, #12
 8007708:	f107 0308 	add.w	r3, r7, #8
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd fc3c 	bl	8004f8c <_ZN11ArduinoJson8V721HB226detail11adaptStringINS0_10JsonStringEEENS1_13StringAdapterIT_vE13AdaptedStringERKS5_>
                                VariantAttorney::getResourceManager(upstream_));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
    return data->getOrAddMember(adaptString(key_),
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f80e 	bl	800773a <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 800771e:	4603      	mov	r3, r0
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007728:	4620      	mov	r0, r4
 800772a:	f000 facc 	bl	8007cc6 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>
 800772e:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 8007730:	bf00      	nop
  }
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bd90      	pop	{r4, r7, pc}

0800773a <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fc fa1e 	bl	8003b84 <_ZNK11ArduinoJson8V721HB2210JsonObject18getResourceManagerEv>
 8007748:	4603      	mov	r3, r0
  }
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007752:	b590      	push	{r4, r7, lr}
 8007754:	b089      	sub	sp, #36	@ 0x24
 8007756:	af00      	add	r7, sp, #0
 8007758:	f107 0308 	add.w	r3, r7, #8
 800775c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007760:	607a      	str	r2, [r7, #4]
  size_t size1 = s1.size();
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	4618      	mov	r0, r3
 8007768:	f7fb fb50 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 800776c:	61b8      	str	r0, [r7, #24]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4618      	mov	r0, r3
 8007778:	f7f8 fd82 	bl	8000280 <strlen>
 800777c:	4603      	mov	r3, r0
 800777e:	e001      	b.n	8007784 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x32>
 8007780:	2300      	movs	r3, #0
 8007782:	bf00      	nop
  size_t size2 = s2.size();
 8007784:	617b      	str	r3, [r7, #20]
  if (size1 != size2)
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	429a      	cmp	r2, r3
 800778c:	d001      	beq.n	8007792 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x40>
    return false;
 800778e:	2300      	movs	r3, #0
 8007790:	e021      	b.n	80077d6 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x84>
  for (size_t i = 0; i < size1; i++) {
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	e019      	b.n	80077cc <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7a>
    if (s1[i] != s2[i])
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7f9 fd87 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461c      	mov	r4, r3
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	69f9      	ldr	r1, [r7, #28]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7f9 fd70 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 80077b2:	4603      	mov	r3, r0
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x74>
      return false;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e007      	b.n	80077d6 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x84>
  for (size_t i = 0; i < size1; i++) {
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	3301      	adds	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d3e1      	bcc.n	8007798 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_14SizedRamStringENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x46>
  return true;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3724      	adds	r7, #36	@ 0x24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd90      	pop	{r4, r7, pc}

080077de <_ZN11ArduinoJson8V721HB226detail7forwardIRKfEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80077e6:	687b      	ldr	r3, [r7, #4]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIfvEERKfEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	ed2d 8b02 	vpush	{d8}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	ed93 8a00 	vldr	s16, [r3]
 800780a:	f107 0310 	add.w	r3, r7, #16
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fed4 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8007816:	f107 0310 	add.w	r3, r7, #16
 800781a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800781e:	eeb0 0a48 	vmov.f32	s0, s16
 8007822:	f000 fa82 	bl	8007d2a <_ZN11ArduinoJson8V721HB229ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 8007826:	4603      	mov	r3, r0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	ecbd 8b02 	vpop	{d8}
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZN11ArduinoJson8V721HB226detail7forwardIRKdEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800783c:	687b      	ldr	r3, [r7, #4]
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 800784a:	b580      	push	{r7, lr}
 800784c:	ed2d 8b02 	vpush	{d8}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	ed93 8b00 	vldr	d8, [r3]
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fea9 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 800786c:	f107 0310 	add.w	r3, r7, #16
 8007870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007874:	eeb0 0a48 	vmov.f32	s0, s16
 8007878:	eef0 0a68 	vmov.f32	s1, s17
 800787c:	f000 fa7c 	bl	8007d78 <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	ecbd 8b02 	vpop	{d8}
 800788c:	bd80      	pop	{r7, pc}

0800788e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 800788e:	b580      	push	{r7, lr}
 8007890:	b088      	sub	sp, #32
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fe8c 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	cb0c      	ldmia	r3, {r2, r3}
 80078ae:	c903      	ldmia	r1, {r0, r1}
 80078b0:	f7fc fd49 	bl	8004346 <_ZN11ArduinoJson8V721HB229ConverterINS0_14JsonArrayConstEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7fd ff73 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 80078ba:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 80078c2:	69f8      	ldr	r0, [r7, #28]
 80078c4:	f7fb fde9 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f083 0301 	eor.w	r3, r3, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_14JsonArrayConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_15JsonObjectConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80078ea:	687b      	ldr	r3, [r7, #4]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	@ 0x28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	4618      	mov	r0, r3
 800790c:	f7fc f860 	bl	80039d0 <_ZNK11ArduinoJson8V721HB2215JsonObjectConstcvNS0_16JsonVariantConstEEv>
 8007910:	f107 031c 	add.w	r3, r7, #28
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fe51 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 800791c:	f107 031c 	add.w	r3, r7, #28
 8007920:	cb0c      	ldmia	r3, {r2, r3}
 8007922:	f107 0114 	add.w	r1, r7, #20
 8007926:	c903      	ldmia	r1, {r0, r1}
 8007928:	f7fc fd7b 	bl	8004422 <_ZN11ArduinoJson8V721HB229ConverterINS0_15JsonObjectConstEvE6toJsonENS0_16JsonVariantConstENS0_11JsonVariantE>
  auto resources = getResourceManager();
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7fd ff37 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8007932:	6278      	str	r0, [r7, #36]	@ 0x24
  return resources && !resources->overflowed();
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x58>
 800793a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800793c:	f7fb fdad 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8007940:	4603      	mov	r3, r0
 8007942:	f083 0301 	eor.w	r3, r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x58>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15JsonObjectConstEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x5a>
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3728      	adds	r7, #40	@ 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007962:	687b      	ldr	r3, [r7, #4]
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	@ 0x28
 8007974:	af02      	add	r7, sp, #8
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 800797c:	f107 0314 	add.w	r3, r7, #20
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fe1b 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	ca07      	ldmia	r2, {r0, r1, r2}
 8007992:	f7fc fc96 	bl	80042c2 <_ZN11ArduinoJson8V721HB229ConverterINS0_10JsonStringEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7fd ff02 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800799c:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 80079a4:	69f8      	ldr	r0, [r7, #28]
 80079a6:	f7fb fd78 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f083 0301 	eor.w	r3, r3, #1
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_10JsonStringEvEERKS7_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_15SerializedValueIPKcEEEEOT_RNS1_16remove_referenceIS9_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80079cc:	687b      	ldr	r3, [r7, #4]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 80079da:	b580      	push	{r7, lr}
 80079dc:	b088      	sub	sp, #32
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fde6 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	cb0c      	ldmia	r3, {r2, r3}
 80079fa:	c903      	ldmia	r1, {r0, r1}
 80079fc:	f000 f9e3 	bl	8007dc6 <_ZN11ArduinoJson8V721HB229ConverterINS0_15SerializedValueIPKcEEvE6toJsonES5_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7fd fecd 	bl	80057a0 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8007a06:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f7fb fd43 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f083 0301 	eor.w	r3, r3, #1
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterINS0_15SerializedValueIPKcEEvEERKSA_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZN11ArduinoJson8V721HB226detail7forwardIRKxEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007a36:	687b      	ldr	r3, [r7, #4]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIxvEERKxEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8007a44:	b5b0      	push	{r4, r5, r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a56:	f107 0310 	add.w	r3, r7, #16
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fdae 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	cb0c      	ldmia	r3, {r2, r3}
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f000 f9c9 	bl	8007e02 <_ZN11ArduinoJson8V721HB229ConverterIxvE6toJsonExNS0_11JsonVariantE>
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bdb0      	pop	{r4, r5, r7, pc}

08007a7a <_ZN11ArduinoJson8V721HB226detail7forwardIRKyEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007a82:	687b      	ldr	r3, [r7, #4]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIyvEERKyEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007aa2:	f107 0310 	add.w	r3, r7, #16
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe fd88 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8007aae:	f107 0310 	add.w	r3, r7, #16
 8007ab2:	cb0c      	ldmia	r3, {r2, r3}
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f000 f9cb 	bl	8007e52 <_ZN11ArduinoJson8V721HB229ConverterIyvE6toJsonEyNS0_11JsonVariantE>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bdb0      	pop	{r4, r5, r7, pc}

08007ac6 <_ZN11ArduinoJson8V721HB226detail7forwardIRKbEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007ace:	687b      	ldr	r3, [r7, #4]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE5doSetINS0_9ConverterIbvEERKbEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	781c      	ldrb	r4, [r3, #0]
 8007aec:	f107 0310 	add.w	r3, r7, #16
 8007af0:	68f9      	ldr	r1, [r7, #12]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fd63 	bl	80065be <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS0_11JsonVariantEE18getOrCreateVariantEv>
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7fc fb60 	bl	80041c6 <_ZN11ArduinoJson8V721HB229ConverterIbvE6toJsonEbNS0_11JsonVariantE>
 8007b06:	4603      	mov	r3, r0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd90      	pop	{r4, r7, pc}

08007b10 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9c2 	bl	8007ea2 <_ZN11ArduinoJson8V721HB226detail10alias_castIfmEET_T0_>
 8007b1e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007b22:	eeb0 0a67 	vmov.f32	s0, s15
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf14      	ite	ne
 8007b3c:	2301      	movne	r3, #1
 8007b3e:	2300      	moveq	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
  }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
    return id_;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	889b      	ldrh	r3, [r3, #4]
  }
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
  }
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8007b7e:	b590      	push	{r4, r7, lr}
 8007b80:	b089      	sub	sp, #36	@ 0x24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	1d3c      	adds	r4, r7, #4
 8007b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b8a:	603b      	str	r3, [r7, #0]
  size_t size1 = s1.size();
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fb f93c 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8007b94:	61b8      	str	r0, [r7, #24]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2a>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f8 fb6e 	bl	8000280 <strlen>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e001      	b.n	8007bac <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x2e>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	bf00      	nop
  size_t size2 = s2.size();
 8007bac:	617b      	str	r3, [r7, #20]
  if (size1 != size2)
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d001      	beq.n	8007bba <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x3c>
    return false;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e020      	b.n	8007bfc <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7e>
  for (size_t i = 0; i < size1; i++) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e018      	b.n	8007bf2 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x74>
    if (s1[i] != s2[i])
 8007bc0:	1d3b      	adds	r3, r7, #4
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7f9 fb74 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461c      	mov	r4, r3
 8007bce:	463b      	mov	r3, r7
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7f9 fb5d 	bl	8001292 <_ZNK11ArduinoJson8V721HB226detail23ZeroTerminatedRamStringixEj>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	429c      	cmp	r4, r3
 8007bdc:	bf14      	ite	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	2300      	moveq	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x6e>
      return false;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e007      	b.n	8007bfc <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x7e>
  for (size_t i = 0; i < size1; i++) {
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d3e2      	bcc.n	8007bc0 <_ZN11ArduinoJson8V721HB226detail12stringEqualsINS1_17JsonStringAdapterENS1_19StaticStringAdapterEEENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES6_S7_+0x42>
  return true;
 8007bfa:	2301      	movs	r3, #1
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3724      	adds	r7, #36	@ 0x24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd90      	pop	{r4, r7, pc}

08007c04 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	@ 0x28
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8007c10:	f107 0318 	add.w	r3, r7, #24
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fc fa0a 	bl	8004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8007c1c:	f107 0318 	add.w	r3, r7, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd f849 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f083 0301 	eor.w	r3, r3, #1
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e037      	b.n	8007ca6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8007c36:	f107 0310 	add.w	r3, r7, #16
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fc f9f7 	bl	8004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8007c42:	f107 0310 	add.w	r3, r7, #16
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd f836 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f083 0301 	eor.w	r3, r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e024      	b.n	8007ca6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd f852 	bl	8004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 8007c66:	4603      	mov	r3, r0
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fd fd06 	bl	800567e <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_15ResourceManagerE>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f083 0301 	eor.w	r3, r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e011      	b.n	8007ca6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f107 0218 	add.w	r2, r7, #24
 8007c92:	ca06      	ldmia	r2, {r1, r2}
 8007c94:	f7fc f87b 	bl	8003d8e <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fd f81c 	bl	8004cda <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	bf00      	nop
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <_ZN11ArduinoJson8V721HB226detail15VariantAttorney15getOrCreateDataIKNS0_10JsonObjectEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fb ff70 	bl	8003b9c <_ZNK11ArduinoJson8V721HB2210JsonObject15getOrCreateDataEv>
 8007cbc:	4603      	mov	r3, r0
  }
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b088      	sub	sp, #32
 8007cca:	af02      	add	r7, sp, #8
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	4638      	mov	r0, r7
 8007cd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fb f887 	bl	8002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e01d      	b.n	8007d22 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7fb faa7 	bl	800323a <_ZNK11ArduinoJson8V721HB226detail11VariantData6isNullEv>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7fb fb8e 	bl	8003414 <_ZN11ArduinoJson8V721HB226detail11VariantData8toObjectEv>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	e003      	b.n	8007d04 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7fb fa37 	bl	8003170 <_ZN11ArduinoJson8V721HB226detail11VariantData8asObjectEv>
 8007d02:	4603      	mov	r3, r0
 8007d04:	617b      	str	r3, [r7, #20]
    if (!obj)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e008      	b.n	8007d22 <_ZN11ArduinoJson8V721HB226detail11VariantData14getOrAddMemberINS1_17JsonStringAdapterEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 8007d10:	6978      	ldr	r0, [r7, #20]
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	463b      	mov	r3, r7
 8007d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d1a:	f000 f8d2 	bl	8007ec2 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	bf00      	nop
  }
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <_ZN11ArduinoJson8V721HB229ConverterIfvE6toJsonEfNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	ed87 0a03 	vstr	s0, [r7, #12]
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(dst);
 8007d3a:	1d3b      	adds	r3, r7, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fc ff4b 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007d42:	6178      	str	r0, [r7, #20]
    if (!data)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <_ZN11ArduinoJson8V721HB229ConverterIfvE6toJsonEfNS0_11JsonVariantE+0x24>
      return false;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e010      	b.n	8007d70 <_ZN11ArduinoJson8V721HB229ConverterIfvE6toJsonEfNS0_11JsonVariantE+0x46>
    auto resources = getResourceManager(dst);
 8007d4e:	1d3b      	adds	r3, r7, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd f8eb 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007d56:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8007d58:	6939      	ldr	r1, [r7, #16]
 8007d5a:	6978      	ldr	r0, [r7, #20]
 8007d5c:	f7fc fbfb 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setFloat(src, resources);
 8007d60:	6939      	ldr	r1, [r7, #16]
 8007d62:	ed97 0a03 	vldr	s0, [r7, #12]
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f000 f8cc 	bl	8007f04 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	bf00      	nop
  }
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007d82:	463b      	mov	r3, r7
 8007d84:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(dst);
 8007d88:	463b      	mov	r3, r7
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fc ff24 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007d90:	6178      	str	r0, [r7, #20]
    if (!data)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE+0x24>
      return false;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e010      	b.n	8007dbe <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE+0x46>
    auto resources = getResourceManager(dst);
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd f8c4 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007da4:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8007da6:	6939      	ldr	r1, [r7, #16]
 8007da8:	6978      	ldr	r0, [r7, #20]
 8007daa:	f7fc fbd4 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setFloat(src, resources);
 8007dae:	6939      	ldr	r1, [r7, #16]
 8007db0:	ed97 0b02 	vldr	d0, [r7, #8]
 8007db4:	6978      	ldr	r0, [r7, #20]
 8007db6:	f000 f8b9 	bl	8007f2c <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	bf00      	nop
  }
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <_ZN11ArduinoJson8V721HB229ConverterINS0_15SerializedValueIPKcEEvE6toJsonES5_NS0_11JsonVariantE>:
  static void toJson(SerializedValue<T> src, JsonVariant dst) {
 8007dc6:	b590      	push	{r4, r7, lr}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	f107 0408 	add.w	r4, r7, #8
 8007dd0:	e884 0003 	stmia.w	r4, {r0, r1}
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	e881 000c 	stmia.w	r1, {r2, r3}
    detail::VariantData::setRawString(getData(dst), src,
 8007dda:	463b      	mov	r3, r7
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fc fefb 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007de2:	4604      	mov	r4, r0
 8007de4:	463b      	mov	r3, r7
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fd f8a0 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f107 0208 	add.w	r2, r7, #8
 8007df2:	ca06      	ldmia	r2, {r1, r2}
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 f8e7 	bl	8007fc8 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvPS2_NS0_15SerializedValueIT_EEPNS1_15ResourceManagerE>
  }
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd90      	pop	{r4, r7, pc}

08007e02 <_ZN11ArduinoJson8V721HB229ConverterIxvE6toJsonExNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af02      	add	r7, sp, #8
 8007e08:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	e881 000c 	stmia.w	r1, {r2, r3}
    auto data = getData(dst);
 8007e12:	463b      	mov	r3, r7
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fc fedf 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007e1a:	6178      	str	r0, [r7, #20]
    if (!data)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <_ZN11ArduinoJson8V721HB229ConverterIxvE6toJsonExNS0_11JsonVariantE+0x24>
      return false;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e011      	b.n	8007e4a <_ZN11ArduinoJson8V721HB229ConverterIxvE6toJsonExNS0_11JsonVariantE+0x48>
    auto resources = getResourceManager(dst);
 8007e26:	463b      	mov	r3, r7
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd f87f 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007e2e:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8007e30:	6939      	ldr	r1, [r7, #16]
 8007e32:	6978      	ldr	r0, [r7, #20]
 8007e34:	f7fc fb8f 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e40:	6978      	ldr	r0, [r7, #20]
 8007e42:	f000 f8db 	bl	8007ffc <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8007e46:	4603      	mov	r3, r0
 8007e48:	bf00      	nop
  }
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <_ZN11ArduinoJson8V721HB229ConverterIyvE6toJsonEyNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af02      	add	r7, sp, #8
 8007e58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	e881 000c 	stmia.w	r1, {r2, r3}
    auto data = getData(dst);
 8007e62:	463b      	mov	r3, r7
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fc feb7 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007e6a:	6178      	str	r0, [r7, #20]
    if (!data)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <_ZN11ArduinoJson8V721HB229ConverterIyvE6toJsonEyNS0_11JsonVariantE+0x24>
      return false;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e011      	b.n	8007e9a <_ZN11ArduinoJson8V721HB229ConverterIyvE6toJsonEyNS0_11JsonVariantE+0x48>
    auto resources = getResourceManager(dst);
 8007e76:	463b      	mov	r3, r7
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fd f857 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007e7e:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8007e80:	6939      	ldr	r1, [r7, #16]
 8007e82:	6978      	ldr	r0, [r7, #20]
 8007e84:	f7fc fb67 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e90:	6978      	ldr	r0, [r7, #20]
 8007e92:	f000 f8f5 	bl	8008080 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8007e96:	4603      	mov	r3, r0
 8007e98:	bf00      	nop
  }
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <_ZN11ArduinoJson8V721HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	ee07 3a90 	vmov	s15, r3
}
 8007eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b088      	sub	sp, #32
 8007ec6:	af02      	add	r7, sp, #8
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	4638      	mov	r0, r7
 8007ecc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  auto data = getMember(key, resources);
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7fd ff38 	bl	8005d4e <_ZNK11ArduinoJson8V721HB226detail10ObjectData9getMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007ede:	6178      	str	r0, [r7, #20]
  if (data)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	e008      	b.n	8007efc <_ZN11ArduinoJson8V721HB226detail10ObjectData14getOrAddMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	463b      	mov	r3, r7
 8007ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 f917 	bl	8008126 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	bf00      	nop
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007f10:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	220e      	movs	r2, #14
 8007f16:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	601a      	str	r2, [r3, #0]
    return true;
 8007f1e:	2301      	movs	r3, #1
  }
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
#endif

template <typename T>
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	ed87 0b00 	vstr	d0, [r7]
 8007f38:	60b9      	str	r1, [r7, #8]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  float valueAsFloat = static_cast<float>(value);
 8007f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3e:	f7f8 fe5b 	bl	8000bf8 <__aeabi_d2f>
 8007f42:	4603      	mov	r3, r0
 8007f44:	61fb      	str	r3, [r7, #28]

#if ARDUINOJSON_USE_DOUBLE
  if (value == valueAsFloat) {
 8007f46:	69f8      	ldr	r0, [r7, #28]
 8007f48:	f7f8 fb06 	bl	8000558 <__aeabi_f2d>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f54:	f7f8 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d006      	beq.n	8007f6c <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x40>
    type_ = VariantType::Float;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	220e      	movs	r2, #14
 8007f62:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e028      	b.n	8007fbe <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
  } else {
    auto extension = resources->allocExtension();
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fc f8cf 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007f78:	f107 0314 	add.w	r3, r7, #20
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fdd5 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f083 0301 	eor.w	r3, r3, #1
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x66>
      return false;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e016      	b.n	8007fc0 <_ZN11ArduinoJson8V721HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x94>
    type_ = VariantType::Double;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	221e      	movs	r2, #30
 8007f96:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007f98:	f107 0314 	add.w	r3, r7, #20
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fdd6 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff fdd9 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fba:	e9c1 2300 	strd	r2, r3, [r1]
  }
#else
  type_ = VariantType::Float;
  content_.asFloat = valueAsFloat;
#endif
  return true;
 8007fbe:	2301      	movs	r3, #1
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvPS2_NS0_15SerializedValueIT_EEPNS1_15ResourceManagerE>:
  static void setRawString(VariantData* var, SerializedValue<T> value,
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	1d38      	adds	r0, r7, #4
 8007fd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8007fd6:	603b      	str	r3, [r7, #0]
    if (!var)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvPS2_NS0_15SerializedValueIT_EEPNS1_15ResourceManagerE+0x2c>
    var->clear(resources);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7fc fab8 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    var->setRawString(value, resources);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	1d3a      	adds	r2, r7, #4
 8007fec:	ca06      	ldmia	r2, {r1, r2}
 8007fee:	f000 f8f0 	bl	80081d2 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvNS0_15SerializedValueIT_EEPNS1_15ResourceManagerE>
 8007ff2:	e000      	b.n	8007ff6 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvPS2_NS0_15SerializedValueIT_EEPNS1_15ResourceManagerE+0x2e>
      return;
 8007ff4:	bf00      	nop
  }
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:

template <typename T>
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<int32_t>(value)) {
 8008008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800800c:	f7fe ff26 	bl	8006e5c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	220c      	movs	r2, #12
 800801a:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	e028      	b.n	8008076 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	6a39      	ldr	r1, [r7, #32]
 800802a:	4618      	mov	r0, r3
 800802c:	f7fc f873 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008030:	f107 0310 	add.w	r3, r7, #16
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fd79 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800803a:	4603      	mov	r3, r0
 800803c:	f083 0301 	eor.w	r3, r3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8008046:	2300      	movs	r3, #0
 8008048:	e016      	b.n	8008078 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	221c      	movs	r2, #28
 800804e:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008050:	f107 0310 	add.w	r3, r7, #16
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fd7a 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800805a:	4603      	mov	r3, r0
 800805c:	461a      	mov	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8008062:	f107 0310 	add.w	r3, r7, #16
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff fd7d 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800806c:	4601      	mov	r1, r0
 800806e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008072:	e9c1 2300 	strd	r2, r3, [r1]
  }
#endif
  return true;
 8008076:	2301      	movs	r3, #1
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800808c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008090:	f000 f8cb 	bl	800822a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	220a      	movs	r2, #10
 800809e:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e028      	b.n	80080fa <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 80080a8:	f107 0310 	add.w	r3, r7, #16
 80080ac:	6a39      	ldr	r1, [r7, #32]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fc f831 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80080b4:	f107 0310 	add.w	r3, r7, #16
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fd37 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80080be:	4603      	mov	r3, r0
 80080c0:	f083 0301 	eor.w	r3, r3, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e016      	b.n	80080fc <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	221a      	movs	r2, #26
 80080d2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 80080d4:	f107 0310 	add.w	r3, r7, #16
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff fd38 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 80080e6:	f107 0310 	add.w	r3, r7, #16
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fd3b 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80080f0:	4601      	mov	r1, r0
 80080f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f6:	e9c1 2300 	strd	r2, r3, [r1]
  }
#endif
  return true;
 80080fa:	2301      	movs	r3, #1
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <_ZN11ArduinoJson8V721HB229ConverterINS0_12JsonDocumentEvE6toJsonERKS2_NS0_11JsonVariantE>:
  static void toJson(const T& src, JsonVariant dst) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	e883 0006 	stmia.w	r3, {r1, r2}
    convertToJson(src, dst); // Error here? See https://arduinojson.org/v7/unsupported-set/
 8008112:	1d3b      	adds	r3, r7, #4
 8008114:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7fb fd70 	bl	8003bfe <_ZN11ArduinoJson8V721HB2213convertToJsonERKNS0_12JsonDocumentENS0_11JsonVariantE>
  }
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8008126:	b580      	push	{r7, lr}
 8008128:	b08a      	sub	sp, #40	@ 0x28
 800812a:	af02      	add	r7, sp, #8
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	4638      	mov	r0, r7
 8008130:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  auto keySlot = resources->allocVariant();
 8008134:	f107 0318 	add.w	r3, r7, #24
 8008138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800813a:	4618      	mov	r0, r3
 800813c:	f7fb ff78 	bl	8004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8008140:	f107 0318 	add.w	r3, r7, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f7fc fdb7 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800814a:	4603      	mov	r3, r0
 800814c:	f083 0301 	eor.w	r3, r3, #1
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 8008156:	2300      	movs	r3, #0
 8008158:	e037      	b.n	80081ca <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>
  auto valueSlot = resources->allocVariant();
 800815a:	f107 0310 	add.w	r3, r7, #16
 800815e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008160:	4618      	mov	r0, r3
 8008162:	f7fb ff65 	bl	8004030 <_ZN11ArduinoJson8V721HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f7fc fda4 	bl	8004cb8 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8008170:	4603      	mov	r3, r0
 8008172:	f083 0301 	eor.w	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800817c:	2300      	movs	r3, #0
 800817e:	e024      	b.n	80081ca <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>
  if (!keySlot->setString(key, resources))
 8008180:	f107 0318 	add.w	r3, r7, #24
 8008184:	4618      	mov	r0, r3
 8008186:	f7fc fdc0 	bl	8004d0a <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEEptEv>
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	463b      	mov	r3, r7
 8008190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008192:	f7fd faac 	bl	80056ee <_ZN11ArduinoJson8V721HB226detail11VariantData9setStringINS1_17JsonStringAdapterEEEbT_PNS1_15ResourceManagerE>
 8008196:	4603      	mov	r3, r0
 8008198:	f083 0301 	eor.w	r3, r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e011      	b.n	80081ca <_ZN11ArduinoJson8V721HB226detail10ObjectData9addMemberINS1_17JsonStringAdapterEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>
  CollectionData::appendPair(keySlot, valueSlot, resources);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f107 0218 	add.w	r2, r7, #24
 80081b6:	ca06      	ldmia	r2, {r1, r2}
 80081b8:	f7fb fde9 	bl	8003d8e <_ZN11ArduinoJson8V721HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>
  return valueSlot.ptr();
 80081bc:	f107 0310 	add.w	r3, r7, #16
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fc fd8a 	bl	8004cda <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80081c6:	4603      	mov	r3, r0
 80081c8:	bf00      	nop
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvNS0_15SerializedValueIT_EEPNS1_15ResourceManagerE>:
inline void VariantData::setRawString(SerializedValue<T> value,
 80081d2:	b5b0      	push	{r4, r5, r7, lr}
 80081d4:	b088      	sub	sp, #32
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	1d38      	adds	r0, r7, #4
 80081dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80081e0:	603b      	str	r3, [r7, #0]
  auto dup = resources->saveString(adaptString(value.data(), value.size()));
 80081e2:	683c      	ldr	r4, [r7, #0]
 80081e4:	1d3b      	adds	r3, r7, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7f9 fd80 	bl	8001cec <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4dataEv>
 80081ec:	4605      	mov	r5, r0
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7f9 fd6f 	bl	8001cd4 <_ZNK11ArduinoJson8V721HB2215SerializedValueIPKcE4sizeEv>
 80081f6:	4602      	mov	r2, r0
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	4629      	mov	r1, r5
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f82b 	bl	800825a <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES6_j>
 8008204:	f107 0314 	add.w	r3, r7, #20
 8008208:	e893 0006 	ldmia.w	r3, {r1, r2}
 800820c:	4620      	mov	r0, r4
 800820e:	f000 f835 	bl	800827c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_14SizedRamStringEEEPNS1_10StringNodeET_>
 8008212:	61f8      	str	r0, [r7, #28]
  if (dup)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringIPKcEEvNS0_15SerializedValueIT_EEPNS1_15ResourceManagerE+0x50>
    setRawString(dup);
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7fb f867 	bl	80032f0 <_ZN11ArduinoJson8V721HB226detail11VariantData12setRawStringEPNS1_10StringNodeE>
}
 8008222:	bf00      	nop
 8008224:	3720      	adds	r7, #32
 8008226:	46bd      	mov	sp, r7
 8008228:	bdb0      	pop	{r4, r5, r7, pc}

0800822a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800822a:	b5b0      	push	{r4, r5, r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008234:	f000 f847 	bl	80082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 8008238:	4603      	mov	r3, r0
 800823a:	2200      	movs	r2, #0
 800823c:	461c      	mov	r4, r3
 800823e:	4615      	mov	r5, r2
 8008240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008244:	4294      	cmp	r4, r2
 8008246:	eb75 0303 	sbcs.w	r3, r5, r3
 800824a:	bf2c      	ite	cs
 800824c:	2301      	movcs	r3, #1
 800824e:	2300      	movcc	r3, #0
 8008250:	b2db      	uxtb	r3, r3
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bdb0      	pop	{r4, r5, r7, pc}

0800825a <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES6_j>:
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f833 	bl	80082d8 <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPKcvE5adaptES4_j>
 8008272:	bf00      	nop
}
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_14SizedRamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	1d3b      	adds	r3, r7, #4
 8008286:	e883 0006 	stmia.w	r3, {r1, r2}
    if (str.isNull())
 800828a:	1d3b      	adds	r3, r7, #4
 800828c:	4618      	mov	r0, r3
 800828e:	f7fa fdac 	bl	8002dea <_ZNK11ArduinoJson8V721HB226detail14SizedRamString6isNullEv>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_14SizedRamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 8008298:	2300      	movs	r3, #0
 800829a:	e010      	b.n	80082be <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_14SizedRamStringEEEPNS1_10StringNodeET_+0x42>
    auto node = stringPool_.add(str, allocator_);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f103 0008 	add.w	r0, r3, #8
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	1d3a      	adds	r2, r7, #4
 80082a8:	ca06      	ldmia	r2, {r1, r2}
 80082aa:	f000 f824 	bl	80082f6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 80082ae:	6178      	str	r0, [r7, #20]
    if (!node)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <_ZN11ArduinoJson8V721HB226detail15ResourceManager10saveStringINS1_14SizedRamStringEEEPNS1_10StringNodeET_+0x40>
      overflowed_ = true;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	711a      	strb	r2, [r3, #4]
    return node;
 80082bc:	697b      	ldr	r3, [r7, #20]
  }
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 80082c6:	b480      	push	{r7}
 80082c8:	af00      	add	r7, sp, #0
    return T(-1);
 80082ca:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80082ce:	4618      	mov	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <_ZN11ArduinoJson8V721HB226detail18SizedStringAdapterIPKcvE5adaptES4_j>:
  static AdaptedString adapt(const TChar* p, size_t n) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7fa fd6b 	bl	8002dc4 <_ZN11ArduinoJson8V721HB226detail14SizedRamStringC1EPKcj>
  }
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	1d38      	adds	r0, r7, #4
 8008300:	e880 0006 	stmia.w	r0, {r1, r2}
 8008304:	603b      	str	r3, [r7, #0]
    auto node = get(str);
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	4619      	mov	r1, r3
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7fd f98c 	bl	8005628 <_ZNK11ArduinoJson8V721HB226detail10StringPool3getINS1_14SizedRamStringEEEPNS1_10StringNodeERKT_>
 8008310:	6178      	str	r0, [r7, #20]
    if (node) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x32>
      node->references++;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	889b      	ldrh	r3, [r3, #4]
 800831c:	3301      	adds	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	809a      	strh	r2, [r3, #4]
      return node;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	e021      	b.n	800836c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x76>
    size_t n = str.size();
 8008328:	1d3b      	adds	r3, r7, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa fd6e 	bl	8002e0c <_ZNK11ArduinoJson8V721HB226detail14SizedRamString4sizeEv>
 8008330:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6938      	ldr	r0, [r7, #16]
 8008336:	f7fa fcb5 	bl	8002ca4 <_ZN11ArduinoJson8V721HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800833a:	6178      	str	r0, [r7, #20]
    if (!node)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x50>
      return nullptr;
 8008342:	2300      	movs	r3, #0
 8008344:	e012      	b.n	800836c <_ZN11ArduinoJson8V721HB226detail10StringPool3addINS1_14SizedRamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x76>
    stringGetChars(str, node->data, n);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f103 0208 	add.w	r2, r3, #8
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1d39      	adds	r1, r7, #4
 8008350:	c903      	ldmia	r1, {r0, r1}
 8008352:	f000 f80f 	bl	8008374 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	3308      	adds	r3, #8
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
    add(node);
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7fa fdc6 	bl	8002ef6 <_ZN11ArduinoJson8V721HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800836a:	697b      	ldr	r3, [r7, #20]
  }
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj>:
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	f107 0408 	add.w	r4, r7, #8
 800837e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < n; i++) {
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	e00d      	b.n	80083a8 <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj+0x34>
    p[i] = s[i];
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	18d4      	adds	r4, r2, r3
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	6979      	ldr	r1, [r7, #20]
 8008398:	4618      	mov	r0, r3
 800839a:	f7f8 ff8a 	bl	80012b2 <_ZNK11ArduinoJson8V721HB226detail14SizedRamStringixEj>
 800839e:	4603      	mov	r3, r0
 80083a0:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3301      	adds	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d3ed      	bcc.n	800838c <_ZN11ArduinoJson8V721HB226detailL14stringGetCharsINS1_14SizedRamStringEEEvT_Pcj+0x18>
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd90      	pop	{r4, r7, pc}

080083ba <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	f107 020c 	add.w	r2, r7, #12
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083d2:	f7fd fc37 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x28>
			return defaultValue;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	e00d      	b.n	80083fe <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x44>
		return jsonVariant.template is<T>() ?
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f80f 	bl	8008406 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIhEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f817 	bl	8008422 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIhLb1EEET_v>
 80083f4:	4603      	mov	r3, r0
 80083f6:	e001      	b.n	80083fc <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x42>
		return jsonVariant.template is<T>() ?
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 80083fc:	bf00      	nop
	}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIhEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008414:	f000 f813 	bl	800843e <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE>
 8008418:	4603      	mov	r3, r0
  }
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIhLb1EEET_v>:
  T as() const {
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008430:	f000 f826 	bl	8008480 <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 8008434:	4603      	mov	r3, r0
  }
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	463b      	mov	r3, r7
 8008446:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800844a:	463b      	mov	r3, r7
 800844c:	4618      	mov	r0, r3
 800844e:	f7f9 fc29 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8008452:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8008454:	463b      	mov	r3, r7
 8008456:	4618      	mov	r0, r3
 8008458:	f7f9 fc30 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800845c:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d008      	beq.n	8008476 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x38>
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f828 	bl	80084bc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x38>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <_ZN11ArduinoJson8V721HB229ConverterIhvE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8008476:	2300      	movs	r3, #0
  }
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	463b      	mov	r3, r7
 8008488:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800848c:	463b      	mov	r3, r7
 800848e:	4618      	mov	r0, r3
 8008490:	f7f9 fc08 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8008494:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8008496:	463b      	mov	r3, r7
 8008498:	4618      	mov	r0, r3
 800849a:	f7f9 fc0f 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800849e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f865 	bl	8008578 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 80084ae:	4603      	mov	r3, r0
 80084b0:	e000      	b.n	80084b4 <_ZN11ArduinoJson8V721HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80084b2:	2300      	movs	r3, #0
  }
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7f9 fb8f 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80084ce:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	791b      	ldrb	r3, [r3, #4]
 80084d4:	3b0a      	subs	r3, #10
 80084d6:	2b12      	cmp	r3, #18
 80084d8:	d848      	bhi.n	800856c <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb0>
 80084da:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0x24>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	0800852d 	.word	0x0800852d
 80084e4:	0800856d 	.word	0x0800856d
 80084e8:	0800853b 	.word	0x0800853b
 80084ec:	0800856d 	.word	0x0800856d
 80084f0:	0800856d 	.word	0x0800856d
 80084f4:	0800856d 	.word	0x0800856d
 80084f8:	0800856d 	.word	0x0800856d
 80084fc:	0800856d 	.word	0x0800856d
 8008500:	0800856d 	.word	0x0800856d
 8008504:	0800856d 	.word	0x0800856d
 8008508:	0800856d 	.word	0x0800856d
 800850c:	0800856d 	.word	0x0800856d
 8008510:	0800856d 	.word	0x0800856d
 8008514:	0800856d 	.word	0x0800856d
 8008518:	0800856d 	.word	0x0800856d
 800851c:	0800856d 	.word	0x0800856d
 8008520:	08008549 	.word	0x08008549
 8008524:	0800856d 	.word	0x0800856d
 8008528:	0800855b 	.word	0x0800855b
        return canConvertNumber<T>(content_.asUint32);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f8b5 	bl	80086a0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008536:	4603      	mov	r3, r0
 8008538:	e019      	b.n	800856e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f8c0 	bl	80086c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008544:	4603      	mov	r3, r0
 8008546:	e012      	b.n	800856e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	f000 f8ce 	bl	80086f2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008556:	4603      	mov	r3, r0
 8008558:	e009      	b.n	800856e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	f000 f8de 	bl	8008724 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008568:	4603      	mov	r3, r0
 800856a:	e000      	b.n	800856e <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIhEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 800856c:	2300      	movs	r3, #0
  }
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop

08008578 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7f9 fb31 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800858a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	791b      	ldrb	r3, [r3, #4]
 8008590:	3b04      	subs	r3, #4
 8008592:	2b1a      	cmp	r3, #26
 8008594:	d87e      	bhi.n	8008694 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11c>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	0800864f 	.word	0x0800864f
 80085a0:	0800865d 	.word	0x0800865d
 80085a4:	08008609 	.word	0x08008609
 80085a8:	08008695 	.word	0x08008695
 80085ac:	08008695 	.word	0x08008695
 80085b0:	08008695 	.word	0x08008695
 80085b4:	0800860f 	.word	0x0800860f
 80085b8:	08008695 	.word	0x08008695
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	08008695 	.word	0x08008695
 80085c4:	0800866d 	.word	0x0800866d
 80085c8:	08008695 	.word	0x08008695
 80085cc:	08008695 	.word	0x08008695
 80085d0:	08008695 	.word	0x08008695
 80085d4:	08008695 	.word	0x08008695
 80085d8:	08008695 	.word	0x08008695
 80085dc:	08008695 	.word	0x08008695
 80085e0:	08008695 	.word	0x08008695
 80085e4:	08008695 	.word	0x08008695
 80085e8:	08008695 	.word	0x08008695
 80085ec:	08008695 	.word	0x08008695
 80085f0:	08008695 	.word	0x08008695
 80085f4:	0800862b 	.word	0x0800862b
 80085f8:	08008695 	.word	0x08008695
 80085fc:	0800863d 	.word	0x0800863d
 8008600:	08008695 	.word	0x08008695
 8008604:	0800867f 	.word	0x0800867f
        return content_.asBoolean;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	e043      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f8a5 	bl	8008762 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_>
 8008618:	4603      	mov	r3, r0
 800861a:	e03c      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f8b0 	bl	8008786 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_>
 8008626:	4603      	mov	r3, r0
 8008628:	e035      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	4610      	mov	r0, r2
 8008632:	4619      	mov	r1, r3
 8008634:	f000 f8b9 	bl	80087aa <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>
 8008638:	4603      	mov	r3, r0
 800863a:	e02c      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	4610      	mov	r0, r2
 8008644:	4619      	mov	r1, r3
 8008646:	f000 f8c3 	bl	80087d0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>
 800864a:	4603      	mov	r3, r0
 800864c:	e023      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f8cf 	bl	80087f6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>
 8008658:	4603      	mov	r3, r0
 800865a:	e01c      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f8c7 	bl	80087f6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>
 8008668:	4603      	mov	r3, r0
 800866a:	e014      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	edd3 7a00 	vldr	s15, [r3]
 8008672:	eeb0 0a67 	vmov.f32	s0, s15
 8008676:	f000 f8d2 	bl	800881e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>
 800867a:	4603      	mov	r3, r0
 800867c:	e00b      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	ed93 7b00 	vldr	d7, [r3]
 8008684:	eeb0 0a47 	vmov.f32	s0, s14
 8008688:	eef0 0a67 	vmov.f32	s1, s15
 800868c:	f000 f8e1 	bl	8008852 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>
 8008690:	4603      	mov	r3, r0
 8008692:	e000      	b.n	8008696 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 8008694:	2300      	movs	r3, #0
  }
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop

080086a0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80086a8:	f000 f8eb 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4293      	cmp	r3, r2
 80086b4:	bf94      	ite	ls
 80086b6:	2301      	movls	r3, #1
 80086b8:	2300      	movhi	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
template <typename TOut, typename TIn>
enable_if_t<is_integral<TIn>::value && is_signed<TIn>::value &&
                is_integral<TOut>::value && is_unsigned<TOut>::value &&
                sizeof(TOut) < sizeof(TIn),
            bool>
canConvertNumber(TIn value) {
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  if (value < 0)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da01      	bge.n	80086d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e009      	b.n	80086ea <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 80086d6:	f000 f8d4 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 80086da:	4603      	mov	r3, r0
 80086dc:	461a      	mov	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	bfd4      	ite	le
 80086e4:	2301      	movle	r3, #1
 80086e6:	2300      	movgt	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80086f2:	b5b0      	push	{r4, r5, r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 80086fc:	f000 f8c1 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 8008700:	4603      	mov	r3, r0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2200      	movs	r2, #0
 8008706:	461c      	mov	r4, r3
 8008708:	4615      	mov	r5, r2
 800870a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870e:	4294      	cmp	r4, r2
 8008710:	eb75 0303 	sbcs.w	r3, r5, r3
 8008714:	bf2c      	ite	cs
 8008716:	2301      	movcs	r3, #1
 8008718:	2300      	movcc	r3, #0
 800871a:	b2db      	uxtb	r3, r3
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bdb0      	pop	{r4, r5, r7, pc}

08008724 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008724:	b5b0      	push	{r4, r5, r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800872e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	da01      	bge.n	800873a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8008736:	2300      	movs	r3, #0
 8008738:	e00f      	b.n	800875a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 800873a:	f000 f8a2 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 800873e:	4603      	mov	r3, r0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2200      	movs	r2, #0
 8008744:	461c      	mov	r4, r3
 8008746:	4615      	mov	r5, r2
 8008748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874c:	4294      	cmp	r4, r2
 800874e:	eb75 0303 	sbcs.w	r3, r5, r3
 8008752:	bfac      	ite	ge
 8008754:	2301      	movge	r3, #1
 8008756:	2300      	movlt	r3, #0
 8008758:	b2db      	uxtb	r3, r3
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bdb0      	pop	{r4, r5, r7, pc}

08008762 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff98 	bl	80086a0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_+0x1a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e000      	b.n	800877e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhmEET_T0_+0x1c>
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ff98 	bl	80086c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_+0x1a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	e000      	b.n	80087a2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhlEET_T0_+0x1c>
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80087b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087b8:	f7ff ff9b 	bl	80086f2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_+0x1c>
 80087c2:	783b      	ldrb	r3, [r7, #0]
 80087c4:	e000      	b.n	80087c8 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_+0x1e>
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80087da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087de:	f7ff ffa1 	bl	8008724 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_+0x1c>
 80087e8:	783b      	ldrb	r3, [r7, #0]
 80087ea:	e000      	b.n	80087ee <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_+0x1e>
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIhEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b086      	sub	sp, #24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	f7fb ffa9 	bl	800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f840 	bl	8008894 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v>
 8008814:	4603      	mov	r3, r0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008828:	ed97 0a01 	vldr	s0, [r7, #4]
 800882c:	f000 f87a 	bl	8008924 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_+0x2a>
 8008836:	edd7 7a01 	vldr	s15, [r7, #4]
 800883a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800883e:	edc7 7a00 	vstr	s15, [r7]
 8008842:	783b      	ldrb	r3, [r7, #0]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	e000      	b.n	800884a <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_+0x2c>
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800885c:	ed97 0b00 	vldr	d0, [r7]
 8008860:	f000 f888 	bl	8008974 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d006      	beq.n	8008878 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_+0x26>
 800886a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800886e:	f7f8 f9a3 	bl	8000bb8 <__aeabi_d2uiz>
 8008872:	4603      	mov	r3, r0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	e000      	b.n	800887a <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_+0x28>
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8008882:	b480      	push	{r7}
 8008884:	af00      	add	r7, sp, #0
    return T(-1);
 8008886:	23ff      	movs	r3, #255	@ 0xff
  }
 8008888:	4618      	mov	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d830      	bhi.n	8008908 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x74>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x18>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088cf 	.word	0x080088cf
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	080088f3 	.word	0x080088f3
        return convertNumber<T>(value_.asFloat);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	edd3 7a02 	vldr	s15, [r3, #8]
 80088c2:	eeb0 0a67 	vmov.f32	s0, s15
 80088c6:	f7ff ffaa 	bl	800881e <_ZN11ArduinoJson8V721HB226detail13convertNumberIhfEET_T0_>
 80088ca:	4603      	mov	r3, r0
 80088cc:	e01d      	b.n	800890a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	f7ff ff7a 	bl	80087d0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhxEET_T0_>
 80088dc:	4603      	mov	r3, r0
 80088de:	e014      	b.n	800890a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7ff ff5e 	bl	80087aa <_ZN11ArduinoJson8V721HB226detail13convertNumberIhyEET_T0_>
 80088ee:	4603      	mov	r3, r0
 80088f0:	e00b      	b.n	800890a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80088f8:	eeb0 0a47 	vmov.f32	s0, s14
 80088fc:	eef0 0a67 	vmov.f32	s1, s15
 8008900:	f7ff ffa7 	bl	8008852 <_ZN11ArduinoJson8V721HB226detail13convertNumberIhdEET_T0_>
 8008904:	4603      	mov	r3, r0
 8008906:	e000      	b.n	800890a <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIhEET_v+0x76>
        return T();
 8008908:	2300      	movs	r3, #0
  }
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop

08008914 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8008914:	b480      	push	{r7}
 8008916:	af00      	add	r7, sp, #0
    return 0;
 8008918:	2300      	movs	r3, #0
  }
 800891a:	4618      	mov	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800892e:	f7ff fff1 	bl	8008914 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>
 8008932:	4603      	mov	r3, r0
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800893c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008948:	db0f      	blt.n	800896a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 800894a:	f7ff ff9a 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 800894e:	4603      	mov	r3, r0
 8008950:	ee07 3a90 	vmov	s15, r3
 8008954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8008958:	ed97 7a01 	vldr	s14, [r7, #4]
 800895c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008964:	d801      	bhi.n	800896a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800897e:	f7ff ffc9 	bl	8008914 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE6lowestEv>
 8008982:	4603      	mov	r3, r0
 8008984:	4618      	mov	r0, r3
 8008986:	f7f7 fdd5 	bl	8000534 <__aeabi_i2d>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008992:	f7f8 f8bf 	bl	8000b14 <__aeabi_dcmpge>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 800899c:	f7ff ff71 	bl	8008882 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIhvE7highestEv>
 80089a0:	4603      	mov	r3, r0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f7 fdc6 	bl	8000534 <__aeabi_i2d>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 80089ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089b0:	f7f8 f8a6 	bl	8000b00 <__aeabi_dcmple>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZNK11ArduinoJson8V721HB226detail11VariantData7isFloatEv>:
  bool isFloat() const {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	791b      	ldrb	r3, [r3, #4]
 80089d4:	2108      	movs	r1, #8
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f8 fefe 	bl	80017d8 <_ZN11ArduinoJson8V721HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80089dc:	4603      	mov	r3, r0
  }
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <_ZN13LocationModelC1Edd>:
 *      Author: Admin
 */

#include "Model/Process/LocationModel.h"

LocationModel::LocationModel(double lng, double lat) :
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6178      	str	r0, [r7, #20]
 80089f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80089f4:	ed87 1b00 	vstr	d1, [r7]
		BaseModel() {
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f9 f912 	bl	8001c24 <_ZN9BaseModelC1Ev>
 8008a00:	4a08      	ldr	r2, [pc, #32]	@ (8008a24 <_ZN13LocationModelC1Edd+0x3c>)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	601a      	str	r2, [r3, #0]
	this->setLng(lng);
 8008a06:	ed97 0b02 	vldr	d0, [r7, #8]
 8008a0a:	6978      	ldr	r0, [r7, #20]
 8008a0c:	f000 f80c 	bl	8008a28 <_ZN13LocationModel6setLngEd>
	this->setLat(lat);
 8008a10:	ed97 0b00 	vldr	d0, [r7]
 8008a14:	6978      	ldr	r0, [r7, #20]
 8008a16:	f000 f823 	bl	8008a60 <_ZN13LocationModel6setLatEd>
}
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08019f34 	.word	0x08019f34

08008a28 <_ZN13LocationModel6setLngEd>:

void LocationModel::setLng(double lng) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	ed87 0b00 	vstr	d0, [r7]
	this->data[LNG] = lng;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1d19      	adds	r1, r3, #4
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	4a07      	ldr	r2, [pc, #28]	@ (8008a5c <_ZN13LocationModel6setLngEd+0x34>)
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fc fc0f 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8008a44:	463a      	mov	r2, r7
 8008a46:	f107 0310 	add.w	r3, r7, #16
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f881 	bl	8008b54 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>
}
 8008a52:	bf00      	nop
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08019c74 	.word	0x08019c74

08008a60 <_ZN13LocationModel6setLatEd>:

void LocationModel::setLat(double lat) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	ed87 0b00 	vstr	d0, [r7]
	this->data[LAT] = lat;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	1d19      	adds	r1, r3, #4
 8008a70:	f107 0310 	add.w	r3, r7, #16
 8008a74:	4a07      	ldr	r2, [pc, #28]	@ (8008a94 <_ZN13LocationModel6setLatEd+0x34>)
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fc fbf3 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8008a7c:	463a      	mov	r2, r7
 8008a7e:	f107 0310 	add.w	r3, r7, #16
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f865 	bl	8008b54 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>

}
 8008a8a:	bf00      	nop
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08019c78 	.word	0x08019c78

08008a98 <_ZN13LocationModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>:
}
double LocationModel::getLat() {
	return this->data[LAT];
}

void LocationModel::updateModel(const JsonDocument *json) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08c      	sub	sp, #48	@ 0x30
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	if (json == nullptr) {
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d042      	beq.n	8008b2e <_ZN13LocationModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x96>
		return;
	}
	const JsonDocument &jsonData = *json;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	this->setLat(getFormJsonVariant<double>(jsonData[LAT], 0));
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <_ZN13LocationModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0xa0>)
 8008ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fc fbf1 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008ac6:	f107 0210 	add.w	r2, r7, #16
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f84d 	bl	8008b70 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8008ad6:	eeb0 7a40 	vmov.f32	s14, s0
 8008ada:	eef0 7a60 	vmov.f32	s15, s1
 8008ade:	eeb0 0a47 	vmov.f32	s0, s14
 8008ae2:	eef0 0a67 	vmov.f32	s1, s15
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ffba 	bl	8008a60 <_ZN13LocationModel6setLatEd>
	this->setLng(getFormJsonVariant<double>(jsonData[LNG], 0));
 8008aec:	f107 0318 	add.w	r3, r7, #24
 8008af0:	4a12      	ldr	r2, [pc, #72]	@ (8008b3c <_ZN13LocationModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0xa4>)
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fc fbd1 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008b06:	f107 0220 	add.w	r2, r7, #32
 8008b0a:	f107 0318 	add.w	r3, r7, #24
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f82d 	bl	8008b70 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8008b16:	eeb0 7a40 	vmov.f32	s14, s0
 8008b1a:	eef0 7a60 	vmov.f32	s15, s1
 8008b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008b22:	eef0 0a67 	vmov.f32	s1, s15
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff7e 	bl	8008a28 <_ZN13LocationModel6setLngEd>
 8008b2c:	e000      	b.n	8008b30 <_ZN13LocationModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x98>
		return;
 8008b2e:	bf00      	nop
}
 8008b30:	3730      	adds	r7, #48	@ 0x30
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08019c78 	.word	0x08019c78
 8008b3c:	08019c74 	.word	0x08019c74

08008b40 <_ZN13LocationModel5resetEv>:
void LocationModel::reset() {
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
    this->set(src);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f833 	bl	8008bcc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIdEEbRKT_>
    return *this;
 8008b66:	687b      	ldr	r3, [r7, #4]
  }
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	f107 020c 	add.w	r2, r7, #12
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b88:	f7fd f85c 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x2a>
			return defaultValue;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	ed93 7b00 	vldr	d7, [r3]
 8008b98:	e011      	b.n	8008bbe <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x4e>
		return jsonVariant.template is<T>() ?
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f824 	bl	8008be8 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIdEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x46>
				jsonVariant.template as<T>() : defaultValue;
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f82c 	bl	8008c04 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIdLb1EEET_v>
 8008bac:	eeb0 7a40 	vmov.f32	s14, s0
 8008bb0:	eef0 7a60 	vmov.f32	s15, s1
 8008bb4:	e002      	b.n	8008bbc <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x4c>
		return jsonVariant.template is<T>() ?
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	ed93 7b00 	vldr	d7, [r3]
				jsonVariant.template as<T>() : defaultValue;
 8008bbc:	bf00      	nop
	}
 8008bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8008bc2:	eef0 0a67 	vmov.f32	s1, s15
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIdEEbRKT_>:
  bool set(const T& value) const {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f827 	bl	8008c2c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>
 8008bde:	4603      	mov	r3, r0
  }
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIdEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bf6:	f000 f85b 	bl	8008cb0 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE>
 8008bfa:	4603      	mov	r3, r0
  }
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIdLb1EEET_v>:
  T as() const {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c12:	f000 f821 	bl	8008c58 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE>
 8008c16:	eeb0 7a40 	vmov.f32	s14, s0
 8008c1a:	eef0 7a60 	vmov.f32	s15, s1
  }
 8008c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008c22:	eef0 0a67 	vmov.f32	s1, s15
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_>:
  bool doSet(T&& value) const {
 8008c2c:	b590      	push	{r4, r7, lr}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8008c36:	6838      	ldr	r0, [r7, #0]
 8008c38:	f7fe fdfc 	bl	8007834 <_ZN11ArduinoJson8V721HB226detail7forwardIRKdEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f84f 	bl	8008ce6 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>
 8008c48:	4603      	mov	r3, r0
  }
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd90      	pop	{r4, r7, pc}
 8008c52:	0000      	movs	r0, r0
 8008c54:	0000      	movs	r0, r0
	...

08008c58 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	463b      	mov	r3, r7
 8008c60:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8008c64:	463b      	mov	r3, r7
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f9 f81c 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8008c6c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8008c6e:	463b      	mov	r3, r7
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f9 f823 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8008c76:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d008      	beq.n	8008c90 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f853 	bl	8008d2c <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE>
 8008c86:	eeb0 7a40 	vmov.f32	s14, s0
 8008c8a:	eef0 7a60 	vmov.f32	s15, s1
 8008c8e:	e001      	b.n	8008c94 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x3c>
 8008c90:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8008ca8 <_ZN11ArduinoJson8V721HB229ConverterIdvE8fromJsonENS0_16JsonVariantConstE+0x50>
  }
 8008c94:	eeb0 0a47 	vmov.f32	s0, s14
 8008c98:	eef0 0a67 	vmov.f32	s1, s15
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	f3af 8000 	nop.w
	...

08008cb0 <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f8 fff0 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8008cc4:	60f8      	str	r0, [r7, #12]
    return data && data->isFloat();
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff fe7b 	bl	80089c8 <_ZNK11ArduinoJson8V721HB226detail11VariantData7isFloatEv>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <_ZN11ArduinoJson8V721HB229ConverterIdvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8008cdc:	2300      	movs	r3, #0
  }
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIdvEERKdEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	ed2d 8b02 	vpush	{d8}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	ed93 8b00 	vldr	d8, [r3]
 8008cfc:	f107 0310 	add.w	r3, r7, #16
 8008d00:	68f9      	ldr	r1, [r7, #12]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe f894 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d10:	eeb0 0a48 	vmov.f32	s0, s16
 8008d14:	eef0 0a68 	vmov.f32	s1, s17
 8008d18:	f7ff f82e 	bl	8007d78 <_ZN11ArduinoJson8V721HB229ConverterIdvE6toJsonEdNS0_11JsonVariantE>
 8008d1c:	4603      	mov	r3, r0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	ecbd 8b02 	vpop	{d8}
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7f8 ff57 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8008d3e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	3b04      	subs	r3, #4
 8008d46:	2b1a      	cmp	r3, #26
 8008d48:	d879      	bhi.n	8008e3e <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x112>
 8008d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x24>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008e15 	.word	0x08008e15
 8008d54:	08008e15 	.word	0x08008e15
 8008d58:	08008dbd 	.word	0x08008dbd
 8008d5c:	08008e3f 	.word	0x08008e3f
 8008d60:	08008e3f 	.word	0x08008e3f
 8008d64:	08008e3f 	.word	0x08008e3f
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	08008e3f 	.word	0x08008e3f
 8008d70:	08008ddd 	.word	0x08008ddd
 8008d74:	08008e3f 	.word	0x08008e3f
 8008d78:	08008e27 	.word	0x08008e27
 8008d7c:	08008e3f 	.word	0x08008e3f
 8008d80:	08008e3f 	.word	0x08008e3f
 8008d84:	08008e3f 	.word	0x08008e3f
 8008d88:	08008e3f 	.word	0x08008e3f
 8008d8c:	08008e3f 	.word	0x08008e3f
 8008d90:	08008e3f 	.word	0x08008e3f
 8008d94:	08008e3f 	.word	0x08008e3f
 8008d98:	08008e3f 	.word	0x08008e3f
 8008d9c:	08008e3f 	.word	0x08008e3f
 8008da0:	08008e3f 	.word	0x08008e3f
 8008da4:	08008e3f 	.word	0x08008e3f
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	08008e3f 	.word	0x08008e3f
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008e3f 	.word	0x08008e3f
 8008db8:	08008e37 	.word	0x08008e37
        return static_cast<T>(content_.asBoolean);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7f7 fba7 	bl	8000514 <__aeabi_ui2d>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	e03c      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asUint32);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f7 fb9f 	bl	8000514 <__aeabi_ui2d>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	e034      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asInt32);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7f7 fba7 	bl	8000534 <__aeabi_i2d>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	e02c      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asUint64);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7f7 fbd1 	bl	800059c <__aeabi_ul2d>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	e022      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asInt64);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f7f7 fbcf 	bl	80005ac <__aeabi_l2d>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	e018      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f82c 	bl	8008e78 <_ZN11ArduinoJson8V721HB226detail11parseNumberIdEET_PKc>
 8008e20:	ec53 2b10 	vmov	r2, r3, d0
 8008e24:	e00f      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(content_.asFloat);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 fb94 	bl	8000558 <__aeabi_f2d>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e007      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return static_cast<T>(extension->asDouble);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	e003      	b.n	8008e46 <_ZNK11ArduinoJson8V721HB226detail11VariantData7asFloatIdEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
  }
 8008e46:	ec43 2b17 	vmov	d7, r2, r3
 8008e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8008e4e:	eef0 0a67 	vmov.f32	s1, s15
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7getDataEv>:
  VariantData* getData() const {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fd faaa 	bl	80063ba <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8008e66:	4603      	mov	r3, r0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f81f 	bl	8008eac <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_7getDataEERT_>
 8008e6e:	4603      	mov	r3, r0
  }
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN11ArduinoJson8V721HB226detail11parseNumberIdEET_PKc>:
inline T parseNumber(const char* s) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8008e80:	f107 0308 	add.w	r3, r7, #8
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fb fc68 	bl	800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 8008e8c:	f107 0308 	add.w	r3, r7, #8
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f819 	bl	8008ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v>
 8008e96:	eeb0 7a40 	vmov.f32	s14, s0
 8008e9a:	eef0 7a60 	vmov.f32	s15, s1
}
 8008e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008ea2:	eef0 0a67 	vmov.f32	s1, s15
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f85b 	bl	8008f70 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE7getDataEv>
 8008eba:	4603      	mov	r3, r0
  }
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	0000      	movs	r0, r0
	...

08008ec8 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v>:
  T convertTo() const {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d83c      	bhi.n	8008f54 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x8c>
 8008eda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x18>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008f09 	.word	0x08008f09
 8008ee8:	08008f21 	.word	0x08008f21
 8008eec:	08008f39 	.word	0x08008f39
        return convertNumber<T>(value_.asFloat);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8008efa:	f000 f859 	bl	8008fb0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_>
 8008efe:	eeb0 7a40 	vmov.f32	s14, s0
 8008f02:	eef0 7a60 	vmov.f32	s15, s1
 8008f06:	e027      	b.n	8008f58 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asSignedInteger);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	f000 f86c 	bl	8008fee <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_>
 8008f16:	eeb0 7a40 	vmov.f32	s14, s0
 8008f1a:	eef0 7a60 	vmov.f32	s15, s1
 8008f1e:	e01b      	b.n	8008f58 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asUnsignedInteger);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008f26:	4610      	mov	r0, r2
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f000 f880 	bl	800902e <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_>
 8008f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8008f32:	eef0 7a60 	vmov.f32	s15, s1
 8008f36:	e00f      	b.n	8008f58 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return convertNumber<T>(value_.asDouble);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f42:	eef0 0a67 	vmov.f32	s1, s15
 8008f46:	f000 f892 	bl	800906e <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_>
 8008f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8008f4e:	eef0 7a60 	vmov.f32	s15, s1
 8008f52:	e001      	b.n	8008f58 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0x90>
        return T();
 8008f54:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8008f68 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIdEET_v+0xa0>
  }
 8008f58:	eeb0 0a47 	vmov.f32	s0, s14
 8008f5c:	eef0 0a67 	vmov.f32	s1, s15
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
	...

08008f70 <_ZNK11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcE7getDataEv>:
  VariantData* getData() const {
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), adaptString(key_),
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f892 	bl	80090a6 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 8008f82:	4604      	mov	r4, r0
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
    return VariantData::getMember(
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fb ffdb 	bl	8004f44 <_ZN11ArduinoJson8V721HB226detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8008f8e:	4605      	mov	r5, r0
        VariantAttorney::getResourceManager(upstream_));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd fffd 	bl	8006f94 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008f9a:	4603      	mov	r3, r0
    return VariantData::getMember(
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f88c 	bl	80090be <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8008fa6:	4603      	mov	r3, r0
  }
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bdb0      	pop	{r4, r5, r7, pc}

08008fb0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_>:
TOut convertNumber(TIn value) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008fba:	ed97 0a01 	vldr	s0, [r7, #4]
 8008fbe:	f000 f895 	bl	80090ec <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdfEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_+0x24>
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7f7 fac5 	bl	8000558 <__aeabi_f2d>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	e003      	b.n	8008fdc <_ZN11ArduinoJson8V721HB226detail13convertNumberIdfEET_T0_+0x2c>
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	ec43 2b17 	vmov	d7, r2, r3
}
 8008fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8008fe4:	eef0 0a67 	vmov.f32	s1, s15
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_>:
TOut convertNumber(TIn value) {
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffc:	f000 f882 	bl	8009104 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d006      	beq.n	8009014 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_+0x26>
 8009006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900a:	f7f7 facf 	bl	80005ac <__aeabi_l2d>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e003      	b.n	800901c <_ZN11ArduinoJson8V721HB226detail13convertNumberIdxEET_T0_+0x2e>
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	ec43 2b17 	vmov	d7, r2, r3
}
 8009020:	eeb0 0a47 	vmov.f32	s0, s14
 8009024:	eef0 0a67 	vmov.f32	s1, s15
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_>:
TOut convertNumber(TIn value) {
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8009038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800903c:	f000 f86e 	bl	800911c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d006      	beq.n	8009054 <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_+0x26>
 8009046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800904a:	f7f7 faa7 	bl	800059c <__aeabi_ul2d>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	e003      	b.n	800905c <_ZN11ArduinoJson8V721HB226detail13convertNumberIdyEET_T0_+0x2e>
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	ec43 2b17 	vmov	d7, r2, r3
}
 8009060:	eeb0 0a47 	vmov.f32	s0, s14
 8009064:	eef0 0a67 	vmov.f32	s1, s15
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_>:
TOut convertNumber(TIn value) {
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8009078:	ed97 0b00 	vldr	d0, [r7]
 800907c:	f000 f85a 	bl	8009134 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIddEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_+0x1e>
 8009086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908a:	e003      	b.n	8009094 <_ZN11ArduinoJson8V721HB226detail13convertNumberIddEET_T0_+0x26>
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	f04f 0300 	mov.w	r3, #0
 8009094:	ec43 2b17 	vmov	d7, r2, r3
}
 8009098:	eeb0 0a47 	vmov.f32	s0, s14
 800909c:	eef0 0a67 	vmov.f32	s1, s15
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
    return client.getData();
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fa fd8d 	bl	8003bce <_ZN11ArduinoJson8V721HB2212JsonDocument7getDataEv>
 80090b4:	4603      	mov	r3, r0
  }
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
    if (!var)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x16>
      return 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e007      	b.n	80090e4 <_ZN11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x26>
    return var->getMember(key, resources);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fc fd7e 	bl	8005bdc <_ZNK11ArduinoJson8V721HB226detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_PKNS1_15ResourceManagerE>
 80090e0:	4603      	mov	r3, r0
 80090e2:	bf00      	nop
  }
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdfEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 80090f6:	2301      	movs	r3, #1
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 800910e:	2301      	movs	r3, #1
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIdyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8009126:	2301      	movs	r3, #1
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIddEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	ed87 0b00 	vstr	d0, [r7]
  return true;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1Ev>:
  JsonArrayConst() : data_(0), resources_(0) {}
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <_ZN13TestModeModelC1Ev>:
 *  Created on: Dec 15, 2024
 *      Author: Admin
 */
#include "Model/Process/TestModeModel.h"

TestModeModel::TestModeModel() :
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
		UserModel(), mutex(xSemaphoreCreateMutex()) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fb2c 	bl	800a7d8 <_ZN9UserModelC1Ev>
 8009180:	4a08      	ldr	r2, [pc, #32]	@ (80091a4 <_ZN13TestModeModelC1Ev+0x34>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	2001      	movs	r0, #1
 8009188:	f00a fa71 	bl	801366e <xQueueCreateMutex>
 800918c:	4602      	mov	r2, r0
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	645a      	str	r2, [r3, #68]	@ 0x44
	this->clear();
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f950 	bl	8009438 <_ZN13TestModeModel5clearEv>
}
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08019f4c 	.word	0x08019f4c

080091a8 <_ZN13TestModeModel8setCarIdEPKc>:

void TestModeModel::setCarId(const char *carId) {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	this->data[CAR_ID] = carId;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	1d19      	adds	r1, r3, #4
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	4a07      	ldr	r2, [pc, #28]	@ (80091d8 <_ZN13TestModeModel8setCarIdEPKc+0x30>)
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fc f850 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fc f859 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	08019c7c 	.word	0x08019c7c

080091dc <_ZN13TestModeModel12setStartTimeEPKc>:

void TestModeModel::setStartTime(const char *startTime) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	this->data[START_TIME] = startTime;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	1d19      	adds	r1, r3, #4
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4a07      	ldr	r2, [pc, #28]	@ (800920c <_ZN13TestModeModel12setStartTimeEPKc+0x30>)
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fc f836 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fc f83f 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	08019c84 	.word	0x08019c84

08009210 <_ZN13TestModeModel10setEndTimeEPKc>:

void TestModeModel::setEndTime(const char *endTime) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	this->data[END_TIME] = endTime;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	1d19      	adds	r1, r3, #4
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	4a07      	ldr	r2, [pc, #28]	@ (8009240 <_ZN13TestModeModel10setEndTimeEPKc+0x30>)
 8009224:	4618      	mov	r0, r3
 8009226:	f7fc f81c 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f7fc f825 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	08019c90 	.word	0x08019c90

08009244 <_ZN13TestModeModel8setScoreEa>:

void TestModeModel::setScore(int8_t score) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
	if (score < 0) {
 8009250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da02      	bge.n	800925e <_ZN13TestModeModel8setScoreEa+0x1a>
		score = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	70fb      	strb	r3, [r7, #3]
 800925c:	e005      	b.n	800926a <_ZN13TestModeModel8setScoreEa+0x26>
	} else if (score > 100) {
 800925e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009262:	2b64      	cmp	r3, #100	@ 0x64
 8009264:	dd01      	ble.n	800926a <_ZN13TestModeModel8setScoreEa+0x26>
		score = 100;
 8009266:	2364      	movs	r3, #100	@ 0x64
 8009268:	70fb      	strb	r3, [r7, #3]
	}
	this->data[SCORE] = score;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	1d19      	adds	r1, r3, #4
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4a07      	ldr	r2, [pc, #28]	@ (8009290 <_ZN13TestModeModel8setScoreEa+0x4c>)
 8009274:	4618      	mov	r0, r3
 8009276:	f7fb fff4 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800927a:	1cfa      	adds	r2, r7, #3
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fa74 	bl	8009770 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	08019c98 	.word	0x08019c98

08009294 <_ZN13TestModeModel16setContestResultEa>:

void TestModeModel::setContestResult(int8_t contestResult) {
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
	if (contestResult < -1) {
 80092a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	da02      	bge.n	80092b0 <_ZN13TestModeModel16setContestResultEa+0x1c>
		contestResult = -1;
 80092aa:	23ff      	movs	r3, #255	@ 0xff
 80092ac:	70fb      	strb	r3, [r7, #3]
 80092ae:	e005      	b.n	80092bc <_ZN13TestModeModel16setContestResultEa+0x28>
	} else if (contestResult > 1) {
 80092b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	dd01      	ble.n	80092bc <_ZN13TestModeModel16setContestResultEa+0x28>
		contestResult = 1;
 80092b8:	2301      	movs	r3, #1
 80092ba:	70fb      	strb	r3, [r7, #3]
	}
	this->data[CONTESTS_RESULT] = contestResult;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	1d19      	adds	r1, r3, #4
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	4a07      	ldr	r2, [pc, #28]	@ (80092e4 <_ZN13TestModeModel16setContestResultEa+0x50>)
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fb ffcb 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80092cc:	1cfa      	adds	r2, r7, #3
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fa4b 	bl	8009770 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08019ca0 	.word	0x08019ca0

080092e8 <_ZN13TestModeModel11setDistanceEd>:

void TestModeModel::setDistance(double distance) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	ed87 0b00 	vstr	d0, [r7]
	this->data[DISTANCE] = distance;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	f107 0310 	add.w	r3, r7, #16
 80092fc:	4a07      	ldr	r2, [pc, #28]	@ (800931c <_ZN13TestModeModel11setDistanceEd+0x34>)
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fb ffaf 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8009304:	463a      	mov	r2, r7
 8009306:	f107 0310 	add.w	r3, r7, #16
 800930a:	4611      	mov	r1, r2
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fc21 	bl	8008b54 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIdEERS7_RKT_>
}
 8009312:	bf00      	nop
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	08019cb0 	.word	0x08019cb0

08009320 <_ZN13TestModeModel12setCycleTimeEm>:

void TestModeModel::setCycleTime(unsigned long cycleTime) {
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
	this->data[CYCLE_TIME] = cycleTime < 0 ? 0: cycleTime;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	1d19      	adds	r1, r3, #4
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	4a09      	ldr	r2, [pc, #36]	@ (8009358 <_ZN13TestModeModel12setCycleTimeEm+0x38>)
 8009334:	4618      	mov	r0, r3
 8009336:	f7fb ff94 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	f107 0214 	add.w	r2, r7, #20
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fa1f 	bl	800978c <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSImEERS7_RKT_>
}
 800934e:	bf00      	nop
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	08019cbc 	.word	0x08019cbc

0800935c <_ZN13TestModeModel11setLocationEPK13LocationModel>:
		return;
	}
	this->data[CONTESTS].add(contestModel->toJson());
}

void TestModeModel::setLocation(const LocationModel *location) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	if (location == nullptr) {
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <_ZN13TestModeModel11setLocationEPK13LocationModel+0x1c>
		this->data.remove(LOCATION);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	490e      	ldr	r1, [pc, #56]	@ (80093ac <_ZN13TestModeModel11setLocationEPK13LocationModel+0x50>)
 8009372:	4618      	mov	r0, r3
 8009374:	f7fc f803 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	}
	this->data[LOCATION] = location->toJson();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	f107 0308 	add.w	r3, r7, #8
 8009380:	4a0a      	ldr	r2, [pc, #40]	@ (80093ac <_ZN13TestModeModel11setLocationEPK13LocationModel+0x50>)
 8009382:	4618      	mov	r0, r3
 8009384:	f7fb ff6d 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3304      	adds	r3, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4610      	mov	r0, r2
 8009394:	4798      	blx	r3
 8009396:	4602      	mov	r2, r0
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fa02 	bl	80097a8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS3_EERS7_RKT_>
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	08019ce0 	.word	0x08019ce0

080093b0 <_ZN13TestModeModel5resetEv>:
}
JsonArrayConst TestModeModel::getContestModels() const {
	return this->data[CONTESTS];
}

void TestModeModel::reset() {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	UserModel::clear();
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fb28 	bl	800aa10 <_ZN9UserModel5clearEv>
	this->setStartTime("");
 80093c0:	4919      	ldr	r1, [pc, #100]	@ (8009428 <_ZN13TestModeModel5resetEv+0x78>)
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff ff0a 	bl	80091dc <_ZN13TestModeModel12setStartTimeEPKc>
	this->setEndTime("");
 80093c8:	4917      	ldr	r1, [pc, #92]	@ (8009428 <_ZN13TestModeModel5resetEv+0x78>)
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ff20 	bl	8009210 <_ZN13TestModeModel10setEndTimeEPKc>
	this->setCycleTime(0);
 80093d0:	2100      	movs	r1, #0
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff ffa4 	bl	8009320 <_ZN13TestModeModel12setCycleTimeEm>
	this->setScore(100);
 80093d8:	2164      	movs	r1, #100	@ 0x64
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ff32 	bl	8009244 <_ZN13TestModeModel8setScoreEa>
	this->setContestResult(TEST_RUNNING);
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff ff56 	bl	8009294 <_ZN13TestModeModel16setContestResultEa>
	this->setDistance(0);
 80093e8:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8009420 <_ZN13TestModeModel5resetEv+0x70>
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff ff7b 	bl	80092e8 <_ZN13TestModeModel11setDistanceEd>
	this->data.remove(LOCATION);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3304      	adds	r3, #4
 80093f6:	490d      	ldr	r1, [pc, #52]	@ (800942c <_ZN13TestModeModel5resetEv+0x7c>)
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fb ffc0 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data.remove(ERROR_CODES);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	490b      	ldr	r1, [pc, #44]	@ (8009430 <_ZN13TestModeModel5resetEv+0x80>)
 8009404:	4618      	mov	r0, r3
 8009406:	f7fb ffba 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data.remove(CONTESTS);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3304      	adds	r3, #4
 800940e:	4909      	ldr	r1, [pc, #36]	@ (8009434 <_ZN13TestModeModel5resetEv+0x84>)
 8009410:	4618      	mov	r0, r3
 8009412:	f7fb ffb4 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
	...
 8009428:	08019cf0 	.word	0x08019cf0
 800942c:	08019ce0 	.word	0x08019ce0
 8009430:	08019cc8 	.word	0x08019cc8
 8009434:	08019cd4 	.word	0x08019cd4

08009438 <_ZN13TestModeModel5clearEv>:

void TestModeModel::clear() {
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	UserModel::clear();
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	f001 fae4 	bl	800aa10 <_ZN9UserModel5clearEv>
	this->setStartTime("");
 8009448:	4919      	ldr	r1, [pc, #100]	@ (80094b0 <_ZN13TestModeModel5clearEv+0x78>)
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff fec6 	bl	80091dc <_ZN13TestModeModel12setStartTimeEPKc>
	this->setEndTime("");
 8009450:	4917      	ldr	r1, [pc, #92]	@ (80094b0 <_ZN13TestModeModel5clearEv+0x78>)
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fedc 	bl	8009210 <_ZN13TestModeModel10setEndTimeEPKc>
	this->setCycleTime(0);
 8009458:	2100      	movs	r1, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff ff60 	bl	8009320 <_ZN13TestModeModel12setCycleTimeEm>
	this->setScore(0);
 8009460:	2100      	movs	r1, #0
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff feee 	bl	8009244 <_ZN13TestModeModel8setScoreEa>
	this->setContestResult(TEST_RUNNING);
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff ff12 	bl	8009294 <_ZN13TestModeModel16setContestResultEa>
	this->setDistance(0);
 8009470:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 80094a8 <_ZN13TestModeModel5clearEv+0x70>
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff37 	bl	80092e8 <_ZN13TestModeModel11setDistanceEd>
	this->data.remove(LOCATION);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3304      	adds	r3, #4
 800947e:	490d      	ldr	r1, [pc, #52]	@ (80094b4 <_ZN13TestModeModel5clearEv+0x7c>)
 8009480:	4618      	mov	r0, r3
 8009482:	f7fb ff7c 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data.remove(ERROR_CODES);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3304      	adds	r3, #4
 800948a:	490b      	ldr	r1, [pc, #44]	@ (80094b8 <_ZN13TestModeModel5clearEv+0x80>)
 800948c:	4618      	mov	r0, r3
 800948e:	f7fb ff76 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data.remove(CONTESTS);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3304      	adds	r3, #4
 8009496:	4909      	ldr	r1, [pc, #36]	@ (80094bc <_ZN13TestModeModel5clearEv+0x84>)
 8009498:	4618      	mov	r0, r3
 800949a:	f7fb ff70 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
}
 800949e:	bf00      	nop
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
	...
 80094b0:	08019cf0 	.word	0x08019cf0
 80094b4:	08019ce0 	.word	0x08019ce0
 80094b8:	08019cc8 	.word	0x08019cc8
 80094bc:	08019cd4 	.word	0x08019cd4

080094c0 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>:

void TestModeModel::updateModel(const JsonDocument *json) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b0ac      	sub	sp, #176	@ 0xb0
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
	if (json == nullptr) {
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8133 	beq.w	8009738 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x278>
		return;
	}
	UserModel::updateModel(json);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fb00 	bl	800aadc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>
	const JsonDocument &jsonData = *json;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	this->setCarId(getFormJsonVariant<const char*>(jsonData[CAR_ID], "0"));
 80094e2:	f107 0320 	add.w	r3, r7, #32
 80094e6:	4a96      	ldr	r2, [pc, #600]	@ (8009740 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x280>)
 80094e8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fb fed5 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80094f2:	4b94      	ldr	r3, [pc, #592]	@ (8009744 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x284>)
 80094f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80094fa:	f107 0320 	add.w	r3, r7, #32
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7fb fee7 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8009506:	4603      	mov	r3, r0
 8009508:	4619      	mov	r1, r3
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe4c 	bl	80091a8 <_ZN13TestModeModel8setCarIdEPKc>
	this->setStartTime(
			getFormJsonVariant<const char*>(jsonData[START_TIME], ""));
 8009510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009514:	4a8c      	ldr	r2, [pc, #560]	@ (8009748 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x288>)
 8009516:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800951a:	4618      	mov	r0, r3
 800951c:	f7fb febe 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8009520:	4b8a      	ldr	r3, [pc, #552]	@ (800974c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x28c>)
 8009522:	637b      	str	r3, [r7, #52]	@ 0x34
	this->setStartTime(
 8009524:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8009528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7fb fed0 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8009534:	4603      	mov	r3, r0
 8009536:	4619      	mov	r1, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fe4f 	bl	80091dc <_ZN13TestModeModel12setStartTimeEPKc>
	this->setEndTime(getFormJsonVariant<const char*>(jsonData[END_TIME], ""));
 800953e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009542:	4a83      	ldr	r2, [pc, #524]	@ (8009750 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x290>)
 8009544:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009548:	4618      	mov	r0, r3
 800954a:	f7fb fea7 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800954e:	4b7f      	ldr	r3, [pc, #508]	@ (800974c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x28c>)
 8009550:	643b      	str	r3, [r7, #64]	@ 0x40
 8009552:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7fb feb9 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 8009562:	4603      	mov	r3, r0
 8009564:	4619      	mov	r1, r3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fe52 	bl	8009210 <_ZN13TestModeModel10setEndTimeEPKc>
	this->setCycleTime(
			getFormJsonVariant<unsigned long>(jsonData[CYCLE_TIME], 0));
 800956c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009570:	4a78      	ldr	r2, [pc, #480]	@ (8009754 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x294>)
 8009572:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009576:	4618      	mov	r0, r3
 8009578:	f7fb fe90 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800957c:	2300      	movs	r3, #0
 800957e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	this->setCycleTime(
 8009580:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8009584:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f91a 	bl	80097c4 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8009590:	4603      	mov	r3, r0
 8009592:	4619      	mov	r1, r3
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fec3 	bl	8009320 <_ZN13TestModeModel12setCycleTimeEm>
	this->setScore(getFormJsonVariant<uint8_t>(jsonData[SCORE], 0));
 800959a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800959e:	4a6e      	ldr	r2, [pc, #440]	@ (8009758 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x298>)
 80095a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fb fe79 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80095b0:	f107 025b 	add.w	r2, r7, #91	@ 0x5b
 80095b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fefd 	bl	80083ba <_ZN9BaseModel18getFormJsonVariantIhEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 80095c0:	4603      	mov	r3, r0
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fe3c 	bl	8009244 <_ZN13TestModeModel8setScoreEa>
	this->setContestResult(
			getFormJsonVariant<int8_t>(jsonData[CONTESTS_RESULT], 0));
 80095cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80095d0:	4a62      	ldr	r2, [pc, #392]	@ (800975c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x29c>)
 80095d2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fb fe60 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	this->setContestResult(
 80095e2:	f107 0267 	add.w	r2, r7, #103	@ 0x67
 80095e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f90f 	bl	8009810 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4619      	mov	r1, r3
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fe4c 	bl	8009294 <_ZN13TestModeModel16setContestResultEa>
	this->setDistance(getFormJsonVariant<double>(jsonData[DISTANCE], 0));
 80095fc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8009600:	4a57      	ldr	r2, [pc, #348]	@ (8009760 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a0>)
 8009602:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009606:	4618      	mov	r0, r3
 8009608:	f7fb fe48 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8009618:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800961c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff faa4 	bl	8008b70 <_ZN9BaseModel18getFormJsonVariantIdEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 8009628:	eeb0 7a40 	vmov.f32	s14, s0
 800962c:	eef0 7a60 	vmov.f32	s15, s1
 8009630:	eeb0 0a47 	vmov.f32	s0, s14
 8009634:	eef0 0a67 	vmov.f32	s1, s15
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff fe55 	bl	80092e8 <_ZN13TestModeModel11setDistanceEd>
	this->data[LOCATION].set(jsonData[LOCATION]);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1d19      	adds	r1, r3, #4
 8009642:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8009646:	4a47      	ldr	r2, [pc, #284]	@ (8009764 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a4>)
 8009648:	4618      	mov	r0, r3
 800964a:	f7fb fe0a 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800964e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8009652:	4a44      	ldr	r2, [pc, #272]	@ (8009764 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a4>)
 8009654:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009658:	4618      	mov	r0, r3
 800965a:	f7fb fe1f 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800965e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8009662:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f000 f8f9 	bl	8009860 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setINS0_16JsonVariantConstEEEbRKT_>
	/////////////////////////
	JsonArrayConst errorCodes;
 800966e:	f107 0318 	add.w	r3, r7, #24
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fd6a 	bl	800914c <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1Ev>
	errorCodes = getFormJsonVariant<JsonArrayConst>(jsonData[ERROR_CODES],
 8009678:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800967c:	4a3a      	ldr	r2, [pc, #232]	@ (8009768 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a8>)
 800967e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009682:	4618      	mov	r0, r3
 8009684:	f7fb fe0a 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 8009688:	463b      	mov	r3, r7
 800968a:	f107 0218 	add.w	r2, r7, #24
 800968e:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8009692:	4618      	mov	r0, r3
 8009694:	f7fb fe44 	bl	8005320 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_>
 8009698:	f107 0318 	add.w	r3, r7, #24
 800969c:	463a      	mov	r2, r7
 800969e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096a2:	e883 0003 	stmia.w	r3, {r0, r1}
			errorCodes);
	this->data.remove(ERROR_CODES);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3304      	adds	r3, #4
 80096aa:	492f      	ldr	r1, [pc, #188]	@ (8009768 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a8>)
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fb fe66 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data[ERROR_CODES].set<JsonArrayConst>(errorCodes);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1d19      	adds	r1, r3, #4
 80096b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80096ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009768 <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2a8>)
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fb fdd0 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 80096c2:	f107 0218 	add.w	r2, r7, #24
 80096c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80096ca:	4611      	mov	r1, r2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fc fad2 	bl	8005c76 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setINS0_14JsonArrayConstEEEbRKT_>
	/////////////////
	JsonArrayConst contests;
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fd38 	bl	800914c <_ZN11ArduinoJson8V721HB2214JsonArrayConstC1Ev>
	contests = getFormJsonVariant<JsonArrayConst>(jsonData[CONTESTS], contests);
 80096dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80096e0:	4a22      	ldr	r2, [pc, #136]	@ (800976c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2ac>)
 80096e2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fb fdd8 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 80096ec:	463b      	mov	r3, r7
 80096ee:	f107 0210 	add.w	r2, r7, #16
 80096f2:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb fe12 	bl	8005320 <_ZN9BaseModel18getFormJsonVariantIN11ArduinoJson8V721HB2214JsonArrayConstEEET_RKNS2_16JsonVariantConstERKS4_>
 80096fc:	f107 0310 	add.w	r3, r7, #16
 8009700:	463a      	mov	r2, r7
 8009702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009706:	e883 0003 	stmia.w	r3, {r0, r1}
	this->data.remove(CONTESTS);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3304      	adds	r3, #4
 800970e:	4917      	ldr	r1, [pc, #92]	@ (800976c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2ac>)
 8009710:	4618      	mov	r0, r3
 8009712:	f7fb fe34 	bl	800537e <_ZN11ArduinoJson8V721HB2212JsonDocument6removeIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueEvE4typeES8_>
	this->data[CONTESTS].set<JsonArrayConst>(contests);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1d19      	adds	r1, r3, #4
 800971a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800971e:	4a13      	ldr	r2, [pc, #76]	@ (800976c <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x2ac>)
 8009720:	4618      	mov	r0, r3
 8009722:	f7fb fd9e 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 8009726:	f107 0210 	add.w	r2, r7, #16
 800972a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7fc faa0 	bl	8005c76 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setINS0_14JsonArrayConstEEEbRKT_>
 8009736:	e000      	b.n	800973a <_ZN13TestModeModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x27a>
		return;
 8009738:	bf00      	nop
}
 800973a:	37b0      	adds	r7, #176	@ 0xb0
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	08019c7c 	.word	0x08019c7c
 8009744:	08019cec 	.word	0x08019cec
 8009748:	08019c84 	.word	0x08019c84
 800974c:	08019cf0 	.word	0x08019cf0
 8009750:	08019c90 	.word	0x08019c90
 8009754:	08019cbc 	.word	0x08019cbc
 8009758:	08019c98 	.word	0x08019c98
 800975c:	08019ca0 	.word	0x08019ca0
 8009760:	08019cb0 	.word	0x08019cb0
 8009764:	08019ce0 	.word	0x08019ce0
 8009768:	08019cc8 	.word	0x08019cc8
 800976c:	08019cd4 	.word	0x08019cd4

08009770 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
    this->set(src);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f87d 	bl	800987c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIaEEbRKT_>
    return *this;
 8009782:	687b      	ldr	r3, [r7, #4]
  }
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
    this->set(src);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f87d 	bl	8009898 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setImEEbRKT_>
    return *this;
 800979e:	687b      	ldr	r3, [r7, #4]
  }
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS3_EERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
    this->set(src);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f87d 	bl	80098b4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS4_EEbRKT_>
    return *this;
 80097ba:	687b      	ldr	r3, [r7, #4]
  }
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	f107 020c 	add.w	r2, r7, #12
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097dc:	f7fc fa32 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x28>
			return defaultValue;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	e00d      	b.n	8009808 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x44>
		return jsonVariant.template is<T>() ?
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f88b 	bl	8009908 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isImEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x3e>
				jsonVariant.template as<T>() : defaultValue;
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f893 	bl	8009924 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asImLb1EEET_v>
 80097fe:	4603      	mov	r3, r0
 8009800:	e001      	b.n	8009806 <_ZN9BaseModel18getFormJsonVariantImEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x42>
		return jsonVariant.template is<T>() ?
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
				jsonVariant.template as<T>() : defaultValue;
 8009806:	bf00      	nop
	}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>:
	inline static T getFormJsonVariant(const JsonVariantConst &jsonVariant,
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
		if (jsonVariant == nullptr) {
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	f107 020c 	add.w	r2, r7, #12
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009828:	f7fc fa0c 	bl	8005c44 <_ZN11ArduinoJson8V721HB226detaileqIDnEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS0_16JsonVariantConstERKS6_>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x2a>
			return defaultValue;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	f993 3000 	ldrsb.w	r3, [r3]
 8009838:	e00e      	b.n	8009858 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x48>
		return jsonVariant.template is<T>() ?
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f848 	bl	80098d0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIaEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x40>
				jsonVariant.template as<T>() : defaultValue;
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f850 	bl	80098ec <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIaLb1EEET_v>
 800984c:	4603      	mov	r3, r0
 800984e:	e002      	b.n	8009856 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_+0x46>
		return jsonVariant.template is<T>() ?
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f993 3000 	ldrsb.w	r3, [r3]
				jsonVariant.template as<T>() : defaultValue;
 8009856:	bf00      	nop
	}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setINS0_16JsonVariantConstEEEbRKT_>:
  bool set(const T& value) const {
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f867 	bl	8009940 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_>
 8009872:	4603      	mov	r3, r0
  }
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIaEEbRKT_>:
  bool set(const T& value) const {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f86c 	bl	8009966 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_>
 800988e:	4603      	mov	r3, r0
  }
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f871 	bl	800998c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_>
 80098aa:	4603      	mov	r3, r0
  }
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIS4_EEbRKT_>:
  bool set(const T& value) const {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f876 	bl	80099b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_>
 80098c6:	4603      	mov	r3, r0
  }
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isIaEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098de:	f000 f87b 	bl	80099d8 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE>
 80098e2:	4603      	mov	r3, r0
  }
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asIaLb1EEET_v>:
  T as() const {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098fa:	f000 f88e 	bl	8009a1a <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE>
 80098fe:	4603      	mov	r3, r0
  }
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2isImEENS0_6detail9enable_ifIXsrNS3_7is_sameINS3_15function_traitsIDTadsrNS0_9ConverterIT_vEE8fromJsonEE9arg1_typeES1_EE5valueEbE4typeEv>:
  detail::enable_if_t<ConversionSupported<T>::value, bool> is() const {
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    return Converter<T>::checkJson(*this);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009916:	f000 f89e 	bl	8009a56 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE>
 800991a:	4603      	mov	r3, r0
  }
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <_ZNK11ArduinoJson8V721HB2216JsonVariantConst2asImLb1EEET_v>:
  T as() const {
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    return Converter<T>::fromJson(*this);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009932:	f000 f8b1 	bl	8009a98 <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8009936:	4603      	mov	r3, r0
  }
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_>:
  bool doSet(T&& value) const {
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800994a:	6838      	ldr	r0, [r7, #0]
 800994c:	f7fc fa2c 	bl	8005da8 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_16JsonVariantConstEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009950:	4603      	mov	r3, r0
 8009952:	4622      	mov	r2, r4
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8bc 	bl	8009ad4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE>
 800995c:	4603      	mov	r3, r0
  }
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	bd90      	pop	{r4, r7, pc}

08009966 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_>:
  bool doSet(T&& value) const {
 8009966:	b590      	push	{r4, r7, lr}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8009970:	6838      	ldr	r0, [r7, #0]
 8009972:	f000 f8d9 	bl	8009b28 <_ZN11ArduinoJson8V721HB226detail7forwardIRKaEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8009976:	4603      	mov	r3, r0
 8009978:	4622      	mov	r2, r4
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f8de 	bl	8009b3e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_NS1_17integral_constantIbLb1EEE>
 8009982:	4603      	mov	r3, r0
  }
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	bd90      	pop	{r4, r7, pc}

0800998c <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_>:
  bool doSet(T&& value) const {
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8009996:	6838      	ldr	r0, [r7, #0]
 8009998:	f000 f8ec 	bl	8009b74 <_ZN11ArduinoJson8V721HB226detail7forwardIRKmEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800999c:	4603      	mov	r3, r0
 800999e:	4622      	mov	r2, r4
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f8f1 	bl	8009b8a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_NS1_17integral_constantIbLb1EEE>
 80099a8:	4603      	mov	r3, r0
  }
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd90      	pop	{r4, r7, pc}

080099b2 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_>:
  bool doSet(T&& value) const {
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 80099bc:	6838      	ldr	r0, [r7, #0]
 80099be:	f7fc ffc9 	bl	8006954 <_ZN11ArduinoJson8V721HB226detail7forwardIRKNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80099c2:	4603      	mov	r3, r0
 80099c4:	4622      	mov	r2, r4
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8f8 	bl	8009bbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_NS1_17integral_constantIbLb0EEE>
 80099ce:	4603      	mov	r3, r0
  }
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd90      	pop	{r4, r7, pc}

080099d8 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	463b      	mov	r3, r7
 80099e0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80099e4:	463b      	mov	r3, r7
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f8 f95c 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80099ec:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80099ee:	463b      	mov	r3, r7
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f8 f963 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80099f6:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x38>
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f907 	bl	8009c14 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x38>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <_ZN11ArduinoJson8V721HB229ConverterIavE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8009a10:	2300      	movs	r3, #0
  }
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	463b      	mov	r3, r7
 8009a22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8009a26:	463b      	mov	r3, r7
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f8 f93b 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8009a2e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8009a30:	463b      	mov	r3, r7
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f8 f942 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8009a38:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE+0x32>
 8009a40:	68b9      	ldr	r1, [r7, #8]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f944 	bl	8009cd0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	e000      	b.n	8009a4e <_ZN11ArduinoJson8V721HB229ConverterIavE8fromJsonENS0_16JsonVariantConstE+0x34>
 8009a4c:	2300      	movs	r3, #0
  }
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE>:
  static bool checkJson(JsonVariantConst src) {
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8009a62:	463b      	mov	r3, r7
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7f8 f91d 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8009a6a:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f8 f924 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8009a74:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d008      	beq.n	8009a8e <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x38>
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f9ba 	bl	8009df8 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x38>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <_ZN11ArduinoJson8V721HB229ConverterImvE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8009a8e:	2300      	movs	r3, #0
  }
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	463b      	mov	r3, r7
 8009aa0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f8 f8fc 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8009aac:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8009aae:	463b      	mov	r3, r7
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f8 f903 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8009ab6:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f9f7 	bl	8009eb4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	e000      	b.n	8009acc <_ZN11ArduinoJson8V721HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8009aca:	2300      	movs	r3, #0
  }
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fd f9a2 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	f107 0314 	add.w	r3, r7, #20
 8009af2:	cb0c      	ldmia	r3, {r2, r3}
 8009af4:	c903      	ldmia	r1, {r0, r1}
 8009af6:	f7f9 fd44 	bl	8003582 <_ZN11ArduinoJson8V721HB229ConverterINS0_16JsonVariantConstEvE6toJsonES2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7fc f892 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8009b00:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8009b08:	69f8      	ldr	r0, [r7, #28]
 8009b0a:	f7f9 fcc6 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f083 0301 	eor.w	r3, r3, #1
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterINS0_16JsonVariantConstEvEERKSC_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <_ZN11ArduinoJson8V721HB226detail7forwardIRKaEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8009b30:	687b      	ldr	r3, [r7, #4]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIavEERKaEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8009b3e:	b590      	push	{r4, r7, lr}
 8009b40:	b087      	sub	sp, #28
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f993 4000 	ldrsb.w	r4, [r3]
 8009b50:	f107 0310 	add.w	r3, r7, #16
 8009b54:	68f9      	ldr	r1, [r7, #12]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fd f96a 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8009b5c:	f107 0310 	add.w	r3, r7, #16
 8009b60:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fa39 	bl	8009fdc <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE>
 8009b6a:	4603      	mov	r3, r0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd90      	pop	{r4, r7, pc}

08009b74 <_ZN11ArduinoJson8V721HB226detail7forwardIRKmEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8009b7c:	687b      	ldr	r3, [r7, #4]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterImvEERKmEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 8009b8a:	b590      	push	{r4, r7, lr}
 8009b8c:	b087      	sub	sp, #28
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	681c      	ldr	r4, [r3, #0]
 8009b9a:	f107 0310 	add.w	r3, r7, #16
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd f945 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8009ba6:	f107 0310 	add.w	r3, r7, #16
 8009baa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fa3c 	bl	800a02c <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 8009bb4:	4603      	mov	r3, r0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd90      	pop	{r4, r7, pc}

08009bbe <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_NS1_17integral_constantIbLb0EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, false_type) const {
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b088      	sub	sp, #32
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	713a      	strb	r2, [r7, #4]
  TConverter::toJson(value, getOrCreateVariant());
 8009bca:	f107 0314 	add.w	r3, r7, #20
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fd f92d 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 8009bd6:	f107 0314 	add.w	r3, r7, #20
 8009bda:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	f7fe fa90 	bl	8008104 <_ZN11ArduinoJson8V721HB229ConverterINS0_12JsonDocumentEvE6toJsonERKS2_NS0_11JsonVariantE>
  auto resources = getResourceManager();
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7fc f81d 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 8009bea:	61f8      	str	r0, [r7, #28]
  return resources && !resources->overflowed();
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00a      	beq.n	8009c08 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8009bf2:	69f8      	ldr	r0, [r7, #28]
 8009bf4:	f7f9 fc51 	bl	800349a <_ZNK11ArduinoJson8V721HB226detail15ResourceManager10overflowedEv>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f083 0301 	eor.w	r3, r3, #1
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4a>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIS4_vEERKS4_EEbOT0_NS1_17integral_constantIbLb0EEE+0x4c>
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f7 ffe3 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8009c26:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	791b      	ldrb	r3, [r3, #4]
 8009c2c:	3b0a      	subs	r3, #10
 8009c2e:	2b12      	cmp	r3, #18
 8009c30:	d848      	bhi.n	8009cc4 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb0>
 8009c32:	a201      	add	r2, pc, #4	@ (adr r2, 8009c38 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0x24>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c85 	.word	0x08009c85
 8009c3c:	08009cc5 	.word	0x08009cc5
 8009c40:	08009c93 	.word	0x08009c93
 8009c44:	08009cc5 	.word	0x08009cc5
 8009c48:	08009cc5 	.word	0x08009cc5
 8009c4c:	08009cc5 	.word	0x08009cc5
 8009c50:	08009cc5 	.word	0x08009cc5
 8009c54:	08009cc5 	.word	0x08009cc5
 8009c58:	08009cc5 	.word	0x08009cc5
 8009c5c:	08009cc5 	.word	0x08009cc5
 8009c60:	08009cc5 	.word	0x08009cc5
 8009c64:	08009cc5 	.word	0x08009cc5
 8009c68:	08009cc5 	.word	0x08009cc5
 8009c6c:	08009cc5 	.word	0x08009cc5
 8009c70:	08009cc5 	.word	0x08009cc5
 8009c74:	08009cc5 	.word	0x08009cc5
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009cc5 	.word	0x08009cc5
 8009c80:	08009cb3 	.word	0x08009cb3
        return canConvertNumber<T>(content_.asUint32);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 f9f4 	bl	800a076 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	e019      	b.n	8009cc6 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f9ff 	bl	800a09a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	e012      	b.n	8009cc6 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f000 fa0f 	bl	800a0cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	e009      	b.n	8009cc6 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4619      	mov	r1, r3
 8009cbc:	f000 fa1f 	bl	800a0fe <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	e000      	b.n	8009cc6 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerIaEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8009cc4:	2300      	movs	r3, #0
  }
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7f7 ff85 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8009ce2:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	791b      	ldrb	r3, [r3, #4]
 8009ce8:	3b04      	subs	r3, #4
 8009cea:	2b1a      	cmp	r3, #26
 8009cec:	d87f      	bhi.n	8009dee <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x11e>
 8009cee:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x24>)
 8009cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf4:	08009da9 	.word	0x08009da9
 8009cf8:	08009db7 	.word	0x08009db7
 8009cfc:	08009d61 	.word	0x08009d61
 8009d00:	08009def 	.word	0x08009def
 8009d04:	08009def 	.word	0x08009def
 8009d08:	08009def 	.word	0x08009def
 8009d0c:	08009d69 	.word	0x08009d69
 8009d10:	08009def 	.word	0x08009def
 8009d14:	08009d77 	.word	0x08009d77
 8009d18:	08009def 	.word	0x08009def
 8009d1c:	08009dc7 	.word	0x08009dc7
 8009d20:	08009def 	.word	0x08009def
 8009d24:	08009def 	.word	0x08009def
 8009d28:	08009def 	.word	0x08009def
 8009d2c:	08009def 	.word	0x08009def
 8009d30:	08009def 	.word	0x08009def
 8009d34:	08009def 	.word	0x08009def
 8009d38:	08009def 	.word	0x08009def
 8009d3c:	08009def 	.word	0x08009def
 8009d40:	08009def 	.word	0x08009def
 8009d44:	08009def 	.word	0x08009def
 8009d48:	08009def 	.word	0x08009def
 8009d4c:	08009d85 	.word	0x08009d85
 8009d50:	08009def 	.word	0x08009def
 8009d54:	08009d97 	.word	0x08009d97
 8009d58:	08009def 	.word	0x08009def
 8009d5c:	08009dd9 	.word	0x08009dd9
        return content_.asBoolean;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	b25b      	sxtb	r3, r3
 8009d66:	e043      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asUint32);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f9ee 	bl	800a14e <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_>
 8009d72:	4603      	mov	r3, r0
 8009d74:	e03c      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asInt32);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f9f9 	bl	800a172 <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_>
 8009d80:	4603      	mov	r3, r0
 8009d82:	e035      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asUint64);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	f000 fa02 	bl	800a196 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>
 8009d92:	4603      	mov	r3, r0
 8009d94:	e02c      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asInt64);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f000 fa0d 	bl	800a1be <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>
 8009da4:	4603      	mov	r3, r0
 8009da6:	e023      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return parseNumber<T>(content_.asLinkedString);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fa1a 	bl	800a1e6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>
 8009db2:	4603      	mov	r3, r0
 8009db4:	e01c      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return parseNumber<T>(content_.asOwnedString->data);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fa12 	bl	800a1e6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	e014      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(content_.asFloat);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	edd3 7a00 	vldr	s15, [r3]
 8009dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8009dd0:	f000 fa1d 	bl	800a20e <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	e00b      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return convertNumber<T>(extension->asDouble);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	ed93 7b00 	vldr	d7, [r3]
 8009dde:	eeb0 0a47 	vmov.f32	s0, s14
 8009de2:	eef0 0a67 	vmov.f32	s1, s15
 8009de6:	f000 fa2c 	bl	800a242 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>
 8009dea:	4603      	mov	r3, r0
 8009dec:	e000      	b.n	8009df0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIaEET_PKNS1_15ResourceManagerE+0x120>
        return 0;
 8009dee:	2300      	movs	r3, #0
  }
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7f7 fef1 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8009e0a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	791b      	ldrb	r3, [r3, #4]
 8009e10:	3b0a      	subs	r3, #10
 8009e12:	2b12      	cmp	r3, #18
 8009e14:	d848      	bhi.n	8009ea8 <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb0>
 8009e16:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0x24>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e69 	.word	0x08009e69
 8009e20:	08009ea9 	.word	0x08009ea9
 8009e24:	08009e77 	.word	0x08009e77
 8009e28:	08009ea9 	.word	0x08009ea9
 8009e2c:	08009ea9 	.word	0x08009ea9
 8009e30:	08009ea9 	.word	0x08009ea9
 8009e34:	08009ea9 	.word	0x08009ea9
 8009e38:	08009ea9 	.word	0x08009ea9
 8009e3c:	08009ea9 	.word	0x08009ea9
 8009e40:	08009ea9 	.word	0x08009ea9
 8009e44:	08009ea9 	.word	0x08009ea9
 8009e48:	08009ea9 	.word	0x08009ea9
 8009e4c:	08009ea9 	.word	0x08009ea9
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009ea9 	.word	0x08009ea9
 8009e58:	08009ea9 	.word	0x08009ea9
 8009e5c:	08009e85 	.word	0x08009e85
 8009e60:	08009ea9 	.word	0x08009ea9
 8009e64:	08009e97 	.word	0x08009e97
        return canConvertNumber<T>(content_.asUint32);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fa00 	bl	800a272 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009e72:	4603      	mov	r3, r0
 8009e74:	e019      	b.n	8009eaa <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fa0a 	bl	800a294 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8009e80:	4603      	mov	r3, r0
 8009e82:	e012      	b.n	8009eaa <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	f7fe f9cc 	bl	800822a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009e92:	4603      	mov	r3, r0
 8009e94:	e009      	b.n	8009eaa <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f000 fa0e 	bl	800a2c0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	e000      	b.n	8009eaa <_ZNK11ArduinoJson8V721HB226detail11VariantData9isIntegerImEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8009ea8:	2300      	movs	r3, #0
  }
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop

08009eb4 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7f7 fe93 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8009ec6:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	2b1a      	cmp	r3, #26
 8009ed0:	d87e      	bhi.n	8009fd0 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11c>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f8b 	.word	0x08009f8b
 8009edc:	08009f99 	.word	0x08009f99
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009fd1 	.word	0x08009fd1
 8009ee8:	08009fd1 	.word	0x08009fd1
 8009eec:	08009fd1 	.word	0x08009fd1
 8009ef0:	08009f4b 	.word	0x08009f4b
 8009ef4:	08009fd1 	.word	0x08009fd1
 8009ef8:	08009f59 	.word	0x08009f59
 8009efc:	08009fd1 	.word	0x08009fd1
 8009f00:	08009fa9 	.word	0x08009fa9
 8009f04:	08009fd1 	.word	0x08009fd1
 8009f08:	08009fd1 	.word	0x08009fd1
 8009f0c:	08009fd1 	.word	0x08009fd1
 8009f10:	08009fd1 	.word	0x08009fd1
 8009f14:	08009fd1 	.word	0x08009fd1
 8009f18:	08009fd1 	.word	0x08009fd1
 8009f1c:	08009fd1 	.word	0x08009fd1
 8009f20:	08009fd1 	.word	0x08009fd1
 8009f24:	08009fd1 	.word	0x08009fd1
 8009f28:	08009fd1 	.word	0x08009fd1
 8009f2c:	08009fd1 	.word	0x08009fd1
 8009f30:	08009f67 	.word	0x08009f67
 8009f34:	08009fd1 	.word	0x08009fd1
 8009f38:	08009f79 	.word	0x08009f79
 8009f3c:	08009fd1 	.word	0x08009fd1
 8009f40:	08009fbb 	.word	0x08009fbb
        return content_.asBoolean;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	e043      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f9d4 	bl	800a2fc <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_>
 8009f54:	4603      	mov	r3, r0
 8009f56:	e03c      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f9de 	bl	800a31e <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_>
 8009f62:	4603      	mov	r3, r0
 8009f64:	e035      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f000 f9e6 	bl	800a340 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>
 8009f74:	4603      	mov	r3, r0
 8009f76:	e02c      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4619      	mov	r1, r3
 8009f82:	f000 f9f0 	bl	800a366 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>
 8009f86:	4603      	mov	r3, r0
 8009f88:	e023      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f9fc 	bl	800a38c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>
 8009f94:	4603      	mov	r3, r0
 8009f96:	e01c      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f9f4 	bl	800a38c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	e014      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	edd3 7a00 	vldr	s15, [r3]
 8009fae:	eeb0 0a67 	vmov.f32	s0, s15
 8009fb2:	f000 f9ff 	bl	800a3b4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	e00b      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	ed93 7b00 	vldr	d7, [r3]
 8009fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8009fc4:	eef0 0a67 	vmov.f32	s1, s15
 8009fc8:	f000 fa0c 	bl	800a3e4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	e000      	b.n	8009fd2 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 8009fd0:	2300      	movs	r3, #0
  }
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop

08009fdc <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	1d3b      	adds	r3, r7, #4
 8009fe4:	e883 0006 	stmia.w	r3, {r1, r2}
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
    auto data = getData(dst);
 8009fec:	1d3b      	adds	r3, r7, #4
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fa fdf2 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8009ff4:	6178      	str	r0, [r7, #20]
    if (!data)
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE+0x24>
      return false;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e011      	b.n	800a024 <_ZN11ArduinoJson8V721HB229ConverterIavE6toJsonEaNS0_11JsonVariantE+0x48>
    auto resources = getResourceManager(dst);
 800a000:	1d3b      	adds	r3, r7, #4
 800a002:	4618      	mov	r0, r3
 800a004:	f7fa ff92 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800a008:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800a00a:	6939      	ldr	r1, [r7, #16]
 800a00c:	6978      	ldr	r0, [r7, #20]
 800a00e:	f7fa faa2 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800a012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	4619      	mov	r1, r3
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f000 f9f9 	bl	800a412 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800a020:	4603      	mov	r3, r0
 800a022:	bf00      	nop
  }
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800a03a:	1d3b      	adds	r3, r7, #4
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fa fdcb 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800a042:	6178      	str	r0, [r7, #20]
    if (!data)
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e00f      	b.n	800a06e <_ZN11ArduinoJson8V721HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800a04e:	1d3b      	adds	r3, r7, #4
 800a050:	4618      	mov	r0, r3
 800a052:	f7fa ff6b 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800a056:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800a058:	6939      	ldr	r1, [r7, #16]
 800a05a:	6978      	ldr	r0, [r7, #20]
 800a05c:	f7fa fa7b 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	6978      	ldr	r0, [r7, #20]
 800a066:	f000 fa1c 	bl	800a4a2 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800a06a:	4603      	mov	r3, r0
 800a06c:	bf00      	nop
  }
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800a07e:	f000 fa53 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a082:	4603      	mov	r3, r0
 800a084:	461a      	mov	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4293      	cmp	r3, r2
 800a08a:	bf94      	ite	ls
 800a08c:	2301      	movls	r3, #1
 800a08e:	2300      	movhi	r3, #0
 800a090:	b2db      	uxtb	r3, r3
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a0a2:	f000 fa4a 	bl	800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	db08      	blt.n	800a0c2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x28>
         value <= TIn(numeric_limits<TOut>::highest());
 800a0b0:	f000 fa3a 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	dc01      	bgt.n	800a0c2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x28>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x2a>
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a0cc:	b5b0      	push	{r4, r5, r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800a0d6:	f000 fa27 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	b25b      	sxtb	r3, r3
 800a0de:	17da      	asrs	r2, r3, #31
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	4615      	mov	r5, r2
 800a0e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e8:	4294      	cmp	r4, r2
 800a0ea:	eb75 0303 	sbcs.w	r3, r5, r3
 800a0ee:	bf2c      	ite	cs
 800a0f0:	2301      	movcs	r3, #1
 800a0f2:	2300      	movcc	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bdb0      	pop	{r4, r5, r7, pc}

0800a0fe <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a0fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a10a:	f000 fa16 	bl	800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800a10e:	4603      	mov	r3, r0
 800a110:	b25b      	sxtb	r3, r3
 800a112:	17da      	asrs	r2, r3, #31
 800a114:	4698      	mov	r8, r3
 800a116:	4691      	mov	r9, r2
 800a118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11c:	4542      	cmp	r2, r8
 800a11e:	eb73 0309 	sbcs.w	r3, r3, r9
 800a122:	db0e      	blt.n	800a142 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x44>
         value <= TIn(numeric_limits<TOut>::highest());
 800a124:	f000 fa00 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a128:	4603      	mov	r3, r0
 800a12a:	b25b      	sxtb	r3, r3
 800a12c:	17da      	asrs	r2, r3, #31
 800a12e:	461c      	mov	r4, r3
 800a130:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a136:	4294      	cmp	r4, r2
 800a138:	eb75 0303 	sbcs.w	r3, r5, r3
 800a13c:	db01      	blt.n	800a142 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x44>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x46>
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a14e <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_>:
TOut convertNumber(TIn value) {
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff ff8d 	bl	800a076 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIamEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_+0x1a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	b25b      	sxtb	r3, r3
 800a166:	e000      	b.n	800a16a <_ZN11ArduinoJson8V721HB226detail13convertNumberIamEET_T0_+0x1c>
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_>:
TOut convertNumber(TIn value) {
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff ff8d 	bl	800a09a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIalEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_+0x1a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	b25b      	sxtb	r3, r3
 800a18a:	e000      	b.n	800a18e <_ZN11ArduinoJson8V721HB226detail13convertNumberIalEET_T0_+0x1c>
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>:
TOut convertNumber(TIn value) {
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a1a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1a4:	f7ff ff92 	bl	800a0cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIayEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_+0x1e>
 800a1ae:	f997 3000 	ldrsb.w	r3, [r7]
 800a1b2:	e000      	b.n	800a1b6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_+0x20>
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>:
TOut convertNumber(TIn value) {
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1cc:	f7ff ff97 	bl	800a0fe <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIaxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_+0x1e>
 800a1d6:	f997 3000 	ldrsb.w	r3, [r7]
 800a1da:	e000      	b.n	800a1de <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_+0x20>
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <_ZN11ArduinoJson8V721HB226detail11parseNumberIaEET_PKc>:
inline T parseNumber(const char* s) {
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b086      	sub	sp, #24
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800a1ee:	f107 0308 	add.w	r3, r7, #8
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fa fab1 	bl	800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 800a1fa:	f107 0308 	add.w	r3, r7, #8
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f9a4 	bl	800a54c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v>
 800a204:	4603      	mov	r3, r0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>:
TOut convertNumber(TIn value) {
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a218:	ed97 0a01 	vldr	s0, [r7, #4]
 800a21c:	f000 f9d6 	bl	800a5cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_+0x2a>
 800a226:	edd7 7a01 	vldr	s15, [r7, #4]
 800a22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a22e:	edc7 7a00 	vstr	s15, [r7]
 800a232:	783b      	ldrb	r3, [r7, #0]
 800a234:	b25b      	sxtb	r3, r3
 800a236:	e000      	b.n	800a23a <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_+0x2c>
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>:
TOut convertNumber(TIn value) {
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a24c:	ed97 0b00 	vldr	d0, [r7]
 800a250:	f000 f9e4 	bl	800a61c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d006      	beq.n	800a268 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_+0x26>
 800a25a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a25e:	f7f6 fc83 	bl	8000b68 <__aeabi_d2iz>
 800a262:	4603      	mov	r3, r0
 800a264:	b25b      	sxtb	r3, r3
 800a266:	e000      	b.n	800a26a <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_+0x28>
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800a27a:	f7fe f824 	bl	80082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800a27e:	4602      	mov	r2, r0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4293      	cmp	r3, r2
 800a284:	bf94      	ite	ls
 800a286:	2301      	movls	r3, #1
 800a288:	2300      	movhi	r3, #0
 800a28a:	b2db      	uxtb	r3, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  if (value < 0)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da01      	bge.n	800a2a6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e008      	b.n	800a2b8 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 800a2a6:	f7fe f80e 	bl	80082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	bf2c      	ite	cs
 800a2b2:	2301      	movcs	r3, #1
 800a2b4:	2300      	movcc	r3, #0
 800a2b6:	b2db      	uxtb	r3, r3
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a2c0:	b5b0      	push	{r4, r5, r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800a2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da01      	bge.n	800a2d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e00e      	b.n	800a2f4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 800a2d6:	f7fd fff6 	bl	80082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2200      	movs	r2, #0
 800a2de:	461c      	mov	r4, r3
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e6:	4294      	cmp	r4, r2
 800a2e8:	eb75 0303 	sbcs.w	r3, r5, r3
 800a2ec:	bfac      	ite	ge
 800a2ee:	2301      	movge	r3, #1
 800a2f0:	2300      	movlt	r3, #0
 800a2f2:	b2db      	uxtb	r3, r3
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bdb0      	pop	{r4, r5, r7, pc}

0800a2fc <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_>:
TOut convertNumber(TIn value) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ffb4 	bl	800a272 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_+0x18>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	e000      	b.n	800a316 <_ZN11ArduinoJson8V721HB226detail13convertNumberImmEET_T0_+0x1a>
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff ffb4 	bl	800a294 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_+0x18>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	e000      	b.n	800a338 <_ZN11ArduinoJson8V721HB226detail13convertNumberImlEET_T0_+0x1a>
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a34a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a34e:	f7fd ff6c 	bl	800822a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_+0x1c>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	e000      	b.n	800a35e <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_+0x1e>
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a370:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a374:	f7ff ffa4 	bl	800a2c0 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_+0x1c>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	e000      	b.n	800a384 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_+0x1e>
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZN11ArduinoJson8V721HB226detail11parseNumberImEET_PKc>:
inline T parseNumber(const char* s) {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fa f9de 	bl	800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f963 	bl	800a670 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v>
 800a3aa:	4603      	mov	r3, r0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a3be:	ed97 0a01 	vldr	s0, [r7, #4]
 800a3c2:	f000 f99d 	bl	800a700 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_+0x26>
 800a3cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800a3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d4:	ee17 3a90 	vmov	r3, s15
 800a3d8:	e000      	b.n	800a3dc <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_+0x28>
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a3ee:	ed97 0b00 	vldr	d0, [r7]
 800a3f2:	f000 f9aa 	bl	800a74a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_+0x24>
 800a3fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a400:	f7f6 fbda 	bl	8000bb8 <__aeabi_d2uiz>
 800a404:	4603      	mov	r3, r0
 800a406:	e000      	b.n	800a40a <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_+0x26>
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 800a412:	b5b0      	push	{r4, r5, r7, lr}
 800a414:	b086      	sub	sp, #24
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	460b      	mov	r3, r1
 800a41c:	607a      	str	r2, [r7, #4]
 800a41e:	72fb      	strb	r3, [r7, #11]
  if (canConvertNumber<int32_t>(value)) {
 800a420:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 f9ba 	bl	800a79e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlaEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x2e>
    type_ = VariantType::Int32;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	220c      	movs	r2, #12
 800a434:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 800a436:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e02b      	b.n	800a498 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x86>
    auto extension = resources->allocExtension();
 800a440:	f107 0310 	add.w	r3, r7, #16
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	f7f9 fe65 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800a44c:	f107 0310 	add.w	r3, r7, #16
 800a450:	4618      	mov	r0, r3
 800a452:	f7fd fb6b 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800a456:	4603      	mov	r3, r0
 800a458:	f083 0301 	eor.w	r3, r3, #1
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x54>
      return false;
 800a462:	2300      	movs	r3, #0
 800a464:	e019      	b.n	800a49a <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIaEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x88>
    type_ = VariantType::Int64;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	221c      	movs	r2, #28
 800a46a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800a46c:	f107 0310 	add.w	r3, r7, #16
 800a470:	4618      	mov	r0, r3
 800a472:	f7fd fb6c 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	4618      	mov	r0, r3
 800a484:	f7fd fb6f 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800a488:	4602      	mov	r2, r0
 800a48a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a48e:	17d9      	asrs	r1, r3, #31
 800a490:	461c      	mov	r4, r3
 800a492:	460d      	mov	r5, r1
 800a494:	e9c2 4500 	strd	r4, r5, [r2]
  return true;
 800a498:	2301      	movs	r3, #1
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a2 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800a4a2:	b5b0      	push	{r4, r5, r7, lr}
 800a4a4:	b086      	sub	sp, #24
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
  if (canConvertNumber<uint32_t>(value)) {
 800a4ae:	68b8      	ldr	r0, [r7, #8]
 800a4b0:	f7ff fedf 	bl	800a272 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	220a      	movs	r2, #10
 800a4be:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	e02a      	b.n	800a51e <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    auto extension = resources->allocExtension();
 800a4c8:	f107 0310 	add.w	r3, r7, #16
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f9 fe21 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800a4d4:	f107 0310 	add.w	r3, r7, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fd fb27 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f083 0301 	eor.w	r3, r3, #1
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e018      	b.n	800a520 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	221a      	movs	r2, #26
 800a4f2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800a4f4:	f107 0310 	add.w	r3, r7, #16
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fd fb28 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800a4fe:	4603      	mov	r3, r0
 800a500:	461a      	mov	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800a506:	f107 0310 	add.w	r3, r7, #16
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fb2b 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800a510:	4603      	mov	r3, r0
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	2100      	movs	r1, #0
 800a516:	4614      	mov	r4, r2
 800a518:	460d      	mov	r5, r1
 800a51a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800a51e:	2301      	movs	r3, #1
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bdb0      	pop	{r4, r5, r7, pc}

0800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>:
  static constexpr T highest() {
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a52c:	f000 f805 	bl	800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800a530:	4603      	mov	r3, r0
 800a532:	43db      	mvns	r3, r3
 800a534:	b25b      	sxtb	r3, r3
  }
 800a536:	4618      	mov	r0, r3
 800a538:	bd80      	pop	{r7, pc}

0800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>:
  static constexpr T lowest() {
 800a53a:	b480      	push	{r7}
 800a53c:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a53e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  }
 800a542:	4618      	mov	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v>:
  T convertTo() const {
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d830      	bhi.n	800a5c0 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x74>
 800a55e:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x18>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a575 	.word	0x0800a575
 800a568:	0800a587 	.word	0x0800a587
 800a56c:	0800a599 	.word	0x0800a599
 800a570:	0800a5ab 	.word	0x0800a5ab
        return convertNumber<T>(value_.asFloat);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	edd3 7a02 	vldr	s15, [r3, #8]
 800a57a:	eeb0 0a67 	vmov.f32	s0, s15
 800a57e:	f7ff fe46 	bl	800a20e <_ZN11ArduinoJson8V721HB226detail13convertNumberIafEET_T0_>
 800a582:	4603      	mov	r3, r0
 800a584:	e01d      	b.n	800a5c2 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a58c:	4610      	mov	r0, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	f7ff fe15 	bl	800a1be <_ZN11ArduinoJson8V721HB226detail13convertNumberIaxEET_T0_>
 800a594:	4603      	mov	r3, r0
 800a596:	e014      	b.n	800a5c2 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f7ff fdf8 	bl	800a196 <_ZN11ArduinoJson8V721HB226detail13convertNumberIayEET_T0_>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	e00b      	b.n	800a5c2 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800a5b0:	eeb0 0a47 	vmov.f32	s0, s14
 800a5b4:	eef0 0a67 	vmov.f32	s1, s15
 800a5b8:	f7ff fe43 	bl	800a242 <_ZN11ArduinoJson8V721HB226detail13convertNumberIadEET_T0_>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	e000      	b.n	800a5c2 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIaEET_v+0x76>
        return T();
 800a5c0:	2300      	movs	r3, #0
  }
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop

0800a5cc <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800a5d6:	f7ff ffb0 	bl	800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5e4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a5e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f0:	db0f      	blt.n	800a612 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 800a5f2:	f7ff ff99 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	ee07 3a90 	vmov	s15, r3
 800a5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800a600:	ed97 7a01 	vldr	s14, [r7, #4]
 800a604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60c:	d801      	bhi.n	800a612 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIafEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800a626:	f7ff ff88 	bl	800a53a <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE6lowestEv>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7f5 ff81 	bl	8000534 <__aeabi_i2d>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a63a:	f7f6 fa6b 	bl	8000b14 <__aeabi_dcmpge>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 800a644:	f7ff ff70 	bl	800a528 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIavE7highestEv>
 800a648:	4603      	mov	r3, r0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f5 ff72 	bl	8000534 <__aeabi_i2d>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 800a654:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a658:	f7f6 fa52 	bl	8000b00 <__aeabi_dcmple>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 800a662:	2301      	movs	r3, #1
 800a664:	e000      	b.n	800a668 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIadEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d830      	bhi.n	800a6e4 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x74>
 800a682:	a201      	add	r2, pc, #4	@ (adr r2, 800a688 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x18>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a699 	.word	0x0800a699
 800a68c:	0800a6ab 	.word	0x0800a6ab
 800a690:	0800a6bd 	.word	0x0800a6bd
 800a694:	0800a6cf 	.word	0x0800a6cf
        return convertNumber<T>(value_.asFloat);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a69e:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a2:	f7ff fe87 	bl	800a3b4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImfEET_T0_>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	e01d      	b.n	800a6e6 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f7ff fe57 	bl	800a366 <_ZN11ArduinoJson8V721HB226detail13convertNumberImxEET_T0_>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	e014      	b.n	800a6e6 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f7ff fe3b 	bl	800a340 <_ZN11ArduinoJson8V721HB226detail13convertNumberImyEET_T0_>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	e00b      	b.n	800a6e6 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6d4:	eeb0 0a47 	vmov.f32	s0, s14
 800a6d8:	eef0 0a67 	vmov.f32	s1, s15
 800a6dc:	f7ff fe82 	bl	800a3e4 <_ZN11ArduinoJson8V721HB226detail13convertNumberImdEET_T0_>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	e000      	b.n	800a6e6 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToImEET_v+0x76>
        return T();
 800a6e4:	2300      	movs	r3, #0
  }
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop

0800a6f0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>:
  static constexpr T lowest() {
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
    return 0;
 800a6f4:	2300      	movs	r3, #0
  }
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800a70a:	f7ff fff1 	bl	800a6f0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>
 800a70e:	ee07 0a90 	vmov	s15, r0
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a716:	ed97 7a01 	vldr	s14, [r7, #4]
 800a71a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	db0d      	blt.n	800a740 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800a724:	2000      	movs	r0, #0
 800a726:	f000 f847 	bl	800a7b8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 800a72a:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800a72e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73a:	d801      	bhi.n	800a740 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e000      	b.n	800a742 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800a754:	f7ff ffcc 	bl	800a6f0 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE6lowestEv>
 800a758:	4603      	mov	r3, r0
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f5 feda 	bl	8000514 <__aeabi_ui2d>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a768:	f7f6 f9d4 	bl	8000b14 <__aeabi_dcmpge>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d010      	beq.n	800a794 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 800a772:	f7fd fda8 	bl	80082c6 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsImvE7highestEv>
 800a776:	4603      	mov	r3, r0
 800a778:	4618      	mov	r0, r3
 800a77a:	f7f5 fecb 	bl	8000514 <__aeabi_ui2d>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 800a782:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a786:	f7f6 f9bb 	bl	8000b00 <__aeabi_dcmple>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIlaEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	71fb      	strb	r3, [r7, #7]
  return true;
 800a7a8:	2301      	movs	r3, #1
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 800a7c0:	4804      	ldr	r0, [pc, #16]	@ (800a7d4 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 800a7c2:	f7fd f9a5 	bl	8007b10 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800a7c6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a7ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	4f7fffff 	.word	0x4f7fffff

0800a7d8 <_ZN9UserModelC1Ev>:
 *      Author: Admin
 */

#include "Model/Process/UserModel.h"

UserModel::UserModel() :
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
		BaseModel() {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f7 fa1e 	bl	8001c24 <_ZN9BaseModelC1Ev>
 800a7e8:	4a05      	ldr	r2, [pc, #20]	@ (800a800 <_ZN9UserModelC1Ev+0x28>)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	601a      	str	r2, [r3, #0]
	this->reset();
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f940 	bl	800aa74 <_ZN9UserModel5resetEv>
}
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	08019f68 	.word	0x08019f68

0800a804 <_ZN9UserModel5setIdEPKc>:

void UserModel::setId(const char *id) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	this->data[ID] = id;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	1d19      	adds	r1, r3, #4
 800a812:	f107 0308 	add.w	r3, r7, #8
 800a816:	4a07      	ldr	r2, [pc, #28]	@ (800a834 <_ZN9UserModel5setIdEPKc+0x30>)
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fa fd22 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a81e:	f107 0308 	add.w	r3, r7, #8
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f7fa fd2b 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	08019cf4 	.word	0x08019cf4

0800a838 <_ZN9UserModel7setNameEPKc>:
void UserModel::setName(const char *name) {
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
	this->data[NAME] = name;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	1d19      	adds	r1, r3, #4
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4a07      	ldr	r2, [pc, #28]	@ (800a868 <_ZN9UserModel7setNameEPKc+0x30>)
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fa fd08 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a852:	f107 0308 	add.w	r3, r7, #8
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fa fd11 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08019cf8 	.word	0x08019cf8

0800a86c <_ZN9UserModel13setExamStatusEPKc>:
void UserModel::setExamStatus(const char *examStatus) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	this->data[EXAM_STATUS] = examStatus;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	4a07      	ldr	r2, [pc, #28]	@ (800a89c <_ZN9UserModel13setExamStatusEPKc+0x30>)
 800a880:	4618      	mov	r0, r3
 800a882:	f7fa fcee 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a886:	f107 0308 	add.w	r3, r7, #8
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fa fcf7 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a892:	bf00      	nop
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	08019d00 	.word	0x08019d00

0800a8a0 <_ZN9UserModel9setMobileEPKc>:
void UserModel::setMobile(const char *mobile) {
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	this->data[MOBILE] = mobile;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	1d19      	adds	r1, r3, #4
 800a8ae:	f107 0308 	add.w	r3, r7, #8
 800a8b2:	4a07      	ldr	r2, [pc, #28]	@ (800a8d0 <_ZN9UserModel9setMobileEPKc+0x30>)
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fa fcd4 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a8ba:	f107 0308 	add.w	r3, r7, #8
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fa fcdd 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08019d0c 	.word	0x08019d0c

0800a8d4 <_ZN9UserModel9setExamIdEPKc>:
void UserModel::setExamId(const char *examId) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	this->data[EXAM_ID] = examId;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	1d19      	adds	r1, r3, #4
 800a8e2:	f107 0308 	add.w	r3, r7, #8
 800a8e6:	4a07      	ldr	r2, [pc, #28]	@ (800a904 <_ZN9UserModel9setExamIdEPKc+0x30>)
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fa fcba 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa fcc3 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	08019d14 	.word	0x08019d14

0800a908 <_ZN9UserModel11setModeNameEPKc>:
void UserModel::setModeName(const char *modeName) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	this->data[MODE_NAME] = modeName;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	1d19      	adds	r1, r3, #4
 800a916:	f107 0308 	add.w	r3, r7, #8
 800a91a:	4a07      	ldr	r2, [pc, #28]	@ (800a938 <_ZN9UserModel11setModeNameEPKc+0x30>)
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fa fca0 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fa fca9 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	08019d1c 	.word	0x08019d1c

0800a93c <_ZN9UserModel7setRankEPKc>:
void UserModel::setRank(const char *rank) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	this->data[RANK] = rank;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	1d19      	adds	r1, r3, #4
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4a07      	ldr	r2, [pc, #28]	@ (800a96c <_ZN9UserModel7setRankEPKc+0x30>)
 800a950:	4618      	mov	r0, r3
 800a952:	f7fa fc86 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a956:	f107 0308 	add.w	r3, r7, #8
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fa fc8f 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08019d28 	.word	0x08019d28

0800a970 <_ZN9UserModel14setDateOfBirthEPKc>:
void UserModel::setDateOfBirth(const char *dateOfBirth) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	this->data[DATE_OF_BIRTH] = dateOfBirth;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	1d19      	adds	r1, r3, #4
 800a97e:	f107 0308 	add.w	r3, r7, #8
 800a982:	4a07      	ldr	r2, [pc, #28]	@ (800a9a0 <_ZN9UserModel14setDateOfBirthEPKc+0x30>)
 800a984:	4618      	mov	r0, r3
 800a986:	f7fa fc6c 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f7fa fc75 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a996:	bf00      	nop
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08019d30 	.word	0x08019d30

0800a9a4 <_ZN9UserModel16setPlaceOfOriginEPKc>:
void UserModel::setPlaceOfOrigin(const char *placeOfOrigin) {
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	this->data[PLACE_OF_ORIGIN] = placeOfOrigin;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	1d19      	adds	r1, r3, #4
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	4a07      	ldr	r2, [pc, #28]	@ (800a9d4 <_ZN9UserModel16setPlaceOfOriginEPKc+0x30>)
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fa fc52 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fa fc5b 	bl	8005280 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIS5_EERS7_PT_>
}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	08019d3c 	.word	0x08019d3c

0800a9d8 <_ZN9UserModel6setSexEa>:
void UserModel::setSex(int8_t sex) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
	this->data[SEX] = sex;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	1d19      	adds	r1, r3, #4
 800a9e8:	f107 0308 	add.w	r3, r7, #8
 800a9ec:	4a07      	ldr	r2, [pc, #28]	@ (800aa0c <_ZN9UserModel6setSexEa+0x34>)
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fa fc37 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800a9f4:	1cfa      	adds	r2, r7, #3
 800a9f6:	f107 0308 	add.w	r3, r7, #8
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe feb7 	bl	8009770 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIaEERS7_RKT_>
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	08019d4c 	.word	0x08019d4c

0800aa10 <_ZN9UserModel5clearEv>:
	return this->getOrDefault<const char*>(DATE_OF_BIRTH, "");
}
int8_t UserModel::getSex() const {
	return this->getOrDefault<int8_t>(NAME, 0);
}
void UserModel::clear() {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
	this->setId("");
 800aa18:	4915      	ldr	r1, [pc, #84]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fef2 	bl	800a804 <_ZN9UserModel5setIdEPKc>
	this->setName("");
 800aa20:	4913      	ldr	r1, [pc, #76]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff ff08 	bl	800a838 <_ZN9UserModel7setNameEPKc>
	this->setExamId("");
 800aa28:	4911      	ldr	r1, [pc, #68]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff ff52 	bl	800a8d4 <_ZN9UserModel9setExamIdEPKc>
	this->setExamStatus("");
 800aa30:	490f      	ldr	r1, [pc, #60]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff ff1a 	bl	800a86c <_ZN9UserModel13setExamStatusEPKc>
	this->setModeName("");
 800aa38:	490d      	ldr	r1, [pc, #52]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ff64 	bl	800a908 <_ZN9UserModel11setModeNameEPKc>
	this->setRank("");
 800aa40:	490b      	ldr	r1, [pc, #44]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff ff7a 	bl	800a93c <_ZN9UserModel7setRankEPKc>
	this->setMobile("");
 800aa48:	4909      	ldr	r1, [pc, #36]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff ff28 	bl	800a8a0 <_ZN9UserModel9setMobileEPKc>
	this->setPlaceOfOrigin("");
 800aa50:	4907      	ldr	r1, [pc, #28]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff ffa6 	bl	800a9a4 <_ZN9UserModel16setPlaceOfOriginEPKc>
	this->setDateOfBirth("");
 800aa58:	4905      	ldr	r1, [pc, #20]	@ (800aa70 <_ZN9UserModel5clearEv+0x60>)
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff ff88 	bl	800a970 <_ZN9UserModel14setDateOfBirthEPKc>
	this->setSex(0);
 800aa60:	2100      	movs	r1, #0
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff ffb8 	bl	800a9d8 <_ZN9UserModel6setSexEa>
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	08019d50 	.word	0x08019d50

0800aa74 <_ZN9UserModel5resetEv>:
void UserModel::reset() {
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	this->setId("0");
 800aa7c:	4915      	ldr	r1, [pc, #84]	@ (800aad4 <_ZN9UserModel5resetEv+0x60>)
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff fec0 	bl	800a804 <_ZN9UserModel5setIdEPKc>
	this->setName("");
 800aa84:	4914      	ldr	r1, [pc, #80]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fed6 	bl	800a838 <_ZN9UserModel7setNameEPKc>
	this->setExamId("0");
 800aa8c:	4911      	ldr	r1, [pc, #68]	@ (800aad4 <_ZN9UserModel5resetEv+0x60>)
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff ff20 	bl	800a8d4 <_ZN9UserModel9setExamIdEPKc>
	this->setExamStatus("");
 800aa94:	4910      	ldr	r1, [pc, #64]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff fee8 	bl	800a86c <_ZN9UserModel13setExamStatusEPKc>
	this->setModeName("");
 800aa9c:	490e      	ldr	r1, [pc, #56]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff ff32 	bl	800a908 <_ZN9UserModel11setModeNameEPKc>
	this->setRank("");
 800aaa4:	490c      	ldr	r1, [pc, #48]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff ff48 	bl	800a93c <_ZN9UserModel7setRankEPKc>
	this->setMobile("");
 800aaac:	490a      	ldr	r1, [pc, #40]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff fef6 	bl	800a8a0 <_ZN9UserModel9setMobileEPKc>
	this->setPlaceOfOrigin("");
 800aab4:	4908      	ldr	r1, [pc, #32]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff ff74 	bl	800a9a4 <_ZN9UserModel16setPlaceOfOriginEPKc>
	this->setDateOfBirth("");
 800aabc:	4906      	ldr	r1, [pc, #24]	@ (800aad8 <_ZN9UserModel5resetEv+0x64>)
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff ff56 	bl	800a970 <_ZN9UserModel14setDateOfBirthEPKc>
	this->setSex(0);
 800aac4:	2100      	movs	r1, #0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff ff86 	bl	800a9d8 <_ZN9UserModel6setSexEa>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	08019d54 	.word	0x08019d54
 800aad8:	08019d50 	.word	0x08019d50

0800aadc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE>:

void UserModel::updateModel(const JsonDocument *json) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b0a2      	sub	sp, #136	@ 0x88
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	if (json == nullptr) {
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80eb 	beq.w	800acc4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1e8>
		return;
	}
	const JsonDocument &jsonData = *json;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	this->setId(UserModel::getFormJsonVariant<const char*>(jsonData[ID], ""));
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	4a74      	ldr	r2, [pc, #464]	@ (800accc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f0>)
 800aafa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fa fbcc 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800ab04:	4b72      	ldr	r3, [pc, #456]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	f107 0214 	add.w	r2, r7, #20
 800ab0c:	f107 030c 	add.w	r3, r7, #12
 800ab10:	4611      	mov	r1, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fa fbde 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff fe71 	bl	800a804 <_ZN9UserModel5setIdEPKc>
	this->setName(
			UserModel::getFormJsonVariant<const char*>(jsonData[NAME], ""));
 800ab22:	f107 0318 	add.w	r3, r7, #24
 800ab26:	4a6b      	ldr	r2, [pc, #428]	@ (800acd4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f8>)
 800ab28:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fa fbb5 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800ab32:	4b67      	ldr	r3, [pc, #412]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ab34:	623b      	str	r3, [r7, #32]
	this->setName(
 800ab36:	f107 0220 	add.w	r2, r7, #32
 800ab3a:	f107 0318 	add.w	r3, r7, #24
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fa fbc7 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe74 	bl	800a838 <_ZN9UserModel7setNameEPKc>
	this->setExamId(
			UserModel::getFormJsonVariant<const char*>(jsonData[EXAM_ID], ""));
 800ab50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab54:	4a60      	ldr	r2, [pc, #384]	@ (800acd8 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1fc>)
 800ab56:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fa fb9e 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800ab60:	4b5b      	ldr	r3, [pc, #364]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ab62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	this->setExamId(
 800ab64:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ab68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fa fbb0 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ab74:	4603      	mov	r3, r0
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff feab 	bl	800a8d4 <_ZN9UserModel9setExamIdEPKc>
	this->setExamStatus(
			UserModel::getFormJsonVariant<const char*>(jsonData[EXAM_STATUS],
 800ab7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ab82:	4a56      	ldr	r2, [pc, #344]	@ (800acdc <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x200>)
 800ab84:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fa fb87 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 800ab8e:	4b50      	ldr	r3, [pc, #320]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ab90:	63bb      	str	r3, [r7, #56]	@ 0x38
	this->setExamStatus(
 800ab92:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ab96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fa fb99 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff fe60 	bl	800a86c <_ZN9UserModel13setExamStatusEPKc>
	this->setModeName(
			UserModel::getFormJsonVariant<const char*>(jsonData[MODE_NAME],
 800abac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800abb0:	4a4b      	ldr	r2, [pc, #300]	@ (800ace0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x204>)
 800abb2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fa fb70 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 800abbc:	4b44      	ldr	r3, [pc, #272]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800abbe:	647b      	str	r3, [r7, #68]	@ 0x44
	this->setModeName(
 800abc0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800abc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fa fb82 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800abd0:	4603      	mov	r3, r0
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff fe97 	bl	800a908 <_ZN9UserModel11setModeNameEPKc>
	this->setRank(
			UserModel::getFormJsonVariant<const char*>(jsonData[RANK], ""));
 800abda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800abde:	4a41      	ldr	r2, [pc, #260]	@ (800ace4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x208>)
 800abe0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fa fb59 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800abea:	4b39      	ldr	r3, [pc, #228]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800abec:	653b      	str	r3, [r7, #80]	@ 0x50
	this->setRank(
 800abee:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800abf2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fa fb6b 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800abfe:	4603      	mov	r3, r0
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff fe9a 	bl	800a93c <_ZN9UserModel7setRankEPKc>
	this->setMobile(
			UserModel::getFormJsonVariant<const char*>(jsonData[MOBILE], ""));
 800ac08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ac0c:	4a36      	ldr	r2, [pc, #216]	@ (800ace8 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x20c>)
 800ac0e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fa fb42 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800ac18:	4b2d      	ldr	r3, [pc, #180]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ac1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	this->setMobile(
 800ac1c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800ac20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fa fb54 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fe35 	bl	800a8a0 <_ZN9UserModel9setMobileEPKc>
	this->setPlaceOfOrigin(
			UserModel::getFormJsonVariant<const char*>(
					jsonData[PLACE_OF_ORIGIN], ""));
 800ac36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac3a:	4a2c      	ldr	r2, [pc, #176]	@ (800acec <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x210>)
 800ac3c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fa fb2b 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800ac46:	4b22      	ldr	r3, [pc, #136]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ac48:	66bb      	str	r3, [r7, #104]	@ 0x68
	this->setPlaceOfOrigin(
 800ac4a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800ac4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac52:	4611      	mov	r1, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fa fb3d 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fea0 	bl	800a9a4 <_ZN9UserModel16setPlaceOfOriginEPKc>
	this->setDateOfBirth(
			UserModel::getFormJsonVariant<const char*>(jsonData[DATE_OF_BIRTH],
 800ac64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ac68:	4a21      	ldr	r2, [pc, #132]	@ (800acf0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x214>)
 800ac6a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fa fb14 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
					""));
 800ac74:	4b16      	ldr	r3, [pc, #88]	@ (800acd0 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1f4>)
 800ac76:	677b      	str	r3, [r7, #116]	@ 0x74
	this->setDateOfBirth(
 800ac78:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800ac7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ac80:	4611      	mov	r1, r2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fa fb26 	bl	80052d4 <_ZN9BaseModel18getFormJsonVariantIPKcEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS3_>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fe6f 	bl	800a970 <_ZN9UserModel14setDateOfBirthEPKc>
	this->setSex(UserModel::getFormJsonVariant<int8_t>(jsonData[SEX], 0));
 800ac92:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800ac96:	4a17      	ldr	r2, [pc, #92]	@ (800acf4 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x218>)
 800ac98:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fa fafd 	bl	800529c <_ZNK11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS0_16JsonVariantConstEE4typeES8_>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800aca8:	f107 0283 	add.w	r2, r7, #131	@ 0x83
 800acac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fdac 	bl	8009810 <_ZN9BaseModel18getFormJsonVariantIaEET_RKN11ArduinoJson8V721HB2216JsonVariantConstERKS1_>
 800acb8:	4603      	mov	r3, r0
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff fe8b 	bl	800a9d8 <_ZN9UserModel6setSexEa>
 800acc2:	e000      	b.n	800acc6 <_ZN9UserModel11updateModelEPKN11ArduinoJson8V721HB2212JsonDocumentE+0x1ea>
		return;
 800acc4:	bf00      	nop

}
 800acc6:	3788      	adds	r7, #136	@ 0x88
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	08019cf4 	.word	0x08019cf4
 800acd0:	08019d50 	.word	0x08019d50
 800acd4:	08019cf8 	.word	0x08019cf8
 800acd8:	08019d14 	.word	0x08019d14
 800acdc:	08019d00 	.word	0x08019d00
 800ace0:	08019d1c 	.word	0x08019d1c
 800ace4:	08019d28 	.word	0x08019d28
 800ace8:	08019d0c 	.word	0x08019d0c
 800acec:	08019d3c 	.word	0x08019d3c
 800acf0:	08019d30 	.word	0x08019d30
 800acf4:	08019d4c 	.word	0x08019d4c

0800acf8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>:
 *      Author: Admin
 */

#include "MyRTOSTask.h"

MyRTOSTask::MyRTOSTask(const char *name, void (*runFunction)(void*),
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
		void *params, uint16_t size, UBaseType_t priority) :
		taskName(name), runFunction(runFunction), params(params), stackSize(
				size), priority(priority) {
 800ad06:	4a0f      	ldr	r2, [pc, #60]	@ (800ad44 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm+0x4c>)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	601a      	str	r2, [r3, #0]
		taskName(name), runFunction(runFunction), params(params), stackSize(
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	609a      	str	r2, [r3, #8]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	60da      	str	r2, [r3, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	611a      	str	r2, [r3, #16]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8b3a      	ldrh	r2, [r7, #24]
 800ad22:	829a      	strh	r2, [r3, #20]
				size), priority(priority) {
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	619a      	str	r2, [r3, #24]
	this->taskHandle = nullptr;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	605a      	str	r2, [r3, #4]
	this->stopTask = false;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	771a      	strb	r2, [r3, #28]
}
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	08019f84 	.word	0x08019f84

0800ad48 <_ZN10MyRTOSTaskD1Ev>:
MyRTOSTask::~MyRTOSTask() {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	4a0b      	ldr	r2, [pc, #44]	@ (800ad80 <_ZN10MyRTOSTaskD1Ev+0x38>)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
	if (taskHandle != nullptr) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <_ZN10MyRTOSTaskD1Ev+0x26>
		vTaskDelete(taskHandle);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f009 fc02 	bl	801456c <vTaskDelete>
		taskHandle = nullptr;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]
	}
	runFunction = nullptr;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	60da      	str	r2, [r3, #12]
}
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	08019f84 	.word	0x08019f84

0800ad84 <_ZN10MyRTOSTaskD0Ev>:
MyRTOSTask::~MyRTOSTask() {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
}
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff ffdb 	bl	800ad48 <_ZN10MyRTOSTaskD1Ev>
 800ad92:	2120      	movs	r1, #32
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f00b ff87 	bl	8016ca8 <_ZdlPvj>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <_ZN10MyRTOSTask5delayEm>:

void MyRTOSTask::delay(TickType_t timeMs) {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
	vTaskDelay(pdMS_TO_TICKS(timeMs));
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
 800adb8:	4a05      	ldr	r2, [pc, #20]	@ (800add0 <_ZN10MyRTOSTask5delayEm+0x2c>)
 800adba:	fba2 2303 	umull	r2, r3, r2, r3
 800adbe:	099b      	lsrs	r3, r3, #6
 800adc0:	4618      	mov	r0, r3
 800adc2:	f009 fc47 	bl	8014654 <vTaskDelay>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	10624dd3 	.word	0x10624dd3

0800add4 <_ZN10MyRTOSTask3runEv>:

void MyRTOSTask::run() {
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <_ZN10MyRTOSTask3runEv+0x1c>
		this->runFunction(this->params);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6912      	ldr	r2, [r2, #16]
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
	}
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <_ZN10MyRTOSTask12taskFunctionEPv>:

bool MyRTOSTask::isRunning() {
	return taskHandle != nullptr;
}

void MyRTOSTask::taskFunction(void *params) {
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	MyRTOSTask *task = static_cast<MyRTOSTask*>(params);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60fb      	str	r3, [r7, #12]
	task->run();
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	4798      	blx	r3
	vTaskDelete(NULL);
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f009 fbac 	bl	801456c <vTaskDelete>
}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <_ZN10MyRTOSTask5startEv>:

bool MyRTOSTask::start() {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	6078      	str	r0, [r7, #4]
	stopTask = false;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	771a      	strb	r2, [r3, #28]
	BaseType_t result = xTaskCreate(taskFunction, taskName, stackSize, this,
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6899      	ldr	r1, [r3, #8]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	8a98      	ldrh	r0, [r3, #20]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	3204      	adds	r2, #4
 800ae3a:	9201      	str	r2, [sp, #4]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4602      	mov	r2, r0
 800ae42:	4807      	ldr	r0, [pc, #28]	@ (800ae60 <_ZN10MyRTOSTask5startEv+0x44>)
 800ae44:	f009 fa34 	bl	80142b0 <xTaskCreate>
 800ae48:	60f8      	str	r0, [r7, #12]
			priority, &taskHandle);
	return result == pdPASS;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	bf0c      	ite	eq
 800ae50:	2301      	moveq	r3, #1
 800ae52:	2300      	movne	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	0800adf9 	.word	0x0800adf9

0800ae64 <_ZN10MyRTOSTask4stopEv>:

void MyRTOSTask::stop() {
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	stopTask = true;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	771a      	strb	r2, [r3, #28]
	if (taskHandle != nullptr) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <_ZN10MyRTOSTask4stopEv+0x26>
		vTaskDelete(taskHandle);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f009 fb74 	bl	801456c <vTaskDelete>
		taskHandle = nullptr;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	605a      	str	r2, [r3, #4]
	}
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <_ZN11ArduinoJson8V721HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 800ae92:	b480      	push	{r7}
 800ae94:	b083      	sub	sp, #12
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  }
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE>:
  void clear(Allocator* allocator) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800aeb2:	e00a      	b.n	800aeca <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7f7 ff18 	bl	8002cfa <_ZN11ArduinoJson8V721HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1f0      	bne.n	800aeb4 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
  }
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN11ArduinoJson8V721HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f103 0208 	add.w	r2, r3, #8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7ff ffd9 	bl	800aea8 <_ZN11ArduinoJson8V721HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f103 020c 	add.w	r2, r3, #12
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f000 fa37 	bl	800b376 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	330c      	adds	r3, #12
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 fa27 	bl	800b360 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3308      	adds	r3, #8
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff ffbb 	bl	800ae92 <_ZN11ArduinoJson8V721HB226detail10StringPoolD1Ev>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <_ZN11ArduinoJson8V721HB2212JsonDocumentD1Ev>:
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff ffd3 	bl	800aedc <_ZN11ArduinoJson8V721HB226detail15ResourceManagerD1Ev>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800af44:	f001 fe90 	bl	800cc68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800af48:	f000 f820 	bl	800af8c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800af4c:	f000 f894 	bl	800b078 <_ZL12MX_GPIO_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800af50:	f008 f84e 	bl	8012ff0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800af54:	4a0a      	ldr	r2, [pc, #40]	@ (800af80 <main+0x40>)
 800af56:	2100      	movs	r1, #0
 800af58:	480a      	ldr	r0, [pc, #40]	@ (800af84 <main+0x44>)
 800af5a:	f008 f893 	bl	8013084 <osThreadNew>
 800af5e:	4603      	mov	r3, r0
 800af60:	4a09      	ldr	r2, [pc, #36]	@ (800af88 <main+0x48>)
 800af62:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
	SensorReader::getInstance().start();
 800af64:	f001 fcb2 	bl	800c8cc <_ZN12SensorReader11getInstanceEv>
 800af68:	4603      	mov	r3, r0
 800af6a:	461a      	mov	r2, r3
 800af6c:	6813      	ldr	r3, [r2, #0]
 800af6e:	330c      	adds	r3, #12
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800af76:	f008 f85f 	bl	8013038 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800af7a:	bf00      	nop
 800af7c:	e7fd      	b.n	800af7a <main+0x3a>
 800af7e:	bf00      	nop
 800af80:	08019f98 	.word	0x08019f98
 800af84:	0800b1bd 	.word	0x0800b1bd
 800af88:	200002f0 	.word	0x200002f0

0800af8c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b094      	sub	sp, #80	@ 0x50
 800af90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800af92:	f107 0320 	add.w	r3, r7, #32
 800af96:	2230      	movs	r2, #48	@ 0x30
 800af98:	2100      	movs	r1, #0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f00c fe25 	bl	8017bea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800afa0:	f107 030c 	add.w	r3, r7, #12
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	605a      	str	r2, [r3, #4]
 800afaa:	609a      	str	r2, [r3, #8]
 800afac:	60da      	str	r2, [r3, #12]
 800afae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800afb0:	2300      	movs	r3, #0
 800afb2:	60bb      	str	r3, [r7, #8]
 800afb4:	4b2e      	ldr	r3, [pc, #184]	@ (800b070 <_Z18SystemClock_Configv+0xe4>)
 800afb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb8:	4a2d      	ldr	r2, [pc, #180]	@ (800b070 <_Z18SystemClock_Configv+0xe4>)
 800afba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afbe:	6413      	str	r3, [r2, #64]	@ 0x40
 800afc0:	4b2b      	ldr	r3, [pc, #172]	@ (800b070 <_Z18SystemClock_Configv+0xe4>)
 800afc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afc8:	60bb      	str	r3, [r7, #8]
 800afca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800afcc:	2300      	movs	r3, #0
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	4b28      	ldr	r3, [pc, #160]	@ (800b074 <_Z18SystemClock_Configv+0xe8>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800afd8:	4a26      	ldr	r2, [pc, #152]	@ (800b074 <_Z18SystemClock_Configv+0xe8>)
 800afda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	4b24      	ldr	r3, [pc, #144]	@ (800b074 <_Z18SystemClock_Configv+0xe8>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800afec:	2301      	movs	r3, #1
 800afee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800aff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aff4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aff6:	2302      	movs	r3, #2
 800aff8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800affa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800b000:	2319      	movs	r3, #25
 800b002:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800b004:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800b008:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b00a:	2304      	movs	r3, #4
 800b00c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800b00e:	2307      	movs	r3, #7
 800b010:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800b012:	f107 0320 	add.w	r3, r7, #32
 800b016:	4618      	mov	r0, r3
 800b018:	f003 fba8 	bl	800e76c <HAL_RCC_OscConfig>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bf14      	ite	ne
 800b022:	2301      	movne	r3, #1
 800b024:	2300      	moveq	r3, #0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 800b02c:	f000 f992 	bl	800b354 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800b030:	230f      	movs	r3, #15
 800b032:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b034:	2302      	movs	r3, #2
 800b036:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b03c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b040:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b042:	2300      	movs	r3, #0
 800b044:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800b046:	f107 030c 	add.w	r3, r7, #12
 800b04a:	2102      	movs	r1, #2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f003 fe05 	bl	800ec5c <HAL_RCC_ClockConfig>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	bf14      	ite	ne
 800b058:	2301      	movne	r3, #1
 800b05a:	2300      	moveq	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 800b062:	f000 f977 	bl	800b354 <Error_Handler>
	}
}
 800b066:	bf00      	nop
 800b068:	3750      	adds	r7, #80	@ 0x50
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	40023800 	.word	0x40023800
 800b074:	40007000 	.word	0x40007000

0800b078 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08a      	sub	sp, #40	@ 0x28
 800b07c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b07e:	f107 0314 	add.w	r3, r7, #20
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	605a      	str	r2, [r3, #4]
 800b088:	609a      	str	r2, [r3, #8]
 800b08a:	60da      	str	r2, [r3, #12]
 800b08c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800b08e:	2300      	movs	r3, #0
 800b090:	613b      	str	r3, [r7, #16]
 800b092:	4b46      	ldr	r3, [pc, #280]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b096:	4a45      	ldr	r2, [pc, #276]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b098:	f043 0304 	orr.w	r3, r3, #4
 800b09c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b09e:	4b43      	ldr	r3, [pc, #268]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	613b      	str	r3, [r7, #16]
 800b0a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b2:	4a3e      	ldr	r2, [pc, #248]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0ba:	4b3c      	ldr	r3, [pc, #240]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60bb      	str	r3, [r7, #8]
 800b0ca:	4b38      	ldr	r3, [pc, #224]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ce:	4a37      	ldr	r2, [pc, #220]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0d0:	f043 0301 	orr.w	r3, r3, #1
 800b0d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0d6:	4b35      	ldr	r3, [pc, #212]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	60bb      	str	r3, [r7, #8]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	607b      	str	r3, [r7, #4]
 800b0e6:	4b31      	ldr	r3, [pc, #196]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ea:	4a30      	ldr	r2, [pc, #192]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0ec:	f043 0302 	orr.w	r3, r3, #2
 800b0f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0f2:	4b2e      	ldr	r3, [pc, #184]	@ (800b1ac <_ZL12MX_GPIO_Initv+0x134>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	607b      	str	r3, [r7, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b0fe:	2200      	movs	r2, #0
 800b100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b104:	482a      	ldr	r0, [pc, #168]	@ (800b1b0 <_ZL12MX_GPIO_Initv+0x138>)
 800b106:	f002 f893 	bl	800d230 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b10a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b10e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b110:	2301      	movs	r3, #1
 800b112:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b114:	2300      	movs	r3, #0
 800b116:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b118:	2300      	movs	r3, #0
 800b11a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	4619      	mov	r1, r3
 800b122:	4823      	ldr	r0, [pc, #140]	@ (800b1b0 <_ZL12MX_GPIO_Initv+0x138>)
 800b124:	f001 fee8 	bl	800cef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 800b128:	23fe      	movs	r3, #254	@ 0xfe
 800b12a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b130:	2302      	movs	r3, #2
 800b132:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	4619      	mov	r1, r3
 800b13a:	481e      	ldr	r0, [pc, #120]	@ (800b1b4 <_ZL12MX_GPIO_Initv+0x13c>)
 800b13c:	f001 fedc 	bl	800cef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 800b140:	2307      	movs	r3, #7
 800b142:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b144:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800b148:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b14a:	2301      	movs	r3, #1
 800b14c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b14e:	f107 0314 	add.w	r3, r7, #20
 800b152:	4619      	mov	r1, r3
 800b154:	4818      	ldr	r0, [pc, #96]	@ (800b1b8 <_ZL12MX_GPIO_Initv+0x140>)
 800b156:	f001 fecf 	bl	800cef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800b15a:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 800b15e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b160:	2300      	movs	r3, #0
 800b162:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b164:	2302      	movs	r3, #2
 800b166:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b168:	f107 0314 	add.w	r3, r7, #20
 800b16c:	4619      	mov	r1, r3
 800b16e:	4812      	ldr	r0, [pc, #72]	@ (800b1b8 <_ZL12MX_GPIO_Initv+0x140>)
 800b170:	f001 fec2 	bl	800cef8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800b174:	2200      	movs	r2, #0
 800b176:	2105      	movs	r1, #5
 800b178:	2006      	movs	r0, #6
 800b17a:	f001 fe93 	bl	800cea4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b17e:	2006      	movs	r0, #6
 800b180:	f001 feac 	bl	800cedc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800b184:	2200      	movs	r2, #0
 800b186:	2105      	movs	r1, #5
 800b188:	2007      	movs	r0, #7
 800b18a:	f001 fe8b 	bl	800cea4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800b18e:	2007      	movs	r0, #7
 800b190:	f001 fea4 	bl	800cedc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800b194:	2200      	movs	r2, #0
 800b196:	2105      	movs	r1, #5
 800b198:	2008      	movs	r0, #8
 800b19a:	f001 fe83 	bl	800cea4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800b19e:	2008      	movs	r0, #8
 800b1a0:	f001 fe9c 	bl	800cedc <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800b1a4:	bf00      	nop
 800b1a6:	3728      	adds	r7, #40	@ 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40023800 	.word	0x40023800
 800b1b0:	40020800 	.word	0x40020800
 800b1b4:	40020000 	.word	0x40020000
 800b1b8:	40020400 	.word	0x40020400

0800b1bc <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800b1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	b0b5      	sub	sp, #212	@ 0xd4
 800b1c2:	af08      	add	r7, sp, #32
 800b1c4:	60f8      	str	r0, [r7, #12]
	/* init code for USB_DEVICE */
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800b1c6:	f00b f85f 	bl	8016288 <MX_USB_DEVICE_Init>
	uint8_t data[100];
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	SensorModel &sensorModel =
			*ModelManagement::getInstance().getSensorModel();
 800b1ca:	f7f6 f929 	bl	8001420 <_ZN15ModelManagement11getInstanceEv>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f6 f95b 	bl	800148c <_ZN15ModelManagement14getSensorModelEv>
 800b1d6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	EncodeModel &encodeModel = *sensorModel.getEncodeModel();
 800b1da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b1de:	f7f6 f9ae 	bl	800153e <_ZNK11SensorModel14getEncodeModelEv>
 800b1e2:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	TimeTicker timer(5000);
 800b1e6:	f107 0314 	add.w	r3, r7, #20
 800b1ea:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7f5 ffd8 	bl	80011a4 <_ZN10TimeTickerC1Em>
	doc["test"] = 0;
 800b1f4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800b1f8:	4a4a      	ldr	r2, [pc, #296]	@ (800b324 <_Z16StartDefaultTaskPv+0x168>)
 800b1fa:	494b      	ldr	r1, [pc, #300]	@ (800b328 <_Z16StartDefaultTaskPv+0x16c>)
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fa f830 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800b202:	2300      	movs	r3, #0
 800b204:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b208:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800b20c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800b210:	4611      	mov	r1, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f000 f8e7 	bl	800b3e6 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>
	for (;;) {
		doc["test"] = 1;
 800b218:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800b21c:	4a41      	ldr	r2, [pc, #260]	@ (800b324 <_Z16StartDefaultTaskPv+0x168>)
 800b21e:	4942      	ldr	r1, [pc, #264]	@ (800b328 <_Z16StartDefaultTaskPv+0x16c>)
 800b220:	4618      	mov	r0, r3
 800b222:	f7fa f81e 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800b226:	2301      	movs	r3, #1
 800b228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b22c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800b230:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800b234:	4611      	mov	r1, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f8d5 	bl	800b3e6 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>
		int t = doc["test"].as<int>();
 800b23c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b240:	4a38      	ldr	r2, [pc, #224]	@ (800b324 <_Z16StartDefaultTaskPv+0x168>)
 800b242:	4939      	ldr	r1, [pc, #228]	@ (800b328 <_Z16StartDefaultTaskPv+0x16c>)
 800b244:	4618      	mov	r0, r3
 800b246:	f7fa f80c 	bl	8005262 <_ZN11ArduinoJson8V721HB2212JsonDocumentixIKcEENS0_6detail9enable_ifIXsrNS4_8IsStringIPT_vEE5valueENS4_11MemberProxyIRS1_S8_EEE4typeES8_>
 800b24a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 f8d7 	bl	800b402 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2asIiEET_v>
 800b254:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		sprintf((char*) data,
				"%d, Speed: %.3f, Distance: %.3f, RPM: %d , NT: %d, NP: %d, CM: %d\n\r", t,
				encodeModel.getSpeed(), encodeModel.getDistance(),
 800b258:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b25c:	f7f6 f85e 	bl	800131c <_ZNK11EncodeModel8getSpeedEv>
 800b260:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data,
 800b264:	4618      	mov	r0, r3
 800b266:	f7f5 f977 	bl	8000558 <__aeabi_f2d>
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
				encodeModel.getSpeed(), encodeModel.getDistance(),
 800b26e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800b272:	f7f6 f844 	bl	80012fe <_ZNK11EncodeModel11getDistanceEv>
 800b276:	ee10 3a10 	vmov	r3, s0
		sprintf((char*) data,
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f5 f96c 	bl	8000558 <__aeabi_f2d>
 800b280:	4680      	mov	r8, r0
 800b282:	4689      	mov	r9, r1
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 800b284:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b288:	f7f6 f9d4 	bl	8001634 <_ZNK11SensorModel6getRpmEv>
 800b28c:	4603      	mov	r3, r0
		sprintf((char*) data,
 800b28e:	461e      	mov	r6, r3
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 800b290:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b294:	f7f6 f9a4 	bl	80015e0 <_ZNK11SensorModel4isNtEv>
 800b298:	4603      	mov	r3, r0
		sprintf((char*) data,
 800b29a:	60bb      	str	r3, [r7, #8]
				sensorModel.getRpm(), sensorModel.isNt(), sensorModel.isNp(),
 800b29c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b2a0:	f7f6 f983 	bl	80015aa <_ZNK11SensorModel4isNpEv>
 800b2a4:	4603      	mov	r3, r0
		sprintf((char*) data,
 800b2a6:	607b      	str	r3, [r7, #4]
				sensorModel.isCm());
 800b2a8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b2ac:	f7f6 f953 	bl	8001556 <_ZNK11SensorModel4isCmEv>
 800b2b0:	4603      	mov	r3, r0
		sprintf((char*) data,
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f107 0320 	add.w	r3, r7, #32
 800b2b8:	9207      	str	r2, [sp, #28]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	9206      	str	r2, [sp, #24]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	9205      	str	r2, [sp, #20]
 800b2c2:	9604      	str	r6, [sp, #16]
 800b2c4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b2c8:	e9cd 4500 	strd	r4, r5, [sp]
 800b2cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b2d0:	4916      	ldr	r1, [pc, #88]	@ (800b32c <_Z16StartDefaultTaskPv+0x170>)
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f00c fc0c 	bl	8017af0 <siprintf>
		CDC_Transmit_FS(data, strlen((char*) data));
 800b2d8:	f107 0320 	add.w	r3, r7, #32
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7f4 ffcf 	bl	8000280 <strlen>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	f107 0320 	add.w	r3, r7, #32
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f00b f889 	bl	8016404 <CDC_Transmit_FS>
		if (!timer.onTime()) {
 800b2f2:	f107 0314 	add.w	r3, r7, #20
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7f5 ffb8 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f083 0301 	eor.w	r3, r3, #1
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d008      	beq.n	800b31a <_Z16StartDefaultTaskPv+0x15e>
			timer.reset();
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f5 ff9d 	bl	800124c <_ZN10TimeTicker5resetEv>
//			sensorModel.setDistance(0);
			sensorModel.resetDistance();
 800b312:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800b316:	f7f6 f8f6 	bl	8001506 <_ZN11SensorModel13resetDistanceEv>
		}
		osDelay(100);
 800b31a:	2064      	movs	r0, #100	@ 0x64
 800b31c:	f007 ff44 	bl	80131a8 <osDelay>
	}
 800b320:	e77a      	b.n	800b218 <_Z16StartDefaultTaskPv+0x5c>
 800b322:	bf00      	nop
 800b324:	08019d64 	.word	0x08019d64
 800b328:	200002f4 	.word	0x200002f4
 800b32c:	08019d6c 	.word	0x08019d6c

0800b330 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a04      	ldr	r2, [pc, #16]	@ (800b350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d101      	bne.n	800b346 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800b342:	f001 fcb3 	bl	800ccac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	40010000 	.word	0x40010000

0800b354 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b358:	b672      	cpsid	i
}
 800b35a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800b35c:	bf00      	nop
 800b35e:	e7fd      	b.n	800b35c <Error_Handler+0x8>

0800b360 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  }
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4618      	mov	r0, r3
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
  void clear(Allocator* allocator) {
 800b376:	b580      	push	{r7, lr}
 800b378:	b084      	sub	sp, #16
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 800b380:	2300      	movs	r3, #0
 800b382:	81fb      	strh	r3, [r7, #14]
 800b384:	e00b      	b.n	800b39e <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1a      	ldr	r2, [r3, #32]
 800b38a:	89fb      	ldrh	r3, [r7, #14]
 800b38c:	00db      	lsls	r3, r3, #3
 800b38e:	4413      	add	r3, r2
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 f857 	bl	800b446 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 800b398:	89fb      	ldrh	r3, [r7, #14]
 800b39a:	3301      	adds	r3, #1
 800b39c:	81fb      	strh	r3, [r7, #14]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b3a2:	89fa      	ldrh	r2, [r7, #14]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d3ee      	bcc.n	800b386 <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1a      	ldr	r2, [r3, #32]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d00e      	beq.n	800b3de <_ZN11ArduinoJson8V721HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	6a12      	ldr	r2, [r2, #32]
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	6838      	ldr	r0, [r7, #0]
 800b3d0:	4798      	blx	r3
      pools_ = preallocatedPools_;
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2204      	movs	r2, #4
 800b3dc:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <_ZN11ArduinoJson8V721HB226detail11MemberProxyIRNS0_12JsonDocumentEPKcEaSIiEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	6039      	str	r1, [r7, #0]
    this->set(src);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f846 	bl	800b484 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIiEEbRKT_>
    return *this;
 800b3f8:	687b      	ldr	r3, [r7, #4]
  }
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2asIiEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800b402:	b590      	push	{r4, r7, lr}
 800b404:	b087      	sub	sp, #28
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b412:	6938      	ldr	r0, [r7, #16]
 800b414:	f7fd fd20 	bl	8008e58 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7getDataEv>
 800b418:	4604      	mov	r4, r0
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f7fa fc02 	bl	8005c24 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getResourceManagerEv>
 800b420:	4602      	mov	r2, r0
 800b422:	f107 0308 	add.w	r3, r7, #8
 800b426:	4621      	mov	r1, r4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f6 fa57 	bl	80018dc <_ZN11ArduinoJson8V721HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b42e:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800b430:	f107 0308 	add.w	r3, r7, #8
 800b434:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b438:	f000 f832 	bl	800b4a0 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800b43c:	4603      	mov	r3, r0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	bd90      	pop	{r4, r7, pc}

0800b446 <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
  void destroy(Allocator* allocator) {
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	6039      	str	r1, [r7, #0]
    if (slots_)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d008      	beq.n	800b46a <_ZN11ArduinoJson8V721HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3304      	adds	r3, #4
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6852      	ldr	r2, [r2, #4]
 800b464:	4611      	mov	r1, r2
 800b466:	6838      	ldr	r0, [r7, #0]
 800b468:	4798      	blx	r3
    slots_ = nullptr;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	805a      	strh	r2, [r3, #2]
  }
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE3setIiEEbRKT_>:
  bool set(const T& value) const {
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
    return doSet<Converter<remove_cv_t<T>>>(value);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f823 	bl	800b4dc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_>
 800b496:	4603      	mov	r3, r0
  }
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f6 fbf8 	bl	8001ca4 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800b4b4:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7f6 fbff 	bl	8001cbc <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800b4be:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f81b 	bl	800b504 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	e000      	b.n	800b4d4 <_ZN11ArduinoJson8V721HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800b4d2:	2300      	movs	r3, #0
  }
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_>:
  bool doSet(T&& value) const {
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f000 f8a0 	bl	800b62c <_ZN11ArduinoJson8V721HB226detail7forwardIRKiEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8a5 	bl	800b642 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_NS1_17integral_constantIbLb1EEE>
 800b4f8:	4603      	mov	r3, r0
  }
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd90      	pop	{r4, r7, pc}
	...

0800b504 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7f6 fb6b 	bl	8001bec <_ZNK11ArduinoJson8V721HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800b516:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	791b      	ldrb	r3, [r3, #4]
 800b51c:	3b04      	subs	r3, #4
 800b51e:	2b1a      	cmp	r3, #26
 800b520:	d87e      	bhi.n	800b620 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11c>
 800b522:	a201      	add	r2, pc, #4	@ (adr r2, 800b528 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b5db 	.word	0x0800b5db
 800b52c:	0800b5e9 	.word	0x0800b5e9
 800b530:	0800b595 	.word	0x0800b595
 800b534:	0800b621 	.word	0x0800b621
 800b538:	0800b621 	.word	0x0800b621
 800b53c:	0800b621 	.word	0x0800b621
 800b540:	0800b59b 	.word	0x0800b59b
 800b544:	0800b621 	.word	0x0800b621
 800b548:	0800b5a9 	.word	0x0800b5a9
 800b54c:	0800b621 	.word	0x0800b621
 800b550:	0800b5f9 	.word	0x0800b5f9
 800b554:	0800b621 	.word	0x0800b621
 800b558:	0800b621 	.word	0x0800b621
 800b55c:	0800b621 	.word	0x0800b621
 800b560:	0800b621 	.word	0x0800b621
 800b564:	0800b621 	.word	0x0800b621
 800b568:	0800b621 	.word	0x0800b621
 800b56c:	0800b621 	.word	0x0800b621
 800b570:	0800b621 	.word	0x0800b621
 800b574:	0800b621 	.word	0x0800b621
 800b578:	0800b621 	.word	0x0800b621
 800b57c:	0800b621 	.word	0x0800b621
 800b580:	0800b5b7 	.word	0x0800b5b7
 800b584:	0800b621 	.word	0x0800b621
 800b588:	0800b5c9 	.word	0x0800b5c9
 800b58c:	0800b621 	.word	0x0800b621
 800b590:	0800b60b 	.word	0x0800b60b
        return content_.asBoolean;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	e043      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asUint32);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f869 	bl	800b676 <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	e03c      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asInt32);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 f873 	bl	800b698 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	e035      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asUint64);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	f000 f87b 	bl	800b6ba <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	e02c      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asInt64);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f000 f885 	bl	800b6e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	e023      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asLinkedString);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f891 	bl	800b706 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	e01c      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return parseNumber<T>(content_.asOwnedString->data);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f889 	bl	800b706 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	e014      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(content_.asFloat);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	edd3 7a00 	vldr	s15, [r3]
 800b5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b602:	f000 f894 	bl	800b72e <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>
 800b606:	4603      	mov	r3, r0
 800b608:	e00b      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return convertNumber<T>(extension->asDouble);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	ed93 7b00 	vldr	d7, [r3]
 800b610:	eeb0 0a47 	vmov.f32	s0, s14
 800b614:	eef0 0a67 	vmov.f32	s1, s15
 800b618:	f000 f8a1 	bl	800b75e <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>
 800b61c:	4603      	mov	r3, r0
 800b61e:	e000      	b.n	800b622 <_ZNK11ArduinoJson8V721HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11e>
        return 0;
 800b620:	2300      	movs	r3, #0
  }
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop

0800b62c <_ZN11ArduinoJson8V721HB226detail7forwardIRKiEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800b634:	687b      	ldr	r3, [r7, #4]
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE5doSetINS0_9ConverterIivEERKiEEbOT0_NS1_17integral_constantIbLb1EEE>:
inline bool VariantRefBase<TDerived>::doSet(T&& value, true_type) const {
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b087      	sub	sp, #28
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	681c      	ldr	r4, [r3, #0]
 800b652:	f107 0310 	add.w	r3, r7, #16
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fb fbe9 	bl	8006e30 <_ZNK11ArduinoJson8V721HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE18getOrCreateVariantEv>
 800b65e:	f107 0310 	add.w	r3, r7, #16
 800b662:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b666:	4620      	mov	r0, r4
 800b668:	f000 f890 	bl	800b78c <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	bd90      	pop	{r4, r7, pc}

0800b676 <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f8a9 	bl	800b7d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_+0x18>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	e000      	b.n	800b690 <_ZN11ArduinoJson8V721HB226detail13convertNumberIimEET_T0_+0x1a>
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f8aa 	bl	800b7fa <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_+0x18>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	e000      	b.n	800b6b2 <_ZN11ArduinoJson8V721HB226detail13convertNumberIilEET_T0_+0x1a>
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b082      	sub	sp, #8
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b6c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6c8:	f000 f8a2 	bl	800b810 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_+0x1c>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	e000      	b.n	800b6d8 <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_+0x1e>
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b6ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6ee:	f000 f8a7 	bl	800b840 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_+0x1c>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	e000      	b.n	800b6fe <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_+0x1e>
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZN11ArduinoJson8V721HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800b706:	b580      	push	{r7, lr}
 800b708:	b086      	sub	sp, #24
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	4618      	mov	r0, r3
 800b716:	f7f9 f821 	bl	800475c <_ZN11ArduinoJson8V721HB226detail11parseNumberEPKc>
 800b71a:	f107 0308 	add.w	r3, r7, #8
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 f8b4 	bl	800b88c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v>
 800b724:	4603      	mov	r3, r0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b738:	ed97 0a01 	vldr	s0, [r7, #4]
 800b73c:	f000 f8ef 	bl	800b91e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d006      	beq.n	800b754 <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_+0x26>
 800b746:	edd7 7a01 	vldr	s15, [r7, #4]
 800b74a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b74e:	ee17 3a90 	vmov	r3, s15
 800b752:	e000      	b.n	800b756 <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_+0x28>
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800b768:	ed97 0b00 	vldr	d0, [r7]
 800b76c:	f000 f904 	bl	800b978 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_+0x24>
 800b776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b77a:	f7f5 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800b77e:	4603      	mov	r3, r0
 800b780:	e000      	b.n	800b784 <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_+0x26>
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	1d3b      	adds	r3, r7, #4
 800b796:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800b79a:	1d3b      	adds	r3, r7, #4
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f9 fa1b 	bl	8004bd8 <_ZN11ArduinoJson8V721HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800b7a2:	6178      	str	r0, [r7, #20]
    if (!data)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE+0x22>
      return false;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e00f      	b.n	800b7ce <_ZN11ArduinoJson8V721HB229ConverterIivE6toJsonEiNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800b7ae:	1d3b      	adds	r3, r7, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f9 fbbb 	bl	8004f2c <_ZN11ArduinoJson8V721HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800b7b6:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800b7b8:	6939      	ldr	r1, [r7, #16]
 800b7ba:	6978      	ldr	r0, [r7, #20]
 800b7bc:	f7f8 fecb 	bl	8004556 <_ZN11ArduinoJson8V721HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	68f9      	ldr	r1, [r7, #12]
 800b7c4:	6978      	ldr	r0, [r7, #20]
 800b7c6:	f000 f901 	bl	800b9cc <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	bf00      	nop
  }
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800b7de:	f000 f8c3 	bl	800b968 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	bf94      	ite	ls
 800b7ec:	2301      	movls	r3, #1
 800b7ee:	2300      	movhi	r3, #0
 800b7f0:	b2db      	uxtb	r3, r3
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  return true;
 800b802:	2301      	movs	r3, #1
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800b810:	b5b0      	push	{r4, r5, r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800b81a:	f000 f8a5 	bl	800b968 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800b81e:	4603      	mov	r3, r0
 800b820:	17da      	asrs	r2, r3, #31
 800b822:	461c      	mov	r4, r3
 800b824:	4615      	mov	r5, r2
 800b826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b82a:	4294      	cmp	r4, r2
 800b82c:	eb75 0303 	sbcs.w	r3, r5, r3
 800b830:	bf2c      	ite	cs
 800b832:	2301      	movcs	r3, #1
 800b834:	2300      	movcc	r3, #0
 800b836:	b2db      	uxtb	r3, r3
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bdb0      	pop	{r4, r5, r7, pc}

0800b840 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800b840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800b84c:	f000 f85e 	bl	800b90c <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 800b850:	4603      	mov	r3, r0
 800b852:	17da      	asrs	r2, r3, #31
 800b854:	4698      	mov	r8, r3
 800b856:	4691      	mov	r9, r2
 800b858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b85c:	4542      	cmp	r2, r8
 800b85e:	eb73 0309 	sbcs.w	r3, r3, r9
 800b862:	db0d      	blt.n	800b880 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800b864:	f000 f880 	bl	800b968 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800b868:	4603      	mov	r3, r0
 800b86a:	17da      	asrs	r2, r3, #31
 800b86c:	461c      	mov	r4, r3
 800b86e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800b870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b874:	4294      	cmp	r4, r2
 800b876:	eb75 0303 	sbcs.w	r3, r5, r3
 800b87a:	db01      	blt.n	800b880 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e000      	b.n	800b882 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b88c <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	3b01      	subs	r3, #1
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d830      	bhi.n	800b900 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x74>
 800b89e:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a4 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x18>)
 800b8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8c7 	.word	0x0800b8c7
 800b8ac:	0800b8d9 	.word	0x0800b8d9
 800b8b0:	0800b8eb 	.word	0x0800b8eb
        return convertNumber<T>(value_.asFloat);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	edd3 7a02 	vldr	s15, [r3, #8]
 800b8ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b8be:	f7ff ff36 	bl	800b72e <_ZN11ArduinoJson8V721HB226detail13convertNumberIifEET_T0_>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	e01d      	b.n	800b902 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asSignedInteger);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f7ff ff06 	bl	800b6e0 <_ZN11ArduinoJson8V721HB226detail13convertNumberIixEET_T0_>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	e014      	b.n	800b902 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asUnsignedInteger);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	f7ff feea 	bl	800b6ba <_ZN11ArduinoJson8V721HB226detail13convertNumberIiyEET_T0_>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	e00b      	b.n	800b902 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return convertNumber<T>(value_.asDouble);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8f0:	eeb0 0a47 	vmov.f32	s0, s14
 800b8f4:	eef0 0a67 	vmov.f32	s1, s15
 800b8f8:	f7ff ff31 	bl	800b75e <_ZN11ArduinoJson8V721HB226detail13convertNumberIidEET_T0_>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	e000      	b.n	800b902 <_ZNK11ArduinoJson8V721HB226detail6Number9convertToIiEET_v+0x76>
        return T();
 800b900:	2300      	movs	r3, #0
  }
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop

0800b90c <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800b910:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800b914:	4618      	mov	r0, r3
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800b928:	f7ff fff0 	bl	800b90c <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 800b92c:	ee07 0a90 	vmov	s15, r0
 800b930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b934:	ed97 7a01 	vldr	s14, [r7, #4]
 800b938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b940:	db0d      	blt.n	800b95e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800b942:	2000      	movs	r0, #0
 800b944:	f000 f885 	bl	800ba52 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800b948:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800b94c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b950:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b958:	d801      	bhi.n	800b95e <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
    return T(~lowest());
 800b96c:	f7ff ffce 	bl	800b90c <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 800b970:	4603      	mov	r3, r0
 800b972:	43db      	mvns	r3, r3
  }
 800b974:	4618      	mov	r0, r3
 800b976:	bd80      	pop	{r7, pc}

0800b978 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800b982:	f7ff ffc3 	bl	800b90c <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE6lowestEv>
 800b986:	4603      	mov	r3, r0
 800b988:	4618      	mov	r0, r3
 800b98a:	f7f4 fdd3 	bl	8000534 <__aeabi_i2d>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b996:	f7f5 f8bd 	bl	8000b14 <__aeabi_dcmpge>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d010      	beq.n	800b9c2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
         value <= numeric_limits<TOut>::highest();
 800b9a0:	f7ff ffe2 	bl	800b968 <_ZN11ArduinoJson8V721HB226detail14numeric_limitsIivE7highestEv>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f4 fdc4 	bl	8000534 <__aeabi_i2d>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 800b9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9b4:	f7f5 f8a4 	bl	8000b00 <__aeabi_dcmple>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4a>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x4c>
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 800b9cc:	b5b0      	push	{r4, r5, r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  if (canConvertNumber<int32_t>(value)) {
 800b9d8:	68b8      	ldr	r0, [r7, #8]
 800b9da:	f000 f849 	bl	800ba70 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIliEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d006      	beq.n	800b9f2 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Int32;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	220c      	movs	r2, #12
 800b9e8:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e02a      	b.n	800ba48 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    auto extension = resources->allocExtension();
 800b9f2:	f107 0310 	add.w	r3, r7, #16
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7f8 fb8c 	bl	8004116 <_ZN11ArduinoJson8V721HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fc f892 	bl	8007b2c <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f083 0301 	eor.w	r3, r3, #1
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e018      	b.n	800ba4a <_ZN11ArduinoJson8V721HB226detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Int64;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	221c      	movs	r2, #28
 800ba1c:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800ba1e:	f107 0310 	add.w	r3, r7, #16
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fc f893 	bl	8007b4e <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 800ba30:	f107 0310 	add.w	r3, r7, #16
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fc f896 	bl	8007b66 <_ZNK11ArduinoJson8V721HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	17d9      	asrs	r1, r3, #31
 800ba40:	461c      	mov	r4, r3
 800ba42:	460d      	mov	r5, r1
 800ba44:	e9c2 4500 	strd	r4, r5, [r2]
  return true;
 800ba48:	2301      	movs	r3, #1
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bdb0      	pop	{r4, r5, r7, pc}

0800ba52 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800ba5a:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800ba5e:	f7fc f857 	bl	8007b10 <_ZN11ArduinoJson8V721HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800ba62:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ba66:	eeb0 0a67 	vmov.f32	s0, s15
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <_ZN11ArduinoJson8V721HB226detail16canConvertNumberIliEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  return true;
 800ba78:	2301      	movs	r3, #1
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
	...

0800ba88 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d10b      	bne.n	800bab0 <_Z41__static_initialization_and_destruction_0ii+0x28>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d106      	bne.n	800bab0 <_Z41__static_initialization_and_destruction_0ii+0x28>
JsonDocument doc;
 800baa2:	f7f5 fe37 	bl	8001714 <_ZN11ArduinoJson8V721HB226detail16DefaultAllocator8instanceEv>
 800baa6:	4603      	mov	r3, r0
 800baa8:	4619      	mov	r1, r3
 800baaa:	4809      	ldr	r0, [pc, #36]	@ (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800baac:	f7f5 ff41 	bl	8001932 <_ZN11ArduinoJson8V721HB2212JsonDocumentC1EPNS0_9AllocatorE>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d107      	bne.n	800bac6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800babc:	4293      	cmp	r3, r2
 800babe:	d102      	bne.n	800bac6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800bac0:	4803      	ldr	r0, [pc, #12]	@ (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800bac2:	f7ff fa30 	bl	800af26 <_ZN11ArduinoJson8V721HB2212JsonDocumentD1Ev>
}
 800bac6:	bf00      	nop
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	200002f4 	.word	0x200002f4

0800bad4 <_GLOBAL__sub_I_defaultTaskHandle>:
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800badc:	2001      	movs	r0, #1
 800bade:	f7ff ffd3 	bl	800ba88 <_Z41__static_initialization_and_destruction_0ii>
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <_GLOBAL__sub_D_defaultTaskHandle>:
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800baec:	2000      	movs	r0, #0
 800baee:	f7ff ffcb 	bl	800ba88 <_Z41__static_initialization_and_destruction_0ii>
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bafa:	2300      	movs	r3, #0
 800bafc:	607b      	str	r3, [r7, #4]
 800bafe:	4b12      	ldr	r3, [pc, #72]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb02:	4a11      	ldr	r2, [pc, #68]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bb08:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bb16:	2300      	movs	r3, #0
 800bb18:	603b      	str	r3, [r7, #0]
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1e:	4a0a      	ldr	r2, [pc, #40]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb24:	6413      	str	r3, [r2, #64]	@ 0x40
 800bb26:	4b08      	ldr	r3, [pc, #32]	@ (800bb48 <HAL_MspInit+0x54>)
 800bb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bb32:	2200      	movs	r2, #0
 800bb34:	210f      	movs	r1, #15
 800bb36:	f06f 0001 	mvn.w	r0, #1
 800bb3a:	f001 f9b3 	bl	800cea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	40023800 	.word	0x40023800

0800bb4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08c      	sub	sp, #48	@ 0x30
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800bb54:	2300      	movs	r3, #0
 800bb56:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60bb      	str	r3, [r7, #8]
 800bb60:	4b30      	ldr	r3, [pc, #192]	@ (800bc24 <HAL_InitTick+0xd8>)
 800bb62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb64:	4a2f      	ldr	r2, [pc, #188]	@ (800bc24 <HAL_InitTick+0xd8>)
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb6c:	4b2d      	ldr	r3, [pc, #180]	@ (800bc24 <HAL_InitTick+0xd8>)
 800bb6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	60bb      	str	r3, [r7, #8]
 800bb76:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bb78:	f107 020c 	add.w	r2, r7, #12
 800bb7c:	f107 0310 	add.w	r3, r7, #16
 800bb80:	4611      	mov	r1, r2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f003 fa36 	bl	800eff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800bb88:	f003 fa20 	bl	800efcc <HAL_RCC_GetPCLK2Freq>
 800bb8c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb90:	4a25      	ldr	r2, [pc, #148]	@ (800bc28 <HAL_InitTick+0xdc>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	0c9b      	lsrs	r3, r3, #18
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800bb9c:	4b23      	ldr	r3, [pc, #140]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bb9e:	4a24      	ldr	r2, [pc, #144]	@ (800bc30 <HAL_InitTick+0xe4>)
 800bba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800bba2:	4b22      	ldr	r3, [pc, #136]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bba4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800bba8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800bbaa:	4a20      	ldr	r2, [pc, #128]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800bbb0:	4b1e      	ldr	r3, [pc, #120]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbbc:	4b1b      	ldr	r3, [pc, #108]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800bbc2:	481a      	ldr	r0, [pc, #104]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbc4:	f003 fa48 	bl	800f058 <HAL_TIM_Base_Init>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d11b      	bne.n	800bc0e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800bbd6:	4815      	ldr	r0, [pc, #84]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bbd8:	f003 faa4 	bl	800f124 <HAL_TIM_Base_Start_IT>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800bbe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d111      	bne.n	800bc0e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800bbea:	2019      	movs	r0, #25
 800bbec:	f001 f976 	bl	800cedc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b0f      	cmp	r3, #15
 800bbf4:	d808      	bhi.n	800bc08 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	2019      	movs	r0, #25
 800bbfc:	f001 f952 	bl	800cea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bc00:	4a0c      	ldr	r2, [pc, #48]	@ (800bc34 <HAL_InitTick+0xe8>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	e002      	b.n	800bc0e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 800bc0e:	4a0a      	ldr	r2, [pc, #40]	@ (800bc38 <HAL_InitTick+0xec>)
 800bc10:	210e      	movs	r1, #14
 800bc12:	4806      	ldr	r0, [pc, #24]	@ (800bc2c <HAL_InitTick+0xe0>)
 800bc14:	f003 fc52 	bl	800f4bc <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 800bc18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3730      	adds	r7, #48	@ 0x30
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40023800 	.word	0x40023800
 800bc28:	431bde83 	.word	0x431bde83
 800bc2c:	20000334 	.word	0x20000334
 800bc30:	40010000 	.word	0x40010000
 800bc34:	20000008 	.word	0x20000008
 800bc38:	0800bc3d 	.word	0x0800bc3d

0800bc3c <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800bc44:	f001 f832 	bl	800ccac <HAL_IncTick>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bc50:	b480      	push	{r7}
 800bc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bc54:	bf00      	nop
 800bc56:	e7fd      	b.n	800bc54 <NMI_Handler+0x4>

0800bc58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc5c:	bf00      	nop
 800bc5e:	e7fd      	b.n	800bc5c <HardFault_Handler+0x4>

0800bc60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc64:	bf00      	nop
 800bc66:	e7fd      	b.n	800bc64 <MemManage_Handler+0x4>

0800bc68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc6c:	bf00      	nop
 800bc6e:	e7fd      	b.n	800bc6c <BusFault_Handler+0x4>

0800bc70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <UsageFault_Handler+0x4>

0800bc78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bc7c:	bf00      	nop
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	f001 fb04 	bl	800d298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800bc98:	2002      	movs	r0, #2
 800bc9a:	f001 fafd 	bl	800d298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800bc9e:	bf00      	nop
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800bca6:	2004      	movs	r0, #4
 800bca8:	f001 faf6 	bl	800d298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800bcac:	bf00      	nop
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bcb4:	4802      	ldr	r0, [pc, #8]	@ (800bcc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800bcb6:	f003 fa97 	bl	800f1e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000334 	.word	0x20000334

0800bcc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800bcc8:	4802      	ldr	r0, [pc, #8]	@ (800bcd4 <OTG_FS_IRQHandler+0x10>)
 800bcca:	f001 fc41 	bl	800d550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20005ac0 	.word	0x20005ac0

0800bcd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	af00      	add	r7, sp, #0
  return 1;
 800bcdc:	2301      	movs	r3, #1
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <_kill>:

int _kill(int pid, int sig)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800bcf2:	f00c f877 	bl	8017de4 <__errno>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2216      	movs	r2, #22
 800bcfa:	601a      	str	r2, [r3, #0]
  return -1;
 800bcfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <_exit>:

void _exit (int status)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800bd10:	f04f 31ff 	mov.w	r1, #4294967295
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff ffe7 	bl	800bce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <_exit+0x12>

0800bd1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b086      	sub	sp, #24
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	e00a      	b.n	800bd46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bd30:	f3af 8000 	nop.w
 800bd34:	4601      	mov	r1, r0
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	60ba      	str	r2, [r7, #8]
 800bd3c:	b2ca      	uxtb	r2, r1
 800bd3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3301      	adds	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	dbf0      	blt.n	800bd30 <_read+0x12>
  }

  return len;
 800bd4e:	687b      	ldr	r3, [r7, #4]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd64:	2300      	movs	r3, #0
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e009      	b.n	800bd7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	60ba      	str	r2, [r7, #8]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	dbf1      	blt.n	800bd6a <_write+0x12>
  }
  return len;
 800bd86:	687b      	ldr	r3, [r7, #4]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_close>:

int _close(int file)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bd98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bdb8:	605a      	str	r2, [r3, #4]
  return 0;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <_isatty>:

int _isatty(int file)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bdd0:	2301      	movs	r3, #1
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b085      	sub	sp, #20
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	60b9      	str	r1, [r7, #8]
 800bde8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800be00:	4a14      	ldr	r2, [pc, #80]	@ (800be54 <_sbrk+0x5c>)
 800be02:	4b15      	ldr	r3, [pc, #84]	@ (800be58 <_sbrk+0x60>)
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800be0c:	4b13      	ldr	r3, [pc, #76]	@ (800be5c <_sbrk+0x64>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d102      	bne.n	800be1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800be14:	4b11      	ldr	r3, [pc, #68]	@ (800be5c <_sbrk+0x64>)
 800be16:	4a12      	ldr	r2, [pc, #72]	@ (800be60 <_sbrk+0x68>)
 800be18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800be1a:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <_sbrk+0x64>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	429a      	cmp	r2, r3
 800be26:	d207      	bcs.n	800be38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800be28:	f00b ffdc 	bl	8017de4 <__errno>
 800be2c:	4603      	mov	r3, r0
 800be2e:	220c      	movs	r2, #12
 800be30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800be32:	f04f 33ff 	mov.w	r3, #4294967295
 800be36:	e009      	b.n	800be4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800be38:	4b08      	ldr	r3, [pc, #32]	@ (800be5c <_sbrk+0x64>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800be3e:	4b07      	ldr	r3, [pc, #28]	@ (800be5c <_sbrk+0x64>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4413      	add	r3, r2
 800be46:	4a05      	ldr	r2, [pc, #20]	@ (800be5c <_sbrk+0x64>)
 800be48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800be4a:	68fb      	ldr	r3, [r7, #12]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20010000 	.word	0x20010000
 800be58:	00000400 	.word	0x00000400
 800be5c:	200003e8 	.word	0x200003e8
 800be60:	20006318 	.word	0x20006318

0800be64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800be68:	4b06      	ldr	r3, [pc, #24]	@ (800be84 <SystemInit+0x20>)
 800be6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be6e:	4a05      	ldr	r2, [pc, #20]	@ (800be84 <SystemInit+0x20>)
 800be70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800be78:	bf00      	nop
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	e000ed00 	.word	0xe000ed00

0800be88 <_ZN7IRQTaskD1Ev>:

#ifndef INC_READER_IRQ_IRQTASK_H_
#define INC_READER_IRQ_IRQTASK_H_
#include "MyRTOSTask.h"
#include "semphr.h"
class IRQTask: public MyRTOSTask {
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	4a05      	ldr	r2, [pc, #20]	@ (800bea8 <_ZN7IRQTaskD1Ev+0x20>)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe ff55 	bl	800ad48 <_ZN10MyRTOSTaskD1Ev>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	0801a000 	.word	0x0801a000

0800beac <_ZN7IRQTaskD0Ev>:
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff ffe7 	bl	800be88 <_ZN7IRQTaskD1Ev>
 800beba:	2124      	movs	r1, #36	@ 0x24
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f00a fef3 	bl	8016ca8 <_ZdlPvj>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <_ZN11EncoderTaskC1EP11EncodeModeld>:
#include "Reader/IRQ/EncoderTash.h"

EncoderTask::EncoderTask(EncodeModel *encoderModel, double scala) :
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	ed87 0b00 	vstr	d0, [r7]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
				scala == 0 ? 1.0f : scala), encoderModel(encoderModel), timer(
				200) {
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	2301      	movs	r3, #1
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	2340      	movs	r3, #64	@ 0x40
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	2300      	movs	r3, #0
 800bee6:	2200      	movs	r2, #0
 800bee8:	491f      	ldr	r1, [pc, #124]	@ (800bf68 <_ZN11EncoderTaskC1EP11EncodeModeld+0x9c>)
 800beea:	f000 f9cf 	bl	800c28c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 800beee:	4a1f      	ldr	r2, [pc, #124]	@ (800bf6c <_ZN11EncoderTaskC1EP11EncodeModeld+0xa0>)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	601a      	str	r2, [r3, #0]
		IRQTask("EncoderTask", nullptr, nullptr, 64, 1), aPin(
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800befa:	2300      	movs	r3, #0
 800befc:	2201      	movs	r2, #1
 800befe:	491c      	ldr	r1, [pc, #112]	@ (800bf70 <_ZN11EncoderTaskC1EP11EncodeModeld+0xa4>)
 800bf00:	f000 fb2c 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	4918      	ldr	r1, [pc, #96]	@ (800bf70 <_ZN11EncoderTaskC1EP11EncodeModeld+0xa4>)
 800bf10:	f000 fb24 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				scala == 0 ? 1.0f : scala), encoderModel(encoderModel), timer(
 800bf14:	f04f 0200 	mov.w	r2, #0
 800bf18:	f04f 0300 	mov.w	r3, #0
 800bf1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf20:	f7f4 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <_ZN11EncoderTaskC1EP11EncodeModeld+0x64>
 800bf2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2e:	e002      	b.n	800bf36 <_ZN11EncoderTaskC1EP11EncodeModeld+0x6a>
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	4b0f      	ldr	r3, [pc, #60]	@ (800bf74 <_ZN11EncoderTaskC1EP11EncodeModeld+0xa8>)
				MyPin(GPIOB, GPIO_PIN_0)), bPin(MyPin(GPIOB, GPIO_PIN_1)), scala(
 800bf36:	68f9      	ldr	r1, [r7, #12]
 800bf38:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
				scala == 0 ? 1.0f : scala), encoderModel(encoderModel), timer(
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3364      	adds	r3, #100	@ 0x64
 800bf46:	21c8      	movs	r1, #200	@ 0xc8
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f5 f92b 	bl	80011a4 <_ZN10TimeTickerC1Em>
	this->count = 0;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	64da      	str	r2, [r3, #76]	@ 0x4c
	this->hasCallA = false;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	08019db0 	.word	0x08019db0
 800bf6c:	08019fdc 	.word	0x08019fdc
 800bf70:	40020400 	.word	0x40020400
 800bf74:	3ff00000 	.word	0x3ff00000

0800bf78 <_ZN11EncoderTask9isExactlyEt>:

bool EncoderTask::isExactly(uint16_t pin) {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	807b      	strh	r3, [r7, #2]
	if (this->aPin.equalPin(pin) && this->aPin.readValue()) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3324      	adds	r3, #36	@ 0x24
 800bf88:	887a      	ldrh	r2, [r7, #2]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fafe 	bl	800c58e <_ZN5MyPin8equalPinEt>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d009      	beq.n	800bfac <_ZN11EncoderTask9isExactlyEt+0x34>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3324      	adds	r3, #36	@ 0x24
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 fb2c 	bl	800c5fa <_ZN5MyPin9readValueEv>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <_ZN11EncoderTask9isExactlyEt+0x34>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <_ZN11EncoderTask9isExactlyEt+0x36>
 800bfac:	2300      	movs	r3, #0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <_ZN11EncoderTask9isExactlyEt+0x46>
		this->hasCallA = true;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e01d      	b.n	800bffa <_ZN11EncoderTask9isExactlyEt+0x82>
	} else if (this->bPin.equalPin(pin) && bPin.readValue()) {
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3338      	adds	r3, #56	@ 0x38
 800bfc2:	887a      	ldrh	r2, [r7, #2]
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fae1 	bl	800c58e <_ZN5MyPin8equalPinEt>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <_ZN11EncoderTask9isExactlyEt+0x6e>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3338      	adds	r3, #56	@ 0x38
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 fb0f 	bl	800c5fa <_ZN5MyPin9readValueEv>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <_ZN11EncoderTask9isExactlyEt+0x6e>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <_ZN11EncoderTask9isExactlyEt+0x70>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <_ZN11EncoderTask9isExactlyEt+0x80>
		this->hasCallA = false;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		return true;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e000      	b.n	800bffa <_ZN11EncoderTask9isExactlyEt+0x82>
	}
	return false;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <_ZN11EncoderTask12taskCallbackEv>:

void EncoderTask::setScale(double scala) {
	this->scala = scala == 0 ? 1.0f : scala;
}

void EncoderTask::taskCallback() {
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
	if (this->hasCallA) {
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c010:	2b00      	cmp	r3, #0
 800c012:	d012      	beq.n	800c03a <_ZN11EncoderTask12taskCallbackEv+0x38>
		if (this->bPin.readValue()) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3338      	adds	r3, #56	@ 0x38
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 faee 	bl	800c5fa <_ZN5MyPin9readValueEv>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	bf14      	ite	ne
 800c024:	2301      	movne	r3, #1
 800c026:	2300      	moveq	r3, #0
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d017      	beq.n	800c05e <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count += 1;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c032:	1c5a      	adds	r2, r3, #1
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	64da      	str	r2, [r3, #76]	@ 0x4c
	} else {
		if (this->aPin.readValue()) {
			this->count -= 1;
		}
	}
}
 800c038:	e011      	b.n	800c05e <_ZN11EncoderTask12taskCallbackEv+0x5c>
		if (this->aPin.readValue()) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3324      	adds	r3, #36	@ 0x24
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fadb 	bl	800c5fa <_ZN5MyPin9readValueEv>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	bf14      	ite	ne
 800c04a:	2301      	movne	r3, #1
 800c04c:	2300      	moveq	r3, #0
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d004      	beq.n	800c05e <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count -= 1;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <_ZN11EncoderTask15getEncoderModelEv>:

EncodeModel* EncoderTask::getEncoderModel() {
 800c068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c06c:	b085      	sub	sp, #20
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3364      	adds	r3, #100	@ 0x64
 800c076:	4618      	mov	r0, r3
 800c078:	f7f5 f8f8 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800c07c:	4603      	mov	r3, r0
 800c07e:	f083 0301 	eor.w	r3, r3, #1
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80c9 	beq.w	800c21c <_ZN11EncoderTask15getEncoderModelEv+0x1b4>
		int32_t tempCount = this->count;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c08e:	60fb      	str	r3, [r7, #12]
		float deltaTimeS = this->timer.getDelta() / 1000.0;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3364      	adds	r3, #100	@ 0x64
 800c094:	4618      	mov	r0, r3
 800c096:	f7f5 f8b3 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 800c09a:	4603      	mov	r3, r0
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f4 fa39 	bl	8000514 <__aeabi_ui2d>
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	4b66      	ldr	r3, [pc, #408]	@ (800c240 <_ZN11EncoderTask15getEncoderModelEv+0x1d8>)
 800c0a8:	f7f4 fbd8 	bl	800085c <__aeabi_ddiv>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	f7f4 fda0 	bl	8000bf8 <__aeabi_d2f>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		this->timer.reset();
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3364      	adds	r3, #100	@ 0x64
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7f5 f8c0 	bl	800124c <_ZN10TimeTicker5resetEv>
		if (tempCount == 0 || deltaTimeS == 0) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d006      	beq.n	800c0e0 <_ZN11EncoderTask15getEncoderModelEv+0x78>
 800c0d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0de:	d10d      	bne.n	800c0fc <_ZN11EncoderTask15getEncoderModelEv+0x94>
			this->encoderModel->setSpeed(0);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0e4:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 800c244 <_ZN11EncoderTask15getEncoderModelEv+0x1dc>
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f5 f935 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
			this->encoderModel->setCarStatus(CAR_STOP);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f5 f93e 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
 800c0fa:	e08f      	b.n	800c21c <_ZN11EncoderTask15getEncoderModelEv+0x1b4>
		} else {
			this->encoderModel->setDistance(
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
					this->encoderModel->getDistance() + tempCount / this->scala);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c104:	4618      	mov	r0, r3
 800c106:	f7f5 f8fa 	bl	80012fe <_ZNK11EncodeModel11getDistanceEv>
 800c10a:	ee10 3a10 	vmov	r3, s0
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f4 fa22 	bl	8000558 <__aeabi_f2d>
 800c114:	4604      	mov	r4, r0
 800c116:	460d      	mov	r5, r1
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7f4 fa0b 	bl	8000534 <__aeabi_i2d>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c124:	f7f4 fb9a 	bl	800085c <__aeabi_ddiv>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	f7f4 f8b4 	bl	800029c <__adddf3>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
			this->encoderModel->setDistance(
 800c138:	4610      	mov	r0, r2
 800c13a:	4619      	mov	r1, r3
 800c13c:	f7f4 fd5c 	bl	8000bf8 <__aeabi_d2f>
 800c140:	4603      	mov	r3, r0
 800c142:	ee00 3a10 	vmov	s0, r3
 800c146:	4630      	mov	r0, r6
 800c148:	f7f5 f8f7 	bl	800133a <_ZN11EncodeModel11setDistanceEf>
			if (tempCount > 0) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dd32      	ble.n	800c1b8 <_ZN11EncoderTask15getEncoderModelEv+0x150>
				this->encoderModel->setSpeed(
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
						tempCount * 3.6 / this->scala / deltaTimeS);
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7f4 f9ec 	bl	8000534 <__aeabi_i2d>
 800c15c:	a334      	add	r3, pc, #208	@ (adr r3, 800c230 <_ZN11EncoderTask15getEncoderModelEv+0x1c8>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	f7f4 fa51 	bl	8000608 <__aeabi_dmul>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4610      	mov	r0, r2
 800c16c:	4619      	mov	r1, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c174:	f7f4 fb72 	bl	800085c <__aeabi_ddiv>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4690      	mov	r8, r2
 800c17e:	4699      	mov	r9, r3
 800c180:	68b8      	ldr	r0, [r7, #8]
 800c182:	f7f4 f9e9 	bl	8000558 <__aeabi_f2d>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4640      	mov	r0, r8
 800c18c:	4649      	mov	r1, r9
 800c18e:	f7f4 fb65 	bl	800085c <__aeabi_ddiv>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
				this->encoderModel->setSpeed(
 800c196:	4610      	mov	r0, r2
 800c198:	4619      	mov	r1, r3
 800c19a:	f7f4 fd2d 	bl	8000bf8 <__aeabi_d2f>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	ee00 3a10 	vmov	s0, r3
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f7f5 f8d7 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel->setCarStatus(CAR_FORWARD);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f5 f8e0 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
 800c1b6:	e031      	b.n	800c21c <_ZN11EncoderTask15getEncoderModelEv+0x1b4>
			} else {
				this->encoderModel->setSpeed(
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
						tempCount * -3.6 / this->scala / deltaTimeS);
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7f4 f9b9 	bl	8000534 <__aeabi_i2d>
 800c1c2:	a31d      	add	r3, pc, #116	@ (adr r3, 800c238 <_ZN11EncoderTask15getEncoderModelEv+0x1d0>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f4 fa1e 	bl	8000608 <__aeabi_dmul>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c1da:	f7f4 fb3f 	bl	800085c <__aeabi_ddiv>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4690      	mov	r8, r2
 800c1e4:	4699      	mov	r9, r3
 800c1e6:	68b8      	ldr	r0, [r7, #8]
 800c1e8:	f7f4 f9b6 	bl	8000558 <__aeabi_f2d>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	f7f4 fb32 	bl	800085c <__aeabi_ddiv>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
				this->encoderModel->setSpeed(
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4619      	mov	r1, r3
 800c200:	f7f4 fcfa 	bl	8000bf8 <__aeabi_d2f>
 800c204:	4603      	mov	r3, r0
 800c206:	ee00 3a10 	vmov	s0, r3
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7f5 f8a4 	bl	8001358 <_ZN11EncodeModel8setSpeedEf>
				this->encoderModel->setCarStatus(CAR_BACKWARD);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c214:	2102      	movs	r1, #2
 800c216:	4618      	mov	r0, r3
 800c218:	f7f5 f8ad 	bl	8001376 <_ZN11EncodeModel12setCarStatusE9CarStatus>
			}
		}
	}
	return this->encoderModel;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	cccccccd 	.word	0xcccccccd
 800c234:	400ccccc 	.word	0x400ccccc
 800c238:	cccccccd 	.word	0xcccccccd
 800c23c:	c00ccccc 	.word	0xc00ccccc
 800c240:	408f4000 	.word	0x408f4000
 800c244:	00000000 	.word	0x00000000

0800c248 <_ZN11EncoderTaskD1Ev>:
#include <Model/EncodeModel.h>
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"

class EncoderTask: public IRQTask {
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	4a05      	ldr	r2, [pc, #20]	@ (800c268 <_ZN11EncoderTaskD1Ev+0x20>)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fe15 	bl	800be88 <_ZN7IRQTaskD1Ev>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	08019fdc 	.word	0x08019fdc

0800c26c <_ZN11EncoderTaskD0Ev>:
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ffe7 	bl	800c248 <_ZN11EncoderTaskD1Ev>
 800c27a:	2170      	movs	r1, #112	@ 0x70
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f00a fd13 	bl	8016ca8 <_ZdlPvj>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>:
 *  Created on: Dec 9, 2024
 *      Author: Admin
 */
#include "Reader/IRQ/IRQTask.h"

IRQTask::IRQTask(const char *name, void (*runFunction)(void *), void *params, uint16_t stackSize,
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af02      	add	r7, sp, #8
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
		UBaseType_t priority) :
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
				xSemaphoreCreateBinary()) {
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	8b3b      	ldrh	r3, [r7, #24]
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	f7fe fd25 	bl	800acf8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 800c2ae:	4a08      	ldr	r2, [pc, #32]	@ (800c2d0 <_ZN7IRQTaskC1EPKcPFvPvES2_tm+0x44>)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f007 f960 	bl	801357e <xQueueGenericCreate>
 800c2be:	4602      	mov	r2, r0
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	621a      	str	r2, [r3, #32]

}
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0801a000 	.word	0x0801a000

0800c2d4 <_ZN7IRQTask17interruptCallbackEt>:
void IRQTask::interruptCallback(uint16_t pin) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFAIL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60fb      	str	r3, [r7, #12]
	if(isExactly(pin)){
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3318      	adds	r3, #24
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	887a      	ldrh	r2, [r7, #2]
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	4798      	blx	r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d007      	beq.n	800c30a <_ZN7IRQTask17interruptCallbackEt+0x36>
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	f107 020c 	add.w	r2, r7, #12
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f007 fb6b 	bl	80139e0 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d007      	beq.n	800c320 <_ZN7IRQTask17interruptCallbackEt+0x4c>
 800c310:	4b05      	ldr	r3, [pc, #20]	@ (800c328 <_ZN7IRQTask17interruptCallbackEt+0x54>)
 800c312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	f3bf 8f6f 	isb	sy
}
 800c320:	bf00      	nop
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <_ZN7IRQTask12taskCallbackEv>:

void IRQTask::taskCallback() {
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <_ZN7IRQTask12taskCallbackEv+0x1c>
		this->runFunction(this->params);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	6912      	ldr	r2, [r2, #16]
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3
	}
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <_ZN7IRQTask3runEv>:

void IRQTask::run() {
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	f04f 31ff 	mov.w	r1, #4294967295
 800c360:	4618      	mov	r0, r3
 800c362:	f007 fcaf 	bl	8013cc4 <xQueueSemaphoreTake>
 800c366:	4603      	mov	r3, r0
 800c368:	2b01      	cmp	r3, #1
 800c36a:	bf0c      	ite	eq
 800c36c:	2301      	moveq	r3, #1
 800c36e:	2300      	movne	r3, #0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0f0      	beq.n	800c358 <_ZN7IRQTask3runEv+0x8>
			this->taskCallback();
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3314      	adds	r3, #20
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 800c382:	e7e9      	b.n	800c358 <_ZN7IRQTask3runEv+0x8>

0800c384 <_ZN7RpmTaskC1Et>:
 *      Author: Admin
 */

#include "Reader/IRQ/RpmTask.h"

RpmTask::RpmTask(uint16_t scala) :
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	807b      	strh	r3, [r7, #2]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	2301      	movs	r3, #1
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	2340      	movs	r3, #64	@ 0x40
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	2300      	movs	r3, #0
 800c39c:	2200      	movs	r2, #0
 800c39e:	4914      	ldr	r1, [pc, #80]	@ (800c3f0 <_ZN7RpmTaskC1Et+0x6c>)
 800c3a0:	f7ff ff74 	bl	800c28c <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 800c3a4:	4a13      	ldr	r2, [pc, #76]	@ (800c3f4 <_ZN7RpmTaskC1Et+0x70>)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	601a      	str	r2, [r3, #0]
		IRQTask("rpmTask", nullptr, nullptr, 64, 1), rpmPin(
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	2204      	movs	r2, #4
 800c3b4:	4910      	ldr	r1, [pc, #64]	@ (800c3f8 <_ZN7RpmTaskC1Et+0x74>)
 800c3b6:	f000 f8d1 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala == 0 ? 1 : scala), timer(1000) {
 800c3ba:	887b      	ldrh	r3, [r7, #2]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <_ZN7RpmTaskC1Et+0x40>
 800c3c0:	887a      	ldrh	r2, [r7, #2]
 800c3c2:	e000      	b.n	800c3c6 <_ZN7RpmTaskC1Et+0x42>
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3344      	adds	r3, #68	@ 0x44
 800c3d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f4 fee5 	bl	80011a4 <_ZN10TimeTickerC1Em>
	this->count = 0;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	639a      	str	r2, [r3, #56]	@ 0x38
	this->rmp = 0;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	08019dbc 	.word	0x08019dbc
 800c3f4:	0801a024 	.word	0x0801a024
 800c3f8:	40020400 	.word	0x40020400

0800c3fc <_ZN7RpmTask9isExactlyEt>:

bool RpmTask::isExactly(uint16_t pin) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	807b      	strh	r3, [r7, #2]
	return this->rpmPin.equalPin(pin) && this->rpmPin.readValue();
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3324      	adds	r3, #36	@ 0x24
 800c40c:	887a      	ldrh	r2, [r7, #2]
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f000 f8bc 	bl	800c58e <_ZN5MyPin8equalPinEt>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d009      	beq.n	800c430 <_ZN7RpmTask9isExactlyEt+0x34>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3324      	adds	r3, #36	@ 0x24
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f8ea 	bl	800c5fa <_ZN5MyPin9readValueEv>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <_ZN7RpmTask9isExactlyEt+0x34>
 800c42c:	2301      	movs	r3, #1
 800c42e:	e000      	b.n	800c432 <_ZN7RpmTask9isExactlyEt+0x36>
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	0000      	movs	r0, r0
 800c43c:	0000      	movs	r0, r0
	...

0800c440 <_ZN7RpmTask8getValueEv>:

uint16_t RpmTask::getValue() {
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	if (!this->timer.onTime()) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3344      	adds	r3, #68	@ 0x44
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7f4 ff0d 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800c452:	4603      	mov	r3, r0
 800c454:	f083 0301 	eor.w	r3, r3, #1
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d03e      	beq.n	800c4dc <_ZN7RpmTask8getValueEv+0x9c>
		int32_t tempCount = this->count;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c462:	60fb      	str	r3, [r7, #12]
		float deltaTimeM = this->timer.getDelta() / 60000.0;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3344      	adds	r3, #68	@ 0x44
 800c468:	4618      	mov	r0, r3
 800c46a:	f7f4 fec9 	bl	8001200 <_ZN10TimeTicker8getDeltaEv>
 800c46e:	4603      	mov	r3, r0
 800c470:	4618      	mov	r0, r3
 800c472:	f7f4 f84f 	bl	8000514 <__aeabi_ui2d>
 800c476:	a31e      	add	r3, pc, #120	@ (adr r3, 800c4f0 <_ZN7RpmTask8getValueEv+0xb0>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f4 f9ee 	bl	800085c <__aeabi_ddiv>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4610      	mov	r0, r2
 800c486:	4619      	mov	r1, r3
 800c488:	f7f4 fbb6 	bl	8000bf8 <__aeabi_d2f>
 800c48c:	4603      	mov	r3, r0
 800c48e:	60bb      	str	r3, [r7, #8]
		this->count = 0;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	639a      	str	r2, [r3, #56]	@ 0x38
		this->timer.reset();
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3344      	adds	r3, #68	@ 0x44
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f4 fed6 	bl	800124c <_ZN10TimeTicker5resetEv>
		if (deltaTimeM == 0) {
 800c4a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ac:	d101      	bne.n	800c4b2 <_ZN7RpmTask8getValueEv+0x72>
			return 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	e017      	b.n	800c4e2 <_ZN7RpmTask8getValueEv+0xa2>
		}
		rmp = tempCount / this->scala / deltaTimeM;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4c0:	ee07 3a90 	vmov	s15, r3
 800c4c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c4c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d4:	ee17 2a90 	vmov	r2, s15
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	return rmp;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4e0:	b29b      	uxth	r3, r3
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	00000000 	.word	0x00000000
 800c4f4:	40ed4c00 	.word	0x40ed4c00

0800c4f8 <_ZN7RpmTask12taskCallbackEv>:

void RpmTask::setScale(uint16_t scala) {
	this->scala = scala == 0 ? 1 : scala;
}

void RpmTask::taskCallback() {
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	this->count += 1;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <_ZN7RpmTaskD1Ev>:
#ifndef INC_READER_IRQ_RPMTASK_H_
#define INC_READER_IRQ_RPMTASK_H_
#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Common/TimeTicker.h"
class RpmTask: public IRQTask {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	4a05      	ldr	r2, [pc, #20]	@ (800c538 <_ZN7RpmTaskD1Ev+0x20>)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7ff fcad 	bl	800be88 <_ZN7IRQTaskD1Ev>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	0801a024 	.word	0x0801a024

0800c53c <_ZN7RpmTaskD0Ev>:
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ffe7 	bl	800c518 <_ZN7RpmTaskD1Ev>
 800c54a:	2150      	movs	r1, #80	@ 0x50
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f00a fbab 	bl	8016ca8 <_ZdlPvj>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>:
 *      Author: Admin
 */

#include "Reader/MyPin.h"

MyPin::MyPin(GPIO_TypeDef *port, uint16_t pin, TickType_t holdTime) :
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	4613      	mov	r3, r2
 800c56a:	80fb      	strh	r3, [r7, #6]
		port(port), pin(pin), timer(holdTime) {
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	88fa      	ldrh	r2, [r7, #6]
 800c576:	809a      	strh	r2, [r3, #4]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3308      	adds	r3, #8
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7f4 fe10 	bl	80011a4 <_ZN10TimeTickerC1Em>
}
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <_ZN5MyPin8equalPinEt>:

bool MyPin::equalPin(uint16_t pin) {
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	460b      	mov	r3, r1
 800c598:	807b      	strh	r3, [r7, #2]
	return pin == this->pin;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	889b      	ldrh	r3, [r3, #4]
 800c59e:	887a      	ldrh	r2, [r7, #2]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	bf0c      	ite	eq
 800c5a4:	2301      	moveq	r3, #1
 800c5a6:	2300      	movne	r3, #0
 800c5a8:	b2db      	uxtb	r3, r3
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <_ZN5MyPin21isValueWithHoldSignalEb>:

GPIO_PinState MyPin::isValueWithHoldSignal(bool value) {
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
	if (value == false) {
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10e      	bne.n	800c5e6 <_ZN5MyPin21isValueWithHoldSignalEb+0x30>
		if (!this->timer.onTime()) {
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7f4 fe4d 	bl	800126c <_ZN10TimeTicker6onTimeEv>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f083 0301 	eor.w	r3, r3, #1
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <_ZN5MyPin21isValueWithHoldSignalEb+0x2c>
			return GPIO_PIN_RESET;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e007      	b.n	800c5f2 <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		} else {
			return GPIO_PIN_SET;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e005      	b.n	800c5f2 <_ZN5MyPin21isValueWithHoldSignalEb+0x3c>
		}
	} else {
		this->timer.reset();
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f4 fe2e 	bl	800124c <_ZN10TimeTicker5resetEv>
		return GPIO_PIN_SET;
 800c5f0:	2301      	movs	r3, #1
	}
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <_ZN5MyPin9readValueEv>:

void MyPin::setHoldSignalTime(TickType_t holdTime) {
	this->timer.setDelayTime(holdTime);
}

GPIO_PinState MyPin::readValue() {
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
	if (!port) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <_ZN5MyPin9readValueEv+0x14>
		return GPIO_PIN_RESET;
 800c60a:	2300      	movs	r3, #0
 800c60c:	e013      	b.n	800c636 <_ZN5MyPin9readValueEv+0x3c>
	}
	return isValueWithHoldSignal(HAL_GPIO_ReadPin(port, pin));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	889b      	ldrh	r3, [r3, #4]
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f000 fdf1 	bl	800d200 <HAL_GPIO_ReadPin>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	bf14      	ite	ne
 800c624:	2301      	movne	r3, #1
 800c626:	2300      	moveq	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ffc2 	bl	800c5b6 <_ZN5MyPin21isValueWithHoldSignalEb>
 800c632:	4603      	mov	r3, r0
 800c634:	bf00      	nop
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <_ZN5MyPin21readValueWithDebounceEb>:

GPIO_PinState MyPin::readValueWithDebounce(bool reverse) {
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
	if (!port) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <_ZN5MyPin21readValueWithDebounceEb+0x18>
		return GPIO_PIN_RESET;
 800c652:	2300      	movs	r3, #0
 800c654:	e040      	b.n	800c6d8 <_ZN5MyPin21readValueWithDebounceEb+0x9a>
	}
	GPIO_PinState rs = GPIO_PIN_RESET;
 800c656:	2300      	movs	r3, #0
 800c658:	73fb      	strb	r3, [r7, #15]
	if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	889b      	ldrh	r3, [r3, #4]
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f000 fdcb 	bl	800d200 <HAL_GPIO_ReadPin>
 800c66a:	4603      	mov	r3, r0
 800c66c:	461a      	mov	r2, r3
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	429a      	cmp	r2, r3
 800c672:	bf14      	ite	ne
 800c674:	2301      	movne	r3, #1
 800c676:	2300      	moveq	r3, #0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d016      	beq.n	800c6ac <_ZN5MyPin21readValueWithDebounceEb+0x6e>
		vTaskDelay(pdMS_TO_TICKS(30));
 800c67e:	201e      	movs	r0, #30
 800c680:	f007 ffe8 	bl	8014654 <vTaskDelay>
		if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	889b      	ldrh	r3, [r3, #4]
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f000 fdb6 	bl	800d200 <HAL_GPIO_ReadPin>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	78fb      	ldrb	r3, [r7, #3]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	bf14      	ite	ne
 800c69e:	2301      	movne	r3, #1
 800c6a0:	2300      	moveq	r3, #0
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <_ZN5MyPin21readValueWithDebounceEb+0x6e>
			rs = GPIO_PIN_SET;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	73fb      	strb	r3, [r7, #15]
		}
	}
	return this->timer.getDelayTime() > 0 ? isValueWithHoldSignal(rs) : rs;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7f4 fdbf 	bl	8001234 <_ZNK10TimeTicker12getDelayTimeEv>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <_ZN5MyPin21readValueWithDebounceEb+0x96>
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bf14      	ite	ne
 800c6c2:	2301      	movne	r3, #1
 800c6c4:	2300      	moveq	r3, #0
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff ff73 	bl	800c5b6 <_ZN5MyPin21isValueWithHoldSignalEb>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	e000      	b.n	800c6d6 <_ZN5MyPin21readValueWithDebounceEb+0x98>
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	bf00      	nop
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZN12SensorReaderC1Ev>:
 */

#include <Reader/SensorReader.h>
SensorReader *SensorReader::instance = nullptr;
SemaphoreHandle_t SensorReader::mtx = nullptr;
SensorReader::SensorReader() :
 800c6e0:	b590      	push	{r4, r7, lr}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	6078      	str	r0, [r7, #4]
				MyPin(GPIOA, GPIO_PIN_7)), s3Pin(MyPin(GPIOA, GPIO_PIN_8)), s4Pin(
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorModel(
				ModelManagement::getInstance().getSensorModel()), encoderTask(
				EncoderTask(this->sensorModel->getEncodeModel(), 100.5)), rpmTask(
				RpmTask(1)) {
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	2380      	movs	r3, #128	@ 0x80
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	494c      	ldr	r1, [pc, #304]	@ (800c828 <_ZN12SensorReaderC1Ev+0x148>)
 800c6f8:	f7fe fafe 	bl	800acf8 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 800c6fc:	4a4b      	ldr	r2, [pc, #300]	@ (800c82c <_ZN12SensorReaderC1Ev+0x14c>)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	601a      	str	r2, [r3, #0]
		MyRTOSTask("SensorReader", nullptr, nullptr, 128, 1), atPin(
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f103 0020 	add.w	r0, r3, #32
 800c708:	2300      	movs	r3, #0
 800c70a:	2202      	movs	r2, #2
 800c70c:	4948      	ldr	r1, [pc, #288]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c70e:	f7ff ff25 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_1)), ptPin(MyPin(GPIOA, GPIO_PIN_2)), cmPin(
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800c718:	2300      	movs	r3, #0
 800c71a:	2204      	movs	r2, #4
 800c71c:	4944      	ldr	r1, [pc, #272]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c71e:	f7ff ff1d 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800c728:	2300      	movs	r3, #0
 800c72a:	2208      	movs	r2, #8
 800c72c:	4940      	ldr	r1, [pc, #256]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c72e:	f7ff ff15 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4, 666)), npPin(
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800c738:	f240 239a 	movw	r3, #666	@ 0x29a
 800c73c:	2210      	movs	r2, #16
 800c73e:	493c      	ldr	r1, [pc, #240]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c740:	f7ff ff0c 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c74a:	f240 239a 	movw	r3, #666	@ 0x29a
 800c74e:	2220      	movs	r2, #32
 800c750:	4937      	ldr	r1, [pc, #220]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c752:	f7ff ff03 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_5, 666)), s1Pin(MyPin(GPIOA, GPIO_PIN_6)), s2Pin(
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f103 0084 	add.w	r0, r3, #132	@ 0x84
 800c75c:	2300      	movs	r3, #0
 800c75e:	2240      	movs	r2, #64	@ 0x40
 800c760:	4933      	ldr	r1, [pc, #204]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c762:	f7ff fefb 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800c76c:	2300      	movs	r3, #0
 800c76e:	2280      	movs	r2, #128	@ 0x80
 800c770:	492f      	ldr	r1, [pc, #188]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c772:	f7ff fef3 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOA, GPIO_PIN_7)), s3Pin(MyPin(GPIOA, GPIO_PIN_8)), s4Pin(
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 800c77c:	2300      	movs	r3, #0
 800c77e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c782:	492b      	ldr	r1, [pc, #172]	@ (800c830 <_ZN12SensorReaderC1Ev+0x150>)
 800c784:	f7ff feea 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 800c78e:	2300      	movs	r3, #0
 800c790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c794:	4927      	ldr	r1, [pc, #156]	@ (800c834 <_ZN12SensorReaderC1Ev+0x154>)
 800c796:	f7ff fee1 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f103 00d4 	add.w	r0, r3, #212	@ 0xd4
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c7a6:	4923      	ldr	r1, [pc, #140]	@ (800c834 <_ZN12SensorReaderC1Ev+0x154>)
 800c7a8:	f7ff fed8 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c7b8:	491e      	ldr	r1, [pc, #120]	@ (800c834 <_ZN12SensorReaderC1Ev+0x154>)
 800c7ba:	f7ff fecf 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorModel(
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800c7ca:	491a      	ldr	r1, [pc, #104]	@ (800c834 <_ZN12SensorReaderC1Ev+0x154>)
 800c7cc:	f7ff fec6 	bl	800c55c <_ZN5MyPinC1EP12GPIO_TypeDeftm>
				ModelManagement::getInstance().getSensorModel()), encoderTask(
 800c7d0:	f7f4 fe26 	bl	8001420 <_ZN15ModelManagement11getInstanceEv>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f4 fe58 	bl	800148c <_ZN15ModelManagement14getSensorModelEv>
 800c7dc:	4602      	mov	r2, r0
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorModel(
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
				ModelManagement::getInstance().getSensorModel()), encoderTask(
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f503 748c 	add.w	r4, r3, #280	@ 0x118
				EncoderTask(this->sensorModel->getEncodeModel(), 100.5)), rpmTask(
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
				ModelManagement::getInstance().getSensorModel()), encoderTask(
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f4 fea4 	bl	800153e <_ZNK11SensorModel14getEncodeModelEv>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800c820 <_ZN12SensorReaderC1Ev+0x140>
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff fb64 	bl	800becc <_ZN11EncoderTaskC1EP11EncodeModeld>
				EncoderTask(this->sensorModel->getEncodeModel(), 100.5)), rpmTask(
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c80a:	2101      	movs	r1, #1
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fdb9 	bl	800c384 <_ZN7RpmTaskC1Et>
}
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd90      	pop	{r4, r7, pc}
 800c81c:	f3af 8000 	nop.w
 800c820:	00000000 	.word	0x00000000
 800c824:	40592000 	.word	0x40592000
 800c828:	08019dc4 	.word	0x08019dc4
 800c82c:	0801a048 	.word	0x0801a048
 800c830:	40020000 	.word	0x40020000
 800c834:	40020400 	.word	0x40020400

0800c838 <_ZN12SensorReaderD1Ev>:

SensorReader::~SensorReader() {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	4a0b      	ldr	r2, [pc, #44]	@ (800c870 <_ZN12SensorReaderD1Ev+0x38>)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
}
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fe63 	bl	800c518 <_ZN7RpmTaskD1Ev>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff fcf5 	bl	800c248 <_ZN11EncoderTaskD1Ev>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fa71 	bl	800ad48 <_ZN10MyRTOSTaskD1Ev>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	0801a048 	.word	0x0801a048

0800c874 <_ZN12SensorReaderD0Ev>:
SensorReader::~SensorReader() {
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
}
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff ffdb 	bl	800c838 <_ZN12SensorReaderD1Ev>
 800c882:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f00a fa0e 	bl	8016ca8 <_ZdlPvj>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <_ZN12SensorReader15handleInterruptEt>:

void SensorReader::handleInterrupt(uint16_t pin) {
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	807b      	strh	r3, [r7, #2]
	this->encoderTask.interruptCallback(pin);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800c8a8:	887a      	ldrh	r2, [r7, #2]
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff fd11 	bl	800c2d4 <_ZN7IRQTask17interruptCallbackEt>
	this->rpmTask.interruptCallback(pin);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c8b8:	887a      	ldrh	r2, [r7, #2]
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7ff fd09 	bl	800c2d4 <_ZN7IRQTask17interruptCallbackEt>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <_ZN12SensorReader11getInstanceEv>:

SensorModel* SensorReader::getSensorModel() {
	return this->sensorModel;
}

SensorReader& SensorReader::getInstance() {
 800c8cc:	b598      	push	{r3, r4, r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 800c8d0:	4b1b      	ldr	r3, [pc, #108]	@ (800c940 <_ZN12SensorReader11getInstanceEv+0x74>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d12e      	bne.n	800c936 <_ZN12SensorReader11getInstanceEv+0x6a>
		if (mtx == nullptr) {
 800c8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c944 <_ZN12SensorReader11getInstanceEv+0x78>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d105      	bne.n	800c8ec <_ZN12SensorReader11getInstanceEv+0x20>
			mtx = xSemaphoreCreateMutex();
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	f006 fec4 	bl	801366e <xQueueCreateMutex>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4a16      	ldr	r2, [pc, #88]	@ (800c944 <_ZN12SensorReader11getInstanceEv+0x78>)
 800c8ea:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mtx, portMAX_DELAY) == pdTRUE) {
 800c8ec:	4b15      	ldr	r3, [pc, #84]	@ (800c944 <_ZN12SensorReader11getInstanceEv+0x78>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f04f 31ff 	mov.w	r1, #4294967295
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f007 f9e5 	bl	8013cc4 <xQueueSemaphoreTake>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	bf0c      	ite	eq
 800c900:	2301      	moveq	r3, #1
 800c902:	2300      	movne	r3, #0
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d015      	beq.n	800c936 <_ZN12SensorReader11getInstanceEv+0x6a>
			if (instance == nullptr) {
 800c90a:	4b0d      	ldr	r3, [pc, #52]	@ (800c940 <_ZN12SensorReader11getInstanceEv+0x74>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d10a      	bne.n	800c928 <_ZN12SensorReader11getInstanceEv+0x5c>
				instance = new SensorReader();
 800c912:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 800c916:	f00a f9c9 	bl	8016cac <_Znwj>
 800c91a:	4603      	mov	r3, r0
 800c91c:	461c      	mov	r4, r3
 800c91e:	4620      	mov	r0, r4
 800c920:	f7ff fede 	bl	800c6e0 <_ZN12SensorReaderC1Ev>
 800c924:	4b06      	ldr	r3, [pc, #24]	@ (800c940 <_ZN12SensorReader11getInstanceEv+0x74>)
 800c926:	601c      	str	r4, [r3, #0]
			}
			xSemaphoreGive(mtx);
 800c928:	4b06      	ldr	r3, [pc, #24]	@ (800c944 <_ZN12SensorReader11getInstanceEv+0x78>)
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	2300      	movs	r3, #0
 800c92e:	2200      	movs	r2, #0
 800c930:	2100      	movs	r1, #0
 800c932:	f006 feb5 	bl	80136a0 <xQueueGenericSend>
		}
	}
	return *instance;
 800c936:	4b02      	ldr	r3, [pc, #8]	@ (800c940 <_ZN12SensorReader11getInstanceEv+0x74>)
 800c938:	681b      	ldr	r3, [r3, #0]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	bd98      	pop	{r3, r4, r7, pc}
 800c93e:	bf00      	nop
 800c940:	200003ec 	.word	0x200003ec
 800c944:	200003f0 	.word	0x200003f0

0800c948 <_ZN12SensorReader13getGearNumberEv>:

int SensorReader::getGearNumber() {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
	bool s1 = this->s1Pin.readValueWithDebounce(), s2 =
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3384      	adds	r3, #132	@ 0x84
 800c954:	2100      	movs	r1, #0
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fe71 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	bf14      	ite	ne
 800c962:	2301      	movne	r3, #1
 800c964:	2300      	moveq	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
			this->s2Pin.readValueWithDebounce(), s3 =
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3398      	adds	r3, #152	@ 0x98
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff fe65 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	bf14      	ite	ne
 800c97a:	2301      	movne	r3, #1
 800c97c:	2300      	moveq	r3, #0
 800c97e:	73bb      	strb	r3, [r7, #14]
			this->s3Pin.readValueWithDebounce(), s4 =
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	33ac      	adds	r3, #172	@ 0xac
 800c984:	2100      	movs	r1, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fe59 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bf14      	ite	ne
 800c992:	2301      	movne	r3, #1
 800c994:	2300      	moveq	r3, #0
 800c996:	737b      	strb	r3, [r7, #13]
			this->s4Pin.readValueWithDebounce();
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	33c0      	adds	r3, #192	@ 0xc0
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fe4d 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	bf14      	ite	ne
 800c9aa:	2301      	movne	r3, #1
 800c9ac:	2300      	moveq	r3, #0
 800c9ae:	733b      	strb	r3, [r7, #12]
	if (s3) {
 800c9b0:	7b7b      	ldrb	r3, [r7, #13]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00e      	beq.n	800c9d4 <_ZN12SensorReader13getGearNumberEv+0x8c>
		if (s1) {
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <_ZN12SensorReader13getGearNumberEv+0x78>
			return 3;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e014      	b.n	800c9ea <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s2) {
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <_ZN12SensorReader13getGearNumberEv+0x82>
			return 4;
 800c9c6:	2304      	movs	r3, #4
 800c9c8:	e00f      	b.n	800c9ea <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
		if (s4) {
 800c9ca:	7b3b      	ldrb	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <_ZN12SensorReader13getGearNumberEv+0x8c>
			return 5;
 800c9d0:	2305      	movs	r3, #5
 800c9d2:	e00a      	b.n	800c9ea <_ZN12SensorReader13getGearNumberEv+0xa2>
		}
	}
	if (s1) {
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <_ZN12SensorReader13getGearNumberEv+0x96>
		return 1;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e005      	b.n	800c9ea <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	if (s2) {
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <_ZN12SensorReader13getGearNumberEv+0xa0>
		return 2;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	e000      	b.n	800c9ea <_ZN12SensorReader13getGearNumberEv+0xa2>
	}
	return 0;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
	...

0800c9f4 <_ZN12SensorReader3runEv>:

void SensorReader::run() {
 800c9f4:	b590      	push	{r4, r7, lr}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	this->encoderTask.start();
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fa0a 	bl	800ae1c <_ZN10MyRTOSTask5startEv>
	this->rpmTask.start();
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe fa04 	bl	800ae1c <_ZN10MyRTOSTask5startEv>
	this->stopTask = false;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	771a      	strb	r2, [r3, #28]
	while (!this->stopTask) {
 800ca1a:	e0c1      	b.n	800cba0 <_ZN12SensorReader3runEv+0x1ac>
		this->sensorModel->setAt(this->atPin.readValueWithDebounce());
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3320      	adds	r3, #32
 800ca26:	2100      	movs	r1, #0
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff fe08 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	bf14      	ite	ne
 800ca34:	2301      	movne	r3, #1
 800ca36:	2300      	moveq	r3, #0
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7f4 fd6f 	bl	8001520 <_ZN11SensorModel5setAtEb>
		this->sensorModel->setPt(this->ptPin.readValueWithDebounce());
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3334      	adds	r3, #52	@ 0x34
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff fdf5 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bf14      	ite	ne
 800ca5a:	2301      	movne	r3, #1
 800ca5c:	2300      	moveq	r3, #0
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	4619      	mov	r1, r3
 800ca62:	4620      	mov	r0, r4
 800ca64:	f7f4 fdd7 	bl	8001616 <_ZN11SensorModel5setPtEb>
		this->sensorModel->setCm(this->cmPin.readValueWithDebounce());
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3348      	adds	r3, #72	@ 0x48
 800ca72:	2100      	movs	r1, #0
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff fde2 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bf14      	ite	ne
 800ca80:	2301      	movne	r3, #1
 800ca82:	2300      	moveq	r3, #0
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	4619      	mov	r1, r3
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f7f4 fd70 	bl	800156e <_ZN11SensorModel5setCmEb>
		this->sensorModel->setNt(this->ntPin.readValueWithDebounce());
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	335c      	adds	r3, #92	@ 0x5c
 800ca98:	2100      	movs	r1, #0
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff fdcf 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bf14      	ite	ne
 800caa6:	2301      	movne	r3, #1
 800caa8:	2300      	moveq	r3, #0
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	4619      	mov	r1, r3
 800caae:	4620      	mov	r0, r4
 800cab0:	f7f4 fda2 	bl	80015f8 <_ZN11SensorModel5setNtEb>
		this->sensorModel->setNp(this->npPin.readValueWithDebounce());
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3370      	adds	r3, #112	@ 0x70
 800cabe:	2100      	movs	r1, #0
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fdbc 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	bf14      	ite	ne
 800cacc:	2301      	movne	r3, #1
 800cace:	2300      	moveq	r3, #0
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	4619      	mov	r1, r3
 800cad4:	4620      	mov	r0, r4
 800cad6:	f7f4 fd74 	bl	80015c2 <_ZN11SensorModel5setNpEb>
		this->sensorModel->setT1(this->t1Pin.readValueWithDebounce());
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	33d4      	adds	r3, #212	@ 0xd4
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fda9 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	bf14      	ite	ne
 800caf2:	2301      	movne	r3, #1
 800caf4:	2300      	moveq	r3, #0
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	4619      	mov	r1, r3
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7f4 fdb5 	bl	800166a <_ZN11SensorModel5setT1Eb>
		this->sensorModel->setT2(this->t2Pin.readValueWithDebounce());
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	33e8      	adds	r3, #232	@ 0xe8
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff fd96 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bf14      	ite	ne
 800cb18:	2301      	movne	r3, #1
 800cb1a:	2300      	moveq	r3, #0
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4620      	mov	r0, r4
 800cb22:	f7f4 fdb1 	bl	8001688 <_ZN11SensorModel5setT2Eb>
		this->sensorModel->setT3(this->t3Pin.readValueWithDebounce());
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	33fc      	adds	r3, #252	@ 0xfc
 800cb30:	2100      	movs	r1, #0
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fd83 	bl	800c63e <_ZN5MyPin21readValueWithDebounceEb>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bf14      	ite	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	2300      	moveq	r3, #0
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	4619      	mov	r1, r3
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7f4 fdad 	bl	80016a6 <_ZN11SensorModel5setT3Eb>
		this->sensorModel->setGear(this->getGearNumber());
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fef8 	bl	800c948 <_ZN12SensorReader13getGearNumberEv>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7f4 fd14 	bl	800158c <_ZN11SensorModel7setGearEh>
		this->sensorModel->setRpm(this->rpmTask.getValue());
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 4110 	ldr.w	r4, [r3, #272]	@ 0x110
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff fc65 	bl	800c440 <_ZN7RpmTask8getValueEv>
 800cb76:	4603      	mov	r3, r0
 800cb78:	4619      	mov	r1, r3
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f7f4 fd66 	bl	800164c <_ZN11SensorModel6setRpmEt>
		this->encoderTask.getEncoderModel();
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fa6e 	bl	800c068 <_ZN11EncoderTask15getEncoderModelEv>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800cb8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cb90:	480a      	ldr	r0, [pc, #40]	@ (800cbbc <_ZN12SensorReader3runEv+0x1c8>)
 800cb92:	f000 fb66 	bl	800d262 <HAL_GPIO_TogglePin>
		delay(100);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2164      	movs	r1, #100	@ 0x64
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe f902 	bl	800ada4 <_ZN10MyRTOSTask5delayEm>
	while (!this->stopTask) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7f1b      	ldrb	r3, [r3, #28]
 800cba4:	f083 0301 	eor.w	r3, r3, #1
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f47f af36 	bne.w	800ca1c <_ZN12SensorReader3runEv+0x28>
	}
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	370c      	adds	r7, #12
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd90      	pop	{r4, r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40020800 	.word	0x40020800

0800cbc0 <_ZN12SensorReader4stopEv>:

void SensorReader::stop() {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	this->encoderTask.stop();
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe f948 	bl	800ae64 <_ZN10MyRTOSTask4stopEv>
	this->rpmTask.stop();
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe f942 	bl	800ae64 <_ZN10MyRTOSTask4stopEv>
	MyRTOSTask::stop();
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe f93e 	bl	800ae64 <_ZN10MyRTOSTask4stopEv>
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	80fb      	strh	r3, [r7, #6]
	SensorReader::getInstance().handleInterrupt(pin);
 800cbfa:	f7ff fe67 	bl	800c8cc <_ZN12SensorReader11getInstanceEv>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	88fb      	ldrh	r3, [r7, #6]
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f7ff fe46 	bl	800c896 <_ZN12SensorReader15handleInterruptEt>
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cc14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800cc4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800cc18:	f7ff f924 	bl	800be64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cc1c:	480c      	ldr	r0, [pc, #48]	@ (800cc50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800cc1e:	490d      	ldr	r1, [pc, #52]	@ (800cc54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800cc20:	4a0d      	ldr	r2, [pc, #52]	@ (800cc58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800cc22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cc24:	e002      	b.n	800cc2c <LoopCopyDataInit>

0800cc26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cc26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cc28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cc2a:	3304      	adds	r3, #4

0800cc2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cc2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cc2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cc30:	d3f9      	bcc.n	800cc26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cc32:	4a0a      	ldr	r2, [pc, #40]	@ (800cc5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800cc34:	4c0a      	ldr	r4, [pc, #40]	@ (800cc60 <LoopFillZerobss+0x22>)
  movs r3, #0
 800cc36:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cc38:	e001      	b.n	800cc3e <LoopFillZerobss>

0800cc3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cc3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cc3c:	3204      	adds	r2, #4

0800cc3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cc3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cc40:	d3fb      	bcc.n	800cc3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800cc42:	f00b f8d5 	bl	8017df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc46:	f7fe f97b 	bl	800af40 <main>
  bx  lr    
 800cc4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cc4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800cc50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cc54:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 800cc58:	0801a410 	.word	0x0801a410
  ldr r2, =_sbss
 800cc5c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800cc60:	20006314 	.word	0x20006314

0800cc64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cc64:	e7fe      	b.n	800cc64 <ADC_IRQHandler>
	...

0800cc68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cc6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cca8 <HAL_Init+0x40>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a0d      	ldr	r2, [pc, #52]	@ (800cca8 <HAL_Init+0x40>)
 800cc72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cc78:	4b0b      	ldr	r3, [pc, #44]	@ (800cca8 <HAL_Init+0x40>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800cca8 <HAL_Init+0x40>)
 800cc7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cc82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cc84:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <HAL_Init+0x40>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a07      	ldr	r2, [pc, #28]	@ (800cca8 <HAL_Init+0x40>)
 800cc8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cc90:	2003      	movs	r0, #3
 800cc92:	f000 f8fc 	bl	800ce8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cc96:	200f      	movs	r0, #15
 800cc98:	f7fe ff58 	bl	800bb4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cc9c:	f7fe ff2a 	bl	800baf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	40023c00 	.word	0x40023c00

0800ccac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ccac:	b480      	push	{r7}
 800ccae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ccb0:	4b06      	ldr	r3, [pc, #24]	@ (800cccc <HAL_IncTick+0x20>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4b06      	ldr	r3, [pc, #24]	@ (800ccd0 <HAL_IncTick+0x24>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4413      	add	r3, r2
 800ccbc:	4a04      	ldr	r2, [pc, #16]	@ (800ccd0 <HAL_IncTick+0x24>)
 800ccbe:	6013      	str	r3, [r2, #0]
}
 800ccc0:	bf00      	nop
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	2000000c 	.word	0x2000000c
 800ccd0:	200003f4 	.word	0x200003f4

0800ccd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	af00      	add	r7, sp, #0
  return uwTick;
 800ccd8:	4b03      	ldr	r3, [pc, #12]	@ (800cce8 <HAL_GetTick+0x14>)
 800ccda:	681b      	ldr	r3, [r3, #0]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	200003f4 	.word	0x200003f4

0800ccec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ccf4:	f7ff ffee 	bl	800ccd4 <HAL_GetTick>
 800ccf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd04:	d005      	beq.n	800cd12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cd06:	4b0a      	ldr	r3, [pc, #40]	@ (800cd30 <HAL_Delay+0x44>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4413      	add	r3, r2
 800cd10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cd12:	bf00      	nop
 800cd14:	f7ff ffde 	bl	800ccd4 <HAL_GetTick>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d8f7      	bhi.n	800cd14 <HAL_Delay+0x28>
  {
  }
}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	2000000c 	.word	0x2000000c

0800cd34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd44:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <__NVIC_SetPriorityGrouping+0x44>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cd50:	4013      	ands	r3, r2
 800cd52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cd5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cd60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cd66:	4a04      	ldr	r2, [pc, #16]	@ (800cd78 <__NVIC_SetPriorityGrouping+0x44>)
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	60d3      	str	r3, [r2, #12]
}
 800cd6c:	bf00      	nop
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	e000ed00 	.word	0xe000ed00

0800cd7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd80:	4b04      	ldr	r3, [pc, #16]	@ (800cd94 <__NVIC_GetPriorityGrouping+0x18>)
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	0a1b      	lsrs	r3, r3, #8
 800cd86:	f003 0307 	and.w	r3, r3, #7
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	e000ed00 	.word	0xe000ed00

0800cd98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cda2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	db0b      	blt.n	800cdc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	f003 021f 	and.w	r2, r3, #31
 800cdb0:	4907      	ldr	r1, [pc, #28]	@ (800cdd0 <__NVIC_EnableIRQ+0x38>)
 800cdb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdb6:	095b      	lsrs	r3, r3, #5
 800cdb8:	2001      	movs	r0, #1
 800cdba:	fa00 f202 	lsl.w	r2, r0, r2
 800cdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	e000e100 	.word	0xe000e100

0800cdd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	6039      	str	r1, [r7, #0]
 800cdde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cde0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	db0a      	blt.n	800cdfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	490c      	ldr	r1, [pc, #48]	@ (800ce20 <__NVIC_SetPriority+0x4c>)
 800cdee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf2:	0112      	lsls	r2, r2, #4
 800cdf4:	b2d2      	uxtb	r2, r2
 800cdf6:	440b      	add	r3, r1
 800cdf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cdfc:	e00a      	b.n	800ce14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	4908      	ldr	r1, [pc, #32]	@ (800ce24 <__NVIC_SetPriority+0x50>)
 800ce04:	79fb      	ldrb	r3, [r7, #7]
 800ce06:	f003 030f 	and.w	r3, r3, #15
 800ce0a:	3b04      	subs	r3, #4
 800ce0c:	0112      	lsls	r2, r2, #4
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	440b      	add	r3, r1
 800ce12:	761a      	strb	r2, [r3, #24]
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	e000e100 	.word	0xe000e100
 800ce24:	e000ed00 	.word	0xe000ed00

0800ce28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b089      	sub	sp, #36	@ 0x24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	f1c3 0307 	rsb	r3, r3, #7
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	bf28      	it	cs
 800ce46:	2304      	movcs	r3, #4
 800ce48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	2b06      	cmp	r3, #6
 800ce50:	d902      	bls.n	800ce58 <NVIC_EncodePriority+0x30>
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	3b03      	subs	r3, #3
 800ce56:	e000      	b.n	800ce5a <NVIC_EncodePriority+0x32>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	fa02 f303 	lsl.w	r3, r2, r3
 800ce66:	43da      	mvns	r2, r3
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	401a      	ands	r2, r3
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce70:	f04f 31ff 	mov.w	r1, #4294967295
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	fa01 f303 	lsl.w	r3, r1, r3
 800ce7a:	43d9      	mvns	r1, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce80:	4313      	orrs	r3, r2
         );
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3724      	adds	r7, #36	@ 0x24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b082      	sub	sp, #8
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7ff ff4c 	bl	800cd34 <__NVIC_SetPriorityGrouping>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ceb6:	f7ff ff61 	bl	800cd7c <__NVIC_GetPriorityGrouping>
 800ceba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	6978      	ldr	r0, [r7, #20]
 800cec2:	f7ff ffb1 	bl	800ce28 <NVIC_EncodePriority>
 800cec6:	4602      	mov	r2, r0
 800cec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cecc:	4611      	mov	r1, r2
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff ff80 	bl	800cdd4 <__NVIC_SetPriority>
}
 800ced4:	bf00      	nop
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff ff54 	bl	800cd98 <__NVIC_EnableIRQ>
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b089      	sub	sp, #36	@ 0x24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cf0e:	2300      	movs	r3, #0
 800cf10:	61fb      	str	r3, [r7, #28]
 800cf12:	e159      	b.n	800d1c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cf14:	2201      	movs	r2, #1
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	fa02 f303 	lsl.w	r3, r2, r3
 800cf1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	4013      	ands	r3, r2
 800cf26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	f040 8148 	bne.w	800d1c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f003 0303 	and.w	r3, r3, #3
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d005      	beq.n	800cf4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d130      	bne.n	800cfac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	2203      	movs	r2, #3
 800cf56:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5a:	43db      	mvns	r3, r3
 800cf5c:	69ba      	ldr	r2, [r7, #24]
 800cf5e:	4013      	ands	r3, r2
 800cf60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cf80:	2201      	movs	r2, #1
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	fa02 f303 	lsl.w	r3, r2, r3
 800cf88:	43db      	mvns	r3, r3
 800cf8a:	69ba      	ldr	r2, [r7, #24]
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	091b      	lsrs	r3, r3, #4
 800cf96:	f003 0201 	and.w	r2, r3, #1
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa0:	69ba      	ldr	r2, [r7, #24]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	f003 0303 	and.w	r3, r3, #3
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d017      	beq.n	800cfe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	2203      	movs	r2, #3
 800cfc4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc8:	43db      	mvns	r3, r3
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	4013      	ands	r3, r2
 800cfce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	689a      	ldr	r2, [r3, #8]
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	f003 0303 	and.w	r3, r3, #3
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d123      	bne.n	800d03c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	08da      	lsrs	r2, r3, #3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3208      	adds	r2, #8
 800cffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	f003 0307 	and.w	r3, r3, #7
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	220f      	movs	r2, #15
 800d00c:	fa02 f303 	lsl.w	r3, r2, r3
 800d010:	43db      	mvns	r3, r3
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	4013      	ands	r3, r2
 800d016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	691a      	ldr	r2, [r3, #16]
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	fa02 f303 	lsl.w	r3, r2, r3
 800d028:	69ba      	ldr	r2, [r7, #24]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	08da      	lsrs	r2, r3, #3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3208      	adds	r2, #8
 800d036:	69b9      	ldr	r1, [r7, #24]
 800d038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	2203      	movs	r2, #3
 800d048:	fa02 f303 	lsl.w	r3, r2, r3
 800d04c:	43db      	mvns	r3, r3
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	4013      	ands	r3, r2
 800d052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	f003 0203 	and.w	r2, r3, #3
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	fa02 f303 	lsl.w	r3, r2, r3
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	4313      	orrs	r3, r2
 800d068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80a2 	beq.w	800d1c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	4b57      	ldr	r3, [pc, #348]	@ (800d1e0 <HAL_GPIO_Init+0x2e8>)
 800d084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d086:	4a56      	ldr	r2, [pc, #344]	@ (800d1e0 <HAL_GPIO_Init+0x2e8>)
 800d088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d08c:	6453      	str	r3, [r2, #68]	@ 0x44
 800d08e:	4b54      	ldr	r3, [pc, #336]	@ (800d1e0 <HAL_GPIO_Init+0x2e8>)
 800d090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d09a:	4a52      	ldr	r2, [pc, #328]	@ (800d1e4 <HAL_GPIO_Init+0x2ec>)
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	089b      	lsrs	r3, r3, #2
 800d0a0:	3302      	adds	r3, #2
 800d0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	f003 0303 	and.w	r3, r3, #3
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	220f      	movs	r2, #15
 800d0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b6:	43db      	mvns	r3, r3
 800d0b8:	69ba      	ldr	r2, [r7, #24]
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a49      	ldr	r2, [pc, #292]	@ (800d1e8 <HAL_GPIO_Init+0x2f0>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d019      	beq.n	800d0fa <HAL_GPIO_Init+0x202>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a48      	ldr	r2, [pc, #288]	@ (800d1ec <HAL_GPIO_Init+0x2f4>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d013      	beq.n	800d0f6 <HAL_GPIO_Init+0x1fe>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a47      	ldr	r2, [pc, #284]	@ (800d1f0 <HAL_GPIO_Init+0x2f8>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d00d      	beq.n	800d0f2 <HAL_GPIO_Init+0x1fa>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a46      	ldr	r2, [pc, #280]	@ (800d1f4 <HAL_GPIO_Init+0x2fc>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d007      	beq.n	800d0ee <HAL_GPIO_Init+0x1f6>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a45      	ldr	r2, [pc, #276]	@ (800d1f8 <HAL_GPIO_Init+0x300>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d101      	bne.n	800d0ea <HAL_GPIO_Init+0x1f2>
 800d0e6:	2304      	movs	r3, #4
 800d0e8:	e008      	b.n	800d0fc <HAL_GPIO_Init+0x204>
 800d0ea:	2307      	movs	r3, #7
 800d0ec:	e006      	b.n	800d0fc <HAL_GPIO_Init+0x204>
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e004      	b.n	800d0fc <HAL_GPIO_Init+0x204>
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e002      	b.n	800d0fc <HAL_GPIO_Init+0x204>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e000      	b.n	800d0fc <HAL_GPIO_Init+0x204>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	69fa      	ldr	r2, [r7, #28]
 800d0fe:	f002 0203 	and.w	r2, r2, #3
 800d102:	0092      	lsls	r2, r2, #2
 800d104:	4093      	lsls	r3, r2
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	4313      	orrs	r3, r2
 800d10a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d10c:	4935      	ldr	r1, [pc, #212]	@ (800d1e4 <HAL_GPIO_Init+0x2ec>)
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	089b      	lsrs	r3, r3, #2
 800d112:	3302      	adds	r3, #2
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d11a:	4b38      	ldr	r3, [pc, #224]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	43db      	mvns	r3, r3
 800d124:	69ba      	ldr	r2, [r7, #24]
 800d126:	4013      	ands	r3, r2
 800d128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d13e:	4a2f      	ldr	r2, [pc, #188]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d144:	4b2d      	ldr	r3, [pc, #180]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	43db      	mvns	r3, r3
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	4013      	ands	r3, r2
 800d152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d003      	beq.n	800d168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800d160:	69ba      	ldr	r2, [r7, #24]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	4313      	orrs	r3, r2
 800d166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d168:	4a24      	ldr	r2, [pc, #144]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d16e:	4b23      	ldr	r3, [pc, #140]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	43db      	mvns	r3, r3
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	4013      	ands	r3, r2
 800d17c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800d18a:	69ba      	ldr	r2, [r7, #24]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	4313      	orrs	r3, r2
 800d190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d192:	4a1a      	ldr	r2, [pc, #104]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d198:	4b18      	ldr	r3, [pc, #96]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	69ba      	ldr	r2, [r7, #24]
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d1fc <HAL_GPIO_Init+0x304>)
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	2b0f      	cmp	r3, #15
 800d1cc:	f67f aea2 	bls.w	800cf14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	3724      	adds	r7, #36	@ 0x24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	40023800 	.word	0x40023800
 800d1e4:	40013800 	.word	0x40013800
 800d1e8:	40020000 	.word	0x40020000
 800d1ec:	40020400 	.word	0x40020400
 800d1f0:	40020800 	.word	0x40020800
 800d1f4:	40020c00 	.word	0x40020c00
 800d1f8:	40021000 	.word	0x40021000
 800d1fc:	40013c00 	.word	0x40013c00

0800d200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691a      	ldr	r2, [r3, #16]
 800d210:	887b      	ldrh	r3, [r7, #2]
 800d212:	4013      	ands	r3, r2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d218:	2301      	movs	r3, #1
 800d21a:	73fb      	strb	r3, [r7, #15]
 800d21c:	e001      	b.n	800d222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	807b      	strh	r3, [r7, #2]
 800d23c:	4613      	mov	r3, r2
 800d23e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d240:	787b      	ldrb	r3, [r7, #1]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d246:	887a      	ldrh	r2, [r7, #2]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d24c:	e003      	b.n	800d256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d24e:	887b      	ldrh	r3, [r7, #2]
 800d250:	041a      	lsls	r2, r3, #16
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	619a      	str	r2, [r3, #24]
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d262:	b480      	push	{r7}
 800d264:	b085      	sub	sp, #20
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	460b      	mov	r3, r1
 800d26c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d274:	887a      	ldrh	r2, [r7, #2]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4013      	ands	r3, r2
 800d27a:	041a      	lsls	r2, r3, #16
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	43d9      	mvns	r1, r3
 800d280:	887b      	ldrh	r3, [r7, #2]
 800d282:	400b      	ands	r3, r1
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	619a      	str	r2, [r3, #24]
}
 800d28a:	bf00      	nop
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d2a2:	4b08      	ldr	r3, [pc, #32]	@ (800d2c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d2a4:	695a      	ldr	r2, [r3, #20]
 800d2a6:	88fb      	ldrh	r3, [r7, #6]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d006      	beq.n	800d2bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d2ae:	4a05      	ldr	r2, [pc, #20]	@ (800d2c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d2b0:	88fb      	ldrh	r3, [r7, #6]
 800d2b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d2b4:	88fb      	ldrh	r3, [r7, #6]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fc9a 	bl	800cbf0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	40013c00 	.word	0x40013c00

0800d2c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e101      	b.n	800d4de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f009 f9cd 	bl	8016694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2203      	movs	r2, #3
 800d2fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d308:	d102      	bne.n	800d310 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4618      	mov	r0, r3
 800d316:	f002 fc24 	bl	800fb62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	7c1a      	ldrb	r2, [r3, #16]
 800d322:	f88d 2000 	strb.w	r2, [sp]
 800d326:	3304      	adds	r3, #4
 800d328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d32a:	f002 fb03 	bl	800f934 <USB_CoreInit>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d005      	beq.n	800d340 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2202      	movs	r2, #2
 800d338:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e0ce      	b.n	800d4de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f002 fc1c 	bl	800fb84 <USB_SetCurrentMode>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d005      	beq.n	800d35e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2202      	movs	r2, #2
 800d356:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	e0bf      	b.n	800d4de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]
 800d362:	e04a      	b.n	800d3fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d364:	7bfa      	ldrb	r2, [r7, #15]
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	4613      	mov	r3, r2
 800d36a:	00db      	lsls	r3, r3, #3
 800d36c:	4413      	add	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	3315      	adds	r3, #21
 800d374:	2201      	movs	r2, #1
 800d376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d378:	7bfa      	ldrb	r2, [r7, #15]
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4613      	mov	r3, r2
 800d37e:	00db      	lsls	r3, r3, #3
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	3314      	adds	r3, #20
 800d388:	7bfa      	ldrb	r2, [r7, #15]
 800d38a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d38c:	7bfa      	ldrb	r2, [r7, #15]
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	b298      	uxth	r0, r3
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4613      	mov	r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	332e      	adds	r3, #46	@ 0x2e
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d3a4:	7bfa      	ldrb	r2, [r7, #15]
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	3318      	adds	r3, #24
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d3b8:	7bfa      	ldrb	r2, [r7, #15]
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	440b      	add	r3, r1
 800d3c6:	331c      	adds	r3, #28
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d3cc:	7bfa      	ldrb	r2, [r7, #15]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	3320      	adds	r3, #32
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d3e0:	7bfa      	ldrb	r2, [r7, #15]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	440b      	add	r3, r1
 800d3ee:	3324      	adds	r3, #36	@ 0x24
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	73fb      	strb	r3, [r7, #15]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	791b      	ldrb	r3, [r3, #4]
 800d3fe:	7bfa      	ldrb	r2, [r7, #15]
 800d400:	429a      	cmp	r2, r3
 800d402:	d3af      	bcc.n	800d364 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
 800d408:	e044      	b.n	800d494 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d40a:	7bfa      	ldrb	r2, [r7, #15]
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	4613      	mov	r3, r2
 800d410:	00db      	lsls	r3, r3, #3
 800d412:	4413      	add	r3, r2
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	440b      	add	r3, r1
 800d418:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d420:	7bfa      	ldrb	r2, [r7, #15]
 800d422:	6879      	ldr	r1, [r7, #4]
 800d424:	4613      	mov	r3, r2
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	4413      	add	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	440b      	add	r3, r1
 800d42e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800d432:	7bfa      	ldrb	r2, [r7, #15]
 800d434:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d436:	7bfa      	ldrb	r2, [r7, #15]
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	4613      	mov	r3, r2
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	4413      	add	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	440b      	add	r3, r1
 800d444:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d448:	2200      	movs	r2, #0
 800d44a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d44c:	7bfa      	ldrb	r2, [r7, #15]
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	4613      	mov	r3, r2
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	440b      	add	r3, r1
 800d45a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d462:	7bfa      	ldrb	r2, [r7, #15]
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	4613      	mov	r3, r2
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	4413      	add	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	440b      	add	r3, r1
 800d470:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d474:	2200      	movs	r2, #0
 800d476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d478:	7bfa      	ldrb	r2, [r7, #15]
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	4613      	mov	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	4413      	add	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	440b      	add	r3, r1
 800d486:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	3301      	adds	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	791b      	ldrb	r3, [r3, #4]
 800d498:	7bfa      	ldrb	r2, [r7, #15]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d3b5      	bcc.n	800d40a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7c1a      	ldrb	r2, [r3, #16]
 800d4a6:	f88d 2000 	strb.w	r2, [sp]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4ae:	f002 fbb5 	bl	800fc1c <USB_DevInit>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d005      	beq.n	800d4c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e00c      	b.n	800d4de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f003 fbff 	bl	8010cda <USB_DevDisconnect>

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <HAL_PCD_Start+0x1c>
 800d4fe:	2302      	movs	r3, #2
 800d500:	e022      	b.n	800d548 <HAL_PCD_Start+0x62>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d105      	bne.n	800d52a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d522:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	f002 fb06 	bl	800fb40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f003 fbad 	bl	8010c98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b08d      	sub	sp, #52	@ 0x34
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	f003 fc6b 	bl	8010e42 <USB_GetMode>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f040 848c 	bne.w	800de8c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	f003 fbcf 	bl	8010d1c <USB_ReadInterrupts>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 8482 	beq.w	800de8a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	0a1b      	lsrs	r3, r3, #8
 800d590:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f003 fbbc 	bl	8010d1c <USB_ReadInterrupts>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d107      	bne.n	800d5be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	695a      	ldr	r2, [r3, #20]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f002 0202 	and.w	r2, r2, #2
 800d5bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f003 fbaa 	bl	8010d1c <USB_ReadInterrupts>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f003 0310 	and.w	r3, r3, #16
 800d5ce:	2b10      	cmp	r3, #16
 800d5d0:	d161      	bne.n	800d696 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	699a      	ldr	r2, [r3, #24]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f022 0210 	bic.w	r2, r2, #16
 800d5e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	f003 020f 	and.w	r2, r3, #15
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	3304      	adds	r3, #4
 800d600:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	0c5b      	lsrs	r3, r3, #17
 800d606:	f003 030f 	and.w	r3, r3, #15
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d124      	bne.n	800d658 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800d614:	4013      	ands	r3, r2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d035      	beq.n	800d686 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	091b      	lsrs	r3, r3, #4
 800d622:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d628:	b29b      	uxth	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	6a38      	ldr	r0, [r7, #32]
 800d62e:	f003 f9e1 	bl	80109f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	091b      	lsrs	r3, r3, #4
 800d63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d63e:	441a      	add	r2, r3
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	695a      	ldr	r2, [r3, #20]
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	091b      	lsrs	r3, r3, #4
 800d64c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d650:	441a      	add	r2, r3
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	615a      	str	r2, [r3, #20]
 800d656:	e016      	b.n	800d686 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	0c5b      	lsrs	r3, r3, #17
 800d65c:	f003 030f 	and.w	r3, r3, #15
 800d660:	2b06      	cmp	r3, #6
 800d662:	d110      	bne.n	800d686 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d66a:	2208      	movs	r2, #8
 800d66c:	4619      	mov	r1, r3
 800d66e:	6a38      	ldr	r0, [r7, #32]
 800d670:	f003 f9c0 	bl	80109f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	695a      	ldr	r2, [r3, #20]
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	091b      	lsrs	r3, r3, #4
 800d67c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d680:	441a      	add	r2, r3
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	699a      	ldr	r2, [r3, #24]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f042 0210 	orr.w	r2, r2, #16
 800d694:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f003 fb3e 	bl	8010d1c <USB_ReadInterrupts>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d6a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d6aa:	f040 80a7 	bne.w	800d7fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f003 fb43 	bl	8010d42 <USB_ReadDevAllOutEpInterrupt>
 800d6bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800d6be:	e099      	b.n	800d7f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 808e 	beq.w	800d7e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f003 fb67 	bl	8010daa <USB_ReadDevOutEPInterrupt>
 800d6dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00c      	beq.n	800d702 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	015a      	lsls	r2, r3, #5
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d6fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fea3 	bl	800e448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f003 0308 	and.w	r3, r3, #8
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00c      	beq.n	800d726 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d718:	461a      	mov	r2, r3
 800d71a:	2308      	movs	r3, #8
 800d71c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d71e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 ff79 	bl	800e618 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	f003 0310 	and.w	r3, r3, #16
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d008      	beq.n	800d742 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d73c:	461a      	mov	r2, r3
 800d73e:	2310      	movs	r3, #16
 800d740:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d030      	beq.n	800d7ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d754:	2b80      	cmp	r3, #128	@ 0x80
 800d756:	d109      	bne.n	800d76c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	69fa      	ldr	r2, [r7, #28]
 800d762:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d76a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d76e:	4613      	mov	r3, r2
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	4413      	add	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	3304      	adds	r3, #4
 800d780:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	78db      	ldrb	r3, [r3, #3]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d108      	bne.n	800d79c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	b2db      	uxtb	r3, r3
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f009 f878 	bl	801688c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d008      	beq.n	800d7ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	2320      	movs	r3, #32
 800d7c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	015a      	lsls	r2, r3, #5
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d7e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	085b      	lsrs	r3, r3, #1
 800d7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f47f af62 	bne.w	800d6c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4618      	mov	r0, r3
 800d802:	f003 fa8b 	bl	8010d1c <USB_ReadInterrupts>
 800d806:	4603      	mov	r3, r0
 800d808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d80c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d810:	f040 80db 	bne.w	800d9ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f003 faac 	bl	8010d76 <USB_ReadDevAllInEpInterrupt>
 800d81e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d824:	e0cd      	b.n	800d9c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 80c2 	beq.w	800d9b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d838:	b2d2      	uxtb	r2, r2
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f003 fad2 	bl	8010de6 <USB_ReadDevInEPInterrupt>
 800d842:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d057      	beq.n	800d8fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d850:	f003 030f 	and.w	r3, r3, #15
 800d854:	2201      	movs	r2, #1
 800d856:	fa02 f303 	lsl.w	r3, r2, r3
 800d85a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	43db      	mvns	r3, r3
 800d868:	69f9      	ldr	r1, [r7, #28]
 800d86a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d86e:	4013      	ands	r3, r2
 800d870:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d87e:	461a      	mov	r2, r3
 800d880:	2301      	movs	r3, #1
 800d882:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	799b      	ldrb	r3, [r3, #6]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d132      	bne.n	800d8f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d890:	4613      	mov	r3, r2
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	4413      	add	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	440b      	add	r3, r1
 800d89a:	3320      	adds	r3, #32
 800d89c:	6819      	ldr	r1, [r3, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4403      	add	r3, r0
 800d8ac:	331c      	adds	r3, #28
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4419      	add	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4403      	add	r3, r0
 800d8c0:	3320      	adds	r3, #32
 800d8c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d113      	bne.n	800d8f2 <HAL_PCD_IRQHandler+0x3a2>
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	440b      	add	r3, r1
 800d8d8:	3324      	adds	r3, #36	@ 0x24
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d108      	bne.n	800d8f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	f003 fad9 	bl	8010ea4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f008 ff4c 	bl	8016796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b00      	cmp	r3, #0
 800d906:	d008      	beq.n	800d91a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90a:	015a      	lsls	r2, r3, #5
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	4413      	add	r3, r2
 800d910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d914:	461a      	mov	r2, r3
 800d916:	2308      	movs	r3, #8
 800d918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	f003 0310 	and.w	r3, r3, #16
 800d920:	2b00      	cmp	r3, #0
 800d922:	d008      	beq.n	800d936 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d930:	461a      	mov	r2, r3
 800d932:	2310      	movs	r3, #16
 800d934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d008      	beq.n	800d952 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d94c:	461a      	mov	r2, r3
 800d94e:	2340      	movs	r3, #64	@ 0x40
 800d950:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f003 0302 	and.w	r3, r3, #2
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d023      	beq.n	800d9a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d95c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d95e:	6a38      	ldr	r0, [r7, #32]
 800d960:	f002 fac0 	bl	800fee4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d966:	4613      	mov	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	4413      	add	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	3310      	adds	r3, #16
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	3304      	adds	r3, #4
 800d976:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	78db      	ldrb	r3, [r3, #3]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d108      	bne.n	800d992 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2200      	movs	r2, #0
 800d984:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	4619      	mov	r1, r3
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f008 ff8f 	bl	80168b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d99e:	461a      	mov	r2, r3
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d9ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fcbd 	bl	800e330 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9be:	085b      	lsrs	r3, r3, #1
 800d9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f47f af2e 	bne.w	800d826 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f003 f9a4 	bl	8010d1c <USB_ReadInterrupts>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9de:	d122      	bne.n	800da26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	69fa      	ldr	r2, [r7, #28]
 800d9ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9ee:	f023 0301 	bic.w	r3, r3, #1
 800d9f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d108      	bne.n	800da10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800da06:	2100      	movs	r1, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fea3 	bl	800e754 <HAL_PCDEx_LPM_Callback>
 800da0e:	e002      	b.n	800da16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f008 ff2d 	bl	8016870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	695a      	ldr	r2, [r3, #20]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800da24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f003 f976 	bl	8010d1c <USB_ReadInterrupts>
 800da30:	4603      	mov	r3, r0
 800da32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da3a:	d112      	bne.n	800da62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f003 0301 	and.w	r3, r3, #1
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d102      	bne.n	800da52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f008 fee9 	bl	8016824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	695a      	ldr	r2, [r3, #20]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800da60:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4618      	mov	r0, r3
 800da68:	f003 f958 	bl	8010d1c <USB_ReadInterrupts>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da76:	f040 80b7 	bne.w	800dbe8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	69fa      	ldr	r2, [r7, #28]
 800da84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da88:	f023 0301 	bic.w	r3, r3, #1
 800da8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2110      	movs	r1, #16
 800da94:	4618      	mov	r0, r3
 800da96:	f002 fa25 	bl	800fee4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da9a:	2300      	movs	r3, #0
 800da9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da9e:	e046      	b.n	800db2e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800daa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa2:	015a      	lsls	r2, r3, #5
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	4413      	add	r3, r2
 800daa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daac:	461a      	mov	r2, r3
 800daae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dab2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab6:	015a      	lsls	r2, r3, #5
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	4413      	add	r3, r2
 800dabc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dac4:	0151      	lsls	r1, r2, #5
 800dac6:	69fa      	ldr	r2, [r7, #28]
 800dac8:	440a      	add	r2, r1
 800daca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dace:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dad2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dae0:	461a      	mov	r2, r3
 800dae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dae6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daea:	015a      	lsls	r2, r3, #5
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	4413      	add	r3, r2
 800daf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daf8:	0151      	lsls	r1, r2, #5
 800dafa:	69fa      	ldr	r2, [r7, #28]
 800dafc:	440a      	add	r2, r1
 800dafe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0a:	015a      	lsls	r2, r3, #5
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	4413      	add	r3, r2
 800db10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db18:	0151      	lsls	r1, r2, #5
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	440a      	add	r2, r1
 800db1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800db26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2a:	3301      	adds	r3, #1
 800db2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	791b      	ldrb	r3, [r3, #4]
 800db32:	461a      	mov	r2, r3
 800db34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db36:	4293      	cmp	r3, r2
 800db38:	d3b2      	bcc.n	800daa0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db40:	69db      	ldr	r3, [r3, #28]
 800db42:	69fa      	ldr	r2, [r7, #28]
 800db44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800db4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7bdb      	ldrb	r3, [r3, #15]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d016      	beq.n	800db84 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db60:	69fa      	ldr	r2, [r7, #28]
 800db62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db66:	f043 030b 	orr.w	r3, r3, #11
 800db6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db7c:	f043 030b 	orr.w	r3, r3, #11
 800db80:	6453      	str	r3, [r2, #68]	@ 0x44
 800db82:	e015      	b.n	800dbb0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	69fa      	ldr	r2, [r7, #28]
 800db8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800db96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800db9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	69fa      	ldr	r2, [r7, #28]
 800dba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbaa:	f043 030b 	orr.w	r3, r3, #11
 800dbae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbbe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dbc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6818      	ldr	r0, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f003 f966 	bl	8010ea4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	695a      	ldr	r2, [r3, #20]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800dbe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f003 f895 	bl	8010d1c <USB_ReadInterrupts>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbfc:	d123      	bne.n	800dc46 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f003 f92b 	bl	8010e5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f002 f9e2 	bl	800ffd6 <USB_GetDevSpeed>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461a      	mov	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681c      	ldr	r4, [r3, #0]
 800dc1e:	f001 f9c9 	bl	800efb4 <HAL_RCC_GetHCLKFreq>
 800dc22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f001 fee6 	bl	800f9fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f008 fdd8 	bl	80167e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	695a      	ldr	r2, [r3, #20]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800dc44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f003 f866 	bl	8010d1c <USB_ReadInterrupts>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f003 0308 	and.w	r3, r3, #8
 800dc56:	2b08      	cmp	r3, #8
 800dc58:	d10a      	bne.n	800dc70 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f008 fdb5 	bl	80167ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	695a      	ldr	r2, [r3, #20]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f002 0208 	and.w	r2, r2, #8
 800dc6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f003 f851 	bl	8010d1c <USB_ReadInterrupts>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc80:	2b80      	cmp	r3, #128	@ 0x80
 800dc82:	d123      	bne.n	800dccc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
 800dc8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dc90:	2301      	movs	r3, #1
 800dc92:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc94:	e014      	b.n	800dcc0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	4413      	add	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	440b      	add	r3, r1
 800dca4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d105      	bne.n	800dcba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb0a 	bl	800e2ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	791b      	ldrb	r3, [r3, #4]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d3e4      	bcc.n	800dc96 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f003 f823 	bl	8010d1c <USB_ReadInterrupts>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dcdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dce0:	d13c      	bne.n	800dd5c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dce2:	2301      	movs	r3, #1
 800dce4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dce6:	e02b      	b.n	800dd40 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcea:	015a      	lsls	r2, r3, #5
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	440b      	add	r3, r1
 800dd06:	3318      	adds	r3, #24
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d115      	bne.n	800dd3a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800dd0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	da12      	bge.n	800dd3a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd18:	4613      	mov	r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	440b      	add	r3, r1
 800dd22:	3317      	adds	r3, #23
 800dd24:	2201      	movs	r2, #1
 800dd26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800dd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	4619      	mov	r1, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 faca 	bl	800e2ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	791b      	ldrb	r3, [r3, #4]
 800dd44:	461a      	mov	r2, r3
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d3cd      	bcc.n	800dce8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	695a      	ldr	r2, [r3, #20]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800dd5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 ffdb 	bl	8010d1c <USB_ReadInterrupts>
 800dd66:	4603      	mov	r3, r0
 800dd68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd70:	d156      	bne.n	800de20 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dd72:	2301      	movs	r3, #1
 800dd74:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd76:	e045      	b.n	800de04 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	015a      	lsls	r2, r3, #5
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	4413      	add	r3, r2
 800dd80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	440b      	add	r3, r1
 800dd96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d12e      	bne.n	800ddfe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800dda0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	da2b      	bge.n	800ddfe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ddb2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d121      	bne.n	800ddfe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	4413      	add	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ddcc:	2201      	movs	r2, #1
 800ddce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	695b      	ldr	r3, [r3, #20]
 800dde0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	69fa      	ldr	r2, [r7, #28]
 800ddf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ddfa:	6053      	str	r3, [r2, #4]
            break;
 800ddfc:	e008      	b.n	800de10 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de00:	3301      	adds	r3, #1
 800de02:	627b      	str	r3, [r7, #36]	@ 0x24
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	791b      	ldrb	r3, [r3, #4]
 800de08:	461a      	mov	r2, r3
 800de0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d3b3      	bcc.n	800dd78 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	695a      	ldr	r2, [r3, #20]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800de1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f002 ff79 	bl	8010d1c <USB_ReadInterrupts>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800de30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de34:	d10a      	bne.n	800de4c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f008 fd4c 	bl	80168d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	695a      	ldr	r2, [r3, #20]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800de4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f002 ff63 	bl	8010d1c <USB_ReadInterrupts>
 800de56:	4603      	mov	r3, r0
 800de58:	f003 0304 	and.w	r3, r3, #4
 800de5c:	2b04      	cmp	r3, #4
 800de5e:	d115      	bne.n	800de8c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d002      	beq.n	800de78 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f008 fd3c 	bl	80168f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6859      	ldr	r1, [r3, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69ba      	ldr	r2, [r7, #24]
 800de84:	430a      	orrs	r2, r1
 800de86:	605a      	str	r2, [r3, #4]
 800de88:	e000      	b.n	800de8c <HAL_PCD_IRQHandler+0x93c>
      return;
 800de8a:	bf00      	nop
    }
  }
}
 800de8c:	3734      	adds	r7, #52	@ 0x34
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd90      	pop	{r4, r7, pc}

0800de92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d101      	bne.n	800deac <HAL_PCD_SetAddress+0x1a>
 800dea8:	2302      	movs	r3, #2
 800deaa:	e012      	b.n	800ded2 <HAL_PCD_SetAddress+0x40>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	78fa      	ldrb	r2, [r7, #3]
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f002 fec2 	bl	8010c4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	4608      	mov	r0, r1
 800dee4:	4611      	mov	r1, r2
 800dee6:	461a      	mov	r2, r3
 800dee8:	4603      	mov	r3, r0
 800deea:	70fb      	strb	r3, [r7, #3]
 800deec:	460b      	mov	r3, r1
 800deee:	803b      	strh	r3, [r7, #0]
 800def0:	4613      	mov	r3, r2
 800def2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800def8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800defc:	2b00      	cmp	r3, #0
 800defe:	da0f      	bge.n	800df20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df00:	78fb      	ldrb	r3, [r7, #3]
 800df02:	f003 020f 	and.w	r2, r3, #15
 800df06:	4613      	mov	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	4413      	add	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	3310      	adds	r3, #16
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	4413      	add	r3, r2
 800df14:	3304      	adds	r3, #4
 800df16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	705a      	strb	r2, [r3, #1]
 800df1e:	e00f      	b.n	800df40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800df20:	78fb      	ldrb	r3, [r7, #3]
 800df22:	f003 020f 	and.w	r2, r3, #15
 800df26:	4613      	mov	r3, r2
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	4413      	add	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	4413      	add	r3, r2
 800df36:	3304      	adds	r3, #4
 800df38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800df40:	78fb      	ldrb	r3, [r7, #3]
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	b2da      	uxtb	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800df4c:	883b      	ldrh	r3, [r7, #0]
 800df4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	78ba      	ldrb	r2, [r7, #2]
 800df5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	785b      	ldrb	r3, [r3, #1]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d004      	beq.n	800df6e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	461a      	mov	r2, r3
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800df6e:	78bb      	ldrb	r3, [r7, #2]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d102      	bne.n	800df7a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800df80:	2b01      	cmp	r3, #1
 800df82:	d101      	bne.n	800df88 <HAL_PCD_EP_Open+0xae>
 800df84:	2302      	movs	r3, #2
 800df86:	e00e      	b.n	800dfa6 <HAL_PCD_EP_Open+0xcc>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	68f9      	ldr	r1, [r7, #12]
 800df96:	4618      	mov	r0, r3
 800df98:	f002 f842 	bl	8010020 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800dfa4:	7afb      	ldrb	r3, [r7, #11]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dfba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	da0f      	bge.n	800dfe2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dfc2:	78fb      	ldrb	r3, [r7, #3]
 800dfc4:	f003 020f 	and.w	r2, r3, #15
 800dfc8:	4613      	mov	r3, r2
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	3310      	adds	r3, #16
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	705a      	strb	r2, [r3, #1]
 800dfe0:	e00f      	b.n	800e002 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	f003 020f 	and.w	r2, r3, #15
 800dfe8:	4613      	mov	r3, r2
 800dfea:	00db      	lsls	r3, r3, #3
 800dfec:	4413      	add	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	4413      	add	r3, r2
 800dff8:	3304      	adds	r3, #4
 800dffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e002:	78fb      	ldrb	r3, [r7, #3]
 800e004:	f003 030f 	and.w	r3, r3, #15
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e014:	2b01      	cmp	r3, #1
 800e016:	d101      	bne.n	800e01c <HAL_PCD_EP_Close+0x6e>
 800e018:	2302      	movs	r3, #2
 800e01a:	e00e      	b.n	800e03a <HAL_PCD_EP_Close+0x8c>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f002 f880 	bl	8010130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b086      	sub	sp, #24
 800e046:	af00      	add	r7, sp, #0
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
 800e04e:	460b      	mov	r3, r1
 800e050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e052:	7afb      	ldrb	r3, [r7, #11]
 800e054:	f003 020f 	and.w	r2, r3, #15
 800e058:	4613      	mov	r3, r2
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	3304      	adds	r3, #4
 800e06a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2200      	movs	r2, #0
 800e07c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2200      	movs	r2, #0
 800e082:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	f003 030f 	and.w	r3, r3, #15
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	799b      	ldrb	r3, [r3, #6]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d102      	bne.n	800e09e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6818      	ldr	r0, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	799b      	ldrb	r3, [r3, #6]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	6979      	ldr	r1, [r7, #20]
 800e0aa:	f002 f91d 	bl	80102e8 <USB_EPStartXfer>

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3718      	adds	r7, #24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	f003 020f 	and.w	r2, r3, #15
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800e0da:	681b      	ldr	r3, [r3, #0]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	607a      	str	r2, [r7, #4]
 800e0f2:	603b      	str	r3, [r7, #0]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	f003 020f 	and.w	r2, r3, #15
 800e0fe:	4613      	mov	r3, r2
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	4413      	add	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	3310      	adds	r3, #16
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	3304      	adds	r3, #4
 800e10e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	2200      	movs	r2, #0
 800e120:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2201      	movs	r2, #1
 800e126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e128:	7afb      	ldrb	r3, [r7, #11]
 800e12a:	f003 030f 	and.w	r3, r3, #15
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	799b      	ldrb	r3, [r3, #6]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d102      	bne.n	800e142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6818      	ldr	r0, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	799b      	ldrb	r3, [r3, #6]
 800e14a:	461a      	mov	r2, r3
 800e14c:	6979      	ldr	r1, [r7, #20]
 800e14e:	f002 f8cb 	bl	80102e8 <USB_EPStartXfer>

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e168:	78fb      	ldrb	r3, [r7, #3]
 800e16a:	f003 030f 	and.w	r3, r3, #15
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	7912      	ldrb	r2, [r2, #4]
 800e172:	4293      	cmp	r3, r2
 800e174:	d901      	bls.n	800e17a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	e04f      	b.n	800e21a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e17a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	da0f      	bge.n	800e1a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	f003 020f 	and.w	r2, r3, #15
 800e188:	4613      	mov	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	4413      	add	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	3310      	adds	r3, #16
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4413      	add	r3, r2
 800e196:	3304      	adds	r3, #4
 800e198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2201      	movs	r2, #1
 800e19e:	705a      	strb	r2, [r3, #1]
 800e1a0:	e00d      	b.n	800e1be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e1c4:	78fb      	ldrb	r3, [r7, #3]
 800e1c6:	f003 030f 	and.w	r3, r3, #15
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d101      	bne.n	800e1de <HAL_PCD_EP_SetStall+0x82>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	e01d      	b.n	800e21a <HAL_PCD_EP_SetStall+0xbe>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f002 fc59 	bl	8010aa4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e1f2:	78fb      	ldrb	r3, [r7, #3]
 800e1f4:	f003 030f 	and.w	r3, r3, #15
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d109      	bne.n	800e210 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7999      	ldrb	r1, [r3, #6]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e20a:	461a      	mov	r2, r3
 800e20c:	f002 fe4a 	bl	8010ea4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	460b      	mov	r3, r1
 800e22c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e22e:	78fb      	ldrb	r3, [r7, #3]
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	7912      	ldrb	r2, [r2, #4]
 800e238:	4293      	cmp	r3, r2
 800e23a:	d901      	bls.n	800e240 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	e042      	b.n	800e2c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e244:	2b00      	cmp	r3, #0
 800e246:	da0f      	bge.n	800e268 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e248:	78fb      	ldrb	r3, [r7, #3]
 800e24a:	f003 020f 	and.w	r2, r3, #15
 800e24e:	4613      	mov	r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	4413      	add	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	3310      	adds	r3, #16
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	4413      	add	r3, r2
 800e25c:	3304      	adds	r3, #4
 800e25e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2201      	movs	r2, #1
 800e264:	705a      	strb	r2, [r3, #1]
 800e266:	e00f      	b.n	800e288 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e268:	78fb      	ldrb	r3, [r7, #3]
 800e26a:	f003 020f 	and.w	r2, r3, #15
 800e26e:	4613      	mov	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	4413      	add	r3, r2
 800e27e:	3304      	adds	r3, #4
 800e280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2200      	movs	r2, #0
 800e286:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e28e:	78fb      	ldrb	r3, [r7, #3]
 800e290:	f003 030f 	and.w	r3, r3, #15
 800e294:	b2da      	uxtb	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d101      	bne.n	800e2a8 <HAL_PCD_EP_ClrStall+0x86>
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	e00e      	b.n	800e2c6 <HAL_PCD_EP_ClrStall+0xa4>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68f9      	ldr	r1, [r7, #12]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f002 fc62 	bl	8010b80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e2da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	da0c      	bge.n	800e2fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2e2:	78fb      	ldrb	r3, [r7, #3]
 800e2e4:	f003 020f 	and.w	r2, r3, #15
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	3310      	adds	r3, #16
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	e00c      	b.n	800e316 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e2fc:	78fb      	ldrb	r3, [r7, #3]
 800e2fe:	f003 020f 	and.w	r2, r3, #15
 800e302:	4613      	mov	r3, r2
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	4413      	add	r3, r2
 800e312:	3304      	adds	r3, #4
 800e314:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68f9      	ldr	r1, [r7, #12]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f002 fa81 	bl	8010824 <USB_EPStopXfer>
 800e322:	4603      	mov	r3, r0
 800e324:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e326:	7afb      	ldrb	r3, [r7, #11]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08a      	sub	sp, #40	@ 0x28
 800e334:	af02      	add	r7, sp, #8
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	4613      	mov	r3, r2
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	4413      	add	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	3310      	adds	r3, #16
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	4413      	add	r3, r2
 800e354:	3304      	adds	r3, #4
 800e356:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	695a      	ldr	r2, [r3, #20]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	429a      	cmp	r2, r3
 800e362:	d901      	bls.n	800e368 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	e06b      	b.n	800e440 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	691a      	ldr	r2, [r3, #16]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	69fa      	ldr	r2, [r7, #28]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d902      	bls.n	800e384 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	3303      	adds	r3, #3
 800e388:	089b      	lsrs	r3, r3, #2
 800e38a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e38c:	e02a      	b.n	800e3e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	691a      	ldr	r2, [r3, #16]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d902      	bls.n	800e3aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	3303      	adds	r3, #3
 800e3ae:	089b      	lsrs	r3, r3, #2
 800e3b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	68d9      	ldr	r1, [r3, #12]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	6978      	ldr	r0, [r7, #20]
 800e3c8:	f002 fad6 	bl	8010978 <USB_WritePacket>

    ep->xfer_buff  += len;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	441a      	add	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	695a      	ldr	r2, [r3, #20]
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	441a      	add	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3f0:	699b      	ldr	r3, [r3, #24]
 800e3f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d809      	bhi.n	800e40e <PCD_WriteEmptyTxFifo+0xde>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	695a      	ldr	r2, [r3, #20]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e402:	429a      	cmp	r2, r3
 800e404:	d203      	bcs.n	800e40e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1bf      	bne.n	800e38e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	691a      	ldr	r2, [r3, #16]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	429a      	cmp	r2, r3
 800e418:	d811      	bhi.n	800e43e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	f003 030f 	and.w	r3, r3, #15
 800e420:	2201      	movs	r2, #1
 800e422:	fa02 f303 	lsl.w	r3, r2, r3
 800e426:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e42e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	43db      	mvns	r3, r3
 800e434:	6939      	ldr	r1, [r7, #16]
 800e436:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e43a:	4013      	ands	r3, r2
 800e43c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3720      	adds	r7, #32
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	333c      	adds	r3, #60	@ 0x3c
 800e460:	3304      	adds	r3, #4
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	015a      	lsls	r2, r3, #5
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	4413      	add	r3, r2
 800e46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	799b      	ldrb	r3, [r3, #6]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d17b      	bne.n	800e576 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	f003 0308 	and.w	r3, r3, #8
 800e484:	2b00      	cmp	r3, #0
 800e486:	d015      	beq.n	800e4b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	4a61      	ldr	r2, [pc, #388]	@ (800e610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	f240 80b9 	bls.w	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 80b3 	beq.w	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	015a      	lsls	r2, r3, #5
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4b0:	6093      	str	r3, [r2, #8]
 800e4b2:	e0a7      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	f003 0320 	and.w	r3, r3, #32
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d009      	beq.n	800e4d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	015a      	lsls	r2, r3, #5
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	2320      	movs	r3, #32
 800e4ce:	6093      	str	r3, [r2, #8]
 800e4d0:	e098      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f040 8093 	bne.w	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	4a4b      	ldr	r2, [pc, #300]	@ (800e610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d90f      	bls.n	800e506 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	015a      	lsls	r2, r3, #5
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e502:	6093      	str	r3, [r2, #8]
 800e504:	e07e      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	4613      	mov	r3, r2
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	4413      	add	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	4413      	add	r3, r2
 800e518:	3304      	adds	r3, #4
 800e51a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6a1a      	ldr	r2, [r3, #32]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	0159      	lsls	r1, r3, #5
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	440b      	add	r3, r1
 800e528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e532:	1ad2      	subs	r2, r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d114      	bne.n	800e568 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d109      	bne.n	800e55a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6818      	ldr	r0, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e550:	461a      	mov	r2, r3
 800e552:	2101      	movs	r1, #1
 800e554:	f002 fca6 	bl	8010ea4 <USB_EP0_OutStart>
 800e558:	e006      	b.n	800e568 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68da      	ldr	r2, [r3, #12]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	695b      	ldr	r3, [r3, #20]
 800e562:	441a      	add	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f008 f8f6 	bl	8016760 <HAL_PCD_DataOutStageCallback>
 800e574:	e046      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	4a26      	ldr	r2, [pc, #152]	@ (800e614 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d124      	bne.n	800e5c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00a      	beq.n	800e59e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	015a      	lsls	r2, r3, #5
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	4413      	add	r3, r2
 800e590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e594:	461a      	mov	r2, r3
 800e596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e59a:	6093      	str	r3, [r2, #8]
 800e59c:	e032      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f003 0320 	and.w	r3, r3, #32
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d008      	beq.n	800e5ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	2320      	movs	r3, #32
 800e5b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f008 f8cd 	bl	8016760 <HAL_PCD_DataOutStageCallback>
 800e5c6:	e01d      	b.n	800e604 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d114      	bne.n	800e5f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	4413      	add	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	440b      	add	r3, r1
 800e5dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d108      	bne.n	800e5f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6818      	ldr	r0, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	f002 fc56 	bl	8010ea4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f008 f8ae 	bl	8016760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3720      	adds	r7, #32
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	4f54300a 	.word	0x4f54300a
 800e614:	4f54310a 	.word	0x4f54310a

0800e618 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	333c      	adds	r3, #60	@ 0x3c
 800e630:	3304      	adds	r3, #4
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	015a      	lsls	r2, r3, #5
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	4413      	add	r3, r2
 800e63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	4a15      	ldr	r2, [pc, #84]	@ (800e6a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d90e      	bls.n	800e66c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e654:	2b00      	cmp	r3, #0
 800e656:	d009      	beq.n	800e66c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	015a      	lsls	r2, r3, #5
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	4413      	add	r3, r2
 800e660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e664:	461a      	mov	r2, r3
 800e666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e66a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f008 f865 	bl	801673c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4a0a      	ldr	r2, [pc, #40]	@ (800e6a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d90c      	bls.n	800e694 <PCD_EP_OutSetupPacket_int+0x7c>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	799b      	ldrb	r3, [r3, #6]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d108      	bne.n	800e694 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e68c:	461a      	mov	r2, r3
 800e68e:	2101      	movs	r1, #1
 800e690:	f002 fc08 	bl	8010ea4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	4f54300a 	.word	0x4f54300a

0800e6a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	70fb      	strb	r3, [r7, #3]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e6bc:	78fb      	ldrb	r3, [r7, #3]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d107      	bne.n	800e6d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e6c2:	883b      	ldrh	r3, [r7, #0]
 800e6c4:	0419      	lsls	r1, r3, #16
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	430a      	orrs	r2, r1
 800e6ce:	629a      	str	r2, [r3, #40]	@ 0x28
 800e6d0:	e028      	b.n	800e724 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d8:	0c1b      	lsrs	r3, r3, #16
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	4413      	add	r3, r2
 800e6de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
 800e6e4:	e00d      	b.n	800e702 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
 800e6ec:	3340      	adds	r3, #64	@ 0x40
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	0c1b      	lsrs	r3, r3, #16
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
 800e6fe:	3301      	adds	r3, #1
 800e700:	73fb      	strb	r3, [r7, #15]
 800e702:	7bfa      	ldrb	r2, [r7, #15]
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	3b01      	subs	r3, #1
 800e708:	429a      	cmp	r2, r3
 800e70a:	d3ec      	bcc.n	800e6e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e70c:	883b      	ldrh	r3, [r7, #0]
 800e70e:	0418      	lsls	r0, r3, #16
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6819      	ldr	r1, [r3, #0]
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	3b01      	subs	r3, #1
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	4302      	orrs	r2, r0
 800e71c:	3340      	adds	r3, #64	@ 0x40
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	440b      	add	r3, r1
 800e722:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	3714      	adds	r7, #20
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr

0800e732 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e732:	b480      	push	{r7}
 800e734:	b083      	sub	sp, #12
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	460b      	mov	r3, r1
 800e73c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	887a      	ldrh	r2, [r7, #2]
 800e744:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d101      	bne.n	800e77e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e267      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	2b00      	cmp	r3, #0
 800e788:	d075      	beq.n	800e876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e78a:	4b88      	ldr	r3, [pc, #544]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f003 030c 	and.w	r3, r3, #12
 800e792:	2b04      	cmp	r3, #4
 800e794:	d00c      	beq.n	800e7b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e796:	4b85      	ldr	r3, [pc, #532]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e79e:	2b08      	cmp	r3, #8
 800e7a0:	d112      	bne.n	800e7c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7a2:	4b82      	ldr	r3, [pc, #520]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7ae:	d10b      	bne.n	800e7c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7b0:	4b7e      	ldr	r3, [pc, #504]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d05b      	beq.n	800e874 <HAL_RCC_OscConfig+0x108>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d157      	bne.n	800e874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e242      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7d0:	d106      	bne.n	800e7e0 <HAL_RCC_OscConfig+0x74>
 800e7d2:	4b76      	ldr	r3, [pc, #472]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a75      	ldr	r2, [pc, #468]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	e01d      	b.n	800e81c <HAL_RCC_OscConfig+0xb0>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e7e8:	d10c      	bne.n	800e804 <HAL_RCC_OscConfig+0x98>
 800e7ea:	4b70      	ldr	r3, [pc, #448]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a6f      	ldr	r2, [pc, #444]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e7f4:	6013      	str	r3, [r2, #0]
 800e7f6:	4b6d      	ldr	r3, [pc, #436]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a6c      	ldr	r2, [pc, #432]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e7fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	e00b      	b.n	800e81c <HAL_RCC_OscConfig+0xb0>
 800e804:	4b69      	ldr	r3, [pc, #420]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a68      	ldr	r2, [pc, #416]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e80a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	4b66      	ldr	r3, [pc, #408]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a65      	ldr	r2, [pc, #404]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e81a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d013      	beq.n	800e84c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e824:	f7fe fa56 	bl	800ccd4 <HAL_GetTick>
 800e828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e82a:	e008      	b.n	800e83e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e82c:	f7fe fa52 	bl	800ccd4 <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b64      	cmp	r3, #100	@ 0x64
 800e838:	d901      	bls.n	800e83e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e207      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e83e:	4b5b      	ldr	r3, [pc, #364]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0f0      	beq.n	800e82c <HAL_RCC_OscConfig+0xc0>
 800e84a:	e014      	b.n	800e876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e84c:	f7fe fa42 	bl	800ccd4 <HAL_GetTick>
 800e850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e852:	e008      	b.n	800e866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e854:	f7fe fa3e 	bl	800ccd4 <HAL_GetTick>
 800e858:	4602      	mov	r2, r0
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	2b64      	cmp	r3, #100	@ 0x64
 800e860:	d901      	bls.n	800e866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e1f3      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e866:	4b51      	ldr	r3, [pc, #324]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1f0      	bne.n	800e854 <HAL_RCC_OscConfig+0xe8>
 800e872:	e000      	b.n	800e876 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 0302 	and.w	r3, r3, #2
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d063      	beq.n	800e94a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e882:	4b4a      	ldr	r3, [pc, #296]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	f003 030c 	and.w	r3, r3, #12
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00b      	beq.n	800e8a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e88e:	4b47      	ldr	r3, [pc, #284]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e896:	2b08      	cmp	r3, #8
 800e898:	d11c      	bne.n	800e8d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e89a:	4b44      	ldr	r3, [pc, #272]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d116      	bne.n	800e8d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8a6:	4b41      	ldr	r3, [pc, #260]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f003 0302 	and.w	r3, r3, #2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d005      	beq.n	800e8be <HAL_RCC_OscConfig+0x152>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d001      	beq.n	800e8be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e1c7      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8be:	4b3b      	ldr	r3, [pc, #236]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	4937      	ldr	r1, [pc, #220]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8d2:	e03a      	b.n	800e94a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d020      	beq.n	800e91e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e8dc:	4b34      	ldr	r3, [pc, #208]	@ (800e9b0 <HAL_RCC_OscConfig+0x244>)
 800e8de:	2201      	movs	r2, #1
 800e8e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8e2:	f7fe f9f7 	bl	800ccd4 <HAL_GetTick>
 800e8e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8e8:	e008      	b.n	800e8fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8ea:	f7fe f9f3 	bl	800ccd4 <HAL_GetTick>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d901      	bls.n	800e8fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e1a8      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8fc:	4b2b      	ldr	r3, [pc, #172]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 0302 	and.w	r3, r3, #2
 800e904:	2b00      	cmp	r3, #0
 800e906:	d0f0      	beq.n	800e8ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e908:	4b28      	ldr	r3, [pc, #160]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	4925      	ldr	r1, [pc, #148]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e918:	4313      	orrs	r3, r2
 800e91a:	600b      	str	r3, [r1, #0]
 800e91c:	e015      	b.n	800e94a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e91e:	4b24      	ldr	r3, [pc, #144]	@ (800e9b0 <HAL_RCC_OscConfig+0x244>)
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e924:	f7fe f9d6 	bl	800ccd4 <HAL_GetTick>
 800e928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e92a:	e008      	b.n	800e93e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e92c:	f7fe f9d2 	bl	800ccd4 <HAL_GetTick>
 800e930:	4602      	mov	r2, r0
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	2b02      	cmp	r3, #2
 800e938:	d901      	bls.n	800e93e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e93a:	2303      	movs	r3, #3
 800e93c:	e187      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e93e:	4b1b      	ldr	r3, [pc, #108]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f003 0302 	and.w	r3, r3, #2
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1f0      	bne.n	800e92c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0308 	and.w	r3, r3, #8
 800e952:	2b00      	cmp	r3, #0
 800e954:	d036      	beq.n	800e9c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	695b      	ldr	r3, [r3, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d016      	beq.n	800e98c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e95e:	4b15      	ldr	r3, [pc, #84]	@ (800e9b4 <HAL_RCC_OscConfig+0x248>)
 800e960:	2201      	movs	r2, #1
 800e962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e964:	f7fe f9b6 	bl	800ccd4 <HAL_GetTick>
 800e968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e96a:	e008      	b.n	800e97e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e96c:	f7fe f9b2 	bl	800ccd4 <HAL_GetTick>
 800e970:	4602      	mov	r2, r0
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	1ad3      	subs	r3, r2, r3
 800e976:	2b02      	cmp	r3, #2
 800e978:	d901      	bls.n	800e97e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e97a:	2303      	movs	r3, #3
 800e97c:	e167      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e97e:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ac <HAL_RCC_OscConfig+0x240>)
 800e980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e982:	f003 0302 	and.w	r3, r3, #2
 800e986:	2b00      	cmp	r3, #0
 800e988:	d0f0      	beq.n	800e96c <HAL_RCC_OscConfig+0x200>
 800e98a:	e01b      	b.n	800e9c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e98c:	4b09      	ldr	r3, [pc, #36]	@ (800e9b4 <HAL_RCC_OscConfig+0x248>)
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e992:	f7fe f99f 	bl	800ccd4 <HAL_GetTick>
 800e996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e998:	e00e      	b.n	800e9b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e99a:	f7fe f99b 	bl	800ccd4 <HAL_GetTick>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d907      	bls.n	800e9b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	e150      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
 800e9ac:	40023800 	.word	0x40023800
 800e9b0:	42470000 	.word	0x42470000
 800e9b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9b8:	4b88      	ldr	r3, [pc, #544]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800e9ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9bc:	f003 0302 	and.w	r3, r3, #2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1ea      	bne.n	800e99a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f003 0304 	and.w	r3, r3, #4
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f000 8097 	beq.w	800eb00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e9d6:	4b81      	ldr	r3, [pc, #516]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d10f      	bne.n	800ea02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	60bb      	str	r3, [r7, #8]
 800e9e6:	4b7d      	ldr	r3, [pc, #500]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800e9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ea:	4a7c      	ldr	r2, [pc, #496]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800e9ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9f0:	6413      	str	r3, [r2, #64]	@ 0x40
 800e9f2:	4b7a      	ldr	r3, [pc, #488]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800e9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9fa:	60bb      	str	r3, [r7, #8]
 800e9fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea02:	4b77      	ldr	r3, [pc, #476]	@ (800ebe0 <HAL_RCC_OscConfig+0x474>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d118      	bne.n	800ea40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea0e:	4b74      	ldr	r3, [pc, #464]	@ (800ebe0 <HAL_RCC_OscConfig+0x474>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a73      	ldr	r2, [pc, #460]	@ (800ebe0 <HAL_RCC_OscConfig+0x474>)
 800ea14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea1a:	f7fe f95b 	bl	800ccd4 <HAL_GetTick>
 800ea1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea20:	e008      	b.n	800ea34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea22:	f7fe f957 	bl	800ccd4 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d901      	bls.n	800ea34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e10c      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea34:	4b6a      	ldr	r3, [pc, #424]	@ (800ebe0 <HAL_RCC_OscConfig+0x474>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d0f0      	beq.n	800ea22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d106      	bne.n	800ea56 <HAL_RCC_OscConfig+0x2ea>
 800ea48:	4b64      	ldr	r3, [pc, #400]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea4c:	4a63      	ldr	r2, [pc, #396]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea54:	e01c      	b.n	800ea90 <HAL_RCC_OscConfig+0x324>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	2b05      	cmp	r3, #5
 800ea5c:	d10c      	bne.n	800ea78 <HAL_RCC_OscConfig+0x30c>
 800ea5e:	4b5f      	ldr	r3, [pc, #380]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea62:	4a5e      	ldr	r2, [pc, #376]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea64:	f043 0304 	orr.w	r3, r3, #4
 800ea68:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea6a:	4b5c      	ldr	r3, [pc, #368]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6e:	4a5b      	ldr	r2, [pc, #364]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea70:	f043 0301 	orr.w	r3, r3, #1
 800ea74:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea76:	e00b      	b.n	800ea90 <HAL_RCC_OscConfig+0x324>
 800ea78:	4b58      	ldr	r3, [pc, #352]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea7c:	4a57      	ldr	r2, [pc, #348]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea7e:	f023 0301 	bic.w	r3, r3, #1
 800ea82:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea84:	4b55      	ldr	r3, [pc, #340]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea88:	4a54      	ldr	r2, [pc, #336]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ea8a:	f023 0304 	bic.w	r3, r3, #4
 800ea8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d015      	beq.n	800eac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea98:	f7fe f91c 	bl	800ccd4 <HAL_GetTick>
 800ea9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea9e:	e00a      	b.n	800eab6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaa0:	f7fe f918 	bl	800ccd4 <HAL_GetTick>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d901      	bls.n	800eab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800eab2:	2303      	movs	r3, #3
 800eab4:	e0cb      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eab6:	4b49      	ldr	r3, [pc, #292]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaba:	f003 0302 	and.w	r3, r3, #2
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0ee      	beq.n	800eaa0 <HAL_RCC_OscConfig+0x334>
 800eac2:	e014      	b.n	800eaee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eac4:	f7fe f906 	bl	800ccd4 <HAL_GetTick>
 800eac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaca:	e00a      	b.n	800eae2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eacc:	f7fe f902 	bl	800ccd4 <HAL_GetTick>
 800ead0:	4602      	mov	r2, r0
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eada:	4293      	cmp	r3, r2
 800eadc:	d901      	bls.n	800eae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800eade:	2303      	movs	r3, #3
 800eae0:	e0b5      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eae2:	4b3e      	ldr	r3, [pc, #248]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1ee      	bne.n	800eacc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d105      	bne.n	800eb00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eaf4:	4b39      	ldr	r3, [pc, #228]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eaf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaf8:	4a38      	ldr	r2, [pc, #224]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eafa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eafe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 80a1 	beq.w	800ec4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eb0a:	4b34      	ldr	r3, [pc, #208]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	f003 030c 	and.w	r3, r3, #12
 800eb12:	2b08      	cmp	r3, #8
 800eb14:	d05c      	beq.n	800ebd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	699b      	ldr	r3, [r3, #24]
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d141      	bne.n	800eba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb1e:	4b31      	ldr	r3, [pc, #196]	@ (800ebe4 <HAL_RCC_OscConfig+0x478>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb24:	f7fe f8d6 	bl	800ccd4 <HAL_GetTick>
 800eb28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb2a:	e008      	b.n	800eb3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb2c:	f7fe f8d2 	bl	800ccd4 <HAL_GetTick>
 800eb30:	4602      	mov	r2, r0
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d901      	bls.n	800eb3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e087      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb3e:	4b27      	ldr	r3, [pc, #156]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1f0      	bne.n	800eb2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	69da      	ldr	r2, [r3, #28]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	431a      	orrs	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb58:	019b      	lsls	r3, r3, #6
 800eb5a:	431a      	orrs	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb60:	085b      	lsrs	r3, r3, #1
 800eb62:	3b01      	subs	r3, #1
 800eb64:	041b      	lsls	r3, r3, #16
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6c:	061b      	lsls	r3, r3, #24
 800eb6e:	491b      	ldr	r1, [pc, #108]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eb70:	4313      	orrs	r3, r2
 800eb72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb74:	4b1b      	ldr	r3, [pc, #108]	@ (800ebe4 <HAL_RCC_OscConfig+0x478>)
 800eb76:	2201      	movs	r2, #1
 800eb78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb7a:	f7fe f8ab 	bl	800ccd4 <HAL_GetTick>
 800eb7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb80:	e008      	b.n	800eb94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb82:	f7fe f8a7 	bl	800ccd4 <HAL_GetTick>
 800eb86:	4602      	mov	r2, r0
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d901      	bls.n	800eb94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eb90:	2303      	movs	r3, #3
 800eb92:	e05c      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb94:	4b11      	ldr	r3, [pc, #68]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d0f0      	beq.n	800eb82 <HAL_RCC_OscConfig+0x416>
 800eba0:	e054      	b.n	800ec4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eba2:	4b10      	ldr	r3, [pc, #64]	@ (800ebe4 <HAL_RCC_OscConfig+0x478>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eba8:	f7fe f894 	bl	800ccd4 <HAL_GetTick>
 800ebac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebae:	e008      	b.n	800ebc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebb0:	f7fe f890 	bl	800ccd4 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d901      	bls.n	800ebc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e045      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebc2:	4b06      	ldr	r3, [pc, #24]	@ (800ebdc <HAL_RCC_OscConfig+0x470>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1f0      	bne.n	800ebb0 <HAL_RCC_OscConfig+0x444>
 800ebce:	e03d      	b.n	800ec4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	699b      	ldr	r3, [r3, #24]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d107      	bne.n	800ebe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e038      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
 800ebdc:	40023800 	.word	0x40023800
 800ebe0:	40007000 	.word	0x40007000
 800ebe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ebe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ec58 <HAL_RCC_OscConfig+0x4ec>)
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d028      	beq.n	800ec48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d121      	bne.n	800ec48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d11a      	bne.n	800ec48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ec18:	4013      	ands	r3, r2
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ec1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d111      	bne.n	800ec48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec2e:	085b      	lsrs	r3, r3, #1
 800ec30:	3b01      	subs	r3, #1
 800ec32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d107      	bne.n	800ec48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d001      	beq.n	800ec4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e000      	b.n	800ec4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	40023800 	.word	0x40023800

0800ec5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e0cc      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec70:	4b68      	ldr	r3, [pc, #416]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f003 0307 	and.w	r3, r3, #7
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d90c      	bls.n	800ec98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec7e:	4b65      	ldr	r3, [pc, #404]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	b2d2      	uxtb	r2, r2
 800ec84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec86:	4b63      	ldr	r3, [pc, #396]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f003 0307 	and.w	r3, r3, #7
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d001      	beq.n	800ec98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e0b8      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d020      	beq.n	800ece6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d005      	beq.n	800ecbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ecb0:	4b59      	ldr	r3, [pc, #356]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	4a58      	ldr	r2, [pc, #352]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ecba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 0308 	and.w	r3, r3, #8
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d005      	beq.n	800ecd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ecc8:	4b53      	ldr	r3, [pc, #332]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	4a52      	ldr	r2, [pc, #328]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ecd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ecd4:	4b50      	ldr	r3, [pc, #320]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	494d      	ldr	r1, [pc, #308]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ece2:	4313      	orrs	r3, r2
 800ece4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f003 0301 	and.w	r3, r3, #1
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d044      	beq.n	800ed7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d107      	bne.n	800ed0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecfa:	4b47      	ldr	r3, [pc, #284]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d119      	bne.n	800ed3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e07f      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d003      	beq.n	800ed1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed16:	2b03      	cmp	r3, #3
 800ed18:	d107      	bne.n	800ed2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed1a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d109      	bne.n	800ed3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e06f      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed2a:	4b3b      	ldr	r3, [pc, #236]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d101      	bne.n	800ed3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed36:	2301      	movs	r3, #1
 800ed38:	e067      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed3a:	4b37      	ldr	r3, [pc, #220]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f023 0203 	bic.w	r2, r3, #3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	4934      	ldr	r1, [pc, #208]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed4c:	f7fd ffc2 	bl	800ccd4 <HAL_GetTick>
 800ed50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed52:	e00a      	b.n	800ed6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed54:	f7fd ffbe 	bl	800ccd4 <HAL_GetTick>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d901      	bls.n	800ed6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ed66:	2303      	movs	r3, #3
 800ed68:	e04f      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed6a:	4b2b      	ldr	r3, [pc, #172]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	f003 020c 	and.w	r2, r3, #12
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d1eb      	bne.n	800ed54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed7c:	4b25      	ldr	r3, [pc, #148]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 0307 	and.w	r3, r3, #7
 800ed84:	683a      	ldr	r2, [r7, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d20c      	bcs.n	800eda4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed8a:	4b22      	ldr	r3, [pc, #136]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed92:	4b20      	ldr	r3, [pc, #128]	@ (800ee14 <HAL_RCC_ClockConfig+0x1b8>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f003 0307 	and.w	r3, r3, #7
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d001      	beq.n	800eda4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e032      	b.n	800ee0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 0304 	and.w	r3, r3, #4
 800edac:	2b00      	cmp	r3, #0
 800edae:	d008      	beq.n	800edc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800edb0:	4b19      	ldr	r3, [pc, #100]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	4916      	ldr	r1, [pc, #88]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800edbe:	4313      	orrs	r3, r2
 800edc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 0308 	and.w	r3, r3, #8
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d009      	beq.n	800ede2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800edce:	4b12      	ldr	r3, [pc, #72]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	691b      	ldr	r3, [r3, #16]
 800edda:	00db      	lsls	r3, r3, #3
 800eddc:	490e      	ldr	r1, [pc, #56]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800edde:	4313      	orrs	r3, r2
 800ede0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ede2:	f000 f821 	bl	800ee28 <HAL_RCC_GetSysClockFreq>
 800ede6:	4602      	mov	r2, r0
 800ede8:	4b0b      	ldr	r3, [pc, #44]	@ (800ee18 <HAL_RCC_ClockConfig+0x1bc>)
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	091b      	lsrs	r3, r3, #4
 800edee:	f003 030f 	and.w	r3, r3, #15
 800edf2:	490a      	ldr	r1, [pc, #40]	@ (800ee1c <HAL_RCC_ClockConfig+0x1c0>)
 800edf4:	5ccb      	ldrb	r3, [r1, r3]
 800edf6:	fa22 f303 	lsr.w	r3, r2, r3
 800edfa:	4a09      	ldr	r2, [pc, #36]	@ (800ee20 <HAL_RCC_ClockConfig+0x1c4>)
 800edfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800edfe:	4b09      	ldr	r3, [pc, #36]	@ (800ee24 <HAL_RCC_ClockConfig+0x1c8>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fc fea2 	bl	800bb4c <HAL_InitTick>

  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	40023c00 	.word	0x40023c00
 800ee18:	40023800 	.word	0x40023800
 800ee1c:	08019fbc 	.word	0x08019fbc
 800ee20:	20000004 	.word	0x20000004
 800ee24:	20000008 	.word	0x20000008

0800ee28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ee28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee2c:	b090      	sub	sp, #64	@ 0x40
 800ee2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ee30:	2300      	movs	r3, #0
 800ee32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee40:	4b59      	ldr	r3, [pc, #356]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	f003 030c 	and.w	r3, r3, #12
 800ee48:	2b08      	cmp	r3, #8
 800ee4a:	d00d      	beq.n	800ee68 <HAL_RCC_GetSysClockFreq+0x40>
 800ee4c:	2b08      	cmp	r3, #8
 800ee4e:	f200 80a1 	bhi.w	800ef94 <HAL_RCC_GetSysClockFreq+0x16c>
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <HAL_RCC_GetSysClockFreq+0x34>
 800ee56:	2b04      	cmp	r3, #4
 800ee58:	d003      	beq.n	800ee62 <HAL_RCC_GetSysClockFreq+0x3a>
 800ee5a:	e09b      	b.n	800ef94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee5c:	4b53      	ldr	r3, [pc, #332]	@ (800efac <HAL_RCC_GetSysClockFreq+0x184>)
 800ee5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ee60:	e09b      	b.n	800ef9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee62:	4b53      	ldr	r3, [pc, #332]	@ (800efb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ee64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ee66:	e098      	b.n	800ef9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee68:	4b4f      	ldr	r3, [pc, #316]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee72:	4b4d      	ldr	r3, [pc, #308]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d028      	beq.n	800eed0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee7e:	4b4a      	ldr	r3, [pc, #296]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	099b      	lsrs	r3, r3, #6
 800ee84:	2200      	movs	r2, #0
 800ee86:	623b      	str	r3, [r7, #32]
 800ee88:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee8a:	6a3b      	ldr	r3, [r7, #32]
 800ee8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ee90:	2100      	movs	r1, #0
 800ee92:	4b47      	ldr	r3, [pc, #284]	@ (800efb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ee94:	fb03 f201 	mul.w	r2, r3, r1
 800ee98:	2300      	movs	r3, #0
 800ee9a:	fb00 f303 	mul.w	r3, r0, r3
 800ee9e:	4413      	add	r3, r2
 800eea0:	4a43      	ldr	r2, [pc, #268]	@ (800efb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eea2:	fba0 1202 	umull	r1, r2, r0, r2
 800eea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eea8:	460a      	mov	r2, r1
 800eeaa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800eeac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeae:	4413      	add	r3, r2
 800eeb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	61bb      	str	r3, [r7, #24]
 800eeb8:	61fa      	str	r2, [r7, #28]
 800eeba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800eec2:	f7f1 fff7 	bl	8000eb4 <__aeabi_uldivmod>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4613      	mov	r3, r2
 800eecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eece:	e053      	b.n	800ef78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eed0:	4b35      	ldr	r3, [pc, #212]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	099b      	lsrs	r3, r3, #6
 800eed6:	2200      	movs	r2, #0
 800eed8:	613b      	str	r3, [r7, #16]
 800eeda:	617a      	str	r2, [r7, #20]
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800eee2:	f04f 0b00 	mov.w	fp, #0
 800eee6:	4652      	mov	r2, sl
 800eee8:	465b      	mov	r3, fp
 800eeea:	f04f 0000 	mov.w	r0, #0
 800eeee:	f04f 0100 	mov.w	r1, #0
 800eef2:	0159      	lsls	r1, r3, #5
 800eef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eef8:	0150      	lsls	r0, r2, #5
 800eefa:	4602      	mov	r2, r0
 800eefc:	460b      	mov	r3, r1
 800eefe:	ebb2 080a 	subs.w	r8, r2, sl
 800ef02:	eb63 090b 	sbc.w	r9, r3, fp
 800ef06:	f04f 0200 	mov.w	r2, #0
 800ef0a:	f04f 0300 	mov.w	r3, #0
 800ef0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ef12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ef16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ef1a:	ebb2 0408 	subs.w	r4, r2, r8
 800ef1e:	eb63 0509 	sbc.w	r5, r3, r9
 800ef22:	f04f 0200 	mov.w	r2, #0
 800ef26:	f04f 0300 	mov.w	r3, #0
 800ef2a:	00eb      	lsls	r3, r5, #3
 800ef2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ef30:	00e2      	lsls	r2, r4, #3
 800ef32:	4614      	mov	r4, r2
 800ef34:	461d      	mov	r5, r3
 800ef36:	eb14 030a 	adds.w	r3, r4, sl
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	eb45 030b 	adc.w	r3, r5, fp
 800ef40:	607b      	str	r3, [r7, #4]
 800ef42:	f04f 0200 	mov.w	r2, #0
 800ef46:	f04f 0300 	mov.w	r3, #0
 800ef4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ef4e:	4629      	mov	r1, r5
 800ef50:	028b      	lsls	r3, r1, #10
 800ef52:	4621      	mov	r1, r4
 800ef54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ef58:	4621      	mov	r1, r4
 800ef5a:	028a      	lsls	r2, r1, #10
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	4619      	mov	r1, r3
 800ef60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef62:	2200      	movs	r2, #0
 800ef64:	60bb      	str	r3, [r7, #8]
 800ef66:	60fa      	str	r2, [r7, #12]
 800ef68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef6c:	f7f1 ffa2 	bl	8000eb4 <__aeabi_uldivmod>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4613      	mov	r3, r2
 800ef76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ef78:	4b0b      	ldr	r3, [pc, #44]	@ (800efa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	0c1b      	lsrs	r3, r3, #16
 800ef7e:	f003 0303 	and.w	r3, r3, #3
 800ef82:	3301      	adds	r3, #1
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ef88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ef92:	e002      	b.n	800ef9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ef94:	4b05      	ldr	r3, [pc, #20]	@ (800efac <HAL_RCC_GetSysClockFreq+0x184>)
 800ef96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ef98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3740      	adds	r7, #64	@ 0x40
 800efa0:	46bd      	mov	sp, r7
 800efa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800efa6:	bf00      	nop
 800efa8:	40023800 	.word	0x40023800
 800efac:	00f42400 	.word	0x00f42400
 800efb0:	017d7840 	.word	0x017d7840

0800efb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800efb4:	b480      	push	{r7}
 800efb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800efb8:	4b03      	ldr	r3, [pc, #12]	@ (800efc8 <HAL_RCC_GetHCLKFreq+0x14>)
 800efba:	681b      	ldr	r3, [r3, #0]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	20000004 	.word	0x20000004

0800efcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800efd0:	f7ff fff0 	bl	800efb4 <HAL_RCC_GetHCLKFreq>
 800efd4:	4602      	mov	r2, r0
 800efd6:	4b05      	ldr	r3, [pc, #20]	@ (800efec <HAL_RCC_GetPCLK2Freq+0x20>)
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	0b5b      	lsrs	r3, r3, #13
 800efdc:	f003 0307 	and.w	r3, r3, #7
 800efe0:	4903      	ldr	r1, [pc, #12]	@ (800eff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800efe2:	5ccb      	ldrb	r3, [r1, r3]
 800efe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800efe8:	4618      	mov	r0, r3
 800efea:	bd80      	pop	{r7, pc}
 800efec:	40023800 	.word	0x40023800
 800eff0:	08019fcc 	.word	0x08019fcc

0800eff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	220f      	movs	r2, #15
 800f002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f004:	4b12      	ldr	r3, [pc, #72]	@ (800f050 <HAL_RCC_GetClockConfig+0x5c>)
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	f003 0203 	and.w	r2, r3, #3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f010:	4b0f      	ldr	r3, [pc, #60]	@ (800f050 <HAL_RCC_GetClockConfig+0x5c>)
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f01c:	4b0c      	ldr	r3, [pc, #48]	@ (800f050 <HAL_RCC_GetClockConfig+0x5c>)
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f028:	4b09      	ldr	r3, [pc, #36]	@ (800f050 <HAL_RCC_GetClockConfig+0x5c>)
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	08db      	lsrs	r3, r3, #3
 800f02e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f036:	4b07      	ldr	r3, [pc, #28]	@ (800f054 <HAL_RCC_GetClockConfig+0x60>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f003 0207 	and.w	r2, r3, #7
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	601a      	str	r2, [r3, #0]
}
 800f042:	bf00      	nop
 800f044:	370c      	adds	r7, #12
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	40023800 	.word	0x40023800
 800f054:	40023c00 	.word	0x40023c00

0800f058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e04c      	b.n	800f104 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f070:	b2db      	uxtb	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d111      	bne.n	800f09a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fbe2 	bl	800f848 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a1f      	ldr	r2, [pc, #124]	@ (800f10c <HAL_TIM_Base_Init+0xb4>)
 800f090:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2202      	movs	r2, #2
 800f09e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	f000 fb3f 	bl	800f730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	0800f111 	.word	0x0800f111

0800f110 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f118:	bf00      	nop
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b01      	cmp	r3, #1
 800f136:	d001      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	e044      	b.n	800f1c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2202      	movs	r2, #2
 800f140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68da      	ldr	r2, [r3, #12]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f042 0201 	orr.w	r2, r2, #1
 800f152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a1e      	ldr	r2, [pc, #120]	@ (800f1d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d018      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0x6c>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f166:	d013      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0x6c>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4a1a      	ldr	r2, [pc, #104]	@ (800f1d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d00e      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0x6c>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a19      	ldr	r2, [pc, #100]	@ (800f1dc <HAL_TIM_Base_Start_IT+0xb8>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d009      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0x6c>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a17      	ldr	r2, [pc, #92]	@ (800f1e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d004      	beq.n	800f190 <HAL_TIM_Base_Start_IT+0x6c>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a16      	ldr	r2, [pc, #88]	@ (800f1e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d111      	bne.n	800f1b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	f003 0307 	and.w	r3, r3, #7
 800f19a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b06      	cmp	r3, #6
 800f1a0:	d010      	beq.n	800f1c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f042 0201 	orr.w	r2, r2, #1
 800f1b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1b2:	e007      	b.n	800f1c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f042 0201 	orr.w	r2, r2, #1
 800f1c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	40010000 	.word	0x40010000
 800f1d8:	40000400 	.word	0x40000400
 800f1dc:	40000800 	.word	0x40000800
 800f1e0:	40000c00 	.word	0x40000c00
 800f1e4:	40014000 	.word	0x40014000

0800f1e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	2b00      	cmp	r3, #0
 800f208:	d026      	beq.n	800f258 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f003 0302 	and.w	r3, r3, #2
 800f210:	2b00      	cmp	r3, #0
 800f212:	d021      	beq.n	800f258 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f06f 0202 	mvn.w	r2, #2
 800f21c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	699b      	ldr	r3, [r3, #24]
 800f22a:	f003 0303 	and.w	r3, r3, #3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d005      	beq.n	800f23e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	4798      	blx	r3
 800f23c:	e009      	b.n	800f252 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	f003 0304 	and.w	r3, r3, #4
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d026      	beq.n	800f2b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f003 0304 	and.w	r3, r3, #4
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d021      	beq.n	800f2b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f06f 0204 	mvn.w	r2, #4
 800f274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2202      	movs	r2, #2
 800f27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	699b      	ldr	r3, [r3, #24]
 800f282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f286:	2b00      	cmp	r3, #0
 800f288:	d005      	beq.n	800f296 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	4798      	blx	r3
 800f294:	e009      	b.n	800f2aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f003 0308 	and.w	r3, r3, #8
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d026      	beq.n	800f308 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f003 0308 	and.w	r3, r3, #8
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d021      	beq.n	800f308 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f06f 0208 	mvn.w	r2, #8
 800f2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2204      	movs	r2, #4
 800f2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	f003 0303 	and.w	r3, r3, #3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d005      	beq.n	800f2ee <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	4798      	blx	r3
 800f2ec:	e009      	b.n	800f302 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f003 0310 	and.w	r3, r3, #16
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d026      	beq.n	800f360 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f003 0310 	and.w	r3, r3, #16
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d021      	beq.n	800f360 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f06f 0210 	mvn.w	r2, #16
 800f324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2208      	movs	r2, #8
 800f32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	4798      	blx	r3
 800f344:	e009      	b.n	800f35a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00e      	beq.n	800f388 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f003 0301 	and.w	r3, r3, #1
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f06f 0201 	mvn.w	r2, #1
 800f37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d00e      	beq.n	800f3b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00e      	beq.n	800f3d8 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d009      	beq.n	800f3d8 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	f003 0320 	and.w	r3, r3, #32
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00e      	beq.n	800f400 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f003 0320 	and.w	r3, r3, #32
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d009      	beq.n	800f400 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f06f 0220 	mvn.w	r2, #32
 800f3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f400:	bf00      	nop
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f424:	bf00      	nop
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f460:	bf00      	nop
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f474:	bf00      	nop
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f49c:	bf00      	nop
 800f49e:	370c      	adds	r7, #12
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f4b0:	bf00      	nop
 800f4b2:	370c      	adds	r7, #12
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b087      	sub	sp, #28
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	607a      	str	r2, [r7, #4]
 800f4c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e125      	b.n	800f724 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	f040 80b9 	bne.w	800f658 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 800f4e6:	7afb      	ldrb	r3, [r7, #11]
 800f4e8:	2b1a      	cmp	r3, #26
 800f4ea:	f200 80b2 	bhi.w	800f652 <HAL_TIM_RegisterCallback+0x196>
 800f4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f4 <HAL_TIM_RegisterCallback+0x38>)
 800f4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f4:	0800f561 	.word	0x0800f561
 800f4f8:	0800f569 	.word	0x0800f569
 800f4fc:	0800f571 	.word	0x0800f571
 800f500:	0800f579 	.word	0x0800f579
 800f504:	0800f581 	.word	0x0800f581
 800f508:	0800f589 	.word	0x0800f589
 800f50c:	0800f591 	.word	0x0800f591
 800f510:	0800f599 	.word	0x0800f599
 800f514:	0800f5a1 	.word	0x0800f5a1
 800f518:	0800f5a9 	.word	0x0800f5a9
 800f51c:	0800f5b1 	.word	0x0800f5b1
 800f520:	0800f5b9 	.word	0x0800f5b9
 800f524:	0800f5c1 	.word	0x0800f5c1
 800f528:	0800f5c9 	.word	0x0800f5c9
 800f52c:	0800f5d1 	.word	0x0800f5d1
 800f530:	0800f5db 	.word	0x0800f5db
 800f534:	0800f5e5 	.word	0x0800f5e5
 800f538:	0800f5ef 	.word	0x0800f5ef
 800f53c:	0800f5f9 	.word	0x0800f5f9
 800f540:	0800f603 	.word	0x0800f603
 800f544:	0800f60d 	.word	0x0800f60d
 800f548:	0800f617 	.word	0x0800f617
 800f54c:	0800f621 	.word	0x0800f621
 800f550:	0800f62b 	.word	0x0800f62b
 800f554:	0800f635 	.word	0x0800f635
 800f558:	0800f63f 	.word	0x0800f63f
 800f55c:	0800f649 	.word	0x0800f649
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800f566:	e0dc      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f56e:	e0d8      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f576:	e0d4      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f57e:	e0d0      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f586:	e0cc      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f58e:	e0c8      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f596:	e0c4      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f59e:	e0c0      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f5a6:	e0bc      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f5ae:	e0b8      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f5b6:	e0b4      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f5be:	e0b0      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f5c6:	e0ac      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f5ce:	e0a8      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f5d8:	e0a3      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f5e2:	e09e      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f5ec:	e099      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f5f6:	e094      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f600:	e08f      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f60a:	e08a      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f614:	e085      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f61e:	e080      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f628:	e07b      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f632:	e076      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f63c:	e071      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f646:	e06c      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f650:	e067      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f652:	2301      	movs	r3, #1
 800f654:	75fb      	strb	r3, [r7, #23]
        break;
 800f656:	e064      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b00      	cmp	r3, #0
 800f662:	d15c      	bne.n	800f71e <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 800f664:	7afb      	ldrb	r3, [r7, #11]
 800f666:	2b0d      	cmp	r3, #13
 800f668:	d856      	bhi.n	800f718 <HAL_TIM_RegisterCallback+0x25c>
 800f66a:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <HAL_TIM_RegisterCallback+0x1b4>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f6a9 	.word	0x0800f6a9
 800f674:	0800f6b1 	.word	0x0800f6b1
 800f678:	0800f6b9 	.word	0x0800f6b9
 800f67c:	0800f6c1 	.word	0x0800f6c1
 800f680:	0800f6c9 	.word	0x0800f6c9
 800f684:	0800f6d1 	.word	0x0800f6d1
 800f688:	0800f6d9 	.word	0x0800f6d9
 800f68c:	0800f6e1 	.word	0x0800f6e1
 800f690:	0800f6e9 	.word	0x0800f6e9
 800f694:	0800f6f1 	.word	0x0800f6f1
 800f698:	0800f6f9 	.word	0x0800f6f9
 800f69c:	0800f701 	.word	0x0800f701
 800f6a0:	0800f709 	.word	0x0800f709
 800f6a4:	0800f711 	.word	0x0800f711
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800f6ae:	e038      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f6b6:	e034      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f6be:	e030      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f6c6:	e02c      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f6ce:	e028      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f6d6:	e024      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f6de:	e020      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f6e6:	e01c      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f6ee:	e018      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f6f6:	e014      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f6fe:	e010      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f706:	e00c      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f70e:	e008      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f716:	e004      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f718:	2301      	movs	r3, #1
 800f71a:	75fb      	strb	r3, [r7, #23]
        break;
 800f71c:	e001      	b.n	800f722 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800f71e:	2301      	movs	r3, #1
 800f720:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f722:	7dfb      	ldrb	r3, [r7, #23]
}
 800f724:	4618      	mov	r0, r3
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a3a      	ldr	r2, [pc, #232]	@ (800f82c <TIM_Base_SetConfig+0xfc>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d00f      	beq.n	800f768 <TIM_Base_SetConfig+0x38>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f74e:	d00b      	beq.n	800f768 <TIM_Base_SetConfig+0x38>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a37      	ldr	r2, [pc, #220]	@ (800f830 <TIM_Base_SetConfig+0x100>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d007      	beq.n	800f768 <TIM_Base_SetConfig+0x38>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a36      	ldr	r2, [pc, #216]	@ (800f834 <TIM_Base_SetConfig+0x104>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d003      	beq.n	800f768 <TIM_Base_SetConfig+0x38>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a35      	ldr	r2, [pc, #212]	@ (800f838 <TIM_Base_SetConfig+0x108>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d108      	bne.n	800f77a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f76e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	4313      	orrs	r3, r2
 800f778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a2b      	ldr	r2, [pc, #172]	@ (800f82c <TIM_Base_SetConfig+0xfc>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d01b      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f788:	d017      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a28      	ldr	r2, [pc, #160]	@ (800f830 <TIM_Base_SetConfig+0x100>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d013      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a27      	ldr	r2, [pc, #156]	@ (800f834 <TIM_Base_SetConfig+0x104>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d00f      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a26      	ldr	r2, [pc, #152]	@ (800f838 <TIM_Base_SetConfig+0x108>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d00b      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4a25      	ldr	r2, [pc, #148]	@ (800f83c <TIM_Base_SetConfig+0x10c>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d007      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a24      	ldr	r2, [pc, #144]	@ (800f840 <TIM_Base_SetConfig+0x110>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d003      	beq.n	800f7ba <TIM_Base_SetConfig+0x8a>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a23      	ldr	r2, [pc, #140]	@ (800f844 <TIM_Base_SetConfig+0x114>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d108      	bne.n	800f7cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f7c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	689a      	ldr	r2, [r3, #8]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a0e      	ldr	r2, [pc, #56]	@ (800f82c <TIM_Base_SetConfig+0xfc>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d103      	bne.n	800f800 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	691a      	ldr	r2, [r3, #16]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d105      	bne.n	800f81e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	f023 0201 	bic.w	r2, r3, #1
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	611a      	str	r2, [r3, #16]
  }
}
 800f81e:	bf00      	nop
 800f820:	3714      	adds	r7, #20
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	40010000 	.word	0x40010000
 800f830:	40000400 	.word	0x40000400
 800f834:	40000800 	.word	0x40000800
 800f838:	40000c00 	.word	0x40000c00
 800f83c:	40014000 	.word	0x40014000
 800f840:	40014400 	.word	0x40014400
 800f844:	40014800 	.word	0x40014800

0800f848 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a1c      	ldr	r2, [pc, #112]	@ (800f8c4 <TIM_ResetCallback+0x7c>)
 800f854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a1b      	ldr	r2, [pc, #108]	@ (800f8c8 <TIM_ResetCallback+0x80>)
 800f85c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a1a      	ldr	r2, [pc, #104]	@ (800f8cc <TIM_ResetCallback+0x84>)
 800f864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a19      	ldr	r2, [pc, #100]	@ (800f8d0 <TIM_ResetCallback+0x88>)
 800f86c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a18      	ldr	r2, [pc, #96]	@ (800f8d4 <TIM_ResetCallback+0x8c>)
 800f874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a17      	ldr	r2, [pc, #92]	@ (800f8d8 <TIM_ResetCallback+0x90>)
 800f87c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a16      	ldr	r2, [pc, #88]	@ (800f8dc <TIM_ResetCallback+0x94>)
 800f884:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a15      	ldr	r2, [pc, #84]	@ (800f8e0 <TIM_ResetCallback+0x98>)
 800f88c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a14      	ldr	r2, [pc, #80]	@ (800f8e4 <TIM_ResetCallback+0x9c>)
 800f894:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a13      	ldr	r2, [pc, #76]	@ (800f8e8 <TIM_ResetCallback+0xa0>)
 800f89c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a12      	ldr	r2, [pc, #72]	@ (800f8ec <TIM_ResetCallback+0xa4>)
 800f8a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a11      	ldr	r2, [pc, #68]	@ (800f8f0 <TIM_ResetCallback+0xa8>)
 800f8ac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a10      	ldr	r2, [pc, #64]	@ (800f8f4 <TIM_ResetCallback+0xac>)
 800f8b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr
 800f8c4:	0800b331 	.word	0x0800b331
 800f8c8:	0800f409 	.word	0x0800f409
 800f8cc:	0800f481 	.word	0x0800f481
 800f8d0:	0800f495 	.word	0x0800f495
 800f8d4:	0800f431 	.word	0x0800f431
 800f8d8:	0800f445 	.word	0x0800f445
 800f8dc:	0800f41d 	.word	0x0800f41d
 800f8e0:	0800f459 	.word	0x0800f459
 800f8e4:	0800f46d 	.word	0x0800f46d
 800f8e8:	0800f4a9 	.word	0x0800f4a9
 800f8ec:	0800f8f9 	.word	0x0800f8f9
 800f8f0:	0800f90d 	.word	0x0800f90d
 800f8f4:	0800f921 	.word	0x0800f921

0800f8f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f934:	b084      	sub	sp, #16
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	f107 001c 	add.w	r0, r7, #28
 800f942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f946:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d123      	bne.n	800f996 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f952:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800f962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d105      	bne.n	800f98a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f001 fae8 	bl	8010f60 <USB_CoreReset>
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]
 800f994:	e01b      	b.n	800f9ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f001 fadc 	bl	8010f60 <USB_CoreReset>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f9ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	639a      	str	r2, [r3, #56]	@ 0x38
 800f9c0:	e005      	b.n	800f9ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f9ce:	7fbb      	ldrb	r3, [r7, #30]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d10b      	bne.n	800f9ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	f043 0206 	orr.w	r2, r3, #6
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f043 0220 	orr.w	r2, r3, #32
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9f8:	b004      	add	sp, #16
 800f9fa:	4770      	bx	lr

0800f9fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	4613      	mov	r3, r2
 800fa08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa0a:	79fb      	ldrb	r3, [r7, #7]
 800fa0c:	2b02      	cmp	r3, #2
 800fa0e:	d165      	bne.n	800fadc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	4a41      	ldr	r2, [pc, #260]	@ (800fb18 <USB_SetTurnaroundTime+0x11c>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d906      	bls.n	800fa26 <USB_SetTurnaroundTime+0x2a>
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	4a40      	ldr	r2, [pc, #256]	@ (800fb1c <USB_SetTurnaroundTime+0x120>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d202      	bcs.n	800fa26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa20:	230f      	movs	r3, #15
 800fa22:	617b      	str	r3, [r7, #20]
 800fa24:	e062      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	4a3c      	ldr	r2, [pc, #240]	@ (800fb1c <USB_SetTurnaroundTime+0x120>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d306      	bcc.n	800fa3c <USB_SetTurnaroundTime+0x40>
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	4a3b      	ldr	r2, [pc, #236]	@ (800fb20 <USB_SetTurnaroundTime+0x124>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d202      	bcs.n	800fa3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fa36:	230e      	movs	r3, #14
 800fa38:	617b      	str	r3, [r7, #20]
 800fa3a:	e057      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	4a38      	ldr	r2, [pc, #224]	@ (800fb20 <USB_SetTurnaroundTime+0x124>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d306      	bcc.n	800fa52 <USB_SetTurnaroundTime+0x56>
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	4a37      	ldr	r2, [pc, #220]	@ (800fb24 <USB_SetTurnaroundTime+0x128>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d202      	bcs.n	800fa52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fa4c:	230d      	movs	r3, #13
 800fa4e:	617b      	str	r3, [r7, #20]
 800fa50:	e04c      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	4a33      	ldr	r2, [pc, #204]	@ (800fb24 <USB_SetTurnaroundTime+0x128>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d306      	bcc.n	800fa68 <USB_SetTurnaroundTime+0x6c>
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	4a32      	ldr	r2, [pc, #200]	@ (800fb28 <USB_SetTurnaroundTime+0x12c>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d802      	bhi.n	800fa68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fa62:	230c      	movs	r3, #12
 800fa64:	617b      	str	r3, [r7, #20]
 800fa66:	e041      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	4a2f      	ldr	r2, [pc, #188]	@ (800fb28 <USB_SetTurnaroundTime+0x12c>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d906      	bls.n	800fa7e <USB_SetTurnaroundTime+0x82>
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	4a2e      	ldr	r2, [pc, #184]	@ (800fb2c <USB_SetTurnaroundTime+0x130>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d802      	bhi.n	800fa7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa78:	230b      	movs	r3, #11
 800fa7a:	617b      	str	r3, [r7, #20]
 800fa7c:	e036      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	4a2a      	ldr	r2, [pc, #168]	@ (800fb2c <USB_SetTurnaroundTime+0x130>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d906      	bls.n	800fa94 <USB_SetTurnaroundTime+0x98>
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	4a29      	ldr	r2, [pc, #164]	@ (800fb30 <USB_SetTurnaroundTime+0x134>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d802      	bhi.n	800fa94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa8e:	230a      	movs	r3, #10
 800fa90:	617b      	str	r3, [r7, #20]
 800fa92:	e02b      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	4a26      	ldr	r2, [pc, #152]	@ (800fb30 <USB_SetTurnaroundTime+0x134>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d906      	bls.n	800faaa <USB_SetTurnaroundTime+0xae>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	4a25      	ldr	r2, [pc, #148]	@ (800fb34 <USB_SetTurnaroundTime+0x138>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d202      	bcs.n	800faaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800faa4:	2309      	movs	r3, #9
 800faa6:	617b      	str	r3, [r7, #20]
 800faa8:	e020      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	4a21      	ldr	r2, [pc, #132]	@ (800fb34 <USB_SetTurnaroundTime+0x138>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d306      	bcc.n	800fac0 <USB_SetTurnaroundTime+0xc4>
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	4a20      	ldr	r2, [pc, #128]	@ (800fb38 <USB_SetTurnaroundTime+0x13c>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d802      	bhi.n	800fac0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800faba:	2308      	movs	r3, #8
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e015      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	4a1d      	ldr	r2, [pc, #116]	@ (800fb38 <USB_SetTurnaroundTime+0x13c>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d906      	bls.n	800fad6 <USB_SetTurnaroundTime+0xda>
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	4a1c      	ldr	r2, [pc, #112]	@ (800fb3c <USB_SetTurnaroundTime+0x140>)
 800facc:	4293      	cmp	r3, r2
 800face:	d202      	bcs.n	800fad6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fad0:	2307      	movs	r3, #7
 800fad2:	617b      	str	r3, [r7, #20]
 800fad4:	e00a      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fad6:	2306      	movs	r3, #6
 800fad8:	617b      	str	r3, [r7, #20]
 800fada:	e007      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d102      	bne.n	800fae8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fae2:	2309      	movs	r3, #9
 800fae4:	617b      	str	r3, [r7, #20]
 800fae6:	e001      	b.n	800faec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fae8:	2309      	movs	r3, #9
 800faea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	68da      	ldr	r2, [r3, #12]
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	029b      	lsls	r3, r3, #10
 800fb00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800fb04:	431a      	orrs	r2, r3
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	371c      	adds	r7, #28
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	00d8acbf 	.word	0x00d8acbf
 800fb1c:	00e4e1c0 	.word	0x00e4e1c0
 800fb20:	00f42400 	.word	0x00f42400
 800fb24:	01067380 	.word	0x01067380
 800fb28:	011a499f 	.word	0x011a499f
 800fb2c:	01312cff 	.word	0x01312cff
 800fb30:	014ca43f 	.word	0x014ca43f
 800fb34:	016e3600 	.word	0x016e3600
 800fb38:	01a6ab1f 	.word	0x01a6ab1f
 800fb3c:	01e84800 	.word	0x01e84800

0800fb40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	f043 0201 	orr.w	r2, r3, #1
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr

0800fb62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	f023 0201 	bic.w	r2, r3, #1
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr

0800fb84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fb90:	2300      	movs	r3, #0
 800fb92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fba0:	78fb      	ldrb	r3, [r7, #3]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d115      	bne.n	800fbd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fbb2:	200a      	movs	r0, #10
 800fbb4:	f7fd f89a 	bl	800ccec <HAL_Delay>
      ms += 10U;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	330a      	adds	r3, #10
 800fbbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f001 f93f 	bl	8010e42 <USB_GetMode>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d01e      	beq.n	800fc08 <USB_SetCurrentMode+0x84>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2bc7      	cmp	r3, #199	@ 0xc7
 800fbce:	d9f0      	bls.n	800fbb2 <USB_SetCurrentMode+0x2e>
 800fbd0:	e01a      	b.n	800fc08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fbd2:	78fb      	ldrb	r3, [r7, #3]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d115      	bne.n	800fc04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fbe4:	200a      	movs	r0, #10
 800fbe6:	f7fd f881 	bl	800ccec <HAL_Delay>
      ms += 10U;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	330a      	adds	r3, #10
 800fbee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f001 f926 	bl	8010e42 <USB_GetMode>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <USB_SetCurrentMode+0x84>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2bc7      	cmp	r3, #199	@ 0xc7
 800fc00:	d9f0      	bls.n	800fbe4 <USB_SetCurrentMode+0x60>
 800fc02:	e001      	b.n	800fc08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fc04:	2301      	movs	r3, #1
 800fc06:	e005      	b.n	800fc14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2bc8      	cmp	r3, #200	@ 0xc8
 800fc0c:	d101      	bne.n	800fc12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e000      	b.n	800fc14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b086      	sub	sp, #24
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800fc2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fc36:	2300      	movs	r3, #0
 800fc38:	613b      	str	r3, [r7, #16]
 800fc3a:	e009      	b.n	800fc50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	3340      	adds	r3, #64	@ 0x40
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	613b      	str	r3, [r7, #16]
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	2b0e      	cmp	r3, #14
 800fc54:	d9f2      	bls.n	800fc3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fc56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d11c      	bne.n	800fc98 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fc6c:	f043 0302 	orr.w	r3, r3, #2
 800fc70:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	639a      	str	r2, [r3, #56]	@ 0x38
 800fc96:	e00b      	b.n	800fcb0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fca8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	2300      	movs	r3, #0
 800fcba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fcbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d10d      	bne.n	800fce0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d104      	bne.n	800fcd6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fccc:	2100      	movs	r1, #0
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 f968 	bl	800ffa4 <USB_SetDevSpeed>
 800fcd4:	e008      	b.n	800fce8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fcd6:	2101      	movs	r1, #1
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f963 	bl	800ffa4 <USB_SetDevSpeed>
 800fcde:	e003      	b.n	800fce8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fce0:	2103      	movs	r1, #3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 f95e 	bl	800ffa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fce8:	2110      	movs	r1, #16
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f8fa 	bl	800fee4 <USB_FlushTxFifo>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d001      	beq.n	800fcfa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f924 	bl	800ff48 <USB_FlushRxFifo>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d001      	beq.n	800fd0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd10:	461a      	mov	r2, r3
 800fd12:	2300      	movs	r3, #0
 800fd14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	2300      	movs	r3, #0
 800fd20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd28:	461a      	mov	r2, r3
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd2e:	2300      	movs	r3, #0
 800fd30:	613b      	str	r3, [r7, #16]
 800fd32:	e043      	b.n	800fdbc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd4a:	d118      	bne.n	800fd7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10a      	bne.n	800fd68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	015a      	lsls	r2, r3, #5
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	4413      	add	r3, r2
 800fd5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	e013      	b.n	800fd90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	015a      	lsls	r2, r3, #5
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd74:	461a      	mov	r2, r3
 800fd76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	e008      	b.n	800fd90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	015a      	lsls	r2, r3, #5
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	4413      	add	r3, r2
 800fd86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	2300      	movs	r3, #0
 800fda0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	015a      	lsls	r2, r3, #5
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	4413      	add	r3, r2
 800fdaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdae:	461a      	mov	r2, r3
 800fdb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fdb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	613b      	str	r3, [r7, #16]
 800fdbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d3b5      	bcc.n	800fd34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	613b      	str	r3, [r7, #16]
 800fdcc:	e043      	b.n	800fe56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fde0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fde4:	d118      	bne.n	800fe18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	015a      	lsls	r2, r3, #5
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	e013      	b.n	800fe2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe0e:	461a      	mov	r2, r3
 800fe10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	e008      	b.n	800fe2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	015a      	lsls	r2, r3, #5
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4413      	add	r3, r2
 800fe20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe24:	461a      	mov	r2, r3
 800fe26:	2300      	movs	r3, #0
 800fe28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	015a      	lsls	r2, r3, #5
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	4413      	add	r3, r2
 800fe32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe36:	461a      	mov	r2, r3
 800fe38:	2300      	movs	r3, #0
 800fe3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	015a      	lsls	r2, r3, #5
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4413      	add	r3, r2
 800fe44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe48:	461a      	mov	r2, r3
 800fe4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fe4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	3301      	adds	r3, #1
 800fe54:	613b      	str	r3, [r7, #16]
 800fe56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d3b5      	bcc.n	800fdce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fe70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fe82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fe84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d105      	bne.n	800fe98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	699b      	ldr	r3, [r3, #24]
 800fe90:	f043 0210 	orr.w	r2, r3, #16
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	699a      	ldr	r2, [r3, #24]
 800fe9c:	4b10      	ldr	r3, [pc, #64]	@ (800fee0 <USB_DevInit+0x2c4>)
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fea4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d005      	beq.n	800feb8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	699b      	ldr	r3, [r3, #24]
 800feb0:	f043 0208 	orr.w	r2, r3, #8
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800feb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800febc:	2b01      	cmp	r3, #1
 800febe:	d107      	bne.n	800fed0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fec8:	f043 0304 	orr.w	r3, r3, #4
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fedc:	b004      	add	sp, #16
 800fede:	4770      	bx	lr
 800fee0:	803c3800 	.word	0x803c3800

0800fee4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800feee:	2300      	movs	r3, #0
 800fef0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	3301      	adds	r3, #1
 800fef6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fefe:	d901      	bls.n	800ff04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ff00:	2303      	movs	r3, #3
 800ff02:	e01b      	b.n	800ff3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	daf2      	bge.n	800fef2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	019b      	lsls	r3, r3, #6
 800ff14:	f043 0220 	orr.w	r2, r3, #32
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ff28:	d901      	bls.n	800ff2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	e006      	b.n	800ff3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	f003 0320 	and.w	r3, r3, #32
 800ff36:	2b20      	cmp	r3, #32
 800ff38:	d0f0      	beq.n	800ff1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff50:	2300      	movs	r3, #0
 800ff52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	3301      	adds	r3, #1
 800ff58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ff60:	d901      	bls.n	800ff66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ff62:	2303      	movs	r3, #3
 800ff64:	e018      	b.n	800ff98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	691b      	ldr	r3, [r3, #16]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	daf2      	bge.n	800ff54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2210      	movs	r2, #16
 800ff76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ff84:	d901      	bls.n	800ff8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ff86:	2303      	movs	r3, #3
 800ff88:	e006      	b.n	800ff98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	f003 0310 	and.w	r3, r3, #16
 800ff92:	2b10      	cmp	r3, #16
 800ff94:	d0f0      	beq.n	800ff78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ff96:	2300      	movs	r3, #0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3714      	adds	r7, #20
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr

0800ffa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	460b      	mov	r3, r1
 800ffae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	78fb      	ldrb	r3, [r7, #3]
 800ffbe:	68f9      	ldr	r1, [r7, #12]
 800ffc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ffd6:	b480      	push	{r7}
 800ffd8:	b087      	sub	sp, #28
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	f003 0306 	and.w	r3, r3, #6
 800ffee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d102      	bne.n	800fffc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fff6:	2300      	movs	r3, #0
 800fff8:	75fb      	strb	r3, [r7, #23]
 800fffa:	e00a      	b.n	8010012 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2b02      	cmp	r3, #2
 8010000:	d002      	beq.n	8010008 <USB_GetDevSpeed+0x32>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2b06      	cmp	r3, #6
 8010006:	d102      	bne.n	801000e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010008:	2302      	movs	r3, #2
 801000a:	75fb      	strb	r3, [r7, #23]
 801000c:	e001      	b.n	8010012 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801000e:	230f      	movs	r3, #15
 8010010:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010012:	7dfb      	ldrb	r3, [r7, #23]
}
 8010014:	4618      	mov	r0, r3
 8010016:	371c      	adds	r7, #28
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	785b      	ldrb	r3, [r3, #1]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d13a      	bne.n	80100b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010042:	69da      	ldr	r2, [r3, #28]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f003 030f 	and.w	r3, r3, #15
 801004c:	2101      	movs	r1, #1
 801004e:	fa01 f303 	lsl.w	r3, r1, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	68f9      	ldr	r1, [r7, #12]
 8010056:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801005a:	4313      	orrs	r3, r2
 801005c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010070:	2b00      	cmp	r3, #0
 8010072:	d155      	bne.n	8010120 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	015a      	lsls	r2, r3, #5
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	4413      	add	r3, r2
 801007c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	689b      	ldr	r3, [r3, #8]
 8010086:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	791b      	ldrb	r3, [r3, #4]
 801008e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010090:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	059b      	lsls	r3, r3, #22
 8010096:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010098:	4313      	orrs	r3, r2
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	0151      	lsls	r1, r2, #5
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	440a      	add	r2, r1
 80100a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100ae:	6013      	str	r3, [r2, #0]
 80100b0:	e036      	b.n	8010120 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100b8:	69da      	ldr	r2, [r3, #28]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 030f 	and.w	r3, r3, #15
 80100c2:	2101      	movs	r1, #1
 80100c4:	fa01 f303 	lsl.w	r3, r1, r3
 80100c8:	041b      	lsls	r3, r3, #16
 80100ca:	68f9      	ldr	r1, [r7, #12]
 80100cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80100d0:	4313      	orrs	r3, r2
 80100d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d11a      	bne.n	8010120 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	015a      	lsls	r2, r3, #5
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	4413      	add	r3, r2
 80100f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	791b      	ldrb	r3, [r3, #4]
 8010104:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010106:	430b      	orrs	r3, r1
 8010108:	4313      	orrs	r3, r2
 801010a:	68ba      	ldr	r2, [r7, #8]
 801010c:	0151      	lsls	r1, r2, #5
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	440a      	add	r2, r1
 8010112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801011a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801011e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
	...

08010130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	785b      	ldrb	r3, [r3, #1]
 8010148:	2b01      	cmp	r3, #1
 801014a:	d161      	bne.n	8010210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	015a      	lsls	r2, r3, #5
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	4413      	add	r3, r2
 8010154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801015e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010162:	d11f      	bne.n	80101a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	0151      	lsls	r1, r2, #5
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	440a      	add	r2, r1
 801017a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801017e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	015a      	lsls	r2, r3, #5
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	4413      	add	r3, r2
 801018c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	0151      	lsls	r1, r2, #5
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	440a      	add	r2, r1
 801019a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801019e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80101a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	f003 030f 	and.w	r3, r3, #15
 80101b4:	2101      	movs	r1, #1
 80101b6:	fa01 f303 	lsl.w	r3, r1, r3
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	43db      	mvns	r3, r3
 80101be:	68f9      	ldr	r1, [r7, #12]
 80101c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101c4:	4013      	ands	r3, r2
 80101c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101ce:	69da      	ldr	r2, [r3, #28]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	f003 030f 	and.w	r3, r3, #15
 80101d8:	2101      	movs	r1, #1
 80101da:	fa01 f303 	lsl.w	r3, r1, r3
 80101de:	b29b      	uxth	r3, r3
 80101e0:	43db      	mvns	r3, r3
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101e8:	4013      	ands	r3, r2
 80101ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	015a      	lsls	r2, r3, #5
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	4413      	add	r3, r2
 80101f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	0159      	lsls	r1, r3, #5
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	440b      	add	r3, r1
 8010202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010206:	4619      	mov	r1, r3
 8010208:	4b35      	ldr	r3, [pc, #212]	@ (80102e0 <USB_DeactivateEndpoint+0x1b0>)
 801020a:	4013      	ands	r3, r2
 801020c:	600b      	str	r3, [r1, #0]
 801020e:	e060      	b.n	80102d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	4413      	add	r3, r2
 8010218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010226:	d11f      	bne.n	8010268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4413      	add	r3, r2
 8010230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	0151      	lsls	r1, r2, #5
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	440a      	add	r2, r1
 801023e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010242:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	015a      	lsls	r2, r3, #5
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4413      	add	r3, r2
 8010250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68ba      	ldr	r2, [r7, #8]
 8010258:	0151      	lsls	r1, r2, #5
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	440a      	add	r2, r1
 801025e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010262:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	f003 030f 	and.w	r3, r3, #15
 8010278:	2101      	movs	r1, #1
 801027a:	fa01 f303 	lsl.w	r3, r1, r3
 801027e:	041b      	lsls	r3, r3, #16
 8010280:	43db      	mvns	r3, r3
 8010282:	68f9      	ldr	r1, [r7, #12]
 8010284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010288:	4013      	ands	r3, r2
 801028a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010292:	69da      	ldr	r2, [r3, #28]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	f003 030f 	and.w	r3, r3, #15
 801029c:	2101      	movs	r1, #1
 801029e:	fa01 f303 	lsl.w	r3, r1, r3
 80102a2:	041b      	lsls	r3, r3, #16
 80102a4:	43db      	mvns	r3, r3
 80102a6:	68f9      	ldr	r1, [r7, #12]
 80102a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80102ac:	4013      	ands	r3, r2
 80102ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	015a      	lsls	r2, r3, #5
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	4413      	add	r3, r2
 80102b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	0159      	lsls	r1, r3, #5
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	440b      	add	r3, r1
 80102c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102ca:	4619      	mov	r1, r3
 80102cc:	4b05      	ldr	r3, [pc, #20]	@ (80102e4 <USB_DeactivateEndpoint+0x1b4>)
 80102ce:	4013      	ands	r3, r2
 80102d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80102d2:	2300      	movs	r3, #0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3714      	adds	r7, #20
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	ec337800 	.word	0xec337800
 80102e4:	eff37800 	.word	0xeff37800

080102e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	@ 0x28
 80102ec:	af02      	add	r7, sp, #8
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	4613      	mov	r3, r2
 80102f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	785b      	ldrb	r3, [r3, #1]
 8010304:	2b01      	cmp	r3, #1
 8010306:	f040 817f 	bne.w	8010608 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d132      	bne.n	8010378 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	015a      	lsls	r2, r3, #5
 8010316:	69fb      	ldr	r3, [r7, #28]
 8010318:	4413      	add	r3, r2
 801031a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	69ba      	ldr	r2, [r7, #24]
 8010322:	0151      	lsls	r1, r2, #5
 8010324:	69fa      	ldr	r2, [r7, #28]
 8010326:	440a      	add	r2, r1
 8010328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801032c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010330:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	015a      	lsls	r2, r3, #5
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	4413      	add	r3, r2
 801033e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	0151      	lsls	r1, r2, #5
 8010348:	69fa      	ldr	r2, [r7, #28]
 801034a:	440a      	add	r2, r1
 801034c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010350:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	015a      	lsls	r2, r3, #5
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	4413      	add	r3, r2
 801035e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	0151      	lsls	r1, r2, #5
 8010368:	69fa      	ldr	r2, [r7, #28]
 801036a:	440a      	add	r2, r1
 801036c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010370:	0cdb      	lsrs	r3, r3, #19
 8010372:	04db      	lsls	r3, r3, #19
 8010374:	6113      	str	r3, [r2, #16]
 8010376:	e097      	b.n	80104a8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	015a      	lsls	r2, r3, #5
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	4413      	add	r3, r2
 8010380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	69ba      	ldr	r2, [r7, #24]
 8010388:	0151      	lsls	r1, r2, #5
 801038a:	69fa      	ldr	r2, [r7, #28]
 801038c:	440a      	add	r2, r1
 801038e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010392:	0cdb      	lsrs	r3, r3, #19
 8010394:	04db      	lsls	r3, r3, #19
 8010396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	015a      	lsls	r2, r3, #5
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	4413      	add	r3, r2
 80103a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103a4:	691b      	ldr	r3, [r3, #16]
 80103a6:	69ba      	ldr	r2, [r7, #24]
 80103a8:	0151      	lsls	r1, r2, #5
 80103aa:	69fa      	ldr	r2, [r7, #28]
 80103ac:	440a      	add	r2, r1
 80103ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80103b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80103b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80103ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d11a      	bne.n	80103f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	691a      	ldr	r2, [r3, #16]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d903      	bls.n	80103d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	689a      	ldr	r2, [r3, #8]
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	0151      	lsls	r1, r2, #5
 80103e8:	69fa      	ldr	r2, [r7, #28]
 80103ea:	440a      	add	r2, r1
 80103ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80103f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80103f4:	6113      	str	r3, [r2, #16]
 80103f6:	e044      	b.n	8010482 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	691a      	ldr	r2, [r3, #16]
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	4413      	add	r3, r2
 8010402:	1e5a      	subs	r2, r3, #1
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	fbb2 f3f3 	udiv	r3, r2, r3
 801040c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	015a      	lsls	r2, r3, #5
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	4413      	add	r3, r2
 8010416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801041a:	691a      	ldr	r2, [r3, #16]
 801041c:	8afb      	ldrh	r3, [r7, #22]
 801041e:	04d9      	lsls	r1, r3, #19
 8010420:	4ba4      	ldr	r3, [pc, #656]	@ (80106b4 <USB_EPStartXfer+0x3cc>)
 8010422:	400b      	ands	r3, r1
 8010424:	69b9      	ldr	r1, [r7, #24]
 8010426:	0148      	lsls	r0, r1, #5
 8010428:	69f9      	ldr	r1, [r7, #28]
 801042a:	4401      	add	r1, r0
 801042c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010430:	4313      	orrs	r3, r2
 8010432:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	791b      	ldrb	r3, [r3, #4]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d122      	bne.n	8010482 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	69ba      	ldr	r2, [r7, #24]
 801044c:	0151      	lsls	r1, r2, #5
 801044e:	69fa      	ldr	r2, [r7, #28]
 8010450:	440a      	add	r2, r1
 8010452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010456:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801045a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010468:	691a      	ldr	r2, [r3, #16]
 801046a:	8afb      	ldrh	r3, [r7, #22]
 801046c:	075b      	lsls	r3, r3, #29
 801046e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010472:	69b9      	ldr	r1, [r7, #24]
 8010474:	0148      	lsls	r0, r1, #5
 8010476:	69f9      	ldr	r1, [r7, #28]
 8010478:	4401      	add	r1, r0
 801047a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801047e:	4313      	orrs	r3, r2
 8010480:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	015a      	lsls	r2, r3, #5
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	4413      	add	r3, r2
 801048a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801048e:	691a      	ldr	r2, [r3, #16]
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010498:	69b9      	ldr	r1, [r7, #24]
 801049a:	0148      	lsls	r0, r1, #5
 801049c:	69f9      	ldr	r1, [r7, #28]
 801049e:	4401      	add	r1, r0
 80104a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80104a4:	4313      	orrs	r3, r2
 80104a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80104a8:	79fb      	ldrb	r3, [r7, #7]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d14b      	bne.n	8010546 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	69db      	ldr	r3, [r3, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d009      	beq.n	80104ca <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	015a      	lsls	r2, r3, #5
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	4413      	add	r3, r2
 80104be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104c2:	461a      	mov	r2, r3
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	791b      	ldrb	r3, [r3, #4]
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d128      	bne.n	8010524 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d110      	bne.n	8010504 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	015a      	lsls	r2, r3, #5
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	4413      	add	r3, r2
 80104ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	69ba      	ldr	r2, [r7, #24]
 80104f2:	0151      	lsls	r1, r2, #5
 80104f4:	69fa      	ldr	r2, [r7, #28]
 80104f6:	440a      	add	r2, r1
 80104f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	e00f      	b.n	8010524 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	015a      	lsls	r2, r3, #5
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	4413      	add	r3, r2
 801050c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	69ba      	ldr	r2, [r7, #24]
 8010514:	0151      	lsls	r1, r2, #5
 8010516:	69fa      	ldr	r2, [r7, #28]
 8010518:	440a      	add	r2, r1
 801051a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801051e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010522:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	015a      	lsls	r2, r3, #5
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	4413      	add	r3, r2
 801052c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	69ba      	ldr	r2, [r7, #24]
 8010534:	0151      	lsls	r1, r2, #5
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	440a      	add	r2, r1
 801053a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801053e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	e166      	b.n	8010814 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	015a      	lsls	r2, r3, #5
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	4413      	add	r3, r2
 801054e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	69ba      	ldr	r2, [r7, #24]
 8010556:	0151      	lsls	r1, r2, #5
 8010558:	69fa      	ldr	r2, [r7, #28]
 801055a:	440a      	add	r2, r1
 801055c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010560:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010564:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	791b      	ldrb	r3, [r3, #4]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d015      	beq.n	801059a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	691b      	ldr	r3, [r3, #16]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 814e 	beq.w	8010814 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801057e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	f003 030f 	and.w	r3, r3, #15
 8010588:	2101      	movs	r1, #1
 801058a:	fa01 f303 	lsl.w	r3, r1, r3
 801058e:	69f9      	ldr	r1, [r7, #28]
 8010590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010594:	4313      	orrs	r3, r2
 8010596:	634b      	str	r3, [r1, #52]	@ 0x34
 8010598:	e13c      	b.n	8010814 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d110      	bne.n	80105cc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	015a      	lsls	r2, r3, #5
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	4413      	add	r3, r2
 80105b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	69ba      	ldr	r2, [r7, #24]
 80105ba:	0151      	lsls	r1, r2, #5
 80105bc:	69fa      	ldr	r2, [r7, #28]
 80105be:	440a      	add	r2, r1
 80105c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80105c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80105c8:	6013      	str	r3, [r2, #0]
 80105ca:	e00f      	b.n	80105ec <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	015a      	lsls	r2, r3, #5
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	4413      	add	r3, r2
 80105d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	69ba      	ldr	r2, [r7, #24]
 80105dc:	0151      	lsls	r1, r2, #5
 80105de:	69fa      	ldr	r2, [r7, #28]
 80105e0:	440a      	add	r2, r1
 80105e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80105e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80105ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	68d9      	ldr	r1, [r3, #12]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	781a      	ldrb	r2, [r3, #0]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	b298      	uxth	r0, r3
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	4603      	mov	r3, r0
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f000 f9b9 	bl	8010978 <USB_WritePacket>
 8010606:	e105      	b.n	8010814 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	015a      	lsls	r2, r3, #5
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	4413      	add	r3, r2
 8010610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	69ba      	ldr	r2, [r7, #24]
 8010618:	0151      	lsls	r1, r2, #5
 801061a:	69fa      	ldr	r2, [r7, #28]
 801061c:	440a      	add	r2, r1
 801061e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010622:	0cdb      	lsrs	r3, r3, #19
 8010624:	04db      	lsls	r3, r3, #19
 8010626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	015a      	lsls	r2, r3, #5
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	4413      	add	r3, r2
 8010630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	69ba      	ldr	r2, [r7, #24]
 8010638:	0151      	lsls	r1, r2, #5
 801063a:	69fa      	ldr	r2, [r7, #28]
 801063c:	440a      	add	r2, r1
 801063e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010642:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010646:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801064a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d132      	bne.n	80106b8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d003      	beq.n	8010662 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	689a      	ldr	r2, [r3, #8]
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	689a      	ldr	r2, [r3, #8]
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	015a      	lsls	r2, r3, #5
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	4413      	add	r3, r2
 8010672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010676:	691a      	ldr	r2, [r3, #16]
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010680:	69b9      	ldr	r1, [r7, #24]
 8010682:	0148      	lsls	r0, r1, #5
 8010684:	69f9      	ldr	r1, [r7, #28]
 8010686:	4401      	add	r1, r0
 8010688:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801068c:	4313      	orrs	r3, r2
 801068e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	015a      	lsls	r2, r3, #5
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	4413      	add	r3, r2
 8010698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	69ba      	ldr	r2, [r7, #24]
 80106a0:	0151      	lsls	r1, r2, #5
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	440a      	add	r2, r1
 80106a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80106aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80106ae:	6113      	str	r3, [r2, #16]
 80106b0:	e062      	b.n	8010778 <USB_EPStartXfer+0x490>
 80106b2:	bf00      	nop
 80106b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d123      	bne.n	8010708 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	015a      	lsls	r2, r3, #5
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	4413      	add	r3, r2
 80106c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106cc:	691a      	ldr	r2, [r3, #16]
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106d6:	69b9      	ldr	r1, [r7, #24]
 80106d8:	0148      	lsls	r0, r1, #5
 80106da:	69f9      	ldr	r1, [r7, #28]
 80106dc:	4401      	add	r1, r0
 80106de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80106e2:	4313      	orrs	r3, r2
 80106e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	015a      	lsls	r2, r3, #5
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	4413      	add	r3, r2
 80106ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	69ba      	ldr	r2, [r7, #24]
 80106f6:	0151      	lsls	r1, r2, #5
 80106f8:	69fa      	ldr	r2, [r7, #28]
 80106fa:	440a      	add	r2, r1
 80106fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010704:	6113      	str	r3, [r2, #16]
 8010706:	e037      	b.n	8010778 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	691a      	ldr	r2, [r3, #16]
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	4413      	add	r3, r2
 8010712:	1e5a      	subs	r2, r3, #1
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	689b      	ldr	r3, [r3, #8]
 8010718:	fbb2 f3f3 	udiv	r3, r2, r3
 801071c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	8afa      	ldrh	r2, [r7, #22]
 8010724:	fb03 f202 	mul.w	r2, r3, r2
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	015a      	lsls	r2, r3, #5
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	4413      	add	r3, r2
 8010734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010738:	691a      	ldr	r2, [r3, #16]
 801073a:	8afb      	ldrh	r3, [r7, #22]
 801073c:	04d9      	lsls	r1, r3, #19
 801073e:	4b38      	ldr	r3, [pc, #224]	@ (8010820 <USB_EPStartXfer+0x538>)
 8010740:	400b      	ands	r3, r1
 8010742:	69b9      	ldr	r1, [r7, #24]
 8010744:	0148      	lsls	r0, r1, #5
 8010746:	69f9      	ldr	r1, [r7, #28]
 8010748:	4401      	add	r1, r0
 801074a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801074e:	4313      	orrs	r3, r2
 8010750:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	015a      	lsls	r2, r3, #5
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	4413      	add	r3, r2
 801075a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801075e:	691a      	ldr	r2, [r3, #16]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	6a1b      	ldr	r3, [r3, #32]
 8010764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010768:	69b9      	ldr	r1, [r7, #24]
 801076a:	0148      	lsls	r0, r1, #5
 801076c:	69f9      	ldr	r1, [r7, #28]
 801076e:	4401      	add	r1, r0
 8010770:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010774:	4313      	orrs	r3, r2
 8010776:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010778:	79fb      	ldrb	r3, [r7, #7]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d10d      	bne.n	801079a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d009      	beq.n	801079a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	68d9      	ldr	r1, [r3, #12]
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	015a      	lsls	r2, r3, #5
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	4413      	add	r3, r2
 8010792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010796:	460a      	mov	r2, r1
 8010798:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	791b      	ldrb	r3, [r3, #4]
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d128      	bne.n	80107f4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d110      	bne.n	80107d4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	015a      	lsls	r2, r3, #5
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	4413      	add	r3, r2
 80107ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	69ba      	ldr	r2, [r7, #24]
 80107c2:	0151      	lsls	r1, r2, #5
 80107c4:	69fa      	ldr	r2, [r7, #28]
 80107c6:	440a      	add	r2, r1
 80107c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	e00f      	b.n	80107f4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	015a      	lsls	r2, r3, #5
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	4413      	add	r3, r2
 80107dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	0151      	lsls	r1, r2, #5
 80107e6:	69fa      	ldr	r2, [r7, #28]
 80107e8:	440a      	add	r2, r1
 80107ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	015a      	lsls	r2, r3, #5
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	4413      	add	r3, r2
 80107fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	69ba      	ldr	r2, [r7, #24]
 8010804:	0151      	lsls	r1, r2, #5
 8010806:	69fa      	ldr	r2, [r7, #28]
 8010808:	440a      	add	r2, r1
 801080a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801080e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010812:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3720      	adds	r7, #32
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	1ff80000 	.word	0x1ff80000

08010824 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010824:	b480      	push	{r7}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801082e:	2300      	movs	r3, #0
 8010830:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	785b      	ldrb	r3, [r3, #1]
 801083e:	2b01      	cmp	r3, #1
 8010840:	d14a      	bne.n	80108d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	015a      	lsls	r2, r3, #5
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	4413      	add	r3, r2
 801084c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801085a:	f040 8086 	bne.w	801096a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	015a      	lsls	r2, r3, #5
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	4413      	add	r3, r2
 8010868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	683a      	ldr	r2, [r7, #0]
 8010870:	7812      	ldrb	r2, [r2, #0]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	440a      	add	r2, r1
 8010878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801087c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010880:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	4413      	add	r3, r2
 801088c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	7812      	ldrb	r2, [r2, #0]
 8010896:	0151      	lsls	r1, r2, #5
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	440a      	add	r2, r1
 801089c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80108a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	3301      	adds	r3, #1
 80108aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d902      	bls.n	80108bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	75fb      	strb	r3, [r7, #23]
          break;
 80108ba:	e056      	b.n	801096a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108d4:	d0e7      	beq.n	80108a6 <USB_EPStopXfer+0x82>
 80108d6:	e048      	b.n	801096a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	015a      	lsls	r2, r3, #5
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	4413      	add	r3, r2
 80108e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108f0:	d13b      	bne.n	801096a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	015a      	lsls	r2, r3, #5
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	4413      	add	r3, r2
 80108fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	683a      	ldr	r2, [r7, #0]
 8010904:	7812      	ldrb	r2, [r2, #0]
 8010906:	0151      	lsls	r1, r2, #5
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	440a      	add	r2, r1
 801090c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010910:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010914:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	7812      	ldrb	r2, [r2, #0]
 801092a:	0151      	lsls	r1, r2, #5
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	440a      	add	r2, r1
 8010930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010938:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	3301      	adds	r3, #1
 801093e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010946:	4293      	cmp	r3, r2
 8010948:	d902      	bls.n	8010950 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	75fb      	strb	r3, [r7, #23]
          break;
 801094e:	e00c      	b.n	801096a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	015a      	lsls	r2, r3, #5
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	4413      	add	r3, r2
 801095a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010968:	d0e7      	beq.n	801093a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801096a:	7dfb      	ldrb	r3, [r7, #23]
}
 801096c:	4618      	mov	r0, r3
 801096e:	371c      	adds	r7, #28
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010978:	b480      	push	{r7}
 801097a:	b089      	sub	sp, #36	@ 0x24
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	4611      	mov	r1, r2
 8010984:	461a      	mov	r2, r3
 8010986:	460b      	mov	r3, r1
 8010988:	71fb      	strb	r3, [r7, #7]
 801098a:	4613      	mov	r3, r2
 801098c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801099a:	2b00      	cmp	r3, #0
 801099c:	d123      	bne.n	80109e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801099e:	88bb      	ldrh	r3, [r7, #4]
 80109a0:	3303      	adds	r3, #3
 80109a2:	089b      	lsrs	r3, r3, #2
 80109a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80109a6:	2300      	movs	r3, #0
 80109a8:	61bb      	str	r3, [r7, #24]
 80109aa:	e018      	b.n	80109de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80109ac:	79fb      	ldrb	r3, [r7, #7]
 80109ae:	031a      	lsls	r2, r3, #12
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	4413      	add	r3, r2
 80109b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80109b8:	461a      	mov	r2, r3
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	3301      	adds	r3, #1
 80109c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	3301      	adds	r3, #1
 80109ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	3301      	adds	r3, #1
 80109d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	3301      	adds	r3, #1
 80109d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	3301      	adds	r3, #1
 80109dc:	61bb      	str	r3, [r7, #24]
 80109de:	69ba      	ldr	r2, [r7, #24]
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d3e2      	bcc.n	80109ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3724      	adds	r7, #36	@ 0x24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr

080109f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b08b      	sub	sp, #44	@ 0x2c
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	4613      	mov	r3, r2
 8010a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010a0a:	88fb      	ldrh	r3, [r7, #6]
 8010a0c:	089b      	lsrs	r3, r3, #2
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010a12:	88fb      	ldrh	r3, [r7, #6]
 8010a14:	f003 0303 	and.w	r3, r3, #3
 8010a18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	623b      	str	r3, [r7, #32]
 8010a1e:	e014      	b.n	8010a4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2e:	3301      	adds	r3, #1
 8010a30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a34:	3301      	adds	r3, #1
 8010a36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a40:	3301      	adds	r3, #1
 8010a42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010a44:	6a3b      	ldr	r3, [r7, #32]
 8010a46:	3301      	adds	r3, #1
 8010a48:	623b      	str	r3, [r7, #32]
 8010a4a:	6a3a      	ldr	r2, [r7, #32]
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d3e6      	bcc.n	8010a20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010a52:	8bfb      	ldrh	r3, [r7, #30]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d01e      	beq.n	8010a96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a62:	461a      	mov	r2, r3
 8010a64:	f107 0310 	add.w	r3, r7, #16
 8010a68:	6812      	ldr	r2, [r2, #0]
 8010a6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	6a3b      	ldr	r3, [r7, #32]
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	fa22 f303 	lsr.w	r3, r2, r3
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7c:	701a      	strb	r2, [r3, #0]
      i++;
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	3301      	adds	r3, #1
 8010a82:	623b      	str	r3, [r7, #32]
      pDest++;
 8010a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a86:	3301      	adds	r3, #1
 8010a88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010a8a:	8bfb      	ldrh	r3, [r7, #30]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010a90:	8bfb      	ldrh	r3, [r7, #30]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1ea      	bne.n	8010a6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	372c      	adds	r7, #44	@ 0x2c
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	785b      	ldrb	r3, [r3, #1]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d12c      	bne.n	8010b1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	db12      	blt.n	8010af8 <USB_EPSetStall+0x54>
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00f      	beq.n	8010af8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	015a      	lsls	r2, r3, #5
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	0151      	lsls	r1, r2, #5
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	440a      	add	r2, r1
 8010aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010af2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010af6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	015a      	lsls	r2, r3, #5
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	4413      	add	r3, r2
 8010b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	68ba      	ldr	r2, [r7, #8]
 8010b08:	0151      	lsls	r1, r2, #5
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	440a      	add	r2, r1
 8010b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010b16:	6013      	str	r3, [r2, #0]
 8010b18:	e02b      	b.n	8010b72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	015a      	lsls	r2, r3, #5
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	4413      	add	r3, r2
 8010b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	db12      	blt.n	8010b52 <USB_EPSetStall+0xae>
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00f      	beq.n	8010b52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	4413      	add	r3, r2
 8010b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	0151      	lsls	r1, r2, #5
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	440a      	add	r2, r1
 8010b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010b50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	015a      	lsls	r2, r3, #5
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	4413      	add	r3, r2
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	0151      	lsls	r1, r2, #5
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	440a      	add	r2, r1
 8010b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3714      	adds	r7, #20
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	785b      	ldrb	r3, [r3, #1]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d128      	bne.n	8010bee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	015a      	lsls	r2, r3, #5
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68ba      	ldr	r2, [r7, #8]
 8010bac:	0151      	lsls	r1, r2, #5
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	440a      	add	r2, r1
 8010bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010bb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010bba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	791b      	ldrb	r3, [r3, #4]
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d003      	beq.n	8010bcc <USB_EPClearStall+0x4c>
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	791b      	ldrb	r3, [r3, #4]
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d138      	bne.n	8010c3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	015a      	lsls	r2, r3, #5
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	0151      	lsls	r1, r2, #5
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	440a      	add	r2, r1
 8010be2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010bea:	6013      	str	r3, [r2, #0]
 8010bec:	e027      	b.n	8010c3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	015a      	lsls	r2, r3, #5
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	68ba      	ldr	r2, [r7, #8]
 8010bfe:	0151      	lsls	r1, r2, #5
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	440a      	add	r2, r1
 8010c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	791b      	ldrb	r3, [r3, #4]
 8010c12:	2b03      	cmp	r3, #3
 8010c14:	d003      	beq.n	8010c1e <USB_EPClearStall+0x9e>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	791b      	ldrb	r3, [r3, #4]
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d10f      	bne.n	8010c3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	015a      	lsls	r2, r3, #5
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	4413      	add	r3, r2
 8010c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	0151      	lsls	r1, r2, #5
 8010c30:	68fa      	ldr	r2, [r7, #12]
 8010c32:	440a      	add	r2, r1
 8010c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	460b      	mov	r3, r1
 8010c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68fa      	ldr	r2, [r7, #12]
 8010c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010c6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	78fb      	ldrb	r3, [r7, #3]
 8010c7a:	011b      	lsls	r3, r3, #4
 8010c7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010c80:	68f9      	ldr	r1, [r7, #12]
 8010c82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c86:	4313      	orrs	r3, r2
 8010c88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3714      	adds	r7, #20
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	68fa      	ldr	r2, [r7, #12]
 8010cae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010cb2:	f023 0303 	bic.w	r3, r3, #3
 8010cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010cc6:	f023 0302 	bic.w	r3, r3, #2
 8010cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3714      	adds	r7, #20
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr

08010cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b085      	sub	sp, #20
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010cf4:	f023 0303 	bic.w	r3, r3, #3
 8010cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	68fa      	ldr	r2, [r7, #12]
 8010d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010d08:	f043 0302 	orr.w	r3, r3, #2
 8010d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	695b      	ldr	r3, [r3, #20]
 8010d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	4013      	ands	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010d34:	68fb      	ldr	r3, [r7, #12]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010d42:	b480      	push	{r7}
 8010d44:	b085      	sub	sp, #20
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d54:	699b      	ldr	r3, [r3, #24]
 8010d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d5e:	69db      	ldr	r3, [r3, #28]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	4013      	ands	r3, r2
 8010d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	0c1b      	lsrs	r3, r3, #16
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr

08010d76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010d76:	b480      	push	{r7}
 8010d78:	b085      	sub	sp, #20
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	4013      	ands	r3, r2
 8010d98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	b29b      	uxth	r3, r3
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr

08010daa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b085      	sub	sp, #20
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
 8010db2:	460b      	mov	r3, r1
 8010db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	015a      	lsls	r2, r3, #5
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dd0:	695b      	ldr	r3, [r3, #20]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr

08010de6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010de6:	b480      	push	{r7}
 8010de8:	b087      	sub	sp, #28
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
 8010dee:	460b      	mov	r3, r1
 8010df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010e0a:	78fb      	ldrb	r3, [r7, #3]
 8010e0c:	f003 030f 	and.w	r3, r3, #15
 8010e10:	68fa      	ldr	r2, [r7, #12]
 8010e12:	fa22 f303 	lsr.w	r3, r2, r3
 8010e16:	01db      	lsls	r3, r3, #7
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	693a      	ldr	r2, [r7, #16]
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010e20:	78fb      	ldrb	r3, [r7, #3]
 8010e22:	015a      	lsls	r2, r3, #5
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	4413      	add	r3, r2
 8010e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	693a      	ldr	r2, [r7, #16]
 8010e30:	4013      	ands	r3, r2
 8010e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e34:	68bb      	ldr	r3, [r7, #8]
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	371c      	adds	r7, #28
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr

08010e42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010e42:	b480      	push	{r7}
 8010e44:	b083      	sub	sp, #12
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	f003 0301 	and.w	r3, r3, #1
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b085      	sub	sp, #20
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8010e7c:	f023 0307 	bic.w	r3, r3, #7
 8010e80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b087      	sub	sp, #28
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	460b      	mov	r3, r1
 8010eae:	607a      	str	r2, [r7, #4]
 8010eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	333c      	adds	r3, #60	@ 0x3c
 8010eba:	3304      	adds	r3, #4
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	4a26      	ldr	r2, [pc, #152]	@ (8010f5c <USB_EP0_OutStart+0xb8>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d90a      	bls.n	8010ede <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ed8:	d101      	bne.n	8010ede <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	e037      	b.n	8010f4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	697a      	ldr	r2, [r7, #20]
 8010ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	697a      	ldr	r2, [r7, #20]
 8010f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f0c:	f043 0318 	orr.w	r3, r3, #24
 8010f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	697a      	ldr	r2, [r7, #20]
 8010f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f20:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010f24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010f26:	7afb      	ldrb	r3, [r7, #11]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d10f      	bne.n	8010f4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f32:	461a      	mov	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f46:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010f4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	371c      	adds	r7, #28
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	4f54300a 	.word	0x4f54300a

08010f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f78:	d901      	bls.n	8010f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	e01b      	b.n	8010fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	daf2      	bge.n	8010f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	f043 0201 	orr.w	r2, r3, #1
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010fa2:	d901      	bls.n	8010fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	e006      	b.n	8010fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	f003 0301 	and.w	r3, r3, #1
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d0f0      	beq.n	8010f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
	...

08010fc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b084      	sub	sp, #16
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010fd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010fd4:	f005 fe24 	bl	8016c20 <USBD_static_malloc>
 8010fd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d109      	bne.n	8010ff4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	32b0      	adds	r2, #176	@ 0xb0
 8010fea:	2100      	movs	r1, #0
 8010fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	e0d4      	b.n	801119e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010ff4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f006 fdf5 	bl	8017bea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	32b0      	adds	r2, #176	@ 0xb0
 801100a:	68f9      	ldr	r1, [r7, #12]
 801100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	32b0      	adds	r2, #176	@ 0xb0
 801101a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	7c1b      	ldrb	r3, [r3, #16]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d138      	bne.n	801109e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801102c:	4b5e      	ldr	r3, [pc, #376]	@ (80111a8 <USBD_CDC_Init+0x1e4>)
 801102e:	7819      	ldrb	r1, [r3, #0]
 8011030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011034:	2202      	movs	r2, #2
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f005 fccf 	bl	80169da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801103c:	4b5a      	ldr	r3, [pc, #360]	@ (80111a8 <USBD_CDC_Init+0x1e4>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f003 020f 	and.w	r2, r3, #15
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	4613      	mov	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	4413      	add	r3, r2
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	440b      	add	r3, r1
 8011050:	3324      	adds	r3, #36	@ 0x24
 8011052:	2201      	movs	r2, #1
 8011054:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011056:	4b55      	ldr	r3, [pc, #340]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 8011058:	7819      	ldrb	r1, [r3, #0]
 801105a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801105e:	2202      	movs	r2, #2
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f005 fcba 	bl	80169da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011066:	4b51      	ldr	r3, [pc, #324]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	f003 020f 	and.w	r2, r3, #15
 801106e:	6879      	ldr	r1, [r7, #4]
 8011070:	4613      	mov	r3, r2
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	440b      	add	r3, r1
 801107a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801107e:	2201      	movs	r2, #1
 8011080:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011082:	4b4b      	ldr	r3, [pc, #300]	@ (80111b0 <USBD_CDC_Init+0x1ec>)
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	f003 020f 	and.w	r2, r3, #15
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	4613      	mov	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	440b      	add	r3, r1
 8011096:	3326      	adds	r3, #38	@ 0x26
 8011098:	2210      	movs	r2, #16
 801109a:	801a      	strh	r2, [r3, #0]
 801109c:	e035      	b.n	801110a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801109e:	4b42      	ldr	r3, [pc, #264]	@ (80111a8 <USBD_CDC_Init+0x1e4>)
 80110a0:	7819      	ldrb	r1, [r3, #0]
 80110a2:	2340      	movs	r3, #64	@ 0x40
 80110a4:	2202      	movs	r2, #2
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f005 fc97 	bl	80169da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80110ac:	4b3e      	ldr	r3, [pc, #248]	@ (80111a8 <USBD_CDC_Init+0x1e4>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	f003 020f 	and.w	r2, r3, #15
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	4613      	mov	r3, r2
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	4413      	add	r3, r2
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	440b      	add	r3, r1
 80110c0:	3324      	adds	r3, #36	@ 0x24
 80110c2:	2201      	movs	r2, #1
 80110c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80110c6:	4b39      	ldr	r3, [pc, #228]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 80110c8:	7819      	ldrb	r1, [r3, #0]
 80110ca:	2340      	movs	r3, #64	@ 0x40
 80110cc:	2202      	movs	r2, #2
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f005 fc83 	bl	80169da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80110d4:	4b35      	ldr	r3, [pc, #212]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	f003 020f 	and.w	r2, r3, #15
 80110dc:	6879      	ldr	r1, [r7, #4]
 80110de:	4613      	mov	r3, r2
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	440b      	add	r3, r1
 80110e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80110ec:	2201      	movs	r2, #1
 80110ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80110f0:	4b2f      	ldr	r3, [pc, #188]	@ (80111b0 <USBD_CDC_Init+0x1ec>)
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	f003 020f 	and.w	r2, r3, #15
 80110f8:	6879      	ldr	r1, [r7, #4]
 80110fa:	4613      	mov	r3, r2
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	4413      	add	r3, r2
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	440b      	add	r3, r1
 8011104:	3326      	adds	r3, #38	@ 0x26
 8011106:	2210      	movs	r2, #16
 8011108:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801110a:	4b29      	ldr	r3, [pc, #164]	@ (80111b0 <USBD_CDC_Init+0x1ec>)
 801110c:	7819      	ldrb	r1, [r3, #0]
 801110e:	2308      	movs	r3, #8
 8011110:	2203      	movs	r2, #3
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f005 fc61 	bl	80169da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011118:	4b25      	ldr	r3, [pc, #148]	@ (80111b0 <USBD_CDC_Init+0x1ec>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f003 020f 	and.w	r2, r3, #15
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	4613      	mov	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	440b      	add	r3, r1
 801112c:	3324      	adds	r3, #36	@ 0x24
 801112e:	2201      	movs	r2, #1
 8011130:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2200      	movs	r2, #0
 8011136:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	33b0      	adds	r3, #176	@ 0xb0
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	4413      	add	r3, r2
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2200      	movs	r2, #0
 801115a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011168:	2302      	movs	r3, #2
 801116a:	e018      	b.n	801119e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	7c1b      	ldrb	r3, [r3, #16]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10a      	bne.n	801118a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011174:	4b0d      	ldr	r3, [pc, #52]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 8011176:	7819      	ldrb	r1, [r3, #0]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801117e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f005 fd18 	bl	8016bb8 <USBD_LL_PrepareReceive>
 8011188:	e008      	b.n	801119c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801118a:	4b08      	ldr	r3, [pc, #32]	@ (80111ac <USBD_CDC_Init+0x1e8>)
 801118c:	7819      	ldrb	r1, [r3, #0]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011194:	2340      	movs	r3, #64	@ 0x40
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f005 fd0e 	bl	8016bb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000097 	.word	0x20000097
 80111ac:	20000098 	.word	0x20000098
 80111b0:	20000099 	.word	0x20000099

080111b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	460b      	mov	r3, r1
 80111be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80111c0:	4b3a      	ldr	r3, [pc, #232]	@ (80112ac <USBD_CDC_DeInit+0xf8>)
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f005 fc2d 	bl	8016a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80111cc:	4b37      	ldr	r3, [pc, #220]	@ (80112ac <USBD_CDC_DeInit+0xf8>)
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	f003 020f 	and.w	r2, r3, #15
 80111d4:	6879      	ldr	r1, [r7, #4]
 80111d6:	4613      	mov	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	440b      	add	r3, r1
 80111e0:	3324      	adds	r3, #36	@ 0x24
 80111e2:	2200      	movs	r2, #0
 80111e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80111e6:	4b32      	ldr	r3, [pc, #200]	@ (80112b0 <USBD_CDC_DeInit+0xfc>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f005 fc1a 	bl	8016a26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80111f2:	4b2f      	ldr	r3, [pc, #188]	@ (80112b0 <USBD_CDC_DeInit+0xfc>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	f003 020f 	and.w	r2, r3, #15
 80111fa:	6879      	ldr	r1, [r7, #4]
 80111fc:	4613      	mov	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	440b      	add	r3, r1
 8011206:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801120a:	2200      	movs	r2, #0
 801120c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801120e:	4b29      	ldr	r3, [pc, #164]	@ (80112b4 <USBD_CDC_DeInit+0x100>)
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	4619      	mov	r1, r3
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f005 fc06 	bl	8016a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801121a:	4b26      	ldr	r3, [pc, #152]	@ (80112b4 <USBD_CDC_DeInit+0x100>)
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	f003 020f 	and.w	r2, r3, #15
 8011222:	6879      	ldr	r1, [r7, #4]
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	440b      	add	r3, r1
 801122e:	3324      	adds	r3, #36	@ 0x24
 8011230:	2200      	movs	r2, #0
 8011232:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011234:	4b1f      	ldr	r3, [pc, #124]	@ (80112b4 <USBD_CDC_DeInit+0x100>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	f003 020f 	and.w	r2, r3, #15
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	4613      	mov	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	4413      	add	r3, r2
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	440b      	add	r3, r1
 8011248:	3326      	adds	r3, #38	@ 0x26
 801124a:	2200      	movs	r2, #0
 801124c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	32b0      	adds	r2, #176	@ 0xb0
 8011258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01f      	beq.n	80112a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	33b0      	adds	r3, #176	@ 0xb0
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	4413      	add	r3, r2
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	32b0      	adds	r2, #176	@ 0xb0
 801127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011282:	4618      	mov	r0, r3
 8011284:	f005 fcda 	bl	8016c3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	32b0      	adds	r2, #176	@ 0xb0
 8011292:	2100      	movs	r1, #0
 8011294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2200      	movs	r2, #0
 801129c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80112a0:	2300      	movs	r3, #0
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	20000097 	.word	0x20000097
 80112b0:	20000098 	.word	0x20000098
 80112b4:	20000099 	.word	0x20000099

080112b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	32b0      	adds	r2, #176	@ 0xb0
 80112cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80112d2:	2300      	movs	r3, #0
 80112d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80112d6:	2300      	movs	r3, #0
 80112d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80112e4:	2303      	movs	r3, #3
 80112e6:	e0bf      	b.n	8011468 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d050      	beq.n	8011396 <USBD_CDC_Setup+0xde>
 80112f4:	2b20      	cmp	r3, #32
 80112f6:	f040 80af 	bne.w	8011458 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	88db      	ldrh	r3, [r3, #6]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d03a      	beq.n	8011378 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	b25b      	sxtb	r3, r3
 8011308:	2b00      	cmp	r3, #0
 801130a:	da1b      	bge.n	8011344 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	33b0      	adds	r3, #176	@ 0xb0
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	4413      	add	r3, r2
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	689b      	ldr	r3, [r3, #8]
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011322:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	88d2      	ldrh	r2, [r2, #6]
 8011328:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	88db      	ldrh	r3, [r3, #6]
 801132e:	2b07      	cmp	r3, #7
 8011330:	bf28      	it	cs
 8011332:	2307      	movcs	r3, #7
 8011334:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	89fa      	ldrh	r2, [r7, #14]
 801133a:	4619      	mov	r1, r3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f001 fd93 	bl	8012e68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011342:	e090      	b.n	8011466 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	785a      	ldrb	r2, [r3, #1]
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	88db      	ldrh	r3, [r3, #6]
 8011352:	2b3f      	cmp	r3, #63	@ 0x3f
 8011354:	d803      	bhi.n	801135e <USBD_CDC_Setup+0xa6>
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	88db      	ldrh	r3, [r3, #6]
 801135a:	b2da      	uxtb	r2, r3
 801135c:	e000      	b.n	8011360 <USBD_CDC_Setup+0xa8>
 801135e:	2240      	movs	r2, #64	@ 0x40
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011366:	6939      	ldr	r1, [r7, #16]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801136e:	461a      	mov	r2, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f001 fda5 	bl	8012ec0 <USBD_CtlPrepareRx>
      break;
 8011376:	e076      	b.n	8011466 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	33b0      	adds	r3, #176	@ 0xb0
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	4413      	add	r3, r2
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	7850      	ldrb	r0, [r2, #1]
 801138e:	2200      	movs	r2, #0
 8011390:	6839      	ldr	r1, [r7, #0]
 8011392:	4798      	blx	r3
      break;
 8011394:	e067      	b.n	8011466 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	785b      	ldrb	r3, [r3, #1]
 801139a:	2b0b      	cmp	r3, #11
 801139c:	d851      	bhi.n	8011442 <USBD_CDC_Setup+0x18a>
 801139e:	a201      	add	r2, pc, #4	@ (adr r2, 80113a4 <USBD_CDC_Setup+0xec>)
 80113a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a4:	080113d5 	.word	0x080113d5
 80113a8:	08011451 	.word	0x08011451
 80113ac:	08011443 	.word	0x08011443
 80113b0:	08011443 	.word	0x08011443
 80113b4:	08011443 	.word	0x08011443
 80113b8:	08011443 	.word	0x08011443
 80113bc:	08011443 	.word	0x08011443
 80113c0:	08011443 	.word	0x08011443
 80113c4:	08011443 	.word	0x08011443
 80113c8:	08011443 	.word	0x08011443
 80113cc:	080113ff 	.word	0x080113ff
 80113d0:	08011429 	.word	0x08011429
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b03      	cmp	r3, #3
 80113de:	d107      	bne.n	80113f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80113e0:	f107 030a 	add.w	r3, r7, #10
 80113e4:	2202      	movs	r2, #2
 80113e6:	4619      	mov	r1, r3
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f001 fd3d 	bl	8012e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113ee:	e032      	b.n	8011456 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80113f0:	6839      	ldr	r1, [r7, #0]
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 fcbb 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80113f8:	2303      	movs	r3, #3
 80113fa:	75fb      	strb	r3, [r7, #23]
          break;
 80113fc:	e02b      	b.n	8011456 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011404:	b2db      	uxtb	r3, r3
 8011406:	2b03      	cmp	r3, #3
 8011408:	d107      	bne.n	801141a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801140a:	f107 030d 	add.w	r3, r7, #13
 801140e:	2201      	movs	r2, #1
 8011410:	4619      	mov	r1, r3
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f001 fd28 	bl	8012e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011418:	e01d      	b.n	8011456 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f001 fca6 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 8011422:	2303      	movs	r3, #3
 8011424:	75fb      	strb	r3, [r7, #23]
          break;
 8011426:	e016      	b.n	8011456 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801142e:	b2db      	uxtb	r3, r3
 8011430:	2b03      	cmp	r3, #3
 8011432:	d00f      	beq.n	8011454 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011434:	6839      	ldr	r1, [r7, #0]
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f001 fc99 	bl	8012d6e <USBD_CtlError>
            ret = USBD_FAIL;
 801143c:	2303      	movs	r3, #3
 801143e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011440:	e008      	b.n	8011454 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011442:	6839      	ldr	r1, [r7, #0]
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f001 fc92 	bl	8012d6e <USBD_CtlError>
          ret = USBD_FAIL;
 801144a:	2303      	movs	r3, #3
 801144c:	75fb      	strb	r3, [r7, #23]
          break;
 801144e:	e002      	b.n	8011456 <USBD_CDC_Setup+0x19e>
          break;
 8011450:	bf00      	nop
 8011452:	e008      	b.n	8011466 <USBD_CDC_Setup+0x1ae>
          break;
 8011454:	bf00      	nop
      }
      break;
 8011456:	e006      	b.n	8011466 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f001 fc87 	bl	8012d6e <USBD_CtlError>
      ret = USBD_FAIL;
 8011460:	2303      	movs	r3, #3
 8011462:	75fb      	strb	r3, [r7, #23]
      break;
 8011464:	bf00      	nop
  }

  return (uint8_t)ret;
 8011466:	7dfb      	ldrb	r3, [r7, #23]
}
 8011468:	4618      	mov	r0, r3
 801146a:	3718      	adds	r7, #24
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	460b      	mov	r3, r1
 801147a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011482:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	32b0      	adds	r2, #176	@ 0xb0
 801148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d101      	bne.n	801149a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011496:	2303      	movs	r3, #3
 8011498:	e065      	b.n	8011566 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	32b0      	adds	r2, #176	@ 0xb0
 80114a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80114aa:	78fb      	ldrb	r3, [r7, #3]
 80114ac:	f003 020f 	and.w	r2, r3, #15
 80114b0:	6879      	ldr	r1, [r7, #4]
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	440b      	add	r3, r1
 80114bc:	3318      	adds	r3, #24
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d02f      	beq.n	8011524 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80114c4:	78fb      	ldrb	r3, [r7, #3]
 80114c6:	f003 020f 	and.w	r2, r3, #15
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	4613      	mov	r3, r2
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	4413      	add	r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	440b      	add	r3, r1
 80114d6:	3318      	adds	r3, #24
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	78fb      	ldrb	r3, [r7, #3]
 80114dc:	f003 010f 	and.w	r1, r3, #15
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	460b      	mov	r3, r1
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	440b      	add	r3, r1
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4403      	add	r3, r0
 80114ec:	331c      	adds	r3, #28
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80114f4:	fb01 f303 	mul.w	r3, r1, r3
 80114f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d112      	bne.n	8011524 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80114fe:	78fb      	ldrb	r3, [r7, #3]
 8011500:	f003 020f 	and.w	r2, r3, #15
 8011504:	6879      	ldr	r1, [r7, #4]
 8011506:	4613      	mov	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4413      	add	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	440b      	add	r3, r1
 8011510:	3318      	adds	r3, #24
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011516:	78f9      	ldrb	r1, [r7, #3]
 8011518:	2300      	movs	r3, #0
 801151a:	2200      	movs	r2, #0
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f005 fb2a 	bl	8016b76 <USBD_LL_Transmit>
 8011522:	e01f      	b.n	8011564 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2200      	movs	r2, #0
 8011528:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	33b0      	adds	r3, #176	@ 0xb0
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d010      	beq.n	8011564 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	33b0      	adds	r3, #176	@ 0xb0
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	4413      	add	r3, r2
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	691b      	ldr	r3, [r3, #16]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011560:	78fa      	ldrb	r2, [r7, #3]
 8011562:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b084      	sub	sp, #16
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
 8011576:	460b      	mov	r3, r1
 8011578:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	32b0      	adds	r2, #176	@ 0xb0
 8011584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011588:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	32b0      	adds	r2, #176	@ 0xb0
 8011594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801159c:	2303      	movs	r3, #3
 801159e:	e01a      	b.n	80115d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80115a0:	78fb      	ldrb	r3, [r7, #3]
 80115a2:	4619      	mov	r1, r3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f005 fb28 	bl	8016bfa <USBD_LL_GetRxDataSize>
 80115aa:	4602      	mov	r2, r0
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	33b0      	adds	r3, #176	@ 0xb0
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80115ca:	68fa      	ldr	r2, [r7, #12]
 80115cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80115d0:	4611      	mov	r1, r2
 80115d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}

080115de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80115de:	b580      	push	{r7, lr}
 80115e0:	b084      	sub	sp, #16
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	32b0      	adds	r2, #176	@ 0xb0
 80115f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d101      	bne.n	8011600 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115fc:	2303      	movs	r3, #3
 80115fe:	e024      	b.n	801164a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	33b0      	adds	r3, #176	@ 0xb0
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	4413      	add	r3, r2
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d019      	beq.n	8011648 <USBD_CDC_EP0_RxReady+0x6a>
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801161a:	2bff      	cmp	r3, #255	@ 0xff
 801161c:	d014      	beq.n	8011648 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	33b0      	adds	r3, #176	@ 0xb0
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011636:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801163e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	22ff      	movs	r2, #255	@ 0xff
 8011644:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011648:	2300      	movs	r3, #0
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
	...

08011654 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801165c:	2182      	movs	r1, #130	@ 0x82
 801165e:	4818      	ldr	r0, [pc, #96]	@ (80116c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011660:	f000 fd4f 	bl	8012102 <USBD_GetEpDesc>
 8011664:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011666:	2101      	movs	r1, #1
 8011668:	4815      	ldr	r0, [pc, #84]	@ (80116c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801166a:	f000 fd4a 	bl	8012102 <USBD_GetEpDesc>
 801166e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011670:	2181      	movs	r1, #129	@ 0x81
 8011672:	4813      	ldr	r0, [pc, #76]	@ (80116c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011674:	f000 fd45 	bl	8012102 <USBD_GetEpDesc>
 8011678:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2210      	movs	r2, #16
 8011684:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d006      	beq.n	801169a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	2200      	movs	r2, #0
 8011690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011694:	711a      	strb	r2, [r3, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d006      	beq.n	80116ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80116a8:	711a      	strb	r2, [r3, #4]
 80116aa:	2200      	movs	r2, #0
 80116ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2243      	movs	r2, #67	@ 0x43
 80116b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80116b4:	4b02      	ldr	r3, [pc, #8]	@ (80116c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3718      	adds	r7, #24
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	20000054 	.word	0x20000054

080116c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b086      	sub	sp, #24
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80116cc:	2182      	movs	r1, #130	@ 0x82
 80116ce:	4818      	ldr	r0, [pc, #96]	@ (8011730 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80116d0:	f000 fd17 	bl	8012102 <USBD_GetEpDesc>
 80116d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80116d6:	2101      	movs	r1, #1
 80116d8:	4815      	ldr	r0, [pc, #84]	@ (8011730 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80116da:	f000 fd12 	bl	8012102 <USBD_GetEpDesc>
 80116de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80116e0:	2181      	movs	r1, #129	@ 0x81
 80116e2:	4813      	ldr	r0, [pc, #76]	@ (8011730 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80116e4:	f000 fd0d 	bl	8012102 <USBD_GetEpDesc>
 80116e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	2210      	movs	r2, #16
 80116f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d006      	beq.n	801170a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	2200      	movs	r2, #0
 8011700:	711a      	strb	r2, [r3, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	f042 0202 	orr.w	r2, r2, #2
 8011708:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d006      	beq.n	801171e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2200      	movs	r2, #0
 8011714:	711a      	strb	r2, [r3, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	f042 0202 	orr.w	r2, r2, #2
 801171c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2243      	movs	r2, #67	@ 0x43
 8011722:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011724:	4b02      	ldr	r3, [pc, #8]	@ (8011730 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011726:	4618      	mov	r0, r3
 8011728:	3718      	adds	r7, #24
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	20000054 	.word	0x20000054

08011734 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801173c:	2182      	movs	r1, #130	@ 0x82
 801173e:	4818      	ldr	r0, [pc, #96]	@ (80117a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011740:	f000 fcdf 	bl	8012102 <USBD_GetEpDesc>
 8011744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011746:	2101      	movs	r1, #1
 8011748:	4815      	ldr	r0, [pc, #84]	@ (80117a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801174a:	f000 fcda 	bl	8012102 <USBD_GetEpDesc>
 801174e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011750:	2181      	movs	r1, #129	@ 0x81
 8011752:	4813      	ldr	r0, [pc, #76]	@ (80117a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011754:	f000 fcd5 	bl	8012102 <USBD_GetEpDesc>
 8011758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d002      	beq.n	8011766 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	2210      	movs	r2, #16
 8011764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d006      	beq.n	801177a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	2200      	movs	r2, #0
 8011770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011774:	711a      	strb	r2, [r3, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d006      	beq.n	801178e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2200      	movs	r2, #0
 8011784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011788:	711a      	strb	r2, [r3, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2243      	movs	r2, #67	@ 0x43
 8011792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011794:	4b02      	ldr	r3, [pc, #8]	@ (80117a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20000054 	.word	0x20000054

080117a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	220a      	movs	r2, #10
 80117b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80117b2:	4b03      	ldr	r3, [pc, #12]	@ (80117c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr
 80117c0:	20000010 	.word	0x20000010

080117c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d101      	bne.n	80117d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80117d4:	2303      	movs	r3, #3
 80117d6:	e009      	b.n	80117ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	33b0      	adds	r3, #176	@ 0xb0
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	4413      	add	r3, r2
 80117e6:	683a      	ldr	r2, [r7, #0]
 80117e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	370c      	adds	r7, #12
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b087      	sub	sp, #28
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	32b0      	adds	r2, #176	@ 0xb0
 801180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011812:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d101      	bne.n	801181e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801181a:	2303      	movs	r3, #3
 801181c:	e008      	b.n	8011830 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	371c      	adds	r7, #28
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801183c:	b480      	push	{r7}
 801183e:	b085      	sub	sp, #20
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	32b0      	adds	r2, #176	@ 0xb0
 8011850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011854:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d101      	bne.n	8011860 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801185c:	2303      	movs	r3, #3
 801185e:	e004      	b.n	801186a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011868:	2300      	movs	r3, #0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
	...

08011878 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	32b0      	adds	r2, #176	@ 0xb0
 801188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801188e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011890:	2301      	movs	r3, #1
 8011892:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d101      	bne.n	801189e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801189a:	2303      	movs	r3, #3
 801189c:	e025      	b.n	80118ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d11f      	bne.n	80118e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	2201      	movs	r2, #1
 80118ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80118b0:	4b10      	ldr	r3, [pc, #64]	@ (80118f4 <USBD_CDC_TransmitPacket+0x7c>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	f003 020f 	and.w	r2, r3, #15
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	4613      	mov	r3, r2
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	4413      	add	r3, r2
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	4403      	add	r3, r0
 80118ca:	3318      	adds	r3, #24
 80118cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80118ce:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <USBD_CDC_TransmitPacket+0x7c>)
 80118d0:	7819      	ldrb	r1, [r3, #0]
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f005 f949 	bl	8016b76 <USBD_LL_Transmit>

    ret = USBD_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20000097 	.word	0x20000097

080118f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	32b0      	adds	r2, #176	@ 0xb0
 801190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801190e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	32b0      	adds	r2, #176	@ 0xb0
 801191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d101      	bne.n	8011926 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011922:	2303      	movs	r3, #3
 8011924:	e018      	b.n	8011958 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	7c1b      	ldrb	r3, [r3, #16]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d10a      	bne.n	8011944 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801192e:	4b0c      	ldr	r3, [pc, #48]	@ (8011960 <USBD_CDC_ReceivePacket+0x68>)
 8011930:	7819      	ldrb	r1, [r3, #0]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f005 f93b 	bl	8016bb8 <USBD_LL_PrepareReceive>
 8011942:	e008      	b.n	8011956 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011944:	4b06      	ldr	r3, [pc, #24]	@ (8011960 <USBD_CDC_ReceivePacket+0x68>)
 8011946:	7819      	ldrb	r1, [r3, #0]
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801194e:	2340      	movs	r3, #64	@ 0x40
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f005 f931 	bl	8016bb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	20000098 	.word	0x20000098

08011964 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b086      	sub	sp, #24
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d101      	bne.n	801197c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011978:	2303      	movs	r3, #3
 801197a:	e01f      	b.n	80119bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2200      	movs	r2, #0
 8011980:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2200      	movs	r2, #0
 8011988:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2200      	movs	r2, #0
 8011990:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2201      	movs	r2, #1
 80119a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	79fa      	ldrb	r2, [r7, #7]
 80119ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f004 ffab 	bl	801690c <USBD_LL_Init>
 80119b6:	4603      	mov	r3, r0
 80119b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3718      	adds	r7, #24
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80119ce:	2300      	movs	r3, #0
 80119d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d101      	bne.n	80119dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80119d8:	2303      	movs	r3, #3
 80119da:	e025      	b.n	8011a28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	683a      	ldr	r2, [r7, #0]
 80119e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	32ae      	adds	r2, #174	@ 0xae
 80119ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00f      	beq.n	8011a18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	32ae      	adds	r2, #174	@ 0xae
 8011a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a08:	f107 020e 	add.w	r2, r7, #14
 8011a0c:	4610      	mov	r0, r2
 8011a0e:	4798      	blx	r3
 8011a10:	4602      	mov	r2, r0
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a1e:	1c5a      	adds	r2, r3, #1
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f004 ffb3 	bl	80169a4 <USBD_LL_Start>
 8011a3e:	4603      	mov	r3, r0
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b084      	sub	sp, #16
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
 8011a66:	460b      	mov	r3, r1
 8011a68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d009      	beq.n	8011a8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	78fa      	ldrb	r2, [r7, #3]
 8011a82:	4611      	mov	r1, r2
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	4798      	blx	r3
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b084      	sub	sp, #16
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	78fa      	ldrb	r2, [r7, #3]
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	4798      	blx	r3
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d001      	beq.n	8011ac0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011abc:	2303      	movs	r3, #3
 8011abe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b084      	sub	sp, #16
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f001 f90c 	bl	8012cfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011af0:	461a      	mov	r2, r3
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011afe:	f003 031f 	and.w	r3, r3, #31
 8011b02:	2b02      	cmp	r3, #2
 8011b04:	d01a      	beq.n	8011b3c <USBD_LL_SetupStage+0x72>
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	d822      	bhi.n	8011b50 <USBD_LL_SetupStage+0x86>
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <USBD_LL_SetupStage+0x4a>
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d00a      	beq.n	8011b28 <USBD_LL_SetupStage+0x5e>
 8011b12:	e01d      	b.n	8011b50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 fb63 	bl	80121e8 <USBD_StdDevReq>
 8011b22:	4603      	mov	r3, r0
 8011b24:	73fb      	strb	r3, [r7, #15]
      break;
 8011b26:	e020      	b.n	8011b6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f000 fbcb 	bl	80122cc <USBD_StdItfReq>
 8011b36:	4603      	mov	r3, r0
 8011b38:	73fb      	strb	r3, [r7, #15]
      break;
 8011b3a:	e016      	b.n	8011b6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b42:	4619      	mov	r1, r3
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 fc2d 	bl	80123a4 <USBD_StdEPReq>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8011b4e:	e00c      	b.n	8011b6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011b56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f004 ff80 	bl	8016a64 <USBD_LL_StallEP>
 8011b64:	4603      	mov	r3, r0
 8011b66:	73fb      	strb	r3, [r7, #15]
      break;
 8011b68:	bf00      	nop
  }

  return ret;
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b82:	2300      	movs	r3, #0
 8011b84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011b86:	7afb      	ldrb	r3, [r7, #11]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d16e      	bne.n	8011c6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011b92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	f040 8098 	bne.w	8011cd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d913      	bls.n	8011bd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	689a      	ldr	r2, [r3, #8]
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	1ad2      	subs	r2, r2, r3
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	68da      	ldr	r2, [r3, #12]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	689b      	ldr	r3, [r3, #8]
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	bf28      	it	cs
 8011bc6:	4613      	movcs	r3, r2
 8011bc8:	461a      	mov	r2, r3
 8011bca:	6879      	ldr	r1, [r7, #4]
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f001 f994 	bl	8012efa <USBD_CtlContinueRx>
 8011bd2:	e07d      	b.n	8011cd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011bda:	f003 031f 	and.w	r3, r3, #31
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d014      	beq.n	8011c0c <USBD_LL_DataOutStage+0x98>
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d81d      	bhi.n	8011c22 <USBD_LL_DataOutStage+0xae>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <USBD_LL_DataOutStage+0x7c>
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d003      	beq.n	8011bf6 <USBD_LL_DataOutStage+0x82>
 8011bee:	e018      	b.n	8011c22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	75bb      	strb	r3, [r7, #22]
            break;
 8011bf4:	e018      	b.n	8011c28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	4619      	mov	r1, r3
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 fa64 	bl	80120ce <USBD_CoreFindIF>
 8011c06:	4603      	mov	r3, r0
 8011c08:	75bb      	strb	r3, [r7, #22]
            break;
 8011c0a:	e00d      	b.n	8011c28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	4619      	mov	r1, r3
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f000 fa66 	bl	80120e8 <USBD_CoreFindEP>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	75bb      	strb	r3, [r7, #22]
            break;
 8011c20:	e002      	b.n	8011c28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	75bb      	strb	r3, [r7, #22]
            break;
 8011c26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011c28:	7dbb      	ldrb	r3, [r7, #22]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d119      	bne.n	8011c62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	2b03      	cmp	r3, #3
 8011c38:	d113      	bne.n	8011c62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011c3a:	7dba      	ldrb	r2, [r7, #22]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	32ae      	adds	r2, #174	@ 0xae
 8011c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00b      	beq.n	8011c62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011c4a:	7dba      	ldrb	r2, [r7, #22]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011c52:	7dba      	ldrb	r2, [r7, #22]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	32ae      	adds	r2, #174	@ 0xae
 8011c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c5c:	691b      	ldr	r3, [r3, #16]
 8011c5e:	68f8      	ldr	r0, [r7, #12]
 8011c60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f001 f95a 	bl	8012f1c <USBD_CtlSendStatus>
 8011c68:	e032      	b.n	8011cd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011c6a:	7afb      	ldrb	r3, [r7, #11]
 8011c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	4619      	mov	r1, r3
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 fa37 	bl	80120e8 <USBD_CoreFindEP>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011c7e:	7dbb      	ldrb	r3, [r7, #22]
 8011c80:	2bff      	cmp	r3, #255	@ 0xff
 8011c82:	d025      	beq.n	8011cd0 <USBD_LL_DataOutStage+0x15c>
 8011c84:	7dbb      	ldrb	r3, [r7, #22]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d122      	bne.n	8011cd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d117      	bne.n	8011cc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011c96:	7dba      	ldrb	r2, [r7, #22]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	32ae      	adds	r2, #174	@ 0xae
 8011c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00f      	beq.n	8011cc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011ca6:	7dba      	ldrb	r2, [r7, #22]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011cae:	7dba      	ldrb	r2, [r7, #22]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	32ae      	adds	r2, #174	@ 0xae
 8011cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	7afa      	ldrb	r2, [r7, #11]
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	4798      	blx	r3
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d001      	beq.n	8011cd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011ccc:	7dfb      	ldrb	r3, [r7, #23]
 8011cce:	e000      	b.n	8011cd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3718      	adds	r7, #24
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b086      	sub	sp, #24
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	60f8      	str	r0, [r7, #12]
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	607a      	str	r2, [r7, #4]
 8011ce6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011ce8:	7afb      	ldrb	r3, [r7, #11]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d16f      	bne.n	8011dce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	3314      	adds	r3, #20
 8011cf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011cfa:	2b02      	cmp	r3, #2
 8011cfc:	d15a      	bne.n	8011db4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	689a      	ldr	r2, [r3, #8]
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d914      	bls.n	8011d34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	689a      	ldr	r2, [r3, #8]
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	1ad2      	subs	r2, r2, r3
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f001 f8bc 	bl	8012e9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d26:	2300      	movs	r3, #0
 8011d28:	2200      	movs	r2, #0
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f004 ff43 	bl	8016bb8 <USBD_LL_PrepareReceive>
 8011d32:	e03f      	b.n	8011db4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	68da      	ldr	r2, [r3, #12]
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d11c      	bne.n	8011d7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	685a      	ldr	r2, [r3, #4]
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d316      	bcc.n	8011d7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	685a      	ldr	r2, [r3, #4]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d20f      	bcs.n	8011d7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f001 f89d 	bl	8012e9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2100      	movs	r1, #0
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f004 ff20 	bl	8016bb8 <USBD_LL_PrepareReceive>
 8011d78:	e01c      	b.n	8011db4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d10f      	bne.n	8011da6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d009      	beq.n	8011da6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2200      	movs	r2, #0
 8011d96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011da6:	2180      	movs	r1, #128	@ 0x80
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f004 fe5b 	bl	8016a64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f001 f8c7 	bl	8012f42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d03a      	beq.n	8011e34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011dbe:	68f8      	ldr	r0, [r7, #12]
 8011dc0:	f7ff fe42 	bl	8011a48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011dcc:	e032      	b.n	8011e34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011dce:	7afb      	ldrb	r3, [r7, #11]
 8011dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f000 f985 	bl	80120e8 <USBD_CoreFindEP>
 8011dde:	4603      	mov	r3, r0
 8011de0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011de2:	7dfb      	ldrb	r3, [r7, #23]
 8011de4:	2bff      	cmp	r3, #255	@ 0xff
 8011de6:	d025      	beq.n	8011e34 <USBD_LL_DataInStage+0x15a>
 8011de8:	7dfb      	ldrb	r3, [r7, #23]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d122      	bne.n	8011e34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	2b03      	cmp	r3, #3
 8011df8:	d11c      	bne.n	8011e34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011dfa:	7dfa      	ldrb	r2, [r7, #23]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	32ae      	adds	r2, #174	@ 0xae
 8011e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d014      	beq.n	8011e34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011e0a:	7dfa      	ldrb	r2, [r7, #23]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011e12:	7dfa      	ldrb	r2, [r7, #23]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	32ae      	adds	r2, #174	@ 0xae
 8011e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e1c:	695b      	ldr	r3, [r3, #20]
 8011e1e:	7afa      	ldrb	r2, [r7, #11]
 8011e20:	4611      	mov	r1, r2
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	4798      	blx	r3
 8011e26:	4603      	mov	r3, r0
 8011e28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011e2a:	7dbb      	ldrb	r3, [r7, #22]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d001      	beq.n	8011e34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011e30:	7dbb      	ldrb	r3, [r7, #22]
 8011e32:	e000      	b.n	8011e36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011e34:	2300      	movs	r3, #0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3718      	adds	r7, #24
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}

08011e3e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b084      	sub	sp, #16
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e46:	2300      	movs	r3, #0
 8011e48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2200      	movs	r2, #0
 8011e56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d014      	beq.n	8011ea4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d00e      	beq.n	8011ea4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	6852      	ldr	r2, [r2, #4]
 8011e92:	b2d2      	uxtb	r2, r2
 8011e94:	4611      	mov	r1, r2
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	4798      	blx	r3
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ea4:	2340      	movs	r3, #64	@ 0x40
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f004 fd95 	bl	80169da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2240      	movs	r2, #64	@ 0x40
 8011ebc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ec0:	2340      	movs	r3, #64	@ 0x40
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2180      	movs	r1, #128	@ 0x80
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f004 fd87 	bl	80169da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2240      	movs	r2, #64	@ 0x40
 8011ed6:	621a      	str	r2, [r3, #32]

  return ret;
 8011ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ee2:	b480      	push	{r7}
 8011ee4:	b083      	sub	sp, #12
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
 8011eea:	460b      	mov	r3, r1
 8011eec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	78fa      	ldrb	r2, [r7, #3]
 8011ef2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ef4:	2300      	movs	r3, #0
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f02:	b480      	push	{r7}
 8011f04:	b083      	sub	sp, #12
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d006      	beq.n	8011f24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f1c:	b2da      	uxtb	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2204      	movs	r2, #4
 8011f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	370c      	adds	r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr

08011f3a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f3a:	b480      	push	{r7}
 8011f3c:	b083      	sub	sp, #12
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f48:	b2db      	uxtb	r3, r3
 8011f4a:	2b04      	cmp	r3, #4
 8011f4c:	d106      	bne.n	8011f5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	370c      	adds	r7, #12
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr

08011f6a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f6a:	b580      	push	{r7, lr}
 8011f6c:	b082      	sub	sp, #8
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	2b03      	cmp	r3, #3
 8011f7c:	d110      	bne.n	8011fa0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d00b      	beq.n	8011fa0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f8e:	69db      	ldr	r3, [r3, #28]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d005      	beq.n	8011fa0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f9a:	69db      	ldr	r3, [r3, #28]
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011fa0:	2300      	movs	r3, #0
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	32ae      	adds	r2, #174	@ 0xae
 8011fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d101      	bne.n	8011fcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	e01c      	b.n	8012006 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d115      	bne.n	8012004 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	32ae      	adds	r2, #174	@ 0xae
 8011fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fe6:	6a1b      	ldr	r3, [r3, #32]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00b      	beq.n	8012004 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	32ae      	adds	r2, #174	@ 0xae
 8011ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ffa:	6a1b      	ldr	r3, [r3, #32]
 8011ffc:	78fa      	ldrb	r2, [r7, #3]
 8011ffe:	4611      	mov	r1, r2
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	3708      	adds	r7, #8
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	460b      	mov	r3, r1
 8012018:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	32ae      	adds	r2, #174	@ 0xae
 8012024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d101      	bne.n	8012030 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801202c:	2303      	movs	r3, #3
 801202e:	e01c      	b.n	801206a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b03      	cmp	r3, #3
 801203a:	d115      	bne.n	8012068 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	32ae      	adds	r2, #174	@ 0xae
 8012046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00b      	beq.n	8012068 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	32ae      	adds	r2, #174	@ 0xae
 801205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012060:	78fa      	ldrb	r2, [r7, #3]
 8012062:	4611      	mov	r1, r2
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012072:	b480      	push	{r7}
 8012074:	b083      	sub	sp, #12
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801207a:	2300      	movs	r3, #0
}
 801207c:	4618      	mov	r0, r3
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012090:	2300      	movs	r3, #0
 8012092:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00e      	beq.n	80120c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	6852      	ldr	r2, [r2, #4]
 80120b2:	b2d2      	uxtb	r2, r2
 80120b4:	4611      	mov	r1, r2
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	4798      	blx	r3
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80120c0:	2303      	movs	r3, #3
 80120c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80120c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b083      	sub	sp, #12
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
 80120d6:	460b      	mov	r3, r1
 80120d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80120da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80120dc:	4618      	mov	r0, r3
 80120de:	370c      	adds	r7, #12
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr

080120e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	460b      	mov	r3, r1
 80120f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80120f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012102:	b580      	push	{r7, lr}
 8012104:	b086      	sub	sp, #24
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
 801210a:	460b      	mov	r3, r1
 801210c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012116:	2300      	movs	r3, #0
 8012118:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	885b      	ldrh	r3, [r3, #2]
 801211e:	b29b      	uxth	r3, r3
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	7812      	ldrb	r2, [r2, #0]
 8012124:	4293      	cmp	r3, r2
 8012126:	d91f      	bls.n	8012168 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801212e:	e013      	b.n	8012158 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012130:	f107 030a 	add.w	r3, r7, #10
 8012134:	4619      	mov	r1, r3
 8012136:	6978      	ldr	r0, [r7, #20]
 8012138:	f000 f81b 	bl	8012172 <USBD_GetNextDesc>
 801213c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	785b      	ldrb	r3, [r3, #1]
 8012142:	2b05      	cmp	r3, #5
 8012144:	d108      	bne.n	8012158 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	789b      	ldrb	r3, [r3, #2]
 801214e:	78fa      	ldrb	r2, [r7, #3]
 8012150:	429a      	cmp	r2, r3
 8012152:	d008      	beq.n	8012166 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	885b      	ldrh	r3, [r3, #2]
 801215c:	b29a      	uxth	r2, r3
 801215e:	897b      	ldrh	r3, [r7, #10]
 8012160:	429a      	cmp	r2, r3
 8012162:	d8e5      	bhi.n	8012130 <USBD_GetEpDesc+0x2e>
 8012164:	e000      	b.n	8012168 <USBD_GetEpDesc+0x66>
          break;
 8012166:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012168:	693b      	ldr	r3, [r7, #16]
}
 801216a:	4618      	mov	r0, r3
 801216c:	3718      	adds	r7, #24
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012172:	b480      	push	{r7}
 8012174:	b085      	sub	sp, #20
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
 801217a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	68fa      	ldr	r2, [r7, #12]
 8012186:	7812      	ldrb	r2, [r2, #0]
 8012188:	4413      	add	r3, r2
 801218a:	b29a      	uxth	r2, r3
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	461a      	mov	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4413      	add	r3, r2
 801219a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801219c:	68fb      	ldr	r3, [r7, #12]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3714      	adds	r7, #20
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80121aa:	b480      	push	{r7}
 80121ac:	b087      	sub	sp, #28
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	3301      	adds	r3, #1
 80121c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121c8:	8a3b      	ldrh	r3, [r7, #16]
 80121ca:	021b      	lsls	r3, r3, #8
 80121cc:	b21a      	sxth	r2, r3
 80121ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121d2:	4313      	orrs	r3, r2
 80121d4:	b21b      	sxth	r3, r3
 80121d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80121d8:	89fb      	ldrh	r3, [r7, #14]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	371c      	adds	r7, #28
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr
	...

080121e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80121fe:	2b40      	cmp	r3, #64	@ 0x40
 8012200:	d005      	beq.n	801220e <USBD_StdDevReq+0x26>
 8012202:	2b40      	cmp	r3, #64	@ 0x40
 8012204:	d857      	bhi.n	80122b6 <USBD_StdDevReq+0xce>
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00f      	beq.n	801222a <USBD_StdDevReq+0x42>
 801220a:	2b20      	cmp	r3, #32
 801220c:	d153      	bne.n	80122b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	32ae      	adds	r2, #174	@ 0xae
 8012218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	6839      	ldr	r1, [r7, #0]
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	4798      	blx	r3
 8012224:	4603      	mov	r3, r0
 8012226:	73fb      	strb	r3, [r7, #15]
      break;
 8012228:	e04a      	b.n	80122c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	785b      	ldrb	r3, [r3, #1]
 801222e:	2b09      	cmp	r3, #9
 8012230:	d83b      	bhi.n	80122aa <USBD_StdDevReq+0xc2>
 8012232:	a201      	add	r2, pc, #4	@ (adr r2, 8012238 <USBD_StdDevReq+0x50>)
 8012234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012238:	0801228d 	.word	0x0801228d
 801223c:	080122a1 	.word	0x080122a1
 8012240:	080122ab 	.word	0x080122ab
 8012244:	08012297 	.word	0x08012297
 8012248:	080122ab 	.word	0x080122ab
 801224c:	0801226b 	.word	0x0801226b
 8012250:	08012261 	.word	0x08012261
 8012254:	080122ab 	.word	0x080122ab
 8012258:	08012283 	.word	0x08012283
 801225c:	08012275 	.word	0x08012275
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fa3c 	bl	80126e0 <USBD_GetDescriptor>
          break;
 8012268:	e024      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fba1 	bl	80129b4 <USBD_SetAddress>
          break;
 8012272:	e01f      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012274:	6839      	ldr	r1, [r7, #0]
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 fbe0 	bl	8012a3c <USBD_SetConfig>
 801227c:	4603      	mov	r3, r0
 801227e:	73fb      	strb	r3, [r7, #15]
          break;
 8012280:	e018      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fc83 	bl	8012b90 <USBD_GetConfig>
          break;
 801228a:	e013      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 fcb4 	bl	8012bfc <USBD_GetStatus>
          break;
 8012294:	e00e      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012296:	6839      	ldr	r1, [r7, #0]
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fce3 	bl	8012c64 <USBD_SetFeature>
          break;
 801229e:	e009      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80122a0:	6839      	ldr	r1, [r7, #0]
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 fd07 	bl	8012cb6 <USBD_ClrFeature>
          break;
 80122a8:	e004      	b.n	80122b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80122aa:	6839      	ldr	r1, [r7, #0]
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fd5e 	bl	8012d6e <USBD_CtlError>
          break;
 80122b2:	bf00      	nop
      }
      break;
 80122b4:	e004      	b.n	80122c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fd58 	bl	8012d6e <USBD_CtlError>
      break;
 80122be:	bf00      	nop
  }

  return ret;
 80122c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop

080122cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122d6:	2300      	movs	r3, #0
 80122d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80122e2:	2b40      	cmp	r3, #64	@ 0x40
 80122e4:	d005      	beq.n	80122f2 <USBD_StdItfReq+0x26>
 80122e6:	2b40      	cmp	r3, #64	@ 0x40
 80122e8:	d852      	bhi.n	8012390 <USBD_StdItfReq+0xc4>
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d001      	beq.n	80122f2 <USBD_StdItfReq+0x26>
 80122ee:	2b20      	cmp	r3, #32
 80122f0:	d14e      	bne.n	8012390 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	3b01      	subs	r3, #1
 80122fc:	2b02      	cmp	r3, #2
 80122fe:	d840      	bhi.n	8012382 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	889b      	ldrh	r3, [r3, #4]
 8012304:	b2db      	uxtb	r3, r3
 8012306:	2b01      	cmp	r3, #1
 8012308:	d836      	bhi.n	8012378 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	889b      	ldrh	r3, [r3, #4]
 801230e:	b2db      	uxtb	r3, r3
 8012310:	4619      	mov	r1, r3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f7ff fedb 	bl	80120ce <USBD_CoreFindIF>
 8012318:	4603      	mov	r3, r0
 801231a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801231c:	7bbb      	ldrb	r3, [r7, #14]
 801231e:	2bff      	cmp	r3, #255	@ 0xff
 8012320:	d01d      	beq.n	801235e <USBD_StdItfReq+0x92>
 8012322:	7bbb      	ldrb	r3, [r7, #14]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d11a      	bne.n	801235e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012328:	7bba      	ldrb	r2, [r7, #14]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	32ae      	adds	r2, #174	@ 0xae
 801232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d00f      	beq.n	8012358 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012338:	7bba      	ldrb	r2, [r7, #14]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012340:	7bba      	ldrb	r2, [r7, #14]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	32ae      	adds	r2, #174	@ 0xae
 8012346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	4798      	blx	r3
 8012352:	4603      	mov	r3, r0
 8012354:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012356:	e004      	b.n	8012362 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012358:	2303      	movs	r3, #3
 801235a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801235c:	e001      	b.n	8012362 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801235e:	2303      	movs	r3, #3
 8012360:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	88db      	ldrh	r3, [r3, #6]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d110      	bne.n	801238c <USBD_StdItfReq+0xc0>
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10d      	bne.n	801238c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 fdd3 	bl	8012f1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012376:	e009      	b.n	801238c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 fcf7 	bl	8012d6e <USBD_CtlError>
          break;
 8012380:	e004      	b.n	801238c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fcf2 	bl	8012d6e <USBD_CtlError>
          break;
 801238a:	e000      	b.n	801238e <USBD_StdItfReq+0xc2>
          break;
 801238c:	bf00      	nop
      }
      break;
 801238e:	e004      	b.n	801239a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012390:	6839      	ldr	r1, [r7, #0]
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fceb 	bl	8012d6e <USBD_CtlError>
      break;
 8012398:	bf00      	nop
  }

  return ret;
 801239a:	7bfb      	ldrb	r3, [r7, #15]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	889b      	ldrh	r3, [r3, #4]
 80123b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80123c0:	2b40      	cmp	r3, #64	@ 0x40
 80123c2:	d007      	beq.n	80123d4 <USBD_StdEPReq+0x30>
 80123c4:	2b40      	cmp	r3, #64	@ 0x40
 80123c6:	f200 817f 	bhi.w	80126c8 <USBD_StdEPReq+0x324>
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d02a      	beq.n	8012424 <USBD_StdEPReq+0x80>
 80123ce:	2b20      	cmp	r3, #32
 80123d0:	f040 817a 	bne.w	80126c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff fe85 	bl	80120e8 <USBD_CoreFindEP>
 80123de:	4603      	mov	r3, r0
 80123e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80123e2:	7b7b      	ldrb	r3, [r7, #13]
 80123e4:	2bff      	cmp	r3, #255	@ 0xff
 80123e6:	f000 8174 	beq.w	80126d2 <USBD_StdEPReq+0x32e>
 80123ea:	7b7b      	ldrb	r3, [r7, #13]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f040 8170 	bne.w	80126d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80123f2:	7b7a      	ldrb	r2, [r7, #13]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80123fa:	7b7a      	ldrb	r2, [r7, #13]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	32ae      	adds	r2, #174	@ 0xae
 8012400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	2b00      	cmp	r3, #0
 8012408:	f000 8163 	beq.w	80126d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801240c:	7b7a      	ldrb	r2, [r7, #13]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	32ae      	adds	r2, #174	@ 0xae
 8012412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	6839      	ldr	r1, [r7, #0]
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	4798      	blx	r3
 801241e:	4603      	mov	r3, r0
 8012420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012422:	e156      	b.n	80126d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	785b      	ldrb	r3, [r3, #1]
 8012428:	2b03      	cmp	r3, #3
 801242a:	d008      	beq.n	801243e <USBD_StdEPReq+0x9a>
 801242c:	2b03      	cmp	r3, #3
 801242e:	f300 8145 	bgt.w	80126bc <USBD_StdEPReq+0x318>
 8012432:	2b00      	cmp	r3, #0
 8012434:	f000 809b 	beq.w	801256e <USBD_StdEPReq+0x1ca>
 8012438:	2b01      	cmp	r3, #1
 801243a:	d03c      	beq.n	80124b6 <USBD_StdEPReq+0x112>
 801243c:	e13e      	b.n	80126bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b02      	cmp	r3, #2
 8012448:	d002      	beq.n	8012450 <USBD_StdEPReq+0xac>
 801244a:	2b03      	cmp	r3, #3
 801244c:	d016      	beq.n	801247c <USBD_StdEPReq+0xd8>
 801244e:	e02c      	b.n	80124aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012450:	7bbb      	ldrb	r3, [r7, #14]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d00d      	beq.n	8012472 <USBD_StdEPReq+0xce>
 8012456:	7bbb      	ldrb	r3, [r7, #14]
 8012458:	2b80      	cmp	r3, #128	@ 0x80
 801245a:	d00a      	beq.n	8012472 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801245c:	7bbb      	ldrb	r3, [r7, #14]
 801245e:	4619      	mov	r1, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f004 faff 	bl	8016a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012466:	2180      	movs	r1, #128	@ 0x80
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f004 fafb 	bl	8016a64 <USBD_LL_StallEP>
 801246e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012470:	e020      	b.n	80124b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012472:	6839      	ldr	r1, [r7, #0]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 fc7a 	bl	8012d6e <USBD_CtlError>
              break;
 801247a:	e01b      	b.n	80124b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	885b      	ldrh	r3, [r3, #2]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10e      	bne.n	80124a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012484:	7bbb      	ldrb	r3, [r7, #14]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00b      	beq.n	80124a2 <USBD_StdEPReq+0xfe>
 801248a:	7bbb      	ldrb	r3, [r7, #14]
 801248c:	2b80      	cmp	r3, #128	@ 0x80
 801248e:	d008      	beq.n	80124a2 <USBD_StdEPReq+0xfe>
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	88db      	ldrh	r3, [r3, #6]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d104      	bne.n	80124a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012498:	7bbb      	ldrb	r3, [r7, #14]
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f004 fae1 	bl	8016a64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 fd3a 	bl	8012f1c <USBD_CtlSendStatus>

              break;
 80124a8:	e004      	b.n	80124b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fc5e 	bl	8012d6e <USBD_CtlError>
              break;
 80124b2:	bf00      	nop
          }
          break;
 80124b4:	e107      	b.n	80126c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d002      	beq.n	80124c8 <USBD_StdEPReq+0x124>
 80124c2:	2b03      	cmp	r3, #3
 80124c4:	d016      	beq.n	80124f4 <USBD_StdEPReq+0x150>
 80124c6:	e04b      	b.n	8012560 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124c8:	7bbb      	ldrb	r3, [r7, #14]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00d      	beq.n	80124ea <USBD_StdEPReq+0x146>
 80124ce:	7bbb      	ldrb	r3, [r7, #14]
 80124d0:	2b80      	cmp	r3, #128	@ 0x80
 80124d2:	d00a      	beq.n	80124ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80124d4:	7bbb      	ldrb	r3, [r7, #14]
 80124d6:	4619      	mov	r1, r3
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f004 fac3 	bl	8016a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80124de:	2180      	movs	r1, #128	@ 0x80
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f004 fabf 	bl	8016a64 <USBD_LL_StallEP>
 80124e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80124e8:	e040      	b.n	801256c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fc3e 	bl	8012d6e <USBD_CtlError>
              break;
 80124f2:	e03b      	b.n	801256c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	885b      	ldrh	r3, [r3, #2]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d136      	bne.n	801256a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012502:	2b00      	cmp	r3, #0
 8012504:	d004      	beq.n	8012510 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012506:	7bbb      	ldrb	r3, [r7, #14]
 8012508:	4619      	mov	r1, r3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f004 fac9 	bl	8016aa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 fd03 	bl	8012f1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012516:	7bbb      	ldrb	r3, [r7, #14]
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff fde4 	bl	80120e8 <USBD_CoreFindEP>
 8012520:	4603      	mov	r3, r0
 8012522:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012524:	7b7b      	ldrb	r3, [r7, #13]
 8012526:	2bff      	cmp	r3, #255	@ 0xff
 8012528:	d01f      	beq.n	801256a <USBD_StdEPReq+0x1c6>
 801252a:	7b7b      	ldrb	r3, [r7, #13]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d11c      	bne.n	801256a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012530:	7b7a      	ldrb	r2, [r7, #13]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012538:	7b7a      	ldrb	r2, [r7, #13]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	32ae      	adds	r2, #174	@ 0xae
 801253e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012542:	689b      	ldr	r3, [r3, #8]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d010      	beq.n	801256a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012548:	7b7a      	ldrb	r2, [r7, #13]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	32ae      	adds	r2, #174	@ 0xae
 801254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012552:	689b      	ldr	r3, [r3, #8]
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	4798      	blx	r3
 801255a:	4603      	mov	r3, r0
 801255c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801255e:	e004      	b.n	801256a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012560:	6839      	ldr	r1, [r7, #0]
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f000 fc03 	bl	8012d6e <USBD_CtlError>
              break;
 8012568:	e000      	b.n	801256c <USBD_StdEPReq+0x1c8>
              break;
 801256a:	bf00      	nop
          }
          break;
 801256c:	e0ab      	b.n	80126c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b02      	cmp	r3, #2
 8012578:	d002      	beq.n	8012580 <USBD_StdEPReq+0x1dc>
 801257a:	2b03      	cmp	r3, #3
 801257c:	d032      	beq.n	80125e4 <USBD_StdEPReq+0x240>
 801257e:	e097      	b.n	80126b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012580:	7bbb      	ldrb	r3, [r7, #14]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d007      	beq.n	8012596 <USBD_StdEPReq+0x1f2>
 8012586:	7bbb      	ldrb	r3, [r7, #14]
 8012588:	2b80      	cmp	r3, #128	@ 0x80
 801258a:	d004      	beq.n	8012596 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fbed 	bl	8012d6e <USBD_CtlError>
                break;
 8012594:	e091      	b.n	80126ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801259a:	2b00      	cmp	r3, #0
 801259c:	da0b      	bge.n	80125b6 <USBD_StdEPReq+0x212>
 801259e:	7bbb      	ldrb	r3, [r7, #14]
 80125a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80125a4:	4613      	mov	r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	4413      	add	r3, r2
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	3310      	adds	r3, #16
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	4413      	add	r3, r2
 80125b2:	3304      	adds	r3, #4
 80125b4:	e00b      	b.n	80125ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80125b6:	7bbb      	ldrb	r3, [r7, #14]
 80125b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125bc:	4613      	mov	r3, r2
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	4413      	add	r3, r2
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	4413      	add	r3, r2
 80125cc:	3304      	adds	r3, #4
 80125ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	2200      	movs	r2, #0
 80125d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	2202      	movs	r2, #2
 80125da:	4619      	mov	r1, r3
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 fc43 	bl	8012e68 <USBD_CtlSendData>
              break;
 80125e2:	e06a      	b.n	80126ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80125e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	da11      	bge.n	8012610 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80125ec:	7bbb      	ldrb	r3, [r7, #14]
 80125ee:	f003 020f 	and.w	r2, r3, #15
 80125f2:	6879      	ldr	r1, [r7, #4]
 80125f4:	4613      	mov	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4413      	add	r3, r2
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	440b      	add	r3, r1
 80125fe:	3324      	adds	r3, #36	@ 0x24
 8012600:	881b      	ldrh	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d117      	bne.n	8012636 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 fbb0 	bl	8012d6e <USBD_CtlError>
                  break;
 801260e:	e054      	b.n	80126ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012610:	7bbb      	ldrb	r3, [r7, #14]
 8012612:	f003 020f 	and.w	r2, r3, #15
 8012616:	6879      	ldr	r1, [r7, #4]
 8012618:	4613      	mov	r3, r2
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	4413      	add	r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	440b      	add	r3, r1
 8012622:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d104      	bne.n	8012636 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801262c:	6839      	ldr	r1, [r7, #0]
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 fb9d 	bl	8012d6e <USBD_CtlError>
                  break;
 8012634:	e041      	b.n	80126ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801263a:	2b00      	cmp	r3, #0
 801263c:	da0b      	bge.n	8012656 <USBD_StdEPReq+0x2b2>
 801263e:	7bbb      	ldrb	r3, [r7, #14]
 8012640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012644:	4613      	mov	r3, r2
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	3310      	adds	r3, #16
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	4413      	add	r3, r2
 8012652:	3304      	adds	r3, #4
 8012654:	e00b      	b.n	801266e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012656:	7bbb      	ldrb	r3, [r7, #14]
 8012658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801265c:	4613      	mov	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	009b      	lsls	r3, r3, #2
 8012664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	4413      	add	r3, r2
 801266c:	3304      	adds	r3, #4
 801266e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012670:	7bbb      	ldrb	r3, [r7, #14]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d002      	beq.n	801267c <USBD_StdEPReq+0x2d8>
 8012676:	7bbb      	ldrb	r3, [r7, #14]
 8012678:	2b80      	cmp	r3, #128	@ 0x80
 801267a:	d103      	bne.n	8012684 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	2200      	movs	r2, #0
 8012680:	601a      	str	r2, [r3, #0]
 8012682:	e00e      	b.n	80126a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012684:	7bbb      	ldrb	r3, [r7, #14]
 8012686:	4619      	mov	r1, r3
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f004 fa29 	bl	8016ae0 <USBD_LL_IsStallEP>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d003      	beq.n	801269c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	2201      	movs	r2, #1
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	e002      	b.n	80126a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2200      	movs	r2, #0
 80126a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	2202      	movs	r2, #2
 80126a6:	4619      	mov	r1, r3
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 fbdd 	bl	8012e68 <USBD_CtlSendData>
              break;
 80126ae:	e004      	b.n	80126ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 fb5b 	bl	8012d6e <USBD_CtlError>
              break;
 80126b8:	bf00      	nop
          }
          break;
 80126ba:	e004      	b.n	80126c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80126bc:	6839      	ldr	r1, [r7, #0]
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 fb55 	bl	8012d6e <USBD_CtlError>
          break;
 80126c4:	bf00      	nop
      }
      break;
 80126c6:	e005      	b.n	80126d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80126c8:	6839      	ldr	r1, [r7, #0]
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 fb4f 	bl	8012d6e <USBD_CtlError>
      break;
 80126d0:	e000      	b.n	80126d4 <USBD_StdEPReq+0x330>
      break;
 80126d2:	bf00      	nop
  }

  return ret;
 80126d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80126ea:	2300      	movs	r3, #0
 80126ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80126f2:	2300      	movs	r3, #0
 80126f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	0a1b      	lsrs	r3, r3, #8
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	3b01      	subs	r3, #1
 8012700:	2b06      	cmp	r3, #6
 8012702:	f200 8128 	bhi.w	8012956 <USBD_GetDescriptor+0x276>
 8012706:	a201      	add	r2, pc, #4	@ (adr r2, 801270c <USBD_GetDescriptor+0x2c>)
 8012708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270c:	08012729 	.word	0x08012729
 8012710:	08012741 	.word	0x08012741
 8012714:	08012781 	.word	0x08012781
 8012718:	08012957 	.word	0x08012957
 801271c:	08012957 	.word	0x08012957
 8012720:	080128f7 	.word	0x080128f7
 8012724:	08012923 	.word	0x08012923
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	7c12      	ldrb	r2, [r2, #16]
 8012734:	f107 0108 	add.w	r1, r7, #8
 8012738:	4610      	mov	r0, r2
 801273a:	4798      	blx	r3
 801273c:	60f8      	str	r0, [r7, #12]
      break;
 801273e:	e112      	b.n	8012966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	7c1b      	ldrb	r3, [r3, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10d      	bne.n	8012764 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012750:	f107 0208 	add.w	r2, r7, #8
 8012754:	4610      	mov	r0, r2
 8012756:	4798      	blx	r3
 8012758:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3301      	adds	r3, #1
 801275e:	2202      	movs	r2, #2
 8012760:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012762:	e100      	b.n	8012966 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801276c:	f107 0208 	add.w	r2, r7, #8
 8012770:	4610      	mov	r0, r2
 8012772:	4798      	blx	r3
 8012774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3301      	adds	r3, #1
 801277a:	2202      	movs	r2, #2
 801277c:	701a      	strb	r2, [r3, #0]
      break;
 801277e:	e0f2      	b.n	8012966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	885b      	ldrh	r3, [r3, #2]
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b05      	cmp	r3, #5
 8012788:	f200 80ac 	bhi.w	80128e4 <USBD_GetDescriptor+0x204>
 801278c:	a201      	add	r2, pc, #4	@ (adr r2, 8012794 <USBD_GetDescriptor+0xb4>)
 801278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012792:	bf00      	nop
 8012794:	080127ad 	.word	0x080127ad
 8012798:	080127e1 	.word	0x080127e1
 801279c:	08012815 	.word	0x08012815
 80127a0:	08012849 	.word	0x08012849
 80127a4:	0801287d 	.word	0x0801287d
 80127a8:	080128b1 	.word	0x080128b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d00b      	beq.n	80127d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	7c12      	ldrb	r2, [r2, #16]
 80127c4:	f107 0108 	add.w	r1, r7, #8
 80127c8:	4610      	mov	r0, r2
 80127ca:	4798      	blx	r3
 80127cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127ce:	e091      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127d0:	6839      	ldr	r1, [r7, #0]
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f000 facb 	bl	8012d6e <USBD_CtlError>
            err++;
 80127d8:	7afb      	ldrb	r3, [r7, #11]
 80127da:	3301      	adds	r3, #1
 80127dc:	72fb      	strb	r3, [r7, #11]
          break;
 80127de:	e089      	b.n	80128f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	7c12      	ldrb	r2, [r2, #16]
 80127f8:	f107 0108 	add.w	r1, r7, #8
 80127fc:	4610      	mov	r0, r2
 80127fe:	4798      	blx	r3
 8012800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012802:	e077      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 fab1 	bl	8012d6e <USBD_CtlError>
            err++;
 801280c:	7afb      	ldrb	r3, [r7, #11]
 801280e:	3301      	adds	r3, #1
 8012810:	72fb      	strb	r3, [r7, #11]
          break;
 8012812:	e06f      	b.n	80128f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00b      	beq.n	8012838 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	7c12      	ldrb	r2, [r2, #16]
 801282c:	f107 0108 	add.w	r1, r7, #8
 8012830:	4610      	mov	r0, r2
 8012832:	4798      	blx	r3
 8012834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012836:	e05d      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012838:	6839      	ldr	r1, [r7, #0]
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 fa97 	bl	8012d6e <USBD_CtlError>
            err++;
 8012840:	7afb      	ldrb	r3, [r7, #11]
 8012842:	3301      	adds	r3, #1
 8012844:	72fb      	strb	r3, [r7, #11]
          break;
 8012846:	e055      	b.n	80128f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801284e:	691b      	ldr	r3, [r3, #16]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00b      	beq.n	801286c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	7c12      	ldrb	r2, [r2, #16]
 8012860:	f107 0108 	add.w	r1, r7, #8
 8012864:	4610      	mov	r0, r2
 8012866:	4798      	blx	r3
 8012868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801286a:	e043      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801286c:	6839      	ldr	r1, [r7, #0]
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 fa7d 	bl	8012d6e <USBD_CtlError>
            err++;
 8012874:	7afb      	ldrb	r3, [r7, #11]
 8012876:	3301      	adds	r3, #1
 8012878:	72fb      	strb	r3, [r7, #11]
          break;
 801287a:	e03b      	b.n	80128f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012882:	695b      	ldr	r3, [r3, #20]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00b      	beq.n	80128a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801288e:	695b      	ldr	r3, [r3, #20]
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	7c12      	ldrb	r2, [r2, #16]
 8012894:	f107 0108 	add.w	r1, r7, #8
 8012898:	4610      	mov	r0, r2
 801289a:	4798      	blx	r3
 801289c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801289e:	e029      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128a0:	6839      	ldr	r1, [r7, #0]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fa63 	bl	8012d6e <USBD_CtlError>
            err++;
 80128a8:	7afb      	ldrb	r3, [r7, #11]
 80128aa:	3301      	adds	r3, #1
 80128ac:	72fb      	strb	r3, [r7, #11]
          break;
 80128ae:	e021      	b.n	80128f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128b6:	699b      	ldr	r3, [r3, #24]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00b      	beq.n	80128d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80128c2:	699b      	ldr	r3, [r3, #24]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	7c12      	ldrb	r2, [r2, #16]
 80128c8:	f107 0108 	add.w	r1, r7, #8
 80128cc:	4610      	mov	r0, r2
 80128ce:	4798      	blx	r3
 80128d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128d2:	e00f      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128d4:	6839      	ldr	r1, [r7, #0]
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 fa49 	bl	8012d6e <USBD_CtlError>
            err++;
 80128dc:	7afb      	ldrb	r3, [r7, #11]
 80128de:	3301      	adds	r3, #1
 80128e0:	72fb      	strb	r3, [r7, #11]
          break;
 80128e2:	e007      	b.n	80128f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 fa41 	bl	8012d6e <USBD_CtlError>
          err++;
 80128ec:	7afb      	ldrb	r3, [r7, #11]
 80128ee:	3301      	adds	r3, #1
 80128f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80128f2:	bf00      	nop
      }
      break;
 80128f4:	e037      	b.n	8012966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7c1b      	ldrb	r3, [r3, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012906:	f107 0208 	add.w	r2, r7, #8
 801290a:	4610      	mov	r0, r2
 801290c:	4798      	blx	r3
 801290e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012910:	e029      	b.n	8012966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fa2a 	bl	8012d6e <USBD_CtlError>
        err++;
 801291a:	7afb      	ldrb	r3, [r7, #11]
 801291c:	3301      	adds	r3, #1
 801291e:	72fb      	strb	r3, [r7, #11]
      break;
 8012920:	e021      	b.n	8012966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	7c1b      	ldrb	r3, [r3, #16]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d10d      	bne.n	8012946 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012932:	f107 0208 	add.w	r2, r7, #8
 8012936:	4610      	mov	r0, r2
 8012938:	4798      	blx	r3
 801293a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	3301      	adds	r3, #1
 8012940:	2207      	movs	r2, #7
 8012942:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012944:	e00f      	b.n	8012966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 fa10 	bl	8012d6e <USBD_CtlError>
        err++;
 801294e:	7afb      	ldrb	r3, [r7, #11]
 8012950:	3301      	adds	r3, #1
 8012952:	72fb      	strb	r3, [r7, #11]
      break;
 8012954:	e007      	b.n	8012966 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012956:	6839      	ldr	r1, [r7, #0]
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f000 fa08 	bl	8012d6e <USBD_CtlError>
      err++;
 801295e:	7afb      	ldrb	r3, [r7, #11]
 8012960:	3301      	adds	r3, #1
 8012962:	72fb      	strb	r3, [r7, #11]
      break;
 8012964:	bf00      	nop
  }

  if (err != 0U)
 8012966:	7afb      	ldrb	r3, [r7, #11]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d11e      	bne.n	80129aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	88db      	ldrh	r3, [r3, #6]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d016      	beq.n	80129a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012974:	893b      	ldrh	r3, [r7, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00e      	beq.n	8012998 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	88da      	ldrh	r2, [r3, #6]
 801297e:	893b      	ldrh	r3, [r7, #8]
 8012980:	4293      	cmp	r3, r2
 8012982:	bf28      	it	cs
 8012984:	4613      	movcs	r3, r2
 8012986:	b29b      	uxth	r3, r3
 8012988:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801298a:	893b      	ldrh	r3, [r7, #8]
 801298c:	461a      	mov	r2, r3
 801298e:	68f9      	ldr	r1, [r7, #12]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fa69 	bl	8012e68 <USBD_CtlSendData>
 8012996:	e009      	b.n	80129ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012998:	6839      	ldr	r1, [r7, #0]
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f9e7 	bl	8012d6e <USBD_CtlError>
 80129a0:	e004      	b.n	80129ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f000 faba 	bl	8012f1c <USBD_CtlSendStatus>
 80129a8:	e000      	b.n	80129ac <USBD_GetDescriptor+0x2cc>
    return;
 80129aa:	bf00      	nop
  }
}
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop

080129b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	889b      	ldrh	r3, [r3, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d131      	bne.n	8012a2a <USBD_SetAddress+0x76>
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	88db      	ldrh	r3, [r3, #6]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d12d      	bne.n	8012a2a <USBD_SetAddress+0x76>
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	885b      	ldrh	r3, [r3, #2]
 80129d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80129d4:	d829      	bhi.n	8012a2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	885b      	ldrh	r3, [r3, #2]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80129e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b03      	cmp	r3, #3
 80129ec:	d104      	bne.n	80129f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 f9bc 	bl	8012d6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f6:	e01d      	b.n	8012a34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	7bfa      	ldrb	r2, [r7, #15]
 80129fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	4619      	mov	r1, r3
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f004 f897 	bl	8016b38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 fa86 	bl	8012f1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a1e:	e009      	b.n	8012a34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a28:	e004      	b.n	8012a34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012a2a:	6839      	ldr	r1, [r7, #0]
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 f99e 	bl	8012d6e <USBD_CtlError>
  }
}
 8012a32:	bf00      	nop
 8012a34:	bf00      	nop
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	885b      	ldrh	r3, [r3, #2]
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	4b4e      	ldr	r3, [pc, #312]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a54:	4b4d      	ldr	r3, [pc, #308]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	d905      	bls.n	8012a68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a5c:	6839      	ldr	r1, [r7, #0]
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 f985 	bl	8012d6e <USBD_CtlError>
    return USBD_FAIL;
 8012a64:	2303      	movs	r3, #3
 8012a66:	e08c      	b.n	8012b82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b02      	cmp	r3, #2
 8012a72:	d002      	beq.n	8012a7a <USBD_SetConfig+0x3e>
 8012a74:	2b03      	cmp	r3, #3
 8012a76:	d029      	beq.n	8012acc <USBD_SetConfig+0x90>
 8012a78:	e075      	b.n	8012b66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012a7a:	4b44      	ldr	r3, [pc, #272]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d020      	beq.n	8012ac4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012a82:	4b42      	ldr	r3, [pc, #264]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	4619      	mov	r1, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7fe ffe3 	bl	8011a5e <USBD_SetClassConfig>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d008      	beq.n	8012ab4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012aa2:	6839      	ldr	r1, [r7, #0]
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 f962 	bl	8012d6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2202      	movs	r2, #2
 8012aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ab2:	e065      	b.n	8012b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f000 fa31 	bl	8012f1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2203      	movs	r2, #3
 8012abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012ac2:	e05d      	b.n	8012b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 fa29 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012aca:	e059      	b.n	8012b80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012acc:	4b2f      	ldr	r3, [pc, #188]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d112      	bne.n	8012afa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012adc:	4b2b      	ldr	r3, [pc, #172]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ae6:	4b29      	ldr	r3, [pc, #164]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7fe ffd2 	bl	8011a96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 fa12 	bl	8012f1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012af8:	e042      	b.n	8012b80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012afa:	4b24      	ldr	r3, [pc, #144]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d02a      	beq.n	8012b5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	4619      	mov	r1, r3
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7fe ffc0 	bl	8011a96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012b16:	4b1d      	ldr	r3, [pc, #116]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b20:	4b1a      	ldr	r3, [pc, #104]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	4619      	mov	r1, r3
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7fe ff99 	bl	8011a5e <USBD_SetClassConfig>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00f      	beq.n	8012b56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012b36:	6839      	ldr	r1, [r7, #0]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 f918 	bl	8012d6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	4619      	mov	r1, r3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7fe ffa5 	bl	8011a96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2202      	movs	r2, #2
 8012b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012b54:	e014      	b.n	8012b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f9e0 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012b5c:	e010      	b.n	8012b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f9dc 	bl	8012f1c <USBD_CtlSendStatus>
      break;
 8012b64:	e00c      	b.n	8012b80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012b66:	6839      	ldr	r1, [r7, #0]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f900 	bl	8012d6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b6e:	4b07      	ldr	r3, [pc, #28]	@ (8012b8c <USBD_SetConfig+0x150>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7fe ff8e 	bl	8011a96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8012b7e:	bf00      	nop
  }

  return ret;
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	200003f8 	.word	0x200003f8

08012b90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	88db      	ldrh	r3, [r3, #6]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d004      	beq.n	8012bac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012ba2:	6839      	ldr	r1, [r7, #0]
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f000 f8e2 	bl	8012d6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012baa:	e023      	b.n	8012bf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	dc02      	bgt.n	8012bbe <USBD_GetConfig+0x2e>
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	dc03      	bgt.n	8012bc4 <USBD_GetConfig+0x34>
 8012bbc:	e015      	b.n	8012bea <USBD_GetConfig+0x5a>
 8012bbe:	2b03      	cmp	r3, #3
 8012bc0:	d00b      	beq.n	8012bda <USBD_GetConfig+0x4a>
 8012bc2:	e012      	b.n	8012bea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	3308      	adds	r3, #8
 8012bce:	2201      	movs	r2, #1
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f948 	bl	8012e68 <USBD_CtlSendData>
        break;
 8012bd8:	e00c      	b.n	8012bf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	2201      	movs	r2, #1
 8012be0:	4619      	mov	r1, r3
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f000 f940 	bl	8012e68 <USBD_CtlSendData>
        break;
 8012be8:	e004      	b.n	8012bf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012bea:	6839      	ldr	r1, [r7, #0]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f8be 	bl	8012d6e <USBD_CtlError>
        break;
 8012bf2:	bf00      	nop
}
 8012bf4:	bf00      	nop
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d81e      	bhi.n	8012c52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	88db      	ldrh	r3, [r3, #6]
 8012c18:	2b02      	cmp	r3, #2
 8012c1a:	d004      	beq.n	8012c26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012c1c:	6839      	ldr	r1, [r7, #0]
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f000 f8a5 	bl	8012d6e <USBD_CtlError>
        break;
 8012c24:	e01a      	b.n	8012c5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2201      	movs	r2, #1
 8012c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d005      	beq.n	8012c42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	f043 0202 	orr.w	r2, r3, #2
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	330c      	adds	r3, #12
 8012c46:	2202      	movs	r2, #2
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 f90c 	bl	8012e68 <USBD_CtlSendData>
      break;
 8012c50:	e004      	b.n	8012c5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012c52:	6839      	ldr	r1, [r7, #0]
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f88a 	bl	8012d6e <USBD_CtlError>
      break;
 8012c5a:	bf00      	nop
  }
}
 8012c5c:	bf00      	nop
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	885b      	ldrh	r3, [r3, #2]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d107      	bne.n	8012c86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 f94c 	bl	8012f1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012c84:	e013      	b.n	8012cae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d10b      	bne.n	8012ca6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	889b      	ldrh	r3, [r3, #4]
 8012c92:	0a1b      	lsrs	r3, r3, #8
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f93c 	bl	8012f1c <USBD_CtlSendStatus>
}
 8012ca4:	e003      	b.n	8012cae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f000 f860 	bl	8012d6e <USBD_CtlError>
}
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	2b02      	cmp	r3, #2
 8012ccc:	d80b      	bhi.n	8012ce6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	885b      	ldrh	r3, [r3, #2]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d10c      	bne.n	8012cf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 f91c 	bl	8012f1c <USBD_CtlSendStatus>
      }
      break;
 8012ce4:	e004      	b.n	8012cf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 f840 	bl	8012d6e <USBD_CtlError>
      break;
 8012cee:	e000      	b.n	8012cf2 <USBD_ClrFeature+0x3c>
      break;
 8012cf0:	bf00      	nop
  }
}
 8012cf2:	bf00      	nop
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}

08012cfa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	3301      	adds	r3, #1
 8012d14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	781a      	ldrb	r2, [r3, #0]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3301      	adds	r3, #1
 8012d22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7ff fa40 	bl	80121aa <SWAPBYTE>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	3301      	adds	r3, #1
 8012d36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f7ff fa33 	bl	80121aa <SWAPBYTE>
 8012d44:	4603      	mov	r3, r0
 8012d46:	461a      	mov	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3301      	adds	r3, #1
 8012d56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7ff fa26 	bl	80121aa <SWAPBYTE>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	461a      	mov	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	80da      	strh	r2, [r3, #6]
}
 8012d66:	bf00      	nop
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b082      	sub	sp, #8
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
 8012d76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d78:	2180      	movs	r1, #128	@ 0x80
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f003 fe72 	bl	8016a64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d80:	2100      	movs	r1, #0
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f003 fe6e 	bl	8016a64 <USBD_LL_StallEP>
}
 8012d88:	bf00      	nop
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d042      	beq.n	8012e2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012daa:	6938      	ldr	r0, [r7, #16]
 8012dac:	f000 f842 	bl	8012e34 <USBD_GetLen>
 8012db0:	4603      	mov	r3, r0
 8012db2:	3301      	adds	r3, #1
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dba:	d808      	bhi.n	8012dce <USBD_GetString+0x3e>
 8012dbc:	6938      	ldr	r0, [r7, #16]
 8012dbe:	f000 f839 	bl	8012e34 <USBD_GetLen>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	e001      	b.n	8012dd2 <USBD_GetString+0x42>
 8012dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	4413      	add	r3, r2
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	7812      	ldrb	r2, [r2, #0]
 8012de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012de2:	7dfb      	ldrb	r3, [r7, #23]
 8012de4:	3301      	adds	r3, #1
 8012de6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
 8012dea:	68ba      	ldr	r2, [r7, #8]
 8012dec:	4413      	add	r3, r2
 8012dee:	2203      	movs	r2, #3
 8012df0:	701a      	strb	r2, [r3, #0]
  idx++;
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
 8012df4:	3301      	adds	r3, #1
 8012df6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012df8:	e013      	b.n	8012e22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	68ba      	ldr	r2, [r7, #8]
 8012dfe:	4413      	add	r3, r2
 8012e00:	693a      	ldr	r2, [r7, #16]
 8012e02:	7812      	ldrb	r2, [r2, #0]
 8012e04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	613b      	str	r3, [r7, #16]
    idx++;
 8012e0c:	7dfb      	ldrb	r3, [r7, #23]
 8012e0e:	3301      	adds	r3, #1
 8012e10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	4413      	add	r3, r2
 8012e18:	2200      	movs	r2, #0
 8012e1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1e7      	bne.n	8012dfa <USBD_GetString+0x6a>
 8012e2a:	e000      	b.n	8012e2e <USBD_GetString+0x9e>
    return;
 8012e2c:	bf00      	nop
  }
}
 8012e2e:	3718      	adds	r7, #24
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012e44:	e005      	b.n	8012e52 <USBD_GetLen+0x1e>
  {
    len++;
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1f5      	bne.n	8012e46 <USBD_GetLen+0x12>
  }

  return len;
 8012e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2202      	movs	r2, #2
 8012e78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f003 fe71 	bl	8016b76 <USBD_LL_Transmit>

  return USBD_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}

08012e9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b084      	sub	sp, #16
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	2100      	movs	r1, #0
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f003 fe60 	bl	8016b76 <USBD_LL_Transmit>

  return USBD_OK;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2203      	movs	r2, #3
 8012ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	2100      	movs	r1, #0
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f003 fe64 	bl	8016bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	60f8      	str	r0, [r7, #12]
 8012f02:	60b9      	str	r1, [r7, #8]
 8012f04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f003 fe53 	bl	8016bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2204      	movs	r2, #4
 8012f28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2100      	movs	r1, #0
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f003 fe1f 	bl	8016b76 <USBD_LL_Transmit>

  return USBD_OK;
 8012f38:	2300      	movs	r3, #0
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b082      	sub	sp, #8
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2205      	movs	r2, #5
 8012f4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f52:	2300      	movs	r3, #0
 8012f54:	2200      	movs	r2, #0
 8012f56:	2100      	movs	r1, #0
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f003 fe2d 	bl	8016bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f5e:	2300      	movs	r3, #0
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <__NVIC_SetPriority>:
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	db0a      	blt.n	8012f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	490c      	ldr	r1, [pc, #48]	@ (8012fb4 <__NVIC_SetPriority+0x4c>)
 8012f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f86:	0112      	lsls	r2, r2, #4
 8012f88:	b2d2      	uxtb	r2, r2
 8012f8a:	440b      	add	r3, r1
 8012f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012f90:	e00a      	b.n	8012fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	b2da      	uxtb	r2, r3
 8012f96:	4908      	ldr	r1, [pc, #32]	@ (8012fb8 <__NVIC_SetPriority+0x50>)
 8012f98:	79fb      	ldrb	r3, [r7, #7]
 8012f9a:	f003 030f 	and.w	r3, r3, #15
 8012f9e:	3b04      	subs	r3, #4
 8012fa0:	0112      	lsls	r2, r2, #4
 8012fa2:	b2d2      	uxtb	r2, r2
 8012fa4:	440b      	add	r3, r1
 8012fa6:	761a      	strb	r2, [r3, #24]
}
 8012fa8:	bf00      	nop
 8012faa:	370c      	adds	r7, #12
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr
 8012fb4:	e000e100 	.word	0xe000e100
 8012fb8:	e000ed00 	.word	0xe000ed00

08012fbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012fc0:	4b05      	ldr	r3, [pc, #20]	@ (8012fd8 <SysTick_Handler+0x1c>)
 8012fc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012fc4:	f001 ffe0 	bl	8014f88 <xTaskGetSchedulerState>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d001      	beq.n	8012fd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012fce:	f002 fedb 	bl	8015d88 <xPortSysTickHandler>
  }
}
 8012fd2:	bf00      	nop
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	e000e010 	.word	0xe000e010

08012fdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	f06f 0004 	mvn.w	r0, #4
 8012fe6:	f7ff ffbf 	bl	8012f68 <__NVIC_SetPriority>
#endif
}
 8012fea:	bf00      	nop
 8012fec:	bd80      	pop	{r7, pc}
	...

08012ff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ff6:	f3ef 8305 	mrs	r3, IPSR
 8012ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8012ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d003      	beq.n	801300a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013002:	f06f 0305 	mvn.w	r3, #5
 8013006:	607b      	str	r3, [r7, #4]
 8013008:	e00c      	b.n	8013024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801300a:	4b0a      	ldr	r3, [pc, #40]	@ (8013034 <osKernelInitialize+0x44>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d105      	bne.n	801301e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013012:	4b08      	ldr	r3, [pc, #32]	@ (8013034 <osKernelInitialize+0x44>)
 8013014:	2201      	movs	r2, #1
 8013016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013018:	2300      	movs	r3, #0
 801301a:	607b      	str	r3, [r7, #4]
 801301c:	e002      	b.n	8013024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013024:	687b      	ldr	r3, [r7, #4]
}
 8013026:	4618      	mov	r0, r3
 8013028:	370c      	adds	r7, #12
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	200003fc 	.word	0x200003fc

08013038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801303e:	f3ef 8305 	mrs	r3, IPSR
 8013042:	603b      	str	r3, [r7, #0]
  return(result);
 8013044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013046:	2b00      	cmp	r3, #0
 8013048:	d003      	beq.n	8013052 <osKernelStart+0x1a>
    stat = osErrorISR;
 801304a:	f06f 0305 	mvn.w	r3, #5
 801304e:	607b      	str	r3, [r7, #4]
 8013050:	e010      	b.n	8013074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013052:	4b0b      	ldr	r3, [pc, #44]	@ (8013080 <osKernelStart+0x48>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b01      	cmp	r3, #1
 8013058:	d109      	bne.n	801306e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801305a:	f7ff ffbf 	bl	8012fdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801305e:	4b08      	ldr	r3, [pc, #32]	@ (8013080 <osKernelStart+0x48>)
 8013060:	2202      	movs	r2, #2
 8013062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013064:	f001 fb2c 	bl	80146c0 <vTaskStartScheduler>
      stat = osOK;
 8013068:	2300      	movs	r3, #0
 801306a:	607b      	str	r3, [r7, #4]
 801306c:	e002      	b.n	8013074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801306e:	f04f 33ff 	mov.w	r3, #4294967295
 8013072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013074:	687b      	ldr	r3, [r7, #4]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	200003fc 	.word	0x200003fc

08013084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013084:	b580      	push	{r7, lr}
 8013086:	b08e      	sub	sp, #56	@ 0x38
 8013088:	af04      	add	r7, sp, #16
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013090:	2300      	movs	r3, #0
 8013092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013094:	f3ef 8305 	mrs	r3, IPSR
 8013098:	617b      	str	r3, [r7, #20]
  return(result);
 801309a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801309c:	2b00      	cmp	r3, #0
 801309e:	d17e      	bne.n	801319e <osThreadNew+0x11a>
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d07b      	beq.n	801319e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80130a6:	2380      	movs	r3, #128	@ 0x80
 80130a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80130aa:	2318      	movs	r3, #24
 80130ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80130ae:	2300      	movs	r3, #0
 80130b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80130b2:	f04f 33ff 	mov.w	r3, #4294967295
 80130b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d045      	beq.n	801314a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d002      	beq.n	80130cc <osThreadNew+0x48>
        name = attr->name;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d008      	beq.n	80130f2 <osThreadNew+0x6e>
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	2b38      	cmp	r3, #56	@ 0x38
 80130e4:	d805      	bhi.n	80130f2 <osThreadNew+0x6e>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	f003 0301 	and.w	r3, r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d001      	beq.n	80130f6 <osThreadNew+0x72>
        return (NULL);
 80130f2:	2300      	movs	r3, #0
 80130f4:	e054      	b.n	80131a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	695b      	ldr	r3, [r3, #20]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	695b      	ldr	r3, [r3, #20]
 8013102:	089b      	lsrs	r3, r3, #2
 8013104:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00e      	beq.n	801312c <osThreadNew+0xa8>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	2ba7      	cmp	r3, #167	@ 0xa7
 8013114:	d90a      	bls.n	801312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801311a:	2b00      	cmp	r3, #0
 801311c:	d006      	beq.n	801312c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	695b      	ldr	r3, [r3, #20]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <osThreadNew+0xa8>
        mem = 1;
 8013126:	2301      	movs	r3, #1
 8013128:	61bb      	str	r3, [r7, #24]
 801312a:	e010      	b.n	801314e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10c      	bne.n	801314e <osThreadNew+0xca>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d108      	bne.n	801314e <osThreadNew+0xca>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <osThreadNew+0xca>
          mem = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	61bb      	str	r3, [r7, #24]
 8013148:	e001      	b.n	801314e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d110      	bne.n	8013176 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801315c:	9202      	str	r2, [sp, #8]
 801315e:	9301      	str	r3, [sp, #4]
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	6a3a      	ldr	r2, [r7, #32]
 8013168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801316a:	68f8      	ldr	r0, [r7, #12]
 801316c:	f001 f840 	bl	80141f0 <xTaskCreateStatic>
 8013170:	4603      	mov	r3, r0
 8013172:	613b      	str	r3, [r7, #16]
 8013174:	e013      	b.n	801319e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d110      	bne.n	801319e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801317c:	6a3b      	ldr	r3, [r7, #32]
 801317e:	b29a      	uxth	r2, r3
 8013180:	f107 0310 	add.w	r3, r7, #16
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f001 f88e 	bl	80142b0 <xTaskCreate>
 8013194:	4603      	mov	r3, r0
 8013196:	2b01      	cmp	r3, #1
 8013198:	d001      	beq.n	801319e <osThreadNew+0x11a>
            hTask = NULL;
 801319a:	2300      	movs	r3, #0
 801319c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801319e:	693b      	ldr	r3, [r7, #16]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3728      	adds	r7, #40	@ 0x28
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b084      	sub	sp, #16
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131b0:	f3ef 8305 	mrs	r3, IPSR
 80131b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80131b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d003      	beq.n	80131c4 <osDelay+0x1c>
    stat = osErrorISR;
 80131bc:	f06f 0305 	mvn.w	r3, #5
 80131c0:	60fb      	str	r3, [r7, #12]
 80131c2:	e007      	b.n	80131d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80131c4:	2300      	movs	r3, #0
 80131c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d002      	beq.n	80131d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f001 fa40 	bl	8014654 <vTaskDelay>
    }
  }

  return (stat);
 80131d4:	68fb      	ldr	r3, [r7, #12]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
	...

080131e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80131e0:	b480      	push	{r7}
 80131e2:	b085      	sub	sp, #20
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4a07      	ldr	r2, [pc, #28]	@ (801320c <vApplicationGetIdleTaskMemory+0x2c>)
 80131f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	4a06      	ldr	r2, [pc, #24]	@ (8013210 <vApplicationGetIdleTaskMemory+0x30>)
 80131f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2280      	movs	r2, #128	@ 0x80
 80131fc:	601a      	str	r2, [r3, #0]
}
 80131fe:	bf00      	nop
 8013200:	3714      	adds	r7, #20
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	20000400 	.word	0x20000400
 8013210:	200004a8 	.word	0x200004a8

08013214 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013214:	b480      	push	{r7}
 8013216:	b085      	sub	sp, #20
 8013218:	af00      	add	r7, sp, #0
 801321a:	60f8      	str	r0, [r7, #12]
 801321c:	60b9      	str	r1, [r7, #8]
 801321e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	4a07      	ldr	r2, [pc, #28]	@ (8013240 <vApplicationGetTimerTaskMemory+0x2c>)
 8013224:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	4a06      	ldr	r2, [pc, #24]	@ (8013244 <vApplicationGetTimerTaskMemory+0x30>)
 801322a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013232:	601a      	str	r2, [r3, #0]
}
 8013234:	bf00      	nop
 8013236:	3714      	adds	r7, #20
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr
 8013240:	200006a8 	.word	0x200006a8
 8013244:	20000750 	.word	0x20000750

08013248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013248:	b480      	push	{r7}
 801324a:	b083      	sub	sp, #12
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f103 0208 	add.w	r2, r3, #8
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f04f 32ff 	mov.w	r2, #4294967295
 8013260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f103 0208 	add.w	r2, r3, #8
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f103 0208 	add.w	r2, r3, #8
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801327c:	bf00      	nop
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013296:	bf00      	nop
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a0:	4770      	bx	lr

080132a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132a2:	b480      	push	{r7}
 80132a4:	b085      	sub	sp, #20
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	68fa      	ldr	r2, [r7, #12]
 80132b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	689a      	ldr	r2, [r3, #8]
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	683a      	ldr	r2, [r7, #0]
 80132cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	1c5a      	adds	r2, r3, #1
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	601a      	str	r2, [r3, #0]
}
 80132de:	bf00      	nop
 80132e0:	3714      	adds	r7, #20
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr

080132ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132ea:	b480      	push	{r7}
 80132ec:	b085      	sub	sp, #20
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	6078      	str	r0, [r7, #4]
 80132f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013300:	d103      	bne.n	801330a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	691b      	ldr	r3, [r3, #16]
 8013306:	60fb      	str	r3, [r7, #12]
 8013308:	e00c      	b.n	8013324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	3308      	adds	r3, #8
 801330e:	60fb      	str	r3, [r7, #12]
 8013310:	e002      	b.n	8013318 <vListInsert+0x2e>
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	60fb      	str	r3, [r7, #12]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68ba      	ldr	r2, [r7, #8]
 8013320:	429a      	cmp	r2, r3
 8013322:	d2f6      	bcs.n	8013312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	685a      	ldr	r2, [r3, #4]
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	683a      	ldr	r2, [r7, #0]
 8013332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	683a      	ldr	r2, [r7, #0]
 801333e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	1c5a      	adds	r2, r3, #1
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	601a      	str	r2, [r3, #0]
}
 8013350:	bf00      	nop
 8013352:	3714      	adds	r7, #20
 8013354:	46bd      	mov	sp, r7
 8013356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335a:	4770      	bx	lr

0801335c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	6892      	ldr	r2, [r2, #8]
 8013372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	689b      	ldr	r3, [r3, #8]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	6852      	ldr	r2, [r2, #4]
 801337c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	429a      	cmp	r2, r3
 8013386:	d103      	bne.n	8013390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	689a      	ldr	r2, [r3, #8]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	1e5a      	subs	r2, r3, #1
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	681b      	ldr	r3, [r3, #0]
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3714      	adds	r7, #20
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d10b      	bne.n	80133dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80133c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c8:	f383 8811 	msr	BASEPRI, r3
 80133cc:	f3bf 8f6f 	isb	sy
 80133d0:	f3bf 8f4f 	dsb	sy
 80133d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80133d6:	bf00      	nop
 80133d8:	bf00      	nop
 80133da:	e7fd      	b.n	80133d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80133dc:	f002 fc44 	bl	8015c68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133e8:	68f9      	ldr	r1, [r7, #12]
 80133ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80133ec:	fb01 f303 	mul.w	r3, r1, r3
 80133f0:	441a      	add	r2, r3
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2200      	movs	r2, #0
 80133fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801340c:	3b01      	subs	r3, #1
 801340e:	68f9      	ldr	r1, [r7, #12]
 8013410:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013412:	fb01 f303 	mul.w	r3, r1, r3
 8013416:	441a      	add	r2, r3
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	22ff      	movs	r2, #255	@ 0xff
 8013420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	22ff      	movs	r2, #255	@ 0xff
 8013428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d114      	bne.n	801345c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	691b      	ldr	r3, [r3, #16]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d01a      	beq.n	8013470 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	3310      	adds	r3, #16
 801343e:	4618      	mov	r0, r3
 8013440:	f001 fbdc 	bl	8014bfc <xTaskRemoveFromEventList>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	d012      	beq.n	8013470 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801344a:	4b0d      	ldr	r3, [pc, #52]	@ (8013480 <xQueueGenericReset+0xd0>)
 801344c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	f3bf 8f4f 	dsb	sy
 8013456:	f3bf 8f6f 	isb	sy
 801345a:	e009      	b.n	8013470 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	3310      	adds	r3, #16
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff fef1 	bl	8013248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	3324      	adds	r3, #36	@ 0x24
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff feec 	bl	8013248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013470:	f002 fc2c 	bl	8015ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013474:	2301      	movs	r3, #1
}
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08e      	sub	sp, #56	@ 0x38
 8013488:	af02      	add	r7, sp, #8
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d10b      	bne.n	80134b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80134aa:	bf00      	nop
 80134ac:	bf00      	nop
 80134ae:	e7fd      	b.n	80134ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10b      	bne.n	80134ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80134b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80134c8:	bf00      	nop
 80134ca:	bf00      	nop
 80134cc:	e7fd      	b.n	80134ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <xQueueGenericCreateStatic+0x56>
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <xQueueGenericCreateStatic+0x5a>
 80134da:	2301      	movs	r3, #1
 80134dc:	e000      	b.n	80134e0 <xQueueGenericCreateStatic+0x5c>
 80134de:	2300      	movs	r3, #0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10b      	bne.n	80134fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80134e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e8:	f383 8811 	msr	BASEPRI, r3
 80134ec:	f3bf 8f6f 	isb	sy
 80134f0:	f3bf 8f4f 	dsb	sy
 80134f4:	623b      	str	r3, [r7, #32]
}
 80134f6:	bf00      	nop
 80134f8:	bf00      	nop
 80134fa:	e7fd      	b.n	80134f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d102      	bne.n	8013508 <xQueueGenericCreateStatic+0x84>
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <xQueueGenericCreateStatic+0x88>
 8013508:	2301      	movs	r3, #1
 801350a:	e000      	b.n	801350e <xQueueGenericCreateStatic+0x8a>
 801350c:	2300      	movs	r3, #0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d10b      	bne.n	801352a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8013512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	61fb      	str	r3, [r7, #28]
}
 8013524:	bf00      	nop
 8013526:	bf00      	nop
 8013528:	e7fd      	b.n	8013526 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801352a:	2350      	movs	r3, #80	@ 0x50
 801352c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	2b50      	cmp	r3, #80	@ 0x50
 8013532:	d00b      	beq.n	801354c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013538:	f383 8811 	msr	BASEPRI, r3
 801353c:	f3bf 8f6f 	isb	sy
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	61bb      	str	r3, [r7, #24]
}
 8013546:	bf00      	nop
 8013548:	bf00      	nop
 801354a:	e7fd      	b.n	8013548 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801354c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013554:	2b00      	cmp	r3, #0
 8013556:	d00d      	beq.n	8013574 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355a:	2201      	movs	r2, #1
 801355c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013560:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013566:	9300      	str	r3, [sp, #0]
 8013568:	4613      	mov	r3, r2
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f000 f840 	bl	80135f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013576:	4618      	mov	r0, r3
 8013578:	3730      	adds	r7, #48	@ 0x30
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801357e:	b580      	push	{r7, lr}
 8013580:	b08a      	sub	sp, #40	@ 0x28
 8013582:	af02      	add	r7, sp, #8
 8013584:	60f8      	str	r0, [r7, #12]
 8013586:	60b9      	str	r1, [r7, #8]
 8013588:	4613      	mov	r3, r2
 801358a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d10b      	bne.n	80135aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8013592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013596:	f383 8811 	msr	BASEPRI, r3
 801359a:	f3bf 8f6f 	isb	sy
 801359e:	f3bf 8f4f 	dsb	sy
 80135a2:	613b      	str	r3, [r7, #16]
}
 80135a4:	bf00      	nop
 80135a6:	bf00      	nop
 80135a8:	e7fd      	b.n	80135a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	fb02 f303 	mul.w	r3, r2, r3
 80135b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	3350      	adds	r3, #80	@ 0x50
 80135b8:	4618      	mov	r0, r3
 80135ba:	f002 fc77 	bl	8015eac <pvPortMalloc>
 80135be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d011      	beq.n	80135ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	3350      	adds	r3, #80	@ 0x50
 80135ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	2200      	movs	r2, #0
 80135d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135d8:	79fa      	ldrb	r2, [r7, #7]
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	4613      	mov	r3, r2
 80135e0:	697a      	ldr	r2, [r7, #20]
 80135e2:	68b9      	ldr	r1, [r7, #8]
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f000 f805 	bl	80135f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135ea:	69bb      	ldr	r3, [r7, #24]
	}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3720      	adds	r7, #32
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b084      	sub	sp, #16
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
 8013600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d103      	bne.n	8013610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	69ba      	ldr	r2, [r7, #24]
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	e002      	b.n	8013616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	68ba      	ldr	r2, [r7, #8]
 8013620:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013622:	2101      	movs	r1, #1
 8013624:	69b8      	ldr	r0, [r7, #24]
 8013626:	f7ff fec3 	bl	80133b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	78fa      	ldrb	r2, [r7, #3]
 801362e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013632:	bf00      	nop
 8013634:	3710      	adds	r7, #16
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801363a:	b580      	push	{r7, lr}
 801363c:	b082      	sub	sp, #8
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d00e      	beq.n	8013666 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2200      	movs	r2, #0
 801364c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2200      	movs	r2, #0
 8013658:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801365a:	2300      	movs	r3, #0
 801365c:	2200      	movs	r2, #0
 801365e:	2100      	movs	r1, #0
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 f81d 	bl	80136a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013666:	bf00      	nop
 8013668:	3708      	adds	r7, #8
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}

0801366e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801366e:	b580      	push	{r7, lr}
 8013670:	b086      	sub	sp, #24
 8013672:	af00      	add	r7, sp, #0
 8013674:	4603      	mov	r3, r0
 8013676:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013678:	2301      	movs	r3, #1
 801367a:	617b      	str	r3, [r7, #20]
 801367c:	2300      	movs	r3, #0
 801367e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	461a      	mov	r2, r3
 8013684:	6939      	ldr	r1, [r7, #16]
 8013686:	6978      	ldr	r0, [r7, #20]
 8013688:	f7ff ff79 	bl	801357e <xQueueGenericCreate>
 801368c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ff ffd3 	bl	801363a <prvInitialiseMutex>

		return xNewQueue;
 8013694:	68fb      	ldr	r3, [r7, #12]
	}
 8013696:	4618      	mov	r0, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
	...

080136a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b08e      	sub	sp, #56	@ 0x38
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
 80136ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80136ae:	2300      	movs	r3, #0
 80136b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80136b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d10b      	bne.n	80136d4 <xQueueGenericSend+0x34>
	__asm volatile
 80136bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80136ce:	bf00      	nop
 80136d0:	bf00      	nop
 80136d2:	e7fd      	b.n	80136d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d103      	bne.n	80136e2 <xQueueGenericSend+0x42>
 80136da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d101      	bne.n	80136e6 <xQueueGenericSend+0x46>
 80136e2:	2301      	movs	r3, #1
 80136e4:	e000      	b.n	80136e8 <xQueueGenericSend+0x48>
 80136e6:	2300      	movs	r3, #0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10b      	bne.n	8013704 <xQueueGenericSend+0x64>
	__asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80136fe:	bf00      	nop
 8013700:	bf00      	nop
 8013702:	e7fd      	b.n	8013700 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	2b02      	cmp	r3, #2
 8013708:	d103      	bne.n	8013712 <xQueueGenericSend+0x72>
 801370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801370e:	2b01      	cmp	r3, #1
 8013710:	d101      	bne.n	8013716 <xQueueGenericSend+0x76>
 8013712:	2301      	movs	r3, #1
 8013714:	e000      	b.n	8013718 <xQueueGenericSend+0x78>
 8013716:	2300      	movs	r3, #0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10b      	bne.n	8013734 <xQueueGenericSend+0x94>
	__asm volatile
 801371c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013720:	f383 8811 	msr	BASEPRI, r3
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	623b      	str	r3, [r7, #32]
}
 801372e:	bf00      	nop
 8013730:	bf00      	nop
 8013732:	e7fd      	b.n	8013730 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013734:	f001 fc28 	bl	8014f88 <xTaskGetSchedulerState>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d102      	bne.n	8013744 <xQueueGenericSend+0xa4>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d101      	bne.n	8013748 <xQueueGenericSend+0xa8>
 8013744:	2301      	movs	r3, #1
 8013746:	e000      	b.n	801374a <xQueueGenericSend+0xaa>
 8013748:	2300      	movs	r3, #0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d10b      	bne.n	8013766 <xQueueGenericSend+0xc6>
	__asm volatile
 801374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013752:	f383 8811 	msr	BASEPRI, r3
 8013756:	f3bf 8f6f 	isb	sy
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	61fb      	str	r3, [r7, #28]
}
 8013760:	bf00      	nop
 8013762:	bf00      	nop
 8013764:	e7fd      	b.n	8013762 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013766:	f002 fa7f 	bl	8015c68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801376c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013772:	429a      	cmp	r2, r3
 8013774:	d302      	bcc.n	801377c <xQueueGenericSend+0xdc>
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	2b02      	cmp	r3, #2
 801377a:	d129      	bne.n	80137d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801377c:	683a      	ldr	r2, [r7, #0]
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013782:	f000 fbc7 	bl	8013f14 <prvCopyDataToQueue>
 8013786:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801378c:	2b00      	cmp	r3, #0
 801378e:	d010      	beq.n	80137b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013792:	3324      	adds	r3, #36	@ 0x24
 8013794:	4618      	mov	r0, r3
 8013796:	f001 fa31 	bl	8014bfc <xTaskRemoveFromEventList>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d013      	beq.n	80137c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80137a0:	4b3f      	ldr	r3, [pc, #252]	@ (80138a0 <xQueueGenericSend+0x200>)
 80137a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	e00a      	b.n	80137c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80137b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d007      	beq.n	80137c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80137b8:	4b39      	ldr	r3, [pc, #228]	@ (80138a0 <xQueueGenericSend+0x200>)
 80137ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137be:	601a      	str	r2, [r3, #0]
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137c8:	f002 fa80 	bl	8015ccc <vPortExitCritical>
				return pdPASS;
 80137cc:	2301      	movs	r3, #1
 80137ce:	e063      	b.n	8013898 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d103      	bne.n	80137de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137d6:	f002 fa79 	bl	8015ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80137da:	2300      	movs	r3, #0
 80137dc:	e05c      	b.n	8013898 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d106      	bne.n	80137f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137e4:	f107 0314 	add.w	r3, r7, #20
 80137e8:	4618      	mov	r0, r3
 80137ea:	f001 fa6b 	bl	8014cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137f2:	f002 fa6b 	bl	8015ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137f6:	f000 ffd3 	bl	80147a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137fa:	f002 fa35 	bl	8015c68 <vPortEnterCritical>
 80137fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013804:	b25b      	sxtb	r3, r3
 8013806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380a:	d103      	bne.n	8013814 <xQueueGenericSend+0x174>
 801380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801380e:	2200      	movs	r2, #0
 8013810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801381a:	b25b      	sxtb	r3, r3
 801381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013820:	d103      	bne.n	801382a <xQueueGenericSend+0x18a>
 8013822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013824:	2200      	movs	r2, #0
 8013826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801382a:	f002 fa4f 	bl	8015ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801382e:	1d3a      	adds	r2, r7, #4
 8013830:	f107 0314 	add.w	r3, r7, #20
 8013834:	4611      	mov	r1, r2
 8013836:	4618      	mov	r0, r3
 8013838:	f001 fa5a 	bl	8014cf0 <xTaskCheckForTimeOut>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d124      	bne.n	801388c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013842:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013844:	f000 fc5e 	bl	8014104 <prvIsQueueFull>
 8013848:	4603      	mov	r3, r0
 801384a:	2b00      	cmp	r3, #0
 801384c:	d018      	beq.n	8013880 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013850:	3310      	adds	r3, #16
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	4611      	mov	r1, r2
 8013856:	4618      	mov	r0, r3
 8013858:	f001 f97e 	bl	8014b58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801385c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801385e:	f000 fbe9 	bl	8014034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013862:	f000 ffab 	bl	80147bc <xTaskResumeAll>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	f47f af7c 	bne.w	8013766 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801386e:	4b0c      	ldr	r3, [pc, #48]	@ (80138a0 <xQueueGenericSend+0x200>)
 8013870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	f3bf 8f4f 	dsb	sy
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	e772      	b.n	8013766 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013882:	f000 fbd7 	bl	8014034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013886:	f000 ff99 	bl	80147bc <xTaskResumeAll>
 801388a:	e76c      	b.n	8013766 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801388c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801388e:	f000 fbd1 	bl	8014034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013892:	f000 ff93 	bl	80147bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013898:	4618      	mov	r0, r3
 801389a:	3738      	adds	r7, #56	@ 0x38
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	e000ed04 	.word	0xe000ed04

080138a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b090      	sub	sp, #64	@ 0x40
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80138b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d10b      	bne.n	80138d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80138bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138c0:	f383 8811 	msr	BASEPRI, r3
 80138c4:	f3bf 8f6f 	isb	sy
 80138c8:	f3bf 8f4f 	dsb	sy
 80138cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80138ce:	bf00      	nop
 80138d0:	bf00      	nop
 80138d2:	e7fd      	b.n	80138d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d103      	bne.n	80138e2 <xQueueGenericSendFromISR+0x3e>
 80138da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d101      	bne.n	80138e6 <xQueueGenericSendFromISR+0x42>
 80138e2:	2301      	movs	r3, #1
 80138e4:	e000      	b.n	80138e8 <xQueueGenericSendFromISR+0x44>
 80138e6:	2300      	movs	r3, #0
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10b      	bne.n	8013904 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80138ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f0:	f383 8811 	msr	BASEPRI, r3
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80138fe:	bf00      	nop
 8013900:	bf00      	nop
 8013902:	e7fd      	b.n	8013900 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	2b02      	cmp	r3, #2
 8013908:	d103      	bne.n	8013912 <xQueueGenericSendFromISR+0x6e>
 801390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801390e:	2b01      	cmp	r3, #1
 8013910:	d101      	bne.n	8013916 <xQueueGenericSendFromISR+0x72>
 8013912:	2301      	movs	r3, #1
 8013914:	e000      	b.n	8013918 <xQueueGenericSendFromISR+0x74>
 8013916:	2300      	movs	r3, #0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d10b      	bne.n	8013934 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	623b      	str	r3, [r7, #32]
}
 801392e:	bf00      	nop
 8013930:	bf00      	nop
 8013932:	e7fd      	b.n	8013930 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013934:	f002 fa78 	bl	8015e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013938:	f3ef 8211 	mrs	r2, BASEPRI
 801393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	61fa      	str	r2, [r7, #28]
 801394e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013950:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013952:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801395c:	429a      	cmp	r2, r3
 801395e:	d302      	bcc.n	8013966 <xQueueGenericSendFromISR+0xc2>
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	2b02      	cmp	r3, #2
 8013964:	d12f      	bne.n	80139c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801396c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013974:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013976:	683a      	ldr	r2, [r7, #0]
 8013978:	68b9      	ldr	r1, [r7, #8]
 801397a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801397c:	f000 faca 	bl	8013f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013980:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013988:	d112      	bne.n	80139b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801398e:	2b00      	cmp	r3, #0
 8013990:	d016      	beq.n	80139c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013994:	3324      	adds	r3, #36	@ 0x24
 8013996:	4618      	mov	r0, r3
 8013998:	f001 f930 	bl	8014bfc <xTaskRemoveFromEventList>
 801399c:	4603      	mov	r3, r0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00e      	beq.n	80139c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d00b      	beq.n	80139c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2201      	movs	r2, #1
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	e007      	b.n	80139c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80139b4:	3301      	adds	r3, #1
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	b25a      	sxtb	r2, r3
 80139ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80139c0:	2301      	movs	r3, #1
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80139c4:	e001      	b.n	80139ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139c6:	2300      	movs	r3, #0
 80139c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3740      	adds	r7, #64	@ 0x40
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b08e      	sub	sp, #56	@ 0x38
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80139ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d10b      	bne.n	8013a0c <xQueueGiveFromISR+0x2c>
	__asm volatile
 80139f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139f8:	f383 8811 	msr	BASEPRI, r3
 80139fc:	f3bf 8f6f 	isb	sy
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	623b      	str	r3, [r7, #32]
}
 8013a06:	bf00      	nop
 8013a08:	bf00      	nop
 8013a0a:	e7fd      	b.n	8013a08 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00b      	beq.n	8013a2c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	61fb      	str	r3, [r7, #28]
}
 8013a26:	bf00      	nop
 8013a28:	bf00      	nop
 8013a2a:	e7fd      	b.n	8013a28 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d103      	bne.n	8013a3c <xQueueGiveFromISR+0x5c>
 8013a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d101      	bne.n	8013a40 <xQueueGiveFromISR+0x60>
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	e000      	b.n	8013a42 <xQueueGiveFromISR+0x62>
 8013a40:	2300      	movs	r3, #0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d10b      	bne.n	8013a5e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8013a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a4a:	f383 8811 	msr	BASEPRI, r3
 8013a4e:	f3bf 8f6f 	isb	sy
 8013a52:	f3bf 8f4f 	dsb	sy
 8013a56:	61bb      	str	r3, [r7, #24]
}
 8013a58:	bf00      	nop
 8013a5a:	bf00      	nop
 8013a5c:	e7fd      	b.n	8013a5a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a5e:	f002 f9e3 	bl	8015e28 <vPortValidateInterruptPriority>
	__asm volatile
 8013a62:	f3ef 8211 	mrs	r2, BASEPRI
 8013a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a6a:	f383 8811 	msr	BASEPRI, r3
 8013a6e:	f3bf 8f6f 	isb	sy
 8013a72:	f3bf 8f4f 	dsb	sy
 8013a76:	617a      	str	r2, [r7, #20]
 8013a78:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013a7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a82:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d22b      	bcs.n	8013ae6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a9a:	1c5a      	adds	r2, r3, #1
 8013a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013aa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa8:	d112      	bne.n	8013ad0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d016      	beq.n	8013ae0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ab4:	3324      	adds	r3, #36	@ 0x24
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f001 f8a0 	bl	8014bfc <xTaskRemoveFromEventList>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d00e      	beq.n	8013ae0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00b      	beq.n	8013ae0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	2201      	movs	r2, #1
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	e007      	b.n	8013ae0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	b25a      	sxtb	r2, r3
 8013ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ae4:	e001      	b.n	8013aea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8013aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f383 8811 	msr	BASEPRI, r3
}
 8013af4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3738      	adds	r7, #56	@ 0x38
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b08c      	sub	sp, #48	@ 0x30
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10b      	bne.n	8013b32 <xQueueReceive+0x32>
	__asm volatile
 8013b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b1e:	f383 8811 	msr	BASEPRI, r3
 8013b22:	f3bf 8f6f 	isb	sy
 8013b26:	f3bf 8f4f 	dsb	sy
 8013b2a:	623b      	str	r3, [r7, #32]
}
 8013b2c:	bf00      	nop
 8013b2e:	bf00      	nop
 8013b30:	e7fd      	b.n	8013b2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d103      	bne.n	8013b40 <xQueueReceive+0x40>
 8013b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d101      	bne.n	8013b44 <xQueueReceive+0x44>
 8013b40:	2301      	movs	r3, #1
 8013b42:	e000      	b.n	8013b46 <xQueueReceive+0x46>
 8013b44:	2300      	movs	r3, #0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d10b      	bne.n	8013b62 <xQueueReceive+0x62>
	__asm volatile
 8013b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b4e:	f383 8811 	msr	BASEPRI, r3
 8013b52:	f3bf 8f6f 	isb	sy
 8013b56:	f3bf 8f4f 	dsb	sy
 8013b5a:	61fb      	str	r3, [r7, #28]
}
 8013b5c:	bf00      	nop
 8013b5e:	bf00      	nop
 8013b60:	e7fd      	b.n	8013b5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b62:	f001 fa11 	bl	8014f88 <xTaskGetSchedulerState>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d102      	bne.n	8013b72 <xQueueReceive+0x72>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <xQueueReceive+0x76>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e000      	b.n	8013b78 <xQueueReceive+0x78>
 8013b76:	2300      	movs	r3, #0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10b      	bne.n	8013b94 <xQueueReceive+0x94>
	__asm volatile
 8013b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b80:	f383 8811 	msr	BASEPRI, r3
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	f3bf 8f4f 	dsb	sy
 8013b8c:	61bb      	str	r3, [r7, #24]
}
 8013b8e:	bf00      	nop
 8013b90:	bf00      	nop
 8013b92:	e7fd      	b.n	8013b90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b94:	f002 f868 	bl	8015c68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d01f      	beq.n	8013be4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ba4:	68b9      	ldr	r1, [r7, #8]
 8013ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ba8:	f000 fa1e 	bl	8013fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bae:	1e5a      	subs	r2, r3, #1
 8013bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	691b      	ldr	r3, [r3, #16]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00f      	beq.n	8013bdc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bbe:	3310      	adds	r3, #16
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f001 f81b 	bl	8014bfc <xTaskRemoveFromEventList>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d007      	beq.n	8013bdc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8013cc0 <xQueueReceive+0x1c0>)
 8013bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bd2:	601a      	str	r2, [r3, #0]
 8013bd4:	f3bf 8f4f 	dsb	sy
 8013bd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013bdc:	f002 f876 	bl	8015ccc <vPortExitCritical>
				return pdPASS;
 8013be0:	2301      	movs	r3, #1
 8013be2:	e069      	b.n	8013cb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d103      	bne.n	8013bf2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013bea:	f002 f86f 	bl	8015ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	e062      	b.n	8013cb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d106      	bne.n	8013c06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013bf8:	f107 0310 	add.w	r3, r7, #16
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f001 f861 	bl	8014cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c02:	2301      	movs	r3, #1
 8013c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c06:	f002 f861 	bl	8015ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c0a:	f000 fdc9 	bl	80147a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c0e:	f002 f82b 	bl	8015c68 <vPortEnterCritical>
 8013c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c18:	b25b      	sxtb	r3, r3
 8013c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c1e:	d103      	bne.n	8013c28 <xQueueReceive+0x128>
 8013c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c22:	2200      	movs	r2, #0
 8013c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c2e:	b25b      	sxtb	r3, r3
 8013c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c34:	d103      	bne.n	8013c3e <xQueueReceive+0x13e>
 8013c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013c3e:	f002 f845 	bl	8015ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c42:	1d3a      	adds	r2, r7, #4
 8013c44:	f107 0310 	add.w	r3, r7, #16
 8013c48:	4611      	mov	r1, r2
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f001 f850 	bl	8014cf0 <xTaskCheckForTimeOut>
 8013c50:	4603      	mov	r3, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d123      	bne.n	8013c9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c58:	f000 fa3e 	bl	80140d8 <prvIsQueueEmpty>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d017      	beq.n	8013c92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c64:	3324      	adds	r3, #36	@ 0x24
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	4611      	mov	r1, r2
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 ff74 	bl	8014b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c72:	f000 f9df 	bl	8014034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c76:	f000 fda1 	bl	80147bc <xTaskResumeAll>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d189      	bne.n	8013b94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013c80:	4b0f      	ldr	r3, [pc, #60]	@ (8013cc0 <xQueueReceive+0x1c0>)
 8013c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c86:	601a      	str	r2, [r3, #0]
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	f3bf 8f6f 	isb	sy
 8013c90:	e780      	b.n	8013b94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c94:	f000 f9ce 	bl	8014034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c98:	f000 fd90 	bl	80147bc <xTaskResumeAll>
 8013c9c:	e77a      	b.n	8013b94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ca0:	f000 f9c8 	bl	8014034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ca4:	f000 fd8a 	bl	80147bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013caa:	f000 fa15 	bl	80140d8 <prvIsQueueEmpty>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f43f af6f 	beq.w	8013b94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3730      	adds	r7, #48	@ 0x30
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	e000ed04 	.word	0xe000ed04

08013cc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08e      	sub	sp, #56	@ 0x38
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d10b      	bne.n	8013cf8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ce4:	f383 8811 	msr	BASEPRI, r3
 8013ce8:	f3bf 8f6f 	isb	sy
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	623b      	str	r3, [r7, #32]
}
 8013cf2:	bf00      	nop
 8013cf4:	bf00      	nop
 8013cf6:	e7fd      	b.n	8013cf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00b      	beq.n	8013d18 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d04:	f383 8811 	msr	BASEPRI, r3
 8013d08:	f3bf 8f6f 	isb	sy
 8013d0c:	f3bf 8f4f 	dsb	sy
 8013d10:	61fb      	str	r3, [r7, #28]
}
 8013d12:	bf00      	nop
 8013d14:	bf00      	nop
 8013d16:	e7fd      	b.n	8013d14 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d18:	f001 f936 	bl	8014f88 <xTaskGetSchedulerState>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d102      	bne.n	8013d28 <xQueueSemaphoreTake+0x64>
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <xQueueSemaphoreTake+0x68>
 8013d28:	2301      	movs	r3, #1
 8013d2a:	e000      	b.n	8013d2e <xQueueSemaphoreTake+0x6a>
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d10b      	bne.n	8013d4a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8013d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d36:	f383 8811 	msr	BASEPRI, r3
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	61bb      	str	r3, [r7, #24]
}
 8013d44:	bf00      	nop
 8013d46:	bf00      	nop
 8013d48:	e7fd      	b.n	8013d46 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d4a:	f001 ff8d 	bl	8015c68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d52:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d024      	beq.n	8013da4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d5c:	1e5a      	subs	r2, r3, #1
 8013d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d60:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d104      	bne.n	8013d74 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013d6a:	f001 fa87 	bl	801527c <pvTaskIncrementMutexHeldCount>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d72:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d76:	691b      	ldr	r3, [r3, #16]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d00f      	beq.n	8013d9c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d7e:	3310      	adds	r3, #16
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 ff3b 	bl	8014bfc <xTaskRemoveFromEventList>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d007      	beq.n	8013d9c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013d8c:	4b54      	ldr	r3, [pc, #336]	@ (8013ee0 <xQueueSemaphoreTake+0x21c>)
 8013d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013d9c:	f001 ff96 	bl	8015ccc <vPortExitCritical>
				return pdPASS;
 8013da0:	2301      	movs	r3, #1
 8013da2:	e098      	b.n	8013ed6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d112      	bne.n	8013dd0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d00b      	beq.n	8013dc8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	617b      	str	r3, [r7, #20]
}
 8013dc2:	bf00      	nop
 8013dc4:	bf00      	nop
 8013dc6:	e7fd      	b.n	8013dc4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013dc8:	f001 ff80 	bl	8015ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	e082      	b.n	8013ed6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d106      	bne.n	8013de4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013dd6:	f107 030c 	add.w	r3, r7, #12
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f000 ff72 	bl	8014cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013de0:	2301      	movs	r3, #1
 8013de2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013de4:	f001 ff72 	bl	8015ccc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013de8:	f000 fcda 	bl	80147a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013dec:	f001 ff3c 	bl	8015c68 <vPortEnterCritical>
 8013df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013df2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013df6:	b25b      	sxtb	r3, r3
 8013df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dfc:	d103      	bne.n	8013e06 <xQueueSemaphoreTake+0x142>
 8013dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e00:	2200      	movs	r2, #0
 8013e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e0c:	b25b      	sxtb	r3, r3
 8013e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e12:	d103      	bne.n	8013e1c <xQueueSemaphoreTake+0x158>
 8013e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e16:	2200      	movs	r2, #0
 8013e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013e1c:	f001 ff56 	bl	8015ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e20:	463a      	mov	r2, r7
 8013e22:	f107 030c 	add.w	r3, r7, #12
 8013e26:	4611      	mov	r1, r2
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f000 ff61 	bl	8014cf0 <xTaskCheckForTimeOut>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d132      	bne.n	8013e9a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e36:	f000 f94f 	bl	80140d8 <prvIsQueueEmpty>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d026      	beq.n	8013e8e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d109      	bne.n	8013e5c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013e48:	f001 ff0e 	bl	8015c68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e4e:	689b      	ldr	r3, [r3, #8]
 8013e50:	4618      	mov	r0, r3
 8013e52:	f001 f8b7 	bl	8014fc4 <xTaskPriorityInherit>
 8013e56:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013e58:	f001 ff38 	bl	8015ccc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e5e:	3324      	adds	r3, #36	@ 0x24
 8013e60:	683a      	ldr	r2, [r7, #0]
 8013e62:	4611      	mov	r1, r2
 8013e64:	4618      	mov	r0, r3
 8013e66:	f000 fe77 	bl	8014b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e6c:	f000 f8e2 	bl	8014034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e70:	f000 fca4 	bl	80147bc <xTaskResumeAll>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f47f af67 	bne.w	8013d4a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013e7c:	4b18      	ldr	r3, [pc, #96]	@ (8013ee0 <xQueueSemaphoreTake+0x21c>)
 8013e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e82:	601a      	str	r2, [r3, #0]
 8013e84:	f3bf 8f4f 	dsb	sy
 8013e88:	f3bf 8f6f 	isb	sy
 8013e8c:	e75d      	b.n	8013d4a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013e8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e90:	f000 f8d0 	bl	8014034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013e94:	f000 fc92 	bl	80147bc <xTaskResumeAll>
 8013e98:	e757      	b.n	8013d4a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013e9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013e9c:	f000 f8ca 	bl	8014034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ea0:	f000 fc8c 	bl	80147bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ea4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ea6:	f000 f917 	bl	80140d8 <prvIsQueueEmpty>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f43f af4c 	beq.w	8013d4a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d00d      	beq.n	8013ed4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013eb8:	f001 fed6 	bl	8015c68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013ebc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ebe:	f000 f811 	bl	8013ee4 <prvGetDisinheritPriorityAfterTimeout>
 8013ec2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec6:	689b      	ldr	r3, [r3, #8]
 8013ec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f001 f952 	bl	8015174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013ed0:	f001 fefc 	bl	8015ccc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013ed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3738      	adds	r7, #56	@ 0x38
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	e000ed04 	.word	0xe000ed04

08013ee4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b085      	sub	sp, #20
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d006      	beq.n	8013f02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013efe:	60fb      	str	r3, [r7, #12]
 8013f00:	e001      	b.n	8013f06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013f06:	68fb      	ldr	r3, [r7, #12]
	}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3714      	adds	r7, #20
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b086      	sub	sp, #24
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f20:	2300      	movs	r3, #0
 8013f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10d      	bne.n	8013f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d14d      	bne.n	8013fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	689b      	ldr	r3, [r3, #8]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f001 f8a8 	bl	8015094 <xTaskPriorityDisinherit>
 8013f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	609a      	str	r2, [r3, #8]
 8013f4c:	e043      	b.n	8013fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d119      	bne.n	8013f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	6858      	ldr	r0, [r3, #4]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	68b9      	ldr	r1, [r7, #8]
 8013f60:	f003 ff6d 	bl	8017e3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	685a      	ldr	r2, [r3, #4]
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f6c:	441a      	add	r2, r3
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	685a      	ldr	r2, [r3, #4]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d32b      	bcc.n	8013fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	605a      	str	r2, [r3, #4]
 8013f86:	e026      	b.n	8013fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	68d8      	ldr	r0, [r3, #12]
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f90:	461a      	mov	r2, r3
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	f003 ff53 	bl	8017e3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fa0:	425b      	negs	r3, r3
 8013fa2:	441a      	add	r2, r3
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	68da      	ldr	r2, [r3, #12]
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d207      	bcs.n	8013fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	689a      	ldr	r2, [r3, #8]
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fbc:	425b      	negs	r3, r3
 8013fbe:	441a      	add	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2b02      	cmp	r3, #2
 8013fc8:	d105      	bne.n	8013fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	1c5a      	adds	r2, r3, #1
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013fde:	697b      	ldr	r3, [r7, #20]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3718      	adds	r7, #24
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d018      	beq.n	801402c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68da      	ldr	r2, [r3, #12]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014002:	441a      	add	r2, r3
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	68da      	ldr	r2, [r3, #12]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	689b      	ldr	r3, [r3, #8]
 8014010:	429a      	cmp	r2, r3
 8014012:	d303      	bcc.n	801401c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	68d9      	ldr	r1, [r3, #12]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014024:	461a      	mov	r2, r3
 8014026:	6838      	ldr	r0, [r7, #0]
 8014028:	f003 ff09 	bl	8017e3e <memcpy>
	}
}
 801402c:	bf00      	nop
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801403c:	f001 fe14 	bl	8015c68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014048:	e011      	b.n	801406e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801404e:	2b00      	cmp	r3, #0
 8014050:	d012      	beq.n	8014078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	3324      	adds	r3, #36	@ 0x24
 8014056:	4618      	mov	r0, r3
 8014058:	f000 fdd0 	bl	8014bfc <xTaskRemoveFromEventList>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d001      	beq.n	8014066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014062:	f000 fea9 	bl	8014db8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014066:	7bfb      	ldrb	r3, [r7, #15]
 8014068:	3b01      	subs	r3, #1
 801406a:	b2db      	uxtb	r3, r3
 801406c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014072:	2b00      	cmp	r3, #0
 8014074:	dce9      	bgt.n	801404a <prvUnlockQueue+0x16>
 8014076:	e000      	b.n	801407a <prvUnlockQueue+0x46>
					break;
 8014078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	22ff      	movs	r2, #255	@ 0xff
 801407e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014082:	f001 fe23 	bl	8015ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014086:	f001 fdef 	bl	8015c68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014092:	e011      	b.n	80140b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	691b      	ldr	r3, [r3, #16]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d012      	beq.n	80140c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	3310      	adds	r3, #16
 80140a0:	4618      	mov	r0, r3
 80140a2:	f000 fdab 	bl	8014bfc <xTaskRemoveFromEventList>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d001      	beq.n	80140b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80140ac:	f000 fe84 	bl	8014db8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140b0:	7bbb      	ldrb	r3, [r7, #14]
 80140b2:	3b01      	subs	r3, #1
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	dce9      	bgt.n	8014094 <prvUnlockQueue+0x60>
 80140c0:	e000      	b.n	80140c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	22ff      	movs	r2, #255	@ 0xff
 80140c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80140cc:	f001 fdfe 	bl	8015ccc <vPortExitCritical>
}
 80140d0:	bf00      	nop
 80140d2:	3710      	adds	r7, #16
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140e0:	f001 fdc2 	bl	8015c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d102      	bne.n	80140f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80140ec:	2301      	movs	r3, #1
 80140ee:	60fb      	str	r3, [r7, #12]
 80140f0:	e001      	b.n	80140f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80140f2:	2300      	movs	r3, #0
 80140f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140f6:	f001 fde9 	bl	8015ccc <vPortExitCritical>

	return xReturn;
 80140fa:	68fb      	ldr	r3, [r7, #12]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3710      	adds	r7, #16
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801410c:	f001 fdac 	bl	8015c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014118:	429a      	cmp	r2, r3
 801411a:	d102      	bne.n	8014122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801411c:	2301      	movs	r3, #1
 801411e:	60fb      	str	r3, [r7, #12]
 8014120:	e001      	b.n	8014126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014122:	2300      	movs	r3, #0
 8014124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014126:	f001 fdd1 	bl	8015ccc <vPortExitCritical>

	return xReturn;
 801412a:	68fb      	ldr	r3, [r7, #12]
}
 801412c:	4618      	mov	r0, r3
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014134:	b480      	push	{r7}
 8014136:	b085      	sub	sp, #20
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801413e:	2300      	movs	r3, #0
 8014140:	60fb      	str	r3, [r7, #12]
 8014142:	e014      	b.n	801416e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014144:	4a0f      	ldr	r2, [pc, #60]	@ (8014184 <vQueueAddToRegistry+0x50>)
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10b      	bne.n	8014168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014150:	490c      	ldr	r1, [pc, #48]	@ (8014184 <vQueueAddToRegistry+0x50>)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	683a      	ldr	r2, [r7, #0]
 8014156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801415a:	4a0a      	ldr	r2, [pc, #40]	@ (8014184 <vQueueAddToRegistry+0x50>)
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	00db      	lsls	r3, r3, #3
 8014160:	4413      	add	r3, r2
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014166:	e006      	b.n	8014176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	3301      	adds	r3, #1
 801416c:	60fb      	str	r3, [r7, #12]
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2b07      	cmp	r3, #7
 8014172:	d9e7      	bls.n	8014144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014174:	bf00      	nop
 8014176:	bf00      	nop
 8014178:	3714      	adds	r7, #20
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	20000b50 	.word	0x20000b50

08014188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014188:	b580      	push	{r7, lr}
 801418a:	b086      	sub	sp, #24
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014198:	f001 fd66 	bl	8015c68 <vPortEnterCritical>
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80141a2:	b25b      	sxtb	r3, r3
 80141a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141a8:	d103      	bne.n	80141b2 <vQueueWaitForMessageRestricted+0x2a>
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2200      	movs	r2, #0
 80141ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80141b8:	b25b      	sxtb	r3, r3
 80141ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141be:	d103      	bne.n	80141c8 <vQueueWaitForMessageRestricted+0x40>
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	2200      	movs	r2, #0
 80141c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80141c8:	f001 fd80 	bl	8015ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d106      	bne.n	80141e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	3324      	adds	r3, #36	@ 0x24
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	68b9      	ldr	r1, [r7, #8]
 80141dc:	4618      	mov	r0, r3
 80141de:	f000 fce1 	bl	8014ba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80141e2:	6978      	ldr	r0, [r7, #20]
 80141e4:	f7ff ff26 	bl	8014034 <prvUnlockQueue>
	}
 80141e8:	bf00      	nop
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08e      	sub	sp, #56	@ 0x38
 80141f4:	af04      	add	r7, sp, #16
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80141fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10b      	bne.n	801421c <xTaskCreateStatic+0x2c>
	__asm volatile
 8014204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014208:	f383 8811 	msr	BASEPRI, r3
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f3bf 8f4f 	dsb	sy
 8014214:	623b      	str	r3, [r7, #32]
}
 8014216:	bf00      	nop
 8014218:	bf00      	nop
 801421a:	e7fd      	b.n	8014218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801421e:	2b00      	cmp	r3, #0
 8014220:	d10b      	bne.n	801423a <xTaskCreateStatic+0x4a>
	__asm volatile
 8014222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014226:	f383 8811 	msr	BASEPRI, r3
 801422a:	f3bf 8f6f 	isb	sy
 801422e:	f3bf 8f4f 	dsb	sy
 8014232:	61fb      	str	r3, [r7, #28]
}
 8014234:	bf00      	nop
 8014236:	bf00      	nop
 8014238:	e7fd      	b.n	8014236 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801423a:	23a8      	movs	r3, #168	@ 0xa8
 801423c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	2ba8      	cmp	r3, #168	@ 0xa8
 8014242:	d00b      	beq.n	801425c <xTaskCreateStatic+0x6c>
	__asm volatile
 8014244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014248:	f383 8811 	msr	BASEPRI, r3
 801424c:	f3bf 8f6f 	isb	sy
 8014250:	f3bf 8f4f 	dsb	sy
 8014254:	61bb      	str	r3, [r7, #24]
}
 8014256:	bf00      	nop
 8014258:	bf00      	nop
 801425a:	e7fd      	b.n	8014258 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801425c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014260:	2b00      	cmp	r3, #0
 8014262:	d01e      	beq.n	80142a2 <xTaskCreateStatic+0xb2>
 8014264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014266:	2b00      	cmp	r3, #0
 8014268:	d01b      	beq.n	80142a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801426c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014272:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014276:	2202      	movs	r2, #2
 8014278:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801427c:	2300      	movs	r3, #0
 801427e:	9303      	str	r3, [sp, #12]
 8014280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014282:	9302      	str	r3, [sp, #8]
 8014284:	f107 0314 	add.w	r3, r7, #20
 8014288:	9301      	str	r3, [sp, #4]
 801428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801428c:	9300      	str	r3, [sp, #0]
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 f851 	bl	801433c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801429a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801429c:	f000 f8f6 	bl	801448c <prvAddNewTaskToReadyList>
 80142a0:	e001      	b.n	80142a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80142a2:	2300      	movs	r3, #0
 80142a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80142a6:	697b      	ldr	r3, [r7, #20]
	}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3728      	adds	r7, #40	@ 0x28
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08c      	sub	sp, #48	@ 0x30
 80142b4:	af04      	add	r7, sp, #16
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	603b      	str	r3, [r7, #0]
 80142bc:	4613      	mov	r3, r2
 80142be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80142c0:	88fb      	ldrh	r3, [r7, #6]
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	4618      	mov	r0, r3
 80142c6:	f001 fdf1 	bl	8015eac <pvPortMalloc>
 80142ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00e      	beq.n	80142f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80142d2:	20a8      	movs	r0, #168	@ 0xa8
 80142d4:	f001 fdea 	bl	8015eac <pvPortMalloc>
 80142d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d003      	beq.n	80142e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	697a      	ldr	r2, [r7, #20]
 80142e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80142e6:	e005      	b.n	80142f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80142e8:	6978      	ldr	r0, [r7, #20]
 80142ea:	f001 fead 	bl	8016048 <vPortFree>
 80142ee:	e001      	b.n	80142f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80142f0:	2300      	movs	r3, #0
 80142f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d017      	beq.n	801432a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	2200      	movs	r2, #0
 80142fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014302:	88fa      	ldrh	r2, [r7, #6]
 8014304:	2300      	movs	r3, #0
 8014306:	9303      	str	r3, [sp, #12]
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	9302      	str	r3, [sp, #8]
 801430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f000 f80f 	bl	801433c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801431e:	69f8      	ldr	r0, [r7, #28]
 8014320:	f000 f8b4 	bl	801448c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014324:	2301      	movs	r3, #1
 8014326:	61bb      	str	r3, [r7, #24]
 8014328:	e002      	b.n	8014330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801432a:	f04f 33ff 	mov.w	r3, #4294967295
 801432e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014330:	69bb      	ldr	r3, [r7, #24]
	}
 8014332:	4618      	mov	r0, r3
 8014334:	3720      	adds	r7, #32
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
	...

0801433c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b088      	sub	sp, #32
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	607a      	str	r2, [r7, #4]
 8014348:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801434c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	461a      	mov	r2, r3
 8014354:	21a5      	movs	r1, #165	@ 0xa5
 8014356:	f003 fc48 	bl	8017bea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801435c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014364:	3b01      	subs	r3, #1
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4413      	add	r3, r2
 801436a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	f023 0307 	bic.w	r3, r3, #7
 8014372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	f003 0307 	and.w	r3, r3, #7
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00b      	beq.n	8014396 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014382:	f383 8811 	msr	BASEPRI, r3
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	617b      	str	r3, [r7, #20]
}
 8014390:	bf00      	nop
 8014392:	bf00      	nop
 8014394:	e7fd      	b.n	8014392 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d01f      	beq.n	80143dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801439c:	2300      	movs	r3, #0
 801439e:	61fb      	str	r3, [r7, #28]
 80143a0:	e012      	b.n	80143c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80143a2:	68ba      	ldr	r2, [r7, #8]
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	4413      	add	r3, r2
 80143a8:	7819      	ldrb	r1, [r3, #0]
 80143aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	4413      	add	r3, r2
 80143b0:	3334      	adds	r3, #52	@ 0x34
 80143b2:	460a      	mov	r2, r1
 80143b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	4413      	add	r3, r2
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d006      	beq.n	80143d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	3301      	adds	r3, #1
 80143c6:	61fb      	str	r3, [r7, #28]
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	2b0f      	cmp	r3, #15
 80143cc:	d9e9      	bls.n	80143a2 <prvInitialiseNewTask+0x66>
 80143ce:	e000      	b.n	80143d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80143d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80143d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143d4:	2200      	movs	r2, #0
 80143d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80143da:	e003      	b.n	80143e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80143dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143de:	2200      	movs	r2, #0
 80143e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80143e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e6:	2b37      	cmp	r3, #55	@ 0x37
 80143e8:	d901      	bls.n	80143ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80143ea:	2337      	movs	r3, #55	@ 0x37
 80143ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80143ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80143f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80143fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143fc:	2200      	movs	r2, #0
 80143fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014402:	3304      	adds	r3, #4
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe ff3f 	bl	8013288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801440c:	3318      	adds	r3, #24
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe ff3a 	bl	8013288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014418:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014422:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014428:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801442c:	2200      	movs	r2, #0
 801442e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014434:	2200      	movs	r2, #0
 8014436:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801443c:	3354      	adds	r3, #84	@ 0x54
 801443e:	224c      	movs	r2, #76	@ 0x4c
 8014440:	2100      	movs	r1, #0
 8014442:	4618      	mov	r0, r3
 8014444:	f003 fbd1 	bl	8017bea <memset>
 8014448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801444a:	4a0d      	ldr	r2, [pc, #52]	@ (8014480 <prvInitialiseNewTask+0x144>)
 801444c:	659a      	str	r2, [r3, #88]	@ 0x58
 801444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014450:	4a0c      	ldr	r2, [pc, #48]	@ (8014484 <prvInitialiseNewTask+0x148>)
 8014452:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014456:	4a0c      	ldr	r2, [pc, #48]	@ (8014488 <prvInitialiseNewTask+0x14c>)
 8014458:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801445a:	683a      	ldr	r2, [r7, #0]
 801445c:	68f9      	ldr	r1, [r7, #12]
 801445e:	69b8      	ldr	r0, [r7, #24]
 8014460:	f001 face 	bl	8015a00 <pxPortInitialiseStack>
 8014464:	4602      	mov	r2, r0
 8014466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014468:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446c:	2b00      	cmp	r3, #0
 801446e:	d002      	beq.n	8014476 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014476:	bf00      	nop
 8014478:	3720      	adds	r7, #32
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	200061d0 	.word	0x200061d0
 8014484:	20006238 	.word	0x20006238
 8014488:	200062a0 	.word	0x200062a0

0801448c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014494:	f001 fbe8 	bl	8015c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014498:	4b2d      	ldr	r3, [pc, #180]	@ (8014550 <prvAddNewTaskToReadyList+0xc4>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	3301      	adds	r3, #1
 801449e:	4a2c      	ldr	r2, [pc, #176]	@ (8014550 <prvAddNewTaskToReadyList+0xc4>)
 80144a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80144a2:	4b2c      	ldr	r3, [pc, #176]	@ (8014554 <prvAddNewTaskToReadyList+0xc8>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d109      	bne.n	80144be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80144aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014554 <prvAddNewTaskToReadyList+0xc8>)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80144b0:	4b27      	ldr	r3, [pc, #156]	@ (8014550 <prvAddNewTaskToReadyList+0xc4>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d110      	bne.n	80144da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80144b8:	f000 fca2 	bl	8014e00 <prvInitialiseTaskLists>
 80144bc:	e00d      	b.n	80144da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80144be:	4b26      	ldr	r3, [pc, #152]	@ (8014558 <prvAddNewTaskToReadyList+0xcc>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d109      	bne.n	80144da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80144c6:	4b23      	ldr	r3, [pc, #140]	@ (8014554 <prvAddNewTaskToReadyList+0xc8>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d802      	bhi.n	80144da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80144d4:	4a1f      	ldr	r2, [pc, #124]	@ (8014554 <prvAddNewTaskToReadyList+0xc8>)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80144da:	4b20      	ldr	r3, [pc, #128]	@ (801455c <prvAddNewTaskToReadyList+0xd0>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	3301      	adds	r3, #1
 80144e0:	4a1e      	ldr	r2, [pc, #120]	@ (801455c <prvAddNewTaskToReadyList+0xd0>)
 80144e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80144e4:	4b1d      	ldr	r3, [pc, #116]	@ (801455c <prvAddNewTaskToReadyList+0xd0>)
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144f0:	4b1b      	ldr	r3, [pc, #108]	@ (8014560 <prvAddNewTaskToReadyList+0xd4>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d903      	bls.n	8014500 <prvAddNewTaskToReadyList+0x74>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144fc:	4a18      	ldr	r2, [pc, #96]	@ (8014560 <prvAddNewTaskToReadyList+0xd4>)
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014504:	4613      	mov	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	4413      	add	r3, r2
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	4a15      	ldr	r2, [pc, #84]	@ (8014564 <prvAddNewTaskToReadyList+0xd8>)
 801450e:	441a      	add	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3304      	adds	r3, #4
 8014514:	4619      	mov	r1, r3
 8014516:	4610      	mov	r0, r2
 8014518:	f7fe fec3 	bl	80132a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801451c:	f001 fbd6 	bl	8015ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014520:	4b0d      	ldr	r3, [pc, #52]	@ (8014558 <prvAddNewTaskToReadyList+0xcc>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d00e      	beq.n	8014546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014528:	4b0a      	ldr	r3, [pc, #40]	@ (8014554 <prvAddNewTaskToReadyList+0xc8>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014532:	429a      	cmp	r2, r3
 8014534:	d207      	bcs.n	8014546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014536:	4b0c      	ldr	r3, [pc, #48]	@ (8014568 <prvAddNewTaskToReadyList+0xdc>)
 8014538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	f3bf 8f4f 	dsb	sy
 8014542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014546:	bf00      	nop
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20001064 	.word	0x20001064
 8014554:	20000b90 	.word	0x20000b90
 8014558:	20001070 	.word	0x20001070
 801455c:	20001080 	.word	0x20001080
 8014560:	2000106c 	.word	0x2000106c
 8014564:	20000b94 	.word	0x20000b94
 8014568:	e000ed04 	.word	0xe000ed04

0801456c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014574:	f001 fb78 	bl	8015c68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d102      	bne.n	8014584 <vTaskDelete+0x18>
 801457e:	4b2d      	ldr	r3, [pc, #180]	@ (8014634 <vTaskDelete+0xc8>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	e000      	b.n	8014586 <vTaskDelete+0x1a>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	3304      	adds	r3, #4
 801458c:	4618      	mov	r0, r3
 801458e:	f7fe fee5 	bl	801335c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014596:	2b00      	cmp	r3, #0
 8014598:	d004      	beq.n	80145a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	3318      	adds	r3, #24
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fe fedc 	bl	801335c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80145a4:	4b24      	ldr	r3, [pc, #144]	@ (8014638 <vTaskDelete+0xcc>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	3301      	adds	r3, #1
 80145aa:	4a23      	ldr	r2, [pc, #140]	@ (8014638 <vTaskDelete+0xcc>)
 80145ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80145ae:	4b21      	ldr	r3, [pc, #132]	@ (8014634 <vTaskDelete+0xc8>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d10b      	bne.n	80145d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3304      	adds	r3, #4
 80145bc:	4619      	mov	r1, r3
 80145be:	481f      	ldr	r0, [pc, #124]	@ (801463c <vTaskDelete+0xd0>)
 80145c0:	f7fe fe6f 	bl	80132a2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80145c4:	4b1e      	ldr	r3, [pc, #120]	@ (8014640 <vTaskDelete+0xd4>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	3301      	adds	r3, #1
 80145ca:	4a1d      	ldr	r2, [pc, #116]	@ (8014640 <vTaskDelete+0xd4>)
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	e009      	b.n	80145e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80145d0:	4b1c      	ldr	r3, [pc, #112]	@ (8014644 <vTaskDelete+0xd8>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	3b01      	subs	r3, #1
 80145d6:	4a1b      	ldr	r2, [pc, #108]	@ (8014644 <vTaskDelete+0xd8>)
 80145d8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f000 fc7e 	bl	8014edc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80145e0:	f000 fcb2 	bl	8014f48 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80145e4:	f001 fb72 	bl	8015ccc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80145e8:	4b17      	ldr	r3, [pc, #92]	@ (8014648 <vTaskDelete+0xdc>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d01c      	beq.n	801462a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80145f0:	4b10      	ldr	r3, [pc, #64]	@ (8014634 <vTaskDelete+0xc8>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d117      	bne.n	801462a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80145fa:	4b14      	ldr	r3, [pc, #80]	@ (801464c <vTaskDelete+0xe0>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d00b      	beq.n	801461a <vTaskDelete+0xae>
	__asm volatile
 8014602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014606:	f383 8811 	msr	BASEPRI, r3
 801460a:	f3bf 8f6f 	isb	sy
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	60bb      	str	r3, [r7, #8]
}
 8014614:	bf00      	nop
 8014616:	bf00      	nop
 8014618:	e7fd      	b.n	8014616 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801461a:	4b0d      	ldr	r3, [pc, #52]	@ (8014650 <vTaskDelete+0xe4>)
 801461c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014620:	601a      	str	r2, [r3, #0]
 8014622:	f3bf 8f4f 	dsb	sy
 8014626:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801462a:	bf00      	nop
 801462c:	3710      	adds	r7, #16
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	20000b90 	.word	0x20000b90
 8014638:	20001080 	.word	0x20001080
 801463c:	20001038 	.word	0x20001038
 8014640:	2000104c 	.word	0x2000104c
 8014644:	20001064 	.word	0x20001064
 8014648:	20001070 	.word	0x20001070
 801464c:	2000108c 	.word	0x2000108c
 8014650:	e000ed04 	.word	0xe000ed04

08014654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801465c:	2300      	movs	r3, #0
 801465e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d018      	beq.n	8014698 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014666:	4b14      	ldr	r3, [pc, #80]	@ (80146b8 <vTaskDelay+0x64>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00b      	beq.n	8014686 <vTaskDelay+0x32>
	__asm volatile
 801466e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	f3bf 8f6f 	isb	sy
 801467a:	f3bf 8f4f 	dsb	sy
 801467e:	60bb      	str	r3, [r7, #8]
}
 8014680:	bf00      	nop
 8014682:	bf00      	nop
 8014684:	e7fd      	b.n	8014682 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014686:	f000 f88b 	bl	80147a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801468a:	2100      	movs	r1, #0
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f000 fe09 	bl	80152a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014692:	f000 f893 	bl	80147bc <xTaskResumeAll>
 8014696:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d107      	bne.n	80146ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801469e:	4b07      	ldr	r3, [pc, #28]	@ (80146bc <vTaskDelay+0x68>)
 80146a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	f3bf 8f4f 	dsb	sy
 80146aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146ae:	bf00      	nop
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	2000108c 	.word	0x2000108c
 80146bc:	e000ed04 	.word	0xe000ed04

080146c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b08a      	sub	sp, #40	@ 0x28
 80146c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146c6:	2300      	movs	r3, #0
 80146c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146ca:	2300      	movs	r3, #0
 80146cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146ce:	463a      	mov	r2, r7
 80146d0:	1d39      	adds	r1, r7, #4
 80146d2:	f107 0308 	add.w	r3, r7, #8
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fe fd82 	bl	80131e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	68ba      	ldr	r2, [r7, #8]
 80146e2:	9202      	str	r2, [sp, #8]
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	2300      	movs	r3, #0
 80146e8:	9300      	str	r3, [sp, #0]
 80146ea:	2300      	movs	r3, #0
 80146ec:	460a      	mov	r2, r1
 80146ee:	4924      	ldr	r1, [pc, #144]	@ (8014780 <vTaskStartScheduler+0xc0>)
 80146f0:	4824      	ldr	r0, [pc, #144]	@ (8014784 <vTaskStartScheduler+0xc4>)
 80146f2:	f7ff fd7d 	bl	80141f0 <xTaskCreateStatic>
 80146f6:	4603      	mov	r3, r0
 80146f8:	4a23      	ldr	r2, [pc, #140]	@ (8014788 <vTaskStartScheduler+0xc8>)
 80146fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146fc:	4b22      	ldr	r3, [pc, #136]	@ (8014788 <vTaskStartScheduler+0xc8>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d002      	beq.n	801470a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014704:	2301      	movs	r3, #1
 8014706:	617b      	str	r3, [r7, #20]
 8014708:	e001      	b.n	801470e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801470a:	2300      	movs	r3, #0
 801470c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d102      	bne.n	801471a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014714:	f000 fe1a 	bl	801534c <xTimerCreateTimerTask>
 8014718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d11b      	bne.n	8014758 <vTaskStartScheduler+0x98>
	__asm volatile
 8014720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014724:	f383 8811 	msr	BASEPRI, r3
 8014728:	f3bf 8f6f 	isb	sy
 801472c:	f3bf 8f4f 	dsb	sy
 8014730:	613b      	str	r3, [r7, #16]
}
 8014732:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014734:	4b15      	ldr	r3, [pc, #84]	@ (801478c <vTaskStartScheduler+0xcc>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	3354      	adds	r3, #84	@ 0x54
 801473a:	4a15      	ldr	r2, [pc, #84]	@ (8014790 <vTaskStartScheduler+0xd0>)
 801473c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801473e:	4b15      	ldr	r3, [pc, #84]	@ (8014794 <vTaskStartScheduler+0xd4>)
 8014740:	f04f 32ff 	mov.w	r2, #4294967295
 8014744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014746:	4b14      	ldr	r3, [pc, #80]	@ (8014798 <vTaskStartScheduler+0xd8>)
 8014748:	2201      	movs	r2, #1
 801474a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801474c:	4b13      	ldr	r3, [pc, #76]	@ (801479c <vTaskStartScheduler+0xdc>)
 801474e:	2200      	movs	r2, #0
 8014750:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014752:	f001 f9e5 	bl	8015b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014756:	e00f      	b.n	8014778 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801475e:	d10b      	bne.n	8014778 <vTaskStartScheduler+0xb8>
	__asm volatile
 8014760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014764:	f383 8811 	msr	BASEPRI, r3
 8014768:	f3bf 8f6f 	isb	sy
 801476c:	f3bf 8f4f 	dsb	sy
 8014770:	60fb      	str	r3, [r7, #12]
}
 8014772:	bf00      	nop
 8014774:	bf00      	nop
 8014776:	e7fd      	b.n	8014774 <vTaskStartScheduler+0xb4>
}
 8014778:	bf00      	nop
 801477a:	3718      	adds	r7, #24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	08019dd4 	.word	0x08019dd4
 8014784:	08014dd1 	.word	0x08014dd1
 8014788:	20001088 	.word	0x20001088
 801478c:	20000b90 	.word	0x20000b90
 8014790:	20000110 	.word	0x20000110
 8014794:	20001084 	.word	0x20001084
 8014798:	20001070 	.word	0x20001070
 801479c:	20001068 	.word	0x20001068

080147a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147a0:	b480      	push	{r7}
 80147a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80147a4:	4b04      	ldr	r3, [pc, #16]	@ (80147b8 <vTaskSuspendAll+0x18>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	3301      	adds	r3, #1
 80147aa:	4a03      	ldr	r2, [pc, #12]	@ (80147b8 <vTaskSuspendAll+0x18>)
 80147ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80147ae:	bf00      	nop
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr
 80147b8:	2000108c 	.word	0x2000108c

080147bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147c2:	2300      	movs	r3, #0
 80147c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147c6:	2300      	movs	r3, #0
 80147c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147ca:	4b42      	ldr	r3, [pc, #264]	@ (80148d4 <xTaskResumeAll+0x118>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10b      	bne.n	80147ea <xTaskResumeAll+0x2e>
	__asm volatile
 80147d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	603b      	str	r3, [r7, #0]
}
 80147e4:	bf00      	nop
 80147e6:	bf00      	nop
 80147e8:	e7fd      	b.n	80147e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147ea:	f001 fa3d 	bl	8015c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147ee:	4b39      	ldr	r3, [pc, #228]	@ (80148d4 <xTaskResumeAll+0x118>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	3b01      	subs	r3, #1
 80147f4:	4a37      	ldr	r2, [pc, #220]	@ (80148d4 <xTaskResumeAll+0x118>)
 80147f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147f8:	4b36      	ldr	r3, [pc, #216]	@ (80148d4 <xTaskResumeAll+0x118>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d162      	bne.n	80148c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014800:	4b35      	ldr	r3, [pc, #212]	@ (80148d8 <xTaskResumeAll+0x11c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d05e      	beq.n	80148c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014808:	e02f      	b.n	801486a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801480a:	4b34      	ldr	r3, [pc, #208]	@ (80148dc <xTaskResumeAll+0x120>)
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	3318      	adds	r3, #24
 8014816:	4618      	mov	r0, r3
 8014818:	f7fe fda0 	bl	801335c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	3304      	adds	r3, #4
 8014820:	4618      	mov	r0, r3
 8014822:	f7fe fd9b 	bl	801335c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801482a:	4b2d      	ldr	r3, [pc, #180]	@ (80148e0 <xTaskResumeAll+0x124>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	429a      	cmp	r2, r3
 8014830:	d903      	bls.n	801483a <xTaskResumeAll+0x7e>
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014836:	4a2a      	ldr	r2, [pc, #168]	@ (80148e0 <xTaskResumeAll+0x124>)
 8014838:	6013      	str	r3, [r2, #0]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801483e:	4613      	mov	r3, r2
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	4413      	add	r3, r2
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	4a27      	ldr	r2, [pc, #156]	@ (80148e4 <xTaskResumeAll+0x128>)
 8014848:	441a      	add	r2, r3
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	3304      	adds	r3, #4
 801484e:	4619      	mov	r1, r3
 8014850:	4610      	mov	r0, r2
 8014852:	f7fe fd26 	bl	80132a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801485a:	4b23      	ldr	r3, [pc, #140]	@ (80148e8 <xTaskResumeAll+0x12c>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014860:	429a      	cmp	r2, r3
 8014862:	d302      	bcc.n	801486a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014864:	4b21      	ldr	r3, [pc, #132]	@ (80148ec <xTaskResumeAll+0x130>)
 8014866:	2201      	movs	r2, #1
 8014868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801486a:	4b1c      	ldr	r3, [pc, #112]	@ (80148dc <xTaskResumeAll+0x120>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d1cb      	bne.n	801480a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d001      	beq.n	801487c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014878:	f000 fb66 	bl	8014f48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801487c:	4b1c      	ldr	r3, [pc, #112]	@ (80148f0 <xTaskResumeAll+0x134>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d010      	beq.n	80148aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014888:	f000 f846 	bl	8014918 <xTaskIncrementTick>
 801488c:	4603      	mov	r3, r0
 801488e:	2b00      	cmp	r3, #0
 8014890:	d002      	beq.n	8014898 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8014892:	4b16      	ldr	r3, [pc, #88]	@ (80148ec <xTaskResumeAll+0x130>)
 8014894:	2201      	movs	r2, #1
 8014896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	3b01      	subs	r3, #1
 801489c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d1f1      	bne.n	8014888 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80148a4:	4b12      	ldr	r3, [pc, #72]	@ (80148f0 <xTaskResumeAll+0x134>)
 80148a6:	2200      	movs	r2, #0
 80148a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148aa:	4b10      	ldr	r3, [pc, #64]	@ (80148ec <xTaskResumeAll+0x130>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d009      	beq.n	80148c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148b2:	2301      	movs	r3, #1
 80148b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148b6:	4b0f      	ldr	r3, [pc, #60]	@ (80148f4 <xTaskResumeAll+0x138>)
 80148b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148bc:	601a      	str	r2, [r3, #0]
 80148be:	f3bf 8f4f 	dsb	sy
 80148c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148c6:	f001 fa01 	bl	8015ccc <vPortExitCritical>

	return xAlreadyYielded;
 80148ca:	68bb      	ldr	r3, [r7, #8]
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	2000108c 	.word	0x2000108c
 80148d8:	20001064 	.word	0x20001064
 80148dc:	20001024 	.word	0x20001024
 80148e0:	2000106c 	.word	0x2000106c
 80148e4:	20000b94 	.word	0x20000b94
 80148e8:	20000b90 	.word	0x20000b90
 80148ec:	20001078 	.word	0x20001078
 80148f0:	20001074 	.word	0x20001074
 80148f4:	e000ed04 	.word	0xe000ed04

080148f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148fe:	4b05      	ldr	r3, [pc, #20]	@ (8014914 <xTaskGetTickCount+0x1c>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014904:	687b      	ldr	r3, [r7, #4]
}
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	20001068 	.word	0x20001068

08014918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801491e:	2300      	movs	r3, #0
 8014920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014922:	4b4f      	ldr	r3, [pc, #316]	@ (8014a60 <xTaskIncrementTick+0x148>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	2b00      	cmp	r3, #0
 8014928:	f040 8090 	bne.w	8014a4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801492c:	4b4d      	ldr	r3, [pc, #308]	@ (8014a64 <xTaskIncrementTick+0x14c>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	3301      	adds	r3, #1
 8014932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014934:	4a4b      	ldr	r2, [pc, #300]	@ (8014a64 <xTaskIncrementTick+0x14c>)
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d121      	bne.n	8014984 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014940:	4b49      	ldr	r3, [pc, #292]	@ (8014a68 <xTaskIncrementTick+0x150>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00b      	beq.n	8014962 <xTaskIncrementTick+0x4a>
	__asm volatile
 801494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801494e:	f383 8811 	msr	BASEPRI, r3
 8014952:	f3bf 8f6f 	isb	sy
 8014956:	f3bf 8f4f 	dsb	sy
 801495a:	603b      	str	r3, [r7, #0]
}
 801495c:	bf00      	nop
 801495e:	bf00      	nop
 8014960:	e7fd      	b.n	801495e <xTaskIncrementTick+0x46>
 8014962:	4b41      	ldr	r3, [pc, #260]	@ (8014a68 <xTaskIncrementTick+0x150>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	60fb      	str	r3, [r7, #12]
 8014968:	4b40      	ldr	r3, [pc, #256]	@ (8014a6c <xTaskIncrementTick+0x154>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4a3e      	ldr	r2, [pc, #248]	@ (8014a68 <xTaskIncrementTick+0x150>)
 801496e:	6013      	str	r3, [r2, #0]
 8014970:	4a3e      	ldr	r2, [pc, #248]	@ (8014a6c <xTaskIncrementTick+0x154>)
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	6013      	str	r3, [r2, #0]
 8014976:	4b3e      	ldr	r3, [pc, #248]	@ (8014a70 <xTaskIncrementTick+0x158>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	3301      	adds	r3, #1
 801497c:	4a3c      	ldr	r2, [pc, #240]	@ (8014a70 <xTaskIncrementTick+0x158>)
 801497e:	6013      	str	r3, [r2, #0]
 8014980:	f000 fae2 	bl	8014f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014984:	4b3b      	ldr	r3, [pc, #236]	@ (8014a74 <xTaskIncrementTick+0x15c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	693a      	ldr	r2, [r7, #16]
 801498a:	429a      	cmp	r2, r3
 801498c:	d349      	bcc.n	8014a22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801498e:	4b36      	ldr	r3, [pc, #216]	@ (8014a68 <xTaskIncrementTick+0x150>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d104      	bne.n	80149a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014998:	4b36      	ldr	r3, [pc, #216]	@ (8014a74 <xTaskIncrementTick+0x15c>)
 801499a:	f04f 32ff 	mov.w	r2, #4294967295
 801499e:	601a      	str	r2, [r3, #0]
					break;
 80149a0:	e03f      	b.n	8014a22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149a2:	4b31      	ldr	r3, [pc, #196]	@ (8014a68 <xTaskIncrementTick+0x150>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149b2:	693a      	ldr	r2, [r7, #16]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d203      	bcs.n	80149c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149ba:	4a2e      	ldr	r2, [pc, #184]	@ (8014a74 <xTaskIncrementTick+0x15c>)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149c0:	e02f      	b.n	8014a22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	3304      	adds	r3, #4
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fe fcc8 	bl	801335c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d004      	beq.n	80149de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	3318      	adds	r3, #24
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fe fcbf 	bl	801335c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149e2:	4b25      	ldr	r3, [pc, #148]	@ (8014a78 <xTaskIncrementTick+0x160>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d903      	bls.n	80149f2 <xTaskIncrementTick+0xda>
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ee:	4a22      	ldr	r2, [pc, #136]	@ (8014a78 <xTaskIncrementTick+0x160>)
 80149f0:	6013      	str	r3, [r2, #0]
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149f6:	4613      	mov	r3, r2
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	4413      	add	r3, r2
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	4a1f      	ldr	r2, [pc, #124]	@ (8014a7c <xTaskIncrementTick+0x164>)
 8014a00:	441a      	add	r2, r3
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	3304      	adds	r3, #4
 8014a06:	4619      	mov	r1, r3
 8014a08:	4610      	mov	r0, r2
 8014a0a:	f7fe fc4a 	bl	80132a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a12:	4b1b      	ldr	r3, [pc, #108]	@ (8014a80 <xTaskIncrementTick+0x168>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d3b8      	bcc.n	801498e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a20:	e7b5      	b.n	801498e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a22:	4b17      	ldr	r3, [pc, #92]	@ (8014a80 <xTaskIncrementTick+0x168>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a28:	4914      	ldr	r1, [pc, #80]	@ (8014a7c <xTaskIncrementTick+0x164>)
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	4413      	add	r3, r2
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	440b      	add	r3, r1
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b01      	cmp	r3, #1
 8014a38:	d901      	bls.n	8014a3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a3e:	4b11      	ldr	r3, [pc, #68]	@ (8014a84 <xTaskIncrementTick+0x16c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d007      	beq.n	8014a56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8014a46:	2301      	movs	r3, #1
 8014a48:	617b      	str	r3, [r7, #20]
 8014a4a:	e004      	b.n	8014a56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8014a88 <xTaskIncrementTick+0x170>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3301      	adds	r3, #1
 8014a52:	4a0d      	ldr	r2, [pc, #52]	@ (8014a88 <xTaskIncrementTick+0x170>)
 8014a54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014a56:	697b      	ldr	r3, [r7, #20]
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3718      	adds	r7, #24
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	2000108c 	.word	0x2000108c
 8014a64:	20001068 	.word	0x20001068
 8014a68:	2000101c 	.word	0x2000101c
 8014a6c:	20001020 	.word	0x20001020
 8014a70:	2000107c 	.word	0x2000107c
 8014a74:	20001084 	.word	0x20001084
 8014a78:	2000106c 	.word	0x2000106c
 8014a7c:	20000b94 	.word	0x20000b94
 8014a80:	20000b90 	.word	0x20000b90
 8014a84:	20001078 	.word	0x20001078
 8014a88:	20001074 	.word	0x20001074

08014a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b085      	sub	sp, #20
 8014a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a92:	4b2b      	ldr	r3, [pc, #172]	@ (8014b40 <vTaskSwitchContext+0xb4>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d003      	beq.n	8014aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8014b44 <vTaskSwitchContext+0xb8>)
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014aa0:	e047      	b.n	8014b32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8014aa2:	4b28      	ldr	r3, [pc, #160]	@ (8014b44 <vTaskSwitchContext+0xb8>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014aa8:	4b27      	ldr	r3, [pc, #156]	@ (8014b48 <vTaskSwitchContext+0xbc>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	60fb      	str	r3, [r7, #12]
 8014aae:	e011      	b.n	8014ad4 <vTaskSwitchContext+0x48>
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d10b      	bne.n	8014ace <vTaskSwitchContext+0x42>
	__asm volatile
 8014ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aba:	f383 8811 	msr	BASEPRI, r3
 8014abe:	f3bf 8f6f 	isb	sy
 8014ac2:	f3bf 8f4f 	dsb	sy
 8014ac6:	607b      	str	r3, [r7, #4]
}
 8014ac8:	bf00      	nop
 8014aca:	bf00      	nop
 8014acc:	e7fd      	b.n	8014aca <vTaskSwitchContext+0x3e>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3b01      	subs	r3, #1
 8014ad2:	60fb      	str	r3, [r7, #12]
 8014ad4:	491d      	ldr	r1, [pc, #116]	@ (8014b4c <vTaskSwitchContext+0xc0>)
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	4613      	mov	r3, r2
 8014ada:	009b      	lsls	r3, r3, #2
 8014adc:	4413      	add	r3, r2
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	440b      	add	r3, r1
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d0e3      	beq.n	8014ab0 <vTaskSwitchContext+0x24>
 8014ae8:	68fa      	ldr	r2, [r7, #12]
 8014aea:	4613      	mov	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4a16      	ldr	r2, [pc, #88]	@ (8014b4c <vTaskSwitchContext+0xc0>)
 8014af4:	4413      	add	r3, r2
 8014af6:	60bb      	str	r3, [r7, #8]
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	685a      	ldr	r2, [r3, #4]
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	605a      	str	r2, [r3, #4]
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	685a      	ldr	r2, [r3, #4]
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	3308      	adds	r3, #8
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d104      	bne.n	8014b18 <vTaskSwitchContext+0x8c>
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	685a      	ldr	r2, [r3, #4]
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	605a      	str	r2, [r3, #4]
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8014b50 <vTaskSwitchContext+0xc4>)
 8014b20:	6013      	str	r3, [r2, #0]
 8014b22:	4a09      	ldr	r2, [pc, #36]	@ (8014b48 <vTaskSwitchContext+0xbc>)
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014b28:	4b09      	ldr	r3, [pc, #36]	@ (8014b50 <vTaskSwitchContext+0xc4>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	3354      	adds	r3, #84	@ 0x54
 8014b2e:	4a09      	ldr	r2, [pc, #36]	@ (8014b54 <vTaskSwitchContext+0xc8>)
 8014b30:	6013      	str	r3, [r2, #0]
}
 8014b32:	bf00      	nop
 8014b34:	3714      	adds	r7, #20
 8014b36:	46bd      	mov	sp, r7
 8014b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop
 8014b40:	2000108c 	.word	0x2000108c
 8014b44:	20001078 	.word	0x20001078
 8014b48:	2000106c 	.word	0x2000106c
 8014b4c:	20000b94 	.word	0x20000b94
 8014b50:	20000b90 	.word	0x20000b90
 8014b54:	20000110 	.word	0x20000110

08014b58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10b      	bne.n	8014b80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b6c:	f383 8811 	msr	BASEPRI, r3
 8014b70:	f3bf 8f6f 	isb	sy
 8014b74:	f3bf 8f4f 	dsb	sy
 8014b78:	60fb      	str	r3, [r7, #12]
}
 8014b7a:	bf00      	nop
 8014b7c:	bf00      	nop
 8014b7e:	e7fd      	b.n	8014b7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b80:	4b07      	ldr	r3, [pc, #28]	@ (8014ba0 <vTaskPlaceOnEventList+0x48>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3318      	adds	r3, #24
 8014b86:	4619      	mov	r1, r3
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7fe fbae 	bl	80132ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b8e:	2101      	movs	r1, #1
 8014b90:	6838      	ldr	r0, [r7, #0]
 8014b92:	f000 fb87 	bl	80152a4 <prvAddCurrentTaskToDelayedList>
}
 8014b96:	bf00      	nop
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	20000b90 	.word	0x20000b90

08014ba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10b      	bne.n	8014bce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8014bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bba:	f383 8811 	msr	BASEPRI, r3
 8014bbe:	f3bf 8f6f 	isb	sy
 8014bc2:	f3bf 8f4f 	dsb	sy
 8014bc6:	617b      	str	r3, [r7, #20]
}
 8014bc8:	bf00      	nop
 8014bca:	bf00      	nop
 8014bcc:	e7fd      	b.n	8014bca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bce:	4b0a      	ldr	r3, [pc, #40]	@ (8014bf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	3318      	adds	r3, #24
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7fe fb63 	bl	80132a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d002      	beq.n	8014be8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295
 8014be6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014be8:	6879      	ldr	r1, [r7, #4]
 8014bea:	68b8      	ldr	r0, [r7, #8]
 8014bec:	f000 fb5a 	bl	80152a4 <prvAddCurrentTaskToDelayedList>
	}
 8014bf0:	bf00      	nop
 8014bf2:	3718      	adds	r7, #24
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	20000b90 	.word	0x20000b90

08014bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b086      	sub	sp, #24
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	68db      	ldr	r3, [r3, #12]
 8014c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d10b      	bne.n	8014c2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8014c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	60fb      	str	r3, [r7, #12]
}
 8014c24:	bf00      	nop
 8014c26:	bf00      	nop
 8014c28:	e7fd      	b.n	8014c26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	3318      	adds	r3, #24
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7fe fb94 	bl	801335c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c34:	4b1d      	ldr	r3, [pc, #116]	@ (8014cac <xTaskRemoveFromEventList+0xb0>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d11d      	bne.n	8014c78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	3304      	adds	r3, #4
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7fe fb8b 	bl	801335c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c4a:	4b19      	ldr	r3, [pc, #100]	@ (8014cb0 <xTaskRemoveFromEventList+0xb4>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d903      	bls.n	8014c5a <xTaskRemoveFromEventList+0x5e>
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c56:	4a16      	ldr	r2, [pc, #88]	@ (8014cb0 <xTaskRemoveFromEventList+0xb4>)
 8014c58:	6013      	str	r3, [r2, #0]
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c5e:	4613      	mov	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	4a13      	ldr	r2, [pc, #76]	@ (8014cb4 <xTaskRemoveFromEventList+0xb8>)
 8014c68:	441a      	add	r2, r3
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	4619      	mov	r1, r3
 8014c70:	4610      	mov	r0, r2
 8014c72:	f7fe fb16 	bl	80132a2 <vListInsertEnd>
 8014c76:	e005      	b.n	8014c84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	3318      	adds	r3, #24
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	480e      	ldr	r0, [pc, #56]	@ (8014cb8 <xTaskRemoveFromEventList+0xbc>)
 8014c80:	f7fe fb0f 	bl	80132a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c88:	4b0c      	ldr	r3, [pc, #48]	@ (8014cbc <xTaskRemoveFromEventList+0xc0>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d905      	bls.n	8014c9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014c92:	2301      	movs	r3, #1
 8014c94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014c96:	4b0a      	ldr	r3, [pc, #40]	@ (8014cc0 <xTaskRemoveFromEventList+0xc4>)
 8014c98:	2201      	movs	r2, #1
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	e001      	b.n	8014ca2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014ca2:	697b      	ldr	r3, [r7, #20]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	2000108c 	.word	0x2000108c
 8014cb0:	2000106c 	.word	0x2000106c
 8014cb4:	20000b94 	.word	0x20000b94
 8014cb8:	20001024 	.word	0x20001024
 8014cbc:	20000b90 	.word	0x20000b90
 8014cc0:	20001078 	.word	0x20001078

08014cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ccc:	4b06      	ldr	r3, [pc, #24]	@ (8014ce8 <vTaskInternalSetTimeOutState+0x24>)
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014cd4:	4b05      	ldr	r3, [pc, #20]	@ (8014cec <vTaskInternalSetTimeOutState+0x28>)
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	605a      	str	r2, [r3, #4]
}
 8014cdc:	bf00      	nop
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr
 8014ce8:	2000107c 	.word	0x2000107c
 8014cec:	20001068 	.word	0x20001068

08014cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b088      	sub	sp, #32
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d10b      	bne.n	8014d18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	613b      	str	r3, [r7, #16]
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	e7fd      	b.n	8014d14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d10b      	bne.n	8014d36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d22:	f383 8811 	msr	BASEPRI, r3
 8014d26:	f3bf 8f6f 	isb	sy
 8014d2a:	f3bf 8f4f 	dsb	sy
 8014d2e:	60fb      	str	r3, [r7, #12]
}
 8014d30:	bf00      	nop
 8014d32:	bf00      	nop
 8014d34:	e7fd      	b.n	8014d32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014d36:	f000 ff97 	bl	8015c68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8014db0 <xTaskCheckForTimeOut+0xc0>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	69ba      	ldr	r2, [r7, #24]
 8014d46:	1ad3      	subs	r3, r2, r3
 8014d48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d52:	d102      	bne.n	8014d5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014d54:	2300      	movs	r3, #0
 8014d56:	61fb      	str	r3, [r7, #28]
 8014d58:	e023      	b.n	8014da2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	4b15      	ldr	r3, [pc, #84]	@ (8014db4 <xTaskCheckForTimeOut+0xc4>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d007      	beq.n	8014d76 <xTaskCheckForTimeOut+0x86>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	69ba      	ldr	r2, [r7, #24]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d302      	bcc.n	8014d76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014d70:	2301      	movs	r3, #1
 8014d72:	61fb      	str	r3, [r7, #28]
 8014d74:	e015      	b.n	8014da2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	697a      	ldr	r2, [r7, #20]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d20b      	bcs.n	8014d98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	1ad2      	subs	r2, r2, r3
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f7ff ff99 	bl	8014cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014d92:	2300      	movs	r3, #0
 8014d94:	61fb      	str	r3, [r7, #28]
 8014d96:	e004      	b.n	8014da2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014da2:	f000 ff93 	bl	8015ccc <vPortExitCritical>

	return xReturn;
 8014da6:	69fb      	ldr	r3, [r7, #28]
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3720      	adds	r7, #32
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	20001068 	.word	0x20001068
 8014db4:	2000107c 	.word	0x2000107c

08014db8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014db8:	b480      	push	{r7}
 8014dba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014dbc:	4b03      	ldr	r3, [pc, #12]	@ (8014dcc <vTaskMissedYield+0x14>)
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	601a      	str	r2, [r3, #0]
}
 8014dc2:	bf00      	nop
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr
 8014dcc:	20001078 	.word	0x20001078

08014dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014dd8:	f000 f852 	bl	8014e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ddc:	4b06      	ldr	r3, [pc, #24]	@ (8014df8 <prvIdleTask+0x28>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	d9f9      	bls.n	8014dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014de4:	4b05      	ldr	r3, [pc, #20]	@ (8014dfc <prvIdleTask+0x2c>)
 8014de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dea:	601a      	str	r2, [r3, #0]
 8014dec:	f3bf 8f4f 	dsb	sy
 8014df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014df4:	e7f0      	b.n	8014dd8 <prvIdleTask+0x8>
 8014df6:	bf00      	nop
 8014df8:	20000b94 	.word	0x20000b94
 8014dfc:	e000ed04 	.word	0xe000ed04

08014e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e06:	2300      	movs	r3, #0
 8014e08:	607b      	str	r3, [r7, #4]
 8014e0a:	e00c      	b.n	8014e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	4613      	mov	r3, r2
 8014e10:	009b      	lsls	r3, r3, #2
 8014e12:	4413      	add	r3, r2
 8014e14:	009b      	lsls	r3, r3, #2
 8014e16:	4a12      	ldr	r2, [pc, #72]	@ (8014e60 <prvInitialiseTaskLists+0x60>)
 8014e18:	4413      	add	r3, r2
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7fe fa14 	bl	8013248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	3301      	adds	r3, #1
 8014e24:	607b      	str	r3, [r7, #4]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2b37      	cmp	r3, #55	@ 0x37
 8014e2a:	d9ef      	bls.n	8014e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e2c:	480d      	ldr	r0, [pc, #52]	@ (8014e64 <prvInitialiseTaskLists+0x64>)
 8014e2e:	f7fe fa0b 	bl	8013248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e32:	480d      	ldr	r0, [pc, #52]	@ (8014e68 <prvInitialiseTaskLists+0x68>)
 8014e34:	f7fe fa08 	bl	8013248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014e38:	480c      	ldr	r0, [pc, #48]	@ (8014e6c <prvInitialiseTaskLists+0x6c>)
 8014e3a:	f7fe fa05 	bl	8013248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014e3e:	480c      	ldr	r0, [pc, #48]	@ (8014e70 <prvInitialiseTaskLists+0x70>)
 8014e40:	f7fe fa02 	bl	8013248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014e44:	480b      	ldr	r0, [pc, #44]	@ (8014e74 <prvInitialiseTaskLists+0x74>)
 8014e46:	f7fe f9ff 	bl	8013248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e78 <prvInitialiseTaskLists+0x78>)
 8014e4c:	4a05      	ldr	r2, [pc, #20]	@ (8014e64 <prvInitialiseTaskLists+0x64>)
 8014e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014e50:	4b0a      	ldr	r3, [pc, #40]	@ (8014e7c <prvInitialiseTaskLists+0x7c>)
 8014e52:	4a05      	ldr	r2, [pc, #20]	@ (8014e68 <prvInitialiseTaskLists+0x68>)
 8014e54:	601a      	str	r2, [r3, #0]
}
 8014e56:	bf00      	nop
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	20000b94 	.word	0x20000b94
 8014e64:	20000ff4 	.word	0x20000ff4
 8014e68:	20001008 	.word	0x20001008
 8014e6c:	20001024 	.word	0x20001024
 8014e70:	20001038 	.word	0x20001038
 8014e74:	20001050 	.word	0x20001050
 8014e78:	2000101c 	.word	0x2000101c
 8014e7c:	20001020 	.word	0x20001020

08014e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e86:	e019      	b.n	8014ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014e88:	f000 feee 	bl	8015c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e8c:	4b10      	ldr	r3, [pc, #64]	@ (8014ed0 <prvCheckTasksWaitingTermination+0x50>)
 8014e8e:	68db      	ldr	r3, [r3, #12]
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3304      	adds	r3, #4
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7fe fa5f 	bl	801335c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed4 <prvCheckTasksWaitingTermination+0x54>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8014ed4 <prvCheckTasksWaitingTermination+0x54>)
 8014ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8014ed8 <prvCheckTasksWaitingTermination+0x58>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	3b01      	subs	r3, #1
 8014eae:	4a0a      	ldr	r2, [pc, #40]	@ (8014ed8 <prvCheckTasksWaitingTermination+0x58>)
 8014eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014eb2:	f000 ff0b 	bl	8015ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 f810 	bl	8014edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ebc:	4b06      	ldr	r3, [pc, #24]	@ (8014ed8 <prvCheckTasksWaitingTermination+0x58>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d1e1      	bne.n	8014e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ec4:	bf00      	nop
 8014ec6:	bf00      	nop
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	20001038 	.word	0x20001038
 8014ed4:	20001064 	.word	0x20001064
 8014ed8:	2000104c 	.word	0x2000104c

08014edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	3354      	adds	r3, #84	@ 0x54
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f002 fecb 	bl	8017c84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d108      	bne.n	8014f0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014efc:	4618      	mov	r0, r3
 8014efe:	f001 f8a3 	bl	8016048 <vPortFree>
				vPortFree( pxTCB );
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f001 f8a0 	bl	8016048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f08:	e019      	b.n	8014f3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d103      	bne.n	8014f1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f001 f897 	bl	8016048 <vPortFree>
	}
 8014f1a:	e010      	b.n	8014f3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d00b      	beq.n	8014f3e <prvDeleteTCB+0x62>
	__asm volatile
 8014f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f2a:	f383 8811 	msr	BASEPRI, r3
 8014f2e:	f3bf 8f6f 	isb	sy
 8014f32:	f3bf 8f4f 	dsb	sy
 8014f36:	60fb      	str	r3, [r7, #12]
}
 8014f38:	bf00      	nop
 8014f3a:	bf00      	nop
 8014f3c:	e7fd      	b.n	8014f3a <prvDeleteTCB+0x5e>
	}
 8014f3e:	bf00      	nop
 8014f40:	3710      	adds	r7, #16
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
	...

08014f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8014f80 <prvResetNextTaskUnblockTime+0x38>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d104      	bne.n	8014f62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014f58:	4b0a      	ldr	r3, [pc, #40]	@ (8014f84 <prvResetNextTaskUnblockTime+0x3c>)
 8014f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014f60:	e008      	b.n	8014f74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f62:	4b07      	ldr	r3, [pc, #28]	@ (8014f80 <prvResetNextTaskUnblockTime+0x38>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	4a04      	ldr	r2, [pc, #16]	@ (8014f84 <prvResetNextTaskUnblockTime+0x3c>)
 8014f72:	6013      	str	r3, [r2, #0]
}
 8014f74:	bf00      	nop
 8014f76:	370c      	adds	r7, #12
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr
 8014f80:	2000101c 	.word	0x2000101c
 8014f84:	20001084 	.word	0x20001084

08014f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014f88:	b480      	push	{r7}
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8014fbc <xTaskGetSchedulerState+0x34>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d102      	bne.n	8014f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014f96:	2301      	movs	r3, #1
 8014f98:	607b      	str	r3, [r7, #4]
 8014f9a:	e008      	b.n	8014fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f9c:	4b08      	ldr	r3, [pc, #32]	@ (8014fc0 <xTaskGetSchedulerState+0x38>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d102      	bne.n	8014faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	607b      	str	r3, [r7, #4]
 8014fa8:	e001      	b.n	8014fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014faa:	2300      	movs	r3, #0
 8014fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014fae:	687b      	ldr	r3, [r7, #4]
	}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	20001070 	.word	0x20001070
 8014fc0:	2000108c 	.word	0x2000108c

08014fc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d051      	beq.n	801507e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fde:	4b2a      	ldr	r3, [pc, #168]	@ (8015088 <xTaskPriorityInherit+0xc4>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d241      	bcs.n	801506c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	699b      	ldr	r3, [r3, #24]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	db06      	blt.n	8014ffe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ff0:	4b25      	ldr	r3, [pc, #148]	@ (8015088 <xTaskPriorityInherit+0xc4>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ff6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	6959      	ldr	r1, [r3, #20]
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015006:	4613      	mov	r3, r2
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	4413      	add	r3, r2
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	4a1f      	ldr	r2, [pc, #124]	@ (801508c <xTaskPriorityInherit+0xc8>)
 8015010:	4413      	add	r3, r2
 8015012:	4299      	cmp	r1, r3
 8015014:	d122      	bne.n	801505c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	3304      	adds	r3, #4
 801501a:	4618      	mov	r0, r3
 801501c:	f7fe f99e 	bl	801335c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015020:	4b19      	ldr	r3, [pc, #100]	@ (8015088 <xTaskPriorityInherit+0xc4>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801502e:	4b18      	ldr	r3, [pc, #96]	@ (8015090 <xTaskPriorityInherit+0xcc>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	429a      	cmp	r2, r3
 8015034:	d903      	bls.n	801503e <xTaskPriorityInherit+0x7a>
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801503a:	4a15      	ldr	r2, [pc, #84]	@ (8015090 <xTaskPriorityInherit+0xcc>)
 801503c:	6013      	str	r3, [r2, #0]
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015042:	4613      	mov	r3, r2
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	4413      	add	r3, r2
 8015048:	009b      	lsls	r3, r3, #2
 801504a:	4a10      	ldr	r2, [pc, #64]	@ (801508c <xTaskPriorityInherit+0xc8>)
 801504c:	441a      	add	r2, r3
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	3304      	adds	r3, #4
 8015052:	4619      	mov	r1, r3
 8015054:	4610      	mov	r0, r2
 8015056:	f7fe f924 	bl	80132a2 <vListInsertEnd>
 801505a:	e004      	b.n	8015066 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801505c:	4b0a      	ldr	r3, [pc, #40]	@ (8015088 <xTaskPriorityInherit+0xc4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015066:	2301      	movs	r3, #1
 8015068:	60fb      	str	r3, [r7, #12]
 801506a:	e008      	b.n	801507e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015070:	4b05      	ldr	r3, [pc, #20]	@ (8015088 <xTaskPriorityInherit+0xc4>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015076:	429a      	cmp	r2, r3
 8015078:	d201      	bcs.n	801507e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801507a:	2301      	movs	r3, #1
 801507c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801507e:	68fb      	ldr	r3, [r7, #12]
	}
 8015080:	4618      	mov	r0, r3
 8015082:	3710      	adds	r7, #16
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	20000b90 	.word	0x20000b90
 801508c:	20000b94 	.word	0x20000b94
 8015090:	2000106c 	.word	0x2000106c

08015094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80150a0:	2300      	movs	r3, #0
 80150a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d058      	beq.n	801515c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80150aa:	4b2f      	ldr	r3, [pc, #188]	@ (8015168 <xTaskPriorityDisinherit+0xd4>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	693a      	ldr	r2, [r7, #16]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d00b      	beq.n	80150cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80150b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150b8:	f383 8811 	msr	BASEPRI, r3
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f3bf 8f4f 	dsb	sy
 80150c4:	60fb      	str	r3, [r7, #12]
}
 80150c6:	bf00      	nop
 80150c8:	bf00      	nop
 80150ca:	e7fd      	b.n	80150c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d10b      	bne.n	80150ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80150d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d8:	f383 8811 	msr	BASEPRI, r3
 80150dc:	f3bf 8f6f 	isb	sy
 80150e0:	f3bf 8f4f 	dsb	sy
 80150e4:	60bb      	str	r3, [r7, #8]
}
 80150e6:	bf00      	nop
 80150e8:	bf00      	nop
 80150ea:	e7fd      	b.n	80150e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150f0:	1e5a      	subs	r2, r3, #1
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150fe:	429a      	cmp	r2, r3
 8015100:	d02c      	beq.n	801515c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015106:	2b00      	cmp	r3, #0
 8015108:	d128      	bne.n	801515c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	3304      	adds	r3, #4
 801510e:	4618      	mov	r0, r3
 8015110:	f7fe f924 	bl	801335c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015120:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801512c:	4b0f      	ldr	r3, [pc, #60]	@ (801516c <xTaskPriorityDisinherit+0xd8>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	429a      	cmp	r2, r3
 8015132:	d903      	bls.n	801513c <xTaskPriorityDisinherit+0xa8>
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015138:	4a0c      	ldr	r2, [pc, #48]	@ (801516c <xTaskPriorityDisinherit+0xd8>)
 801513a:	6013      	str	r3, [r2, #0]
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015140:	4613      	mov	r3, r2
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	4a09      	ldr	r2, [pc, #36]	@ (8015170 <xTaskPriorityDisinherit+0xdc>)
 801514a:	441a      	add	r2, r3
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	3304      	adds	r3, #4
 8015150:	4619      	mov	r1, r3
 8015152:	4610      	mov	r0, r2
 8015154:	f7fe f8a5 	bl	80132a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015158:	2301      	movs	r3, #1
 801515a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801515c:	697b      	ldr	r3, [r7, #20]
	}
 801515e:	4618      	mov	r0, r3
 8015160:	3718      	adds	r7, #24
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	20000b90 	.word	0x20000b90
 801516c:	2000106c 	.word	0x2000106c
 8015170:	20000b94 	.word	0x20000b94

08015174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015174:	b580      	push	{r7, lr}
 8015176:	b088      	sub	sp, #32
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015182:	2301      	movs	r3, #1
 8015184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d06c      	beq.n	8015266 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10b      	bne.n	80151ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	60fb      	str	r3, [r7, #12]
}
 80151a6:	bf00      	nop
 80151a8:	bf00      	nop
 80151aa:	e7fd      	b.n	80151a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d902      	bls.n	80151bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	61fb      	str	r3, [r7, #28]
 80151ba:	e002      	b.n	80151c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c6:	69fa      	ldr	r2, [r7, #28]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d04c      	beq.n	8015266 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151d0:	697a      	ldr	r2, [r7, #20]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d147      	bne.n	8015266 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80151d6:	4b26      	ldr	r3, [pc, #152]	@ (8015270 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	69ba      	ldr	r2, [r7, #24]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d10b      	bne.n	80151f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80151e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151e4:	f383 8811 	msr	BASEPRI, r3
 80151e8:	f3bf 8f6f 	isb	sy
 80151ec:	f3bf 8f4f 	dsb	sy
 80151f0:	60bb      	str	r3, [r7, #8]
}
 80151f2:	bf00      	nop
 80151f4:	bf00      	nop
 80151f6:	e7fd      	b.n	80151f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	69fa      	ldr	r2, [r7, #28]
 8015202:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015204:	69bb      	ldr	r3, [r7, #24]
 8015206:	699b      	ldr	r3, [r3, #24]
 8015208:	2b00      	cmp	r3, #0
 801520a:	db04      	blt.n	8015216 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015212:	69bb      	ldr	r3, [r7, #24]
 8015214:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	6959      	ldr	r1, [r3, #20]
 801521a:	693a      	ldr	r2, [r7, #16]
 801521c:	4613      	mov	r3, r2
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	4413      	add	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4a13      	ldr	r2, [pc, #76]	@ (8015274 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015226:	4413      	add	r3, r2
 8015228:	4299      	cmp	r1, r3
 801522a:	d11c      	bne.n	8015266 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	3304      	adds	r3, #4
 8015230:	4618      	mov	r0, r3
 8015232:	f7fe f893 	bl	801335c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801523a:	4b0f      	ldr	r3, [pc, #60]	@ (8015278 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	429a      	cmp	r2, r3
 8015240:	d903      	bls.n	801524a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015246:	4a0c      	ldr	r2, [pc, #48]	@ (8015278 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801524e:	4613      	mov	r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4413      	add	r3, r2
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	4a07      	ldr	r2, [pc, #28]	@ (8015274 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015258:	441a      	add	r2, r3
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	3304      	adds	r3, #4
 801525e:	4619      	mov	r1, r3
 8015260:	4610      	mov	r0, r2
 8015262:	f7fe f81e 	bl	80132a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015266:	bf00      	nop
 8015268:	3720      	adds	r7, #32
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	20000b90 	.word	0x20000b90
 8015274:	20000b94 	.word	0x20000b94
 8015278:	2000106c 	.word	0x2000106c

0801527c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801527c:	b480      	push	{r7}
 801527e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015280:	4b07      	ldr	r3, [pc, #28]	@ (80152a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d004      	beq.n	8015292 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015288:	4b05      	ldr	r3, [pc, #20]	@ (80152a0 <pvTaskIncrementMutexHeldCount+0x24>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801528e:	3201      	adds	r2, #1
 8015290:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015292:	4b03      	ldr	r3, [pc, #12]	@ (80152a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015294:	681b      	ldr	r3, [r3, #0]
	}
 8015296:	4618      	mov	r0, r3
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	20000b90 	.word	0x20000b90

080152a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80152ae:	4b21      	ldr	r3, [pc, #132]	@ (8015334 <prvAddCurrentTaskToDelayedList+0x90>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152b4:	4b20      	ldr	r3, [pc, #128]	@ (8015338 <prvAddCurrentTaskToDelayedList+0x94>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	3304      	adds	r3, #4
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7fe f84e 	bl	801335c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152c6:	d10a      	bne.n	80152de <prvAddCurrentTaskToDelayedList+0x3a>
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d007      	beq.n	80152de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152ce:	4b1a      	ldr	r3, [pc, #104]	@ (8015338 <prvAddCurrentTaskToDelayedList+0x94>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	3304      	adds	r3, #4
 80152d4:	4619      	mov	r1, r3
 80152d6:	4819      	ldr	r0, [pc, #100]	@ (801533c <prvAddCurrentTaskToDelayedList+0x98>)
 80152d8:	f7fd ffe3 	bl	80132a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80152dc:	e026      	b.n	801532c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80152de:	68fa      	ldr	r2, [r7, #12]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	4413      	add	r3, r2
 80152e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80152e6:	4b14      	ldr	r3, [pc, #80]	@ (8015338 <prvAddCurrentTaskToDelayedList+0x94>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	68ba      	ldr	r2, [r7, #8]
 80152ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d209      	bcs.n	801530a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152f6:	4b12      	ldr	r3, [pc, #72]	@ (8015340 <prvAddCurrentTaskToDelayedList+0x9c>)
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	4b0f      	ldr	r3, [pc, #60]	@ (8015338 <prvAddCurrentTaskToDelayedList+0x94>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	3304      	adds	r3, #4
 8015300:	4619      	mov	r1, r3
 8015302:	4610      	mov	r0, r2
 8015304:	f7fd fff1 	bl	80132ea <vListInsert>
}
 8015308:	e010      	b.n	801532c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801530a:	4b0e      	ldr	r3, [pc, #56]	@ (8015344 <prvAddCurrentTaskToDelayedList+0xa0>)
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	4b0a      	ldr	r3, [pc, #40]	@ (8015338 <prvAddCurrentTaskToDelayedList+0x94>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	3304      	adds	r3, #4
 8015314:	4619      	mov	r1, r3
 8015316:	4610      	mov	r0, r2
 8015318:	f7fd ffe7 	bl	80132ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801531c:	4b0a      	ldr	r3, [pc, #40]	@ (8015348 <prvAddCurrentTaskToDelayedList+0xa4>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	429a      	cmp	r2, r3
 8015324:	d202      	bcs.n	801532c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015326:	4a08      	ldr	r2, [pc, #32]	@ (8015348 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	6013      	str	r3, [r2, #0]
}
 801532c:	bf00      	nop
 801532e:	3710      	adds	r7, #16
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	20001068 	.word	0x20001068
 8015338:	20000b90 	.word	0x20000b90
 801533c:	20001050 	.word	0x20001050
 8015340:	20001020 	.word	0x20001020
 8015344:	2000101c 	.word	0x2000101c
 8015348:	20001084 	.word	0x20001084

0801534c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b08a      	sub	sp, #40	@ 0x28
 8015350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015352:	2300      	movs	r3, #0
 8015354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015356:	f000 fb13 	bl	8015980 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801535a:	4b1d      	ldr	r3, [pc, #116]	@ (80153d0 <xTimerCreateTimerTask+0x84>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d021      	beq.n	80153a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015362:	2300      	movs	r3, #0
 8015364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015366:	2300      	movs	r3, #0
 8015368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801536a:	1d3a      	adds	r2, r7, #4
 801536c:	f107 0108 	add.w	r1, r7, #8
 8015370:	f107 030c 	add.w	r3, r7, #12
 8015374:	4618      	mov	r0, r3
 8015376:	f7fd ff4d 	bl	8013214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	9202      	str	r2, [sp, #8]
 8015382:	9301      	str	r3, [sp, #4]
 8015384:	2302      	movs	r3, #2
 8015386:	9300      	str	r3, [sp, #0]
 8015388:	2300      	movs	r3, #0
 801538a:	460a      	mov	r2, r1
 801538c:	4911      	ldr	r1, [pc, #68]	@ (80153d4 <xTimerCreateTimerTask+0x88>)
 801538e:	4812      	ldr	r0, [pc, #72]	@ (80153d8 <xTimerCreateTimerTask+0x8c>)
 8015390:	f7fe ff2e 	bl	80141f0 <xTaskCreateStatic>
 8015394:	4603      	mov	r3, r0
 8015396:	4a11      	ldr	r2, [pc, #68]	@ (80153dc <xTimerCreateTimerTask+0x90>)
 8015398:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801539a:	4b10      	ldr	r3, [pc, #64]	@ (80153dc <xTimerCreateTimerTask+0x90>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d001      	beq.n	80153a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80153a2:	2301      	movs	r3, #1
 80153a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d10b      	bne.n	80153c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80153ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153b0:	f383 8811 	msr	BASEPRI, r3
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	613b      	str	r3, [r7, #16]
}
 80153be:	bf00      	nop
 80153c0:	bf00      	nop
 80153c2:	e7fd      	b.n	80153c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80153c4:	697b      	ldr	r3, [r7, #20]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3718      	adds	r7, #24
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	200010c0 	.word	0x200010c0
 80153d4:	08019ddc 	.word	0x08019ddc
 80153d8:	08015519 	.word	0x08015519
 80153dc:	200010c4 	.word	0x200010c4

080153e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b08a      	sub	sp, #40	@ 0x28
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80153ee:	2300      	movs	r3, #0
 80153f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d10b      	bne.n	8015410 <xTimerGenericCommand+0x30>
	__asm volatile
 80153f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fc:	f383 8811 	msr	BASEPRI, r3
 8015400:	f3bf 8f6f 	isb	sy
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	623b      	str	r3, [r7, #32]
}
 801540a:	bf00      	nop
 801540c:	bf00      	nop
 801540e:	e7fd      	b.n	801540c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015410:	4b19      	ldr	r3, [pc, #100]	@ (8015478 <xTimerGenericCommand+0x98>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d02a      	beq.n	801546e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	2b05      	cmp	r3, #5
 8015428:	dc18      	bgt.n	801545c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801542a:	f7ff fdad 	bl	8014f88 <xTaskGetSchedulerState>
 801542e:	4603      	mov	r3, r0
 8015430:	2b02      	cmp	r3, #2
 8015432:	d109      	bne.n	8015448 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015434:	4b10      	ldr	r3, [pc, #64]	@ (8015478 <xTimerGenericCommand+0x98>)
 8015436:	6818      	ldr	r0, [r3, #0]
 8015438:	f107 0110 	add.w	r1, r7, #16
 801543c:	2300      	movs	r3, #0
 801543e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015440:	f7fe f92e 	bl	80136a0 <xQueueGenericSend>
 8015444:	6278      	str	r0, [r7, #36]	@ 0x24
 8015446:	e012      	b.n	801546e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015448:	4b0b      	ldr	r3, [pc, #44]	@ (8015478 <xTimerGenericCommand+0x98>)
 801544a:	6818      	ldr	r0, [r3, #0]
 801544c:	f107 0110 	add.w	r1, r7, #16
 8015450:	2300      	movs	r3, #0
 8015452:	2200      	movs	r2, #0
 8015454:	f7fe f924 	bl	80136a0 <xQueueGenericSend>
 8015458:	6278      	str	r0, [r7, #36]	@ 0x24
 801545a:	e008      	b.n	801546e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801545c:	4b06      	ldr	r3, [pc, #24]	@ (8015478 <xTimerGenericCommand+0x98>)
 801545e:	6818      	ldr	r0, [r3, #0]
 8015460:	f107 0110 	add.w	r1, r7, #16
 8015464:	2300      	movs	r3, #0
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	f7fe fa1c 	bl	80138a4 <xQueueGenericSendFromISR>
 801546c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015470:	4618      	mov	r0, r3
 8015472:	3728      	adds	r7, #40	@ 0x28
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	200010c0 	.word	0x200010c0

0801547c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b088      	sub	sp, #32
 8015480:	af02      	add	r7, sp, #8
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015486:	4b23      	ldr	r3, [pc, #140]	@ (8015514 <prvProcessExpiredTimer+0x98>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	3304      	adds	r3, #4
 8015494:	4618      	mov	r0, r3
 8015496:	f7fd ff61 	bl	801335c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80154a0:	f003 0304 	and.w	r3, r3, #4
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d023      	beq.n	80154f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	699a      	ldr	r2, [r3, #24]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	18d1      	adds	r1, r2, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	6978      	ldr	r0, [r7, #20]
 80154b6:	f000 f8d5 	bl	8015664 <prvInsertTimerInActiveList>
 80154ba:	4603      	mov	r3, r0
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d020      	beq.n	8015502 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154c0:	2300      	movs	r3, #0
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	2300      	movs	r3, #0
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	2100      	movs	r1, #0
 80154ca:	6978      	ldr	r0, [r7, #20]
 80154cc:	f7ff ff88 	bl	80153e0 <xTimerGenericCommand>
 80154d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d114      	bne.n	8015502 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80154d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154dc:	f383 8811 	msr	BASEPRI, r3
 80154e0:	f3bf 8f6f 	isb	sy
 80154e4:	f3bf 8f4f 	dsb	sy
 80154e8:	60fb      	str	r3, [r7, #12]
}
 80154ea:	bf00      	nop
 80154ec:	bf00      	nop
 80154ee:	e7fd      	b.n	80154ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80154f6:	f023 0301 	bic.w	r3, r3, #1
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	6a1b      	ldr	r3, [r3, #32]
 8015506:	6978      	ldr	r0, [r7, #20]
 8015508:	4798      	blx	r3
}
 801550a:	bf00      	nop
 801550c:	3718      	adds	r7, #24
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	200010b8 	.word	0x200010b8

08015518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015520:	f107 0308 	add.w	r3, r7, #8
 8015524:	4618      	mov	r0, r3
 8015526:	f000 f859 	bl	80155dc <prvGetNextExpireTime>
 801552a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	4619      	mov	r1, r3
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f000 f805 	bl	8015540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015536:	f000 f8d7 	bl	80156e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801553a:	bf00      	nop
 801553c:	e7f0      	b.n	8015520 <prvTimerTask+0x8>
	...

08015540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801554a:	f7ff f929 	bl	80147a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801554e:	f107 0308 	add.w	r3, r7, #8
 8015552:	4618      	mov	r0, r3
 8015554:	f000 f866 	bl	8015624 <prvSampleTimeNow>
 8015558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d130      	bne.n	80155c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d10a      	bne.n	801557c <prvProcessTimerOrBlockTask+0x3c>
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	429a      	cmp	r2, r3
 801556c:	d806      	bhi.n	801557c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801556e:	f7ff f925 	bl	80147bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015572:	68f9      	ldr	r1, [r7, #12]
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7ff ff81 	bl	801547c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801557a:	e024      	b.n	80155c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d008      	beq.n	8015594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015582:	4b13      	ldr	r3, [pc, #76]	@ (80155d0 <prvProcessTimerOrBlockTask+0x90>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d101      	bne.n	8015590 <prvProcessTimerOrBlockTask+0x50>
 801558c:	2301      	movs	r3, #1
 801558e:	e000      	b.n	8015592 <prvProcessTimerOrBlockTask+0x52>
 8015590:	2300      	movs	r3, #0
 8015592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015594:	4b0f      	ldr	r3, [pc, #60]	@ (80155d4 <prvProcessTimerOrBlockTask+0x94>)
 8015596:	6818      	ldr	r0, [r3, #0]
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	1ad3      	subs	r3, r2, r3
 801559e:	683a      	ldr	r2, [r7, #0]
 80155a0:	4619      	mov	r1, r3
 80155a2:	f7fe fdf1 	bl	8014188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80155a6:	f7ff f909 	bl	80147bc <xTaskResumeAll>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d10a      	bne.n	80155c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80155b0:	4b09      	ldr	r3, [pc, #36]	@ (80155d8 <prvProcessTimerOrBlockTask+0x98>)
 80155b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	f3bf 8f6f 	isb	sy
}
 80155c0:	e001      	b.n	80155c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80155c2:	f7ff f8fb 	bl	80147bc <xTaskResumeAll>
}
 80155c6:	bf00      	nop
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	200010bc 	.word	0x200010bc
 80155d4:	200010c0 	.word	0x200010c0
 80155d8:	e000ed04 	.word	0xe000ed04

080155dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80155dc:	b480      	push	{r7}
 80155de:	b085      	sub	sp, #20
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80155e4:	4b0e      	ldr	r3, [pc, #56]	@ (8015620 <prvGetNextExpireTime+0x44>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d101      	bne.n	80155f2 <prvGetNextExpireTime+0x16>
 80155ee:	2201      	movs	r2, #1
 80155f0:	e000      	b.n	80155f4 <prvGetNextExpireTime+0x18>
 80155f2:	2200      	movs	r2, #0
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d105      	bne.n	801560c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015600:	4b07      	ldr	r3, [pc, #28]	@ (8015620 <prvGetNextExpireTime+0x44>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	60fb      	str	r3, [r7, #12]
 801560a:	e001      	b.n	8015610 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801560c:	2300      	movs	r3, #0
 801560e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015610:	68fb      	ldr	r3, [r7, #12]
}
 8015612:	4618      	mov	r0, r3
 8015614:	3714      	adds	r7, #20
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop
 8015620:	200010b8 	.word	0x200010b8

08015624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b084      	sub	sp, #16
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801562c:	f7ff f964 	bl	80148f8 <xTaskGetTickCount>
 8015630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015632:	4b0b      	ldr	r3, [pc, #44]	@ (8015660 <prvSampleTimeNow+0x3c>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	68fa      	ldr	r2, [r7, #12]
 8015638:	429a      	cmp	r2, r3
 801563a:	d205      	bcs.n	8015648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801563c:	f000 f93a 	bl	80158b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2201      	movs	r2, #1
 8015644:	601a      	str	r2, [r3, #0]
 8015646:	e002      	b.n	801564e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2200      	movs	r2, #0
 801564c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801564e:	4a04      	ldr	r2, [pc, #16]	@ (8015660 <prvSampleTimeNow+0x3c>)
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015654:	68fb      	ldr	r3, [r7, #12]
}
 8015656:	4618      	mov	r0, r3
 8015658:	3710      	adds	r7, #16
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	200010c8 	.word	0x200010c8

08015664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b086      	sub	sp, #24
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
 8015670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015672:	2300      	movs	r3, #0
 8015674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	68ba      	ldr	r2, [r7, #8]
 801567a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	68fa      	ldr	r2, [r7, #12]
 8015680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015682:	68ba      	ldr	r2, [r7, #8]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	429a      	cmp	r2, r3
 8015688:	d812      	bhi.n	80156b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	1ad2      	subs	r2, r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	699b      	ldr	r3, [r3, #24]
 8015694:	429a      	cmp	r2, r3
 8015696:	d302      	bcc.n	801569e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015698:	2301      	movs	r3, #1
 801569a:	617b      	str	r3, [r7, #20]
 801569c:	e01b      	b.n	80156d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801569e:	4b10      	ldr	r3, [pc, #64]	@ (80156e0 <prvInsertTimerInActiveList+0x7c>)
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	3304      	adds	r3, #4
 80156a6:	4619      	mov	r1, r3
 80156a8:	4610      	mov	r0, r2
 80156aa:	f7fd fe1e 	bl	80132ea <vListInsert>
 80156ae:	e012      	b.n	80156d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d206      	bcs.n	80156c6 <prvInsertTimerInActiveList+0x62>
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d302      	bcc.n	80156c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80156c0:	2301      	movs	r3, #1
 80156c2:	617b      	str	r3, [r7, #20]
 80156c4:	e007      	b.n	80156d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80156c6:	4b07      	ldr	r3, [pc, #28]	@ (80156e4 <prvInsertTimerInActiveList+0x80>)
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	3304      	adds	r3, #4
 80156ce:	4619      	mov	r1, r3
 80156d0:	4610      	mov	r0, r2
 80156d2:	f7fd fe0a 	bl	80132ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156d6:	697b      	ldr	r3, [r7, #20]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3718      	adds	r7, #24
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	200010bc 	.word	0x200010bc
 80156e4:	200010b8 	.word	0x200010b8

080156e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b08e      	sub	sp, #56	@ 0x38
 80156ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156ee:	e0ce      	b.n	801588e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	da19      	bge.n	801572a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80156f6:	1d3b      	adds	r3, r7, #4
 80156f8:	3304      	adds	r3, #4
 80156fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80156fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d10b      	bne.n	801571a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8015702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015706:	f383 8811 	msr	BASEPRI, r3
 801570a:	f3bf 8f6f 	isb	sy
 801570e:	f3bf 8f4f 	dsb	sy
 8015712:	61fb      	str	r3, [r7, #28]
}
 8015714:	bf00      	nop
 8015716:	bf00      	nop
 8015718:	e7fd      	b.n	8015716 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015720:	6850      	ldr	r0, [r2, #4]
 8015722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015724:	6892      	ldr	r2, [r2, #8]
 8015726:	4611      	mov	r1, r2
 8015728:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	f2c0 80ae 	blt.w	801588e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015738:	695b      	ldr	r3, [r3, #20]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d004      	beq.n	8015748 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015740:	3304      	adds	r3, #4
 8015742:	4618      	mov	r0, r3
 8015744:	f7fd fe0a 	bl	801335c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015748:	463b      	mov	r3, r7
 801574a:	4618      	mov	r0, r3
 801574c:	f7ff ff6a 	bl	8015624 <prvSampleTimeNow>
 8015750:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2b09      	cmp	r3, #9
 8015756:	f200 8097 	bhi.w	8015888 <prvProcessReceivedCommands+0x1a0>
 801575a:	a201      	add	r2, pc, #4	@ (adr r2, 8015760 <prvProcessReceivedCommands+0x78>)
 801575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015760:	08015789 	.word	0x08015789
 8015764:	08015789 	.word	0x08015789
 8015768:	08015789 	.word	0x08015789
 801576c:	080157ff 	.word	0x080157ff
 8015770:	08015813 	.word	0x08015813
 8015774:	0801585f 	.word	0x0801585f
 8015778:	08015789 	.word	0x08015789
 801577c:	08015789 	.word	0x08015789
 8015780:	080157ff 	.word	0x080157ff
 8015784:	08015813 	.word	0x08015813
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801578a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801578e:	f043 0301 	orr.w	r3, r3, #1
 8015792:	b2da      	uxtb	r2, r3
 8015794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801579e:	699b      	ldr	r3, [r3, #24]
 80157a0:	18d1      	adds	r1, r2, r3
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157a8:	f7ff ff5c 	bl	8015664 <prvInsertTimerInActiveList>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d06c      	beq.n	801588c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80157b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157b4:	6a1b      	ldr	r3, [r3, #32]
 80157b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80157ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80157c0:	f003 0304 	and.w	r3, r3, #4
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d061      	beq.n	801588c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80157c8:	68ba      	ldr	r2, [r7, #8]
 80157ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157cc:	699b      	ldr	r3, [r3, #24]
 80157ce:	441a      	add	r2, r3
 80157d0:	2300      	movs	r3, #0
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	2300      	movs	r3, #0
 80157d6:	2100      	movs	r1, #0
 80157d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157da:	f7ff fe01 	bl	80153e0 <xTimerGenericCommand>
 80157de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80157e0:	6a3b      	ldr	r3, [r7, #32]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d152      	bne.n	801588c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80157e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ea:	f383 8811 	msr	BASEPRI, r3
 80157ee:	f3bf 8f6f 	isb	sy
 80157f2:	f3bf 8f4f 	dsb	sy
 80157f6:	61bb      	str	r3, [r7, #24]
}
 80157f8:	bf00      	nop
 80157fa:	bf00      	nop
 80157fc:	e7fd      	b.n	80157fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015804:	f023 0301 	bic.w	r3, r3, #1
 8015808:	b2da      	uxtb	r2, r3
 801580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801580c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015810:	e03d      	b.n	801588e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015818:	f043 0301 	orr.w	r3, r3, #1
 801581c:	b2da      	uxtb	r2, r3
 801581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015820:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015824:	68ba      	ldr	r2, [r7, #8]
 8015826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015828:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801582c:	699b      	ldr	r3, [r3, #24]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d10b      	bne.n	801584a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015836:	f383 8811 	msr	BASEPRI, r3
 801583a:	f3bf 8f6f 	isb	sy
 801583e:	f3bf 8f4f 	dsb	sy
 8015842:	617b      	str	r3, [r7, #20]
}
 8015844:	bf00      	nop
 8015846:	bf00      	nop
 8015848:	e7fd      	b.n	8015846 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801584c:	699a      	ldr	r2, [r3, #24]
 801584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015850:	18d1      	adds	r1, r2, r3
 8015852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015858:	f7ff ff04 	bl	8015664 <prvInsertTimerInActiveList>
					break;
 801585c:	e017      	b.n	801588e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015864:	f003 0302 	and.w	r3, r3, #2
 8015868:	2b00      	cmp	r3, #0
 801586a:	d103      	bne.n	8015874 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801586c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801586e:	f000 fbeb 	bl	8016048 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015872:	e00c      	b.n	801588e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801587a:	f023 0301 	bic.w	r3, r3, #1
 801587e:	b2da      	uxtb	r2, r3
 8015880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015886:	e002      	b.n	801588e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015888:	bf00      	nop
 801588a:	e000      	b.n	801588e <prvProcessReceivedCommands+0x1a6>
					break;
 801588c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801588e:	4b08      	ldr	r3, [pc, #32]	@ (80158b0 <prvProcessReceivedCommands+0x1c8>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	1d39      	adds	r1, r7, #4
 8015894:	2200      	movs	r2, #0
 8015896:	4618      	mov	r0, r3
 8015898:	f7fe f932 	bl	8013b00 <xQueueReceive>
 801589c:	4603      	mov	r3, r0
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f47f af26 	bne.w	80156f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80158a4:	bf00      	nop
 80158a6:	bf00      	nop
 80158a8:	3730      	adds	r7, #48	@ 0x30
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	200010c0 	.word	0x200010c0

080158b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b088      	sub	sp, #32
 80158b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80158ba:	e049      	b.n	8015950 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80158bc:	4b2e      	ldr	r3, [pc, #184]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158c6:	4b2c      	ldr	r3, [pc, #176]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	3304      	adds	r3, #4
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fd fd41 	bl	801335c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6a1b      	ldr	r3, [r3, #32]
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80158e8:	f003 0304 	and.w	r3, r3, #4
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d02f      	beq.n	8015950 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	699b      	ldr	r3, [r3, #24]
 80158f4:	693a      	ldr	r2, [r7, #16]
 80158f6:	4413      	add	r3, r2
 80158f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d90e      	bls.n	8015920 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	68ba      	ldr	r2, [r7, #8]
 8015906:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801590e:	4b1a      	ldr	r3, [pc, #104]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	3304      	adds	r3, #4
 8015916:	4619      	mov	r1, r3
 8015918:	4610      	mov	r0, r2
 801591a:	f7fd fce6 	bl	80132ea <vListInsert>
 801591e:	e017      	b.n	8015950 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015920:	2300      	movs	r3, #0
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	2300      	movs	r3, #0
 8015926:	693a      	ldr	r2, [r7, #16]
 8015928:	2100      	movs	r1, #0
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f7ff fd58 	bl	80153e0 <xTimerGenericCommand>
 8015930:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10b      	bne.n	8015950 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801593c:	f383 8811 	msr	BASEPRI, r3
 8015940:	f3bf 8f6f 	isb	sy
 8015944:	f3bf 8f4f 	dsb	sy
 8015948:	603b      	str	r3, [r7, #0]
}
 801594a:	bf00      	nop
 801594c:	bf00      	nop
 801594e:	e7fd      	b.n	801594c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015950:	4b09      	ldr	r3, [pc, #36]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d1b0      	bne.n	80158bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801595a:	4b07      	ldr	r3, [pc, #28]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015960:	4b06      	ldr	r3, [pc, #24]	@ (801597c <prvSwitchTimerLists+0xc8>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	4a04      	ldr	r2, [pc, #16]	@ (8015978 <prvSwitchTimerLists+0xc4>)
 8015966:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015968:	4a04      	ldr	r2, [pc, #16]	@ (801597c <prvSwitchTimerLists+0xc8>)
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	6013      	str	r3, [r2, #0]
}
 801596e:	bf00      	nop
 8015970:	3718      	adds	r7, #24
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	200010b8 	.word	0x200010b8
 801597c:	200010bc 	.word	0x200010bc

08015980 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015986:	f000 f96f 	bl	8015c68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801598a:	4b15      	ldr	r3, [pc, #84]	@ (80159e0 <prvCheckForValidListAndQueue+0x60>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d120      	bne.n	80159d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015992:	4814      	ldr	r0, [pc, #80]	@ (80159e4 <prvCheckForValidListAndQueue+0x64>)
 8015994:	f7fd fc58 	bl	8013248 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015998:	4813      	ldr	r0, [pc, #76]	@ (80159e8 <prvCheckForValidListAndQueue+0x68>)
 801599a:	f7fd fc55 	bl	8013248 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801599e:	4b13      	ldr	r3, [pc, #76]	@ (80159ec <prvCheckForValidListAndQueue+0x6c>)
 80159a0:	4a10      	ldr	r2, [pc, #64]	@ (80159e4 <prvCheckForValidListAndQueue+0x64>)
 80159a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80159a4:	4b12      	ldr	r3, [pc, #72]	@ (80159f0 <prvCheckForValidListAndQueue+0x70>)
 80159a6:	4a10      	ldr	r2, [pc, #64]	@ (80159e8 <prvCheckForValidListAndQueue+0x68>)
 80159a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80159aa:	2300      	movs	r3, #0
 80159ac:	9300      	str	r3, [sp, #0]
 80159ae:	4b11      	ldr	r3, [pc, #68]	@ (80159f4 <prvCheckForValidListAndQueue+0x74>)
 80159b0:	4a11      	ldr	r2, [pc, #68]	@ (80159f8 <prvCheckForValidListAndQueue+0x78>)
 80159b2:	2110      	movs	r1, #16
 80159b4:	200a      	movs	r0, #10
 80159b6:	f7fd fd65 	bl	8013484 <xQueueGenericCreateStatic>
 80159ba:	4603      	mov	r3, r0
 80159bc:	4a08      	ldr	r2, [pc, #32]	@ (80159e0 <prvCheckForValidListAndQueue+0x60>)
 80159be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80159c0:	4b07      	ldr	r3, [pc, #28]	@ (80159e0 <prvCheckForValidListAndQueue+0x60>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d005      	beq.n	80159d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80159c8:	4b05      	ldr	r3, [pc, #20]	@ (80159e0 <prvCheckForValidListAndQueue+0x60>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	490b      	ldr	r1, [pc, #44]	@ (80159fc <prvCheckForValidListAndQueue+0x7c>)
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7fe fbb0 	bl	8014134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80159d4:	f000 f97a 	bl	8015ccc <vPortExitCritical>
}
 80159d8:	bf00      	nop
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	200010c0 	.word	0x200010c0
 80159e4:	20001090 	.word	0x20001090
 80159e8:	200010a4 	.word	0x200010a4
 80159ec:	200010b8 	.word	0x200010b8
 80159f0:	200010bc 	.word	0x200010bc
 80159f4:	2000116c 	.word	0x2000116c
 80159f8:	200010cc 	.word	0x200010cc
 80159fc:	08019de4 	.word	0x08019de4

08015a00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a00:	b480      	push	{r7}
 8015a02:	b085      	sub	sp, #20
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	3b04      	subs	r3, #4
 8015a10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	3b04      	subs	r3, #4
 8015a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	f023 0201 	bic.w	r2, r3, #1
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	3b04      	subs	r3, #4
 8015a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a30:	4a0c      	ldr	r2, [pc, #48]	@ (8015a64 <pxPortInitialiseStack+0x64>)
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	3b14      	subs	r3, #20
 8015a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3b04      	subs	r3, #4
 8015a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	f06f 0202 	mvn.w	r2, #2
 8015a4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	3b20      	subs	r3, #32
 8015a54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a56:	68fb      	ldr	r3, [r7, #12]
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3714      	adds	r7, #20
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a62:	4770      	bx	lr
 8015a64:	08015a69 	.word	0x08015a69

08015a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b085      	sub	sp, #20
 8015a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a72:	4b13      	ldr	r3, [pc, #76]	@ (8015ac0 <prvTaskExitError+0x58>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7a:	d00b      	beq.n	8015a94 <prvTaskExitError+0x2c>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	60fb      	str	r3, [r7, #12]
}
 8015a8e:	bf00      	nop
 8015a90:	bf00      	nop
 8015a92:	e7fd      	b.n	8015a90 <prvTaskExitError+0x28>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	60bb      	str	r3, [r7, #8]
}
 8015aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015aa8:	bf00      	nop
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d0fc      	beq.n	8015aaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ab0:	bf00      	nop
 8015ab2:	bf00      	nop
 8015ab4:	3714      	adds	r7, #20
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	2000009c 	.word	0x2000009c
	...

08015ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ad0:	4b07      	ldr	r3, [pc, #28]	@ (8015af0 <pxCurrentTCBConst2>)
 8015ad2:	6819      	ldr	r1, [r3, #0]
 8015ad4:	6808      	ldr	r0, [r1, #0]
 8015ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ada:	f380 8809 	msr	PSP, r0
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f04f 0000 	mov.w	r0, #0
 8015ae6:	f380 8811 	msr	BASEPRI, r0
 8015aea:	4770      	bx	lr
 8015aec:	f3af 8000 	nop.w

08015af0 <pxCurrentTCBConst2>:
 8015af0:	20000b90 	.word	0x20000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop

08015af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015af8:	4808      	ldr	r0, [pc, #32]	@ (8015b1c <prvPortStartFirstTask+0x24>)
 8015afa:	6800      	ldr	r0, [r0, #0]
 8015afc:	6800      	ldr	r0, [r0, #0]
 8015afe:	f380 8808 	msr	MSP, r0
 8015b02:	f04f 0000 	mov.w	r0, #0
 8015b06:	f380 8814 	msr	CONTROL, r0
 8015b0a:	b662      	cpsie	i
 8015b0c:	b661      	cpsie	f
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	df00      	svc	0
 8015b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b1a:	bf00      	nop
 8015b1c:	e000ed08 	.word	0xe000ed08

08015b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b086      	sub	sp, #24
 8015b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015b26:	4b47      	ldr	r3, [pc, #284]	@ (8015c44 <xPortStartScheduler+0x124>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a47      	ldr	r2, [pc, #284]	@ (8015c48 <xPortStartScheduler+0x128>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d10b      	bne.n	8015b48 <xPortStartScheduler+0x28>
	__asm volatile
 8015b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b34:	f383 8811 	msr	BASEPRI, r3
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	f3bf 8f4f 	dsb	sy
 8015b40:	613b      	str	r3, [r7, #16]
}
 8015b42:	bf00      	nop
 8015b44:	bf00      	nop
 8015b46:	e7fd      	b.n	8015b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015b48:	4b3e      	ldr	r3, [pc, #248]	@ (8015c44 <xPortStartScheduler+0x124>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8015c4c <xPortStartScheduler+0x12c>)
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	d10b      	bne.n	8015b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8015b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b56:	f383 8811 	msr	BASEPRI, r3
 8015b5a:	f3bf 8f6f 	isb	sy
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	60fb      	str	r3, [r7, #12]
}
 8015b64:	bf00      	nop
 8015b66:	bf00      	nop
 8015b68:	e7fd      	b.n	8015b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b6a:	4b39      	ldr	r3, [pc, #228]	@ (8015c50 <xPortStartScheduler+0x130>)
 8015b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	b2db      	uxtb	r3, r3
 8015b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	22ff      	movs	r2, #255	@ 0xff
 8015b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b84:	78fb      	ldrb	r3, [r7, #3]
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	4b31      	ldr	r3, [pc, #196]	@ (8015c54 <xPortStartScheduler+0x134>)
 8015b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b92:	4b31      	ldr	r3, [pc, #196]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015b94:	2207      	movs	r2, #7
 8015b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b98:	e009      	b.n	8015bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	3b01      	subs	r3, #1
 8015ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ba4:	78fb      	ldrb	r3, [r7, #3]
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bae:	78fb      	ldrb	r3, [r7, #3]
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015bb6:	2b80      	cmp	r3, #128	@ 0x80
 8015bb8:	d0ef      	beq.n	8015b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bba:	4b27      	ldr	r3, [pc, #156]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	f1c3 0307 	rsb	r3, r3, #7
 8015bc2:	2b04      	cmp	r3, #4
 8015bc4:	d00b      	beq.n	8015bde <xPortStartScheduler+0xbe>
	__asm volatile
 8015bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bca:	f383 8811 	msr	BASEPRI, r3
 8015bce:	f3bf 8f6f 	isb	sy
 8015bd2:	f3bf 8f4f 	dsb	sy
 8015bd6:	60bb      	str	r3, [r7, #8]
}
 8015bd8:	bf00      	nop
 8015bda:	bf00      	nop
 8015bdc:	e7fd      	b.n	8015bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015bde:	4b1e      	ldr	r3, [pc, #120]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	021b      	lsls	r3, r3, #8
 8015be4:	4a1c      	ldr	r2, [pc, #112]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015be8:	4b1b      	ldr	r3, [pc, #108]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015bf0:	4a19      	ldr	r2, [pc, #100]	@ (8015c58 <xPortStartScheduler+0x138>)
 8015bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	b2da      	uxtb	r2, r3
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015bfc:	4b17      	ldr	r3, [pc, #92]	@ (8015c5c <xPortStartScheduler+0x13c>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a16      	ldr	r2, [pc, #88]	@ (8015c5c <xPortStartScheduler+0x13c>)
 8015c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c08:	4b14      	ldr	r3, [pc, #80]	@ (8015c5c <xPortStartScheduler+0x13c>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	4a13      	ldr	r2, [pc, #76]	@ (8015c5c <xPortStartScheduler+0x13c>)
 8015c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c14:	f000 f8da 	bl	8015dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c18:	4b11      	ldr	r3, [pc, #68]	@ (8015c60 <xPortStartScheduler+0x140>)
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c1e:	f000 f8f9 	bl	8015e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c22:	4b10      	ldr	r3, [pc, #64]	@ (8015c64 <xPortStartScheduler+0x144>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4a0f      	ldr	r2, [pc, #60]	@ (8015c64 <xPortStartScheduler+0x144>)
 8015c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c2e:	f7ff ff63 	bl	8015af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c32:	f7fe ff2b 	bl	8014a8c <vTaskSwitchContext>
	prvTaskExitError();
 8015c36:	f7ff ff17 	bl	8015a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c3a:	2300      	movs	r3, #0
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3718      	adds	r7, #24
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	e000ed00 	.word	0xe000ed00
 8015c48:	410fc271 	.word	0x410fc271
 8015c4c:	410fc270 	.word	0x410fc270
 8015c50:	e000e400 	.word	0xe000e400
 8015c54:	200011bc 	.word	0x200011bc
 8015c58:	200011c0 	.word	0x200011c0
 8015c5c:	e000ed20 	.word	0xe000ed20
 8015c60:	2000009c 	.word	0x2000009c
 8015c64:	e000ef34 	.word	0xe000ef34

08015c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c72:	f383 8811 	msr	BASEPRI, r3
 8015c76:	f3bf 8f6f 	isb	sy
 8015c7a:	f3bf 8f4f 	dsb	sy
 8015c7e:	607b      	str	r3, [r7, #4]
}
 8015c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c82:	4b10      	ldr	r3, [pc, #64]	@ (8015cc4 <vPortEnterCritical+0x5c>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	3301      	adds	r3, #1
 8015c88:	4a0e      	ldr	r2, [pc, #56]	@ (8015cc4 <vPortEnterCritical+0x5c>)
 8015c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8015cc4 <vPortEnterCritical+0x5c>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d110      	bne.n	8015cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c94:	4b0c      	ldr	r3, [pc, #48]	@ (8015cc8 <vPortEnterCritical+0x60>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00b      	beq.n	8015cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8015c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ca2:	f383 8811 	msr	BASEPRI, r3
 8015ca6:	f3bf 8f6f 	isb	sy
 8015caa:	f3bf 8f4f 	dsb	sy
 8015cae:	603b      	str	r3, [r7, #0]
}
 8015cb0:	bf00      	nop
 8015cb2:	bf00      	nop
 8015cb4:	e7fd      	b.n	8015cb2 <vPortEnterCritical+0x4a>
	}
}
 8015cb6:	bf00      	nop
 8015cb8:	370c      	adds	r7, #12
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	2000009c 	.word	0x2000009c
 8015cc8:	e000ed04 	.word	0xe000ed04

08015ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cd2:	4b12      	ldr	r3, [pc, #72]	@ (8015d1c <vPortExitCritical+0x50>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d10b      	bne.n	8015cf2 <vPortExitCritical+0x26>
	__asm volatile
 8015cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cde:	f383 8811 	msr	BASEPRI, r3
 8015ce2:	f3bf 8f6f 	isb	sy
 8015ce6:	f3bf 8f4f 	dsb	sy
 8015cea:	607b      	str	r3, [r7, #4]
}
 8015cec:	bf00      	nop
 8015cee:	bf00      	nop
 8015cf0:	e7fd      	b.n	8015cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8015d1c <vPortExitCritical+0x50>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	4a08      	ldr	r2, [pc, #32]	@ (8015d1c <vPortExitCritical+0x50>)
 8015cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015cfc:	4b07      	ldr	r3, [pc, #28]	@ (8015d1c <vPortExitCritical+0x50>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d105      	bne.n	8015d10 <vPortExitCritical+0x44>
 8015d04:	2300      	movs	r3, #0
 8015d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	f383 8811 	msr	BASEPRI, r3
}
 8015d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d10:	bf00      	nop
 8015d12:	370c      	adds	r7, #12
 8015d14:	46bd      	mov	sp, r7
 8015d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1a:	4770      	bx	lr
 8015d1c:	2000009c 	.word	0x2000009c

08015d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d20:	f3ef 8009 	mrs	r0, PSP
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	4b15      	ldr	r3, [pc, #84]	@ (8015d80 <pxCurrentTCBConst>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	f01e 0f10 	tst.w	lr, #16
 8015d30:	bf08      	it	eq
 8015d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3a:	6010      	str	r0, [r2, #0]
 8015d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015d44:	f380 8811 	msr	BASEPRI, r0
 8015d48:	f3bf 8f4f 	dsb	sy
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	f7fe fe9c 	bl	8014a8c <vTaskSwitchContext>
 8015d54:	f04f 0000 	mov.w	r0, #0
 8015d58:	f380 8811 	msr	BASEPRI, r0
 8015d5c:	bc09      	pop	{r0, r3}
 8015d5e:	6819      	ldr	r1, [r3, #0]
 8015d60:	6808      	ldr	r0, [r1, #0]
 8015d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d66:	f01e 0f10 	tst.w	lr, #16
 8015d6a:	bf08      	it	eq
 8015d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d70:	f380 8809 	msr	PSP, r0
 8015d74:	f3bf 8f6f 	isb	sy
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	f3af 8000 	nop.w

08015d80 <pxCurrentTCBConst>:
 8015d80:	20000b90 	.word	0x20000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d84:	bf00      	nop
 8015d86:	bf00      	nop

08015d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d92:	f383 8811 	msr	BASEPRI, r3
 8015d96:	f3bf 8f6f 	isb	sy
 8015d9a:	f3bf 8f4f 	dsb	sy
 8015d9e:	607b      	str	r3, [r7, #4]
}
 8015da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015da2:	f7fe fdb9 	bl	8014918 <xTaskIncrementTick>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d003      	beq.n	8015db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dac:	4b06      	ldr	r3, [pc, #24]	@ (8015dc8 <xPortSysTickHandler+0x40>)
 8015dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	2300      	movs	r3, #0
 8015db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	f383 8811 	msr	BASEPRI, r3
}
 8015dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dc0:	bf00      	nop
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	e000ed04 	.word	0xe000ed04

08015dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015dcc:	b480      	push	{r7}
 8015dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8015e00 <vPortSetupTimerInterrupt+0x34>)
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8015e04 <vPortSetupTimerInterrupt+0x38>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8015e08 <vPortSetupTimerInterrupt+0x3c>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4a0a      	ldr	r2, [pc, #40]	@ (8015e0c <vPortSetupTimerInterrupt+0x40>)
 8015de2:	fba2 2303 	umull	r2, r3, r2, r3
 8015de6:	099b      	lsrs	r3, r3, #6
 8015de8:	4a09      	ldr	r2, [pc, #36]	@ (8015e10 <vPortSetupTimerInterrupt+0x44>)
 8015dea:	3b01      	subs	r3, #1
 8015dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dee:	4b04      	ldr	r3, [pc, #16]	@ (8015e00 <vPortSetupTimerInterrupt+0x34>)
 8015df0:	2207      	movs	r2, #7
 8015df2:	601a      	str	r2, [r3, #0]
}
 8015df4:	bf00      	nop
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr
 8015dfe:	bf00      	nop
 8015e00:	e000e010 	.word	0xe000e010
 8015e04:	e000e018 	.word	0xe000e018
 8015e08:	20000004 	.word	0x20000004
 8015e0c:	10624dd3 	.word	0x10624dd3
 8015e10:	e000e014 	.word	0xe000e014

08015e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015e24 <vPortEnableVFP+0x10>
 8015e18:	6801      	ldr	r1, [r0, #0]
 8015e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015e1e:	6001      	str	r1, [r0, #0]
 8015e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e22:	bf00      	nop
 8015e24:	e000ed88 	.word	0xe000ed88

08015e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e28:	b480      	push	{r7}
 8015e2a:	b085      	sub	sp, #20
 8015e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e2e:	f3ef 8305 	mrs	r3, IPSR
 8015e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2b0f      	cmp	r3, #15
 8015e38:	d915      	bls.n	8015e66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e3a:	4a18      	ldr	r2, [pc, #96]	@ (8015e9c <vPortValidateInterruptPriority+0x74>)
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	4413      	add	r3, r2
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e44:	4b16      	ldr	r3, [pc, #88]	@ (8015ea0 <vPortValidateInterruptPriority+0x78>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	7afa      	ldrb	r2, [r7, #11]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d20b      	bcs.n	8015e66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e52:	f383 8811 	msr	BASEPRI, r3
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	f3bf 8f4f 	dsb	sy
 8015e5e:	607b      	str	r3, [r7, #4]
}
 8015e60:	bf00      	nop
 8015e62:	bf00      	nop
 8015e64:	e7fd      	b.n	8015e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e66:	4b0f      	ldr	r3, [pc, #60]	@ (8015ea4 <vPortValidateInterruptPriority+0x7c>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8015ea8 <vPortValidateInterruptPriority+0x80>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d90b      	bls.n	8015e8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7a:	f383 8811 	msr	BASEPRI, r3
 8015e7e:	f3bf 8f6f 	isb	sy
 8015e82:	f3bf 8f4f 	dsb	sy
 8015e86:	603b      	str	r3, [r7, #0]
}
 8015e88:	bf00      	nop
 8015e8a:	bf00      	nop
 8015e8c:	e7fd      	b.n	8015e8a <vPortValidateInterruptPriority+0x62>
	}
 8015e8e:	bf00      	nop
 8015e90:	3714      	adds	r7, #20
 8015e92:	46bd      	mov	sp, r7
 8015e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop
 8015e9c:	e000e3f0 	.word	0xe000e3f0
 8015ea0:	200011bc 	.word	0x200011bc
 8015ea4:	e000ed0c 	.word	0xe000ed0c
 8015ea8:	200011c0 	.word	0x200011c0

08015eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b08a      	sub	sp, #40	@ 0x28
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015eb8:	f7fe fc72 	bl	80147a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8016030 <pvPortMalloc+0x184>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d101      	bne.n	8015ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ec4:	f000 f924 	bl	8016110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8016034 <pvPortMalloc+0x188>)
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	4013      	ands	r3, r2
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f040 8095 	bne.w	8016000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d01e      	beq.n	8015f1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015edc:	2208      	movs	r2, #8
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4413      	add	r3, r2
 8015ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f003 0307 	and.w	r3, r3, #7
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d015      	beq.n	8015f1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f023 0307 	bic.w	r3, r3, #7
 8015ef4:	3308      	adds	r3, #8
 8015ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f003 0307 	and.w	r3, r3, #7
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d00b      	beq.n	8015f1a <pvPortMalloc+0x6e>
	__asm volatile
 8015f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f06:	f383 8811 	msr	BASEPRI, r3
 8015f0a:	f3bf 8f6f 	isb	sy
 8015f0e:	f3bf 8f4f 	dsb	sy
 8015f12:	617b      	str	r3, [r7, #20]
}
 8015f14:	bf00      	nop
 8015f16:	bf00      	nop
 8015f18:	e7fd      	b.n	8015f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d06f      	beq.n	8016000 <pvPortMalloc+0x154>
 8015f20:	4b45      	ldr	r3, [pc, #276]	@ (8016038 <pvPortMalloc+0x18c>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d86a      	bhi.n	8016000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f2a:	4b44      	ldr	r3, [pc, #272]	@ (801603c <pvPortMalloc+0x190>)
 8015f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f2e:	4b43      	ldr	r3, [pc, #268]	@ (801603c <pvPortMalloc+0x190>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f34:	e004      	b.n	8015f40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d903      	bls.n	8015f52 <pvPortMalloc+0xa6>
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d1f1      	bne.n	8015f36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f52:	4b37      	ldr	r3, [pc, #220]	@ (8016030 <pvPortMalloc+0x184>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d051      	beq.n	8016000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f5c:	6a3b      	ldr	r3, [r7, #32]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2208      	movs	r2, #8
 8015f62:	4413      	add	r3, r2
 8015f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	6a3b      	ldr	r3, [r7, #32]
 8015f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f70:	685a      	ldr	r2, [r3, #4]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	1ad2      	subs	r2, r2, r3
 8015f76:	2308      	movs	r3, #8
 8015f78:	005b      	lsls	r3, r3, #1
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d920      	bls.n	8015fc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	4413      	add	r3, r2
 8015f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	f003 0307 	and.w	r3, r3, #7
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00b      	beq.n	8015fa8 <pvPortMalloc+0xfc>
	__asm volatile
 8015f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f94:	f383 8811 	msr	BASEPRI, r3
 8015f98:	f3bf 8f6f 	isb	sy
 8015f9c:	f3bf 8f4f 	dsb	sy
 8015fa0:	613b      	str	r3, [r7, #16]
}
 8015fa2:	bf00      	nop
 8015fa4:	bf00      	nop
 8015fa6:	e7fd      	b.n	8015fa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015faa:	685a      	ldr	r2, [r3, #4]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	1ad2      	subs	r2, r2, r3
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fba:	69b8      	ldr	r0, [r7, #24]
 8015fbc:	f000 f90a 	bl	80161d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8016038 <pvPortMalloc+0x18c>)
 8015fc2:	681a      	ldr	r2, [r3, #0]
 8015fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	4a1b      	ldr	r2, [pc, #108]	@ (8016038 <pvPortMalloc+0x18c>)
 8015fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fce:	4b1a      	ldr	r3, [pc, #104]	@ (8016038 <pvPortMalloc+0x18c>)
 8015fd0:	681a      	ldr	r2, [r3, #0]
 8015fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8016040 <pvPortMalloc+0x194>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d203      	bcs.n	8015fe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fda:	4b17      	ldr	r3, [pc, #92]	@ (8016038 <pvPortMalloc+0x18c>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	4a18      	ldr	r2, [pc, #96]	@ (8016040 <pvPortMalloc+0x194>)
 8015fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fe4:	685a      	ldr	r2, [r3, #4]
 8015fe6:	4b13      	ldr	r3, [pc, #76]	@ (8016034 <pvPortMalloc+0x188>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	431a      	orrs	r2, r3
 8015fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ff6:	4b13      	ldr	r3, [pc, #76]	@ (8016044 <pvPortMalloc+0x198>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	4a11      	ldr	r2, [pc, #68]	@ (8016044 <pvPortMalloc+0x198>)
 8015ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016000:	f7fe fbdc 	bl	80147bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	f003 0307 	and.w	r3, r3, #7
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00b      	beq.n	8016026 <pvPortMalloc+0x17a>
	__asm volatile
 801600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016012:	f383 8811 	msr	BASEPRI, r3
 8016016:	f3bf 8f6f 	isb	sy
 801601a:	f3bf 8f4f 	dsb	sy
 801601e:	60fb      	str	r3, [r7, #12]
}
 8016020:	bf00      	nop
 8016022:	bf00      	nop
 8016024:	e7fd      	b.n	8016022 <pvPortMalloc+0x176>
	return pvReturn;
 8016026:	69fb      	ldr	r3, [r7, #28]
}
 8016028:	4618      	mov	r0, r3
 801602a:	3728      	adds	r7, #40	@ 0x28
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	20004dcc 	.word	0x20004dcc
 8016034:	20004de0 	.word	0x20004de0
 8016038:	20004dd0 	.word	0x20004dd0
 801603c:	20004dc4 	.word	0x20004dc4
 8016040:	20004dd4 	.word	0x20004dd4
 8016044:	20004dd8 	.word	0x20004dd8

08016048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b086      	sub	sp, #24
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d04f      	beq.n	80160fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801605a:	2308      	movs	r3, #8
 801605c:	425b      	negs	r3, r3
 801605e:	697a      	ldr	r2, [r7, #20]
 8016060:	4413      	add	r3, r2
 8016062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	685a      	ldr	r2, [r3, #4]
 801606c:	4b25      	ldr	r3, [pc, #148]	@ (8016104 <vPortFree+0xbc>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	4013      	ands	r3, r2
 8016072:	2b00      	cmp	r3, #0
 8016074:	d10b      	bne.n	801608e <vPortFree+0x46>
	__asm volatile
 8016076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801607a:	f383 8811 	msr	BASEPRI, r3
 801607e:	f3bf 8f6f 	isb	sy
 8016082:	f3bf 8f4f 	dsb	sy
 8016086:	60fb      	str	r3, [r7, #12]
}
 8016088:	bf00      	nop
 801608a:	bf00      	nop
 801608c:	e7fd      	b.n	801608a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00b      	beq.n	80160ae <vPortFree+0x66>
	__asm volatile
 8016096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801609a:	f383 8811 	msr	BASEPRI, r3
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	f3bf 8f4f 	dsb	sy
 80160a6:	60bb      	str	r3, [r7, #8]
}
 80160a8:	bf00      	nop
 80160aa:	bf00      	nop
 80160ac:	e7fd      	b.n	80160aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	685a      	ldr	r2, [r3, #4]
 80160b2:	4b14      	ldr	r3, [pc, #80]	@ (8016104 <vPortFree+0xbc>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	4013      	ands	r3, r2
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d01e      	beq.n	80160fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d11a      	bne.n	80160fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	4b0e      	ldr	r3, [pc, #56]	@ (8016104 <vPortFree+0xbc>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	43db      	mvns	r3, r3
 80160ce:	401a      	ands	r2, r3
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160d4:	f7fe fb64 	bl	80147a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	685a      	ldr	r2, [r3, #4]
 80160dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016108 <vPortFree+0xc0>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	4413      	add	r3, r2
 80160e2:	4a09      	ldr	r2, [pc, #36]	@ (8016108 <vPortFree+0xc0>)
 80160e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160e6:	6938      	ldr	r0, [r7, #16]
 80160e8:	f000 f874 	bl	80161d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160ec:	4b07      	ldr	r3, [pc, #28]	@ (801610c <vPortFree+0xc4>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	3301      	adds	r3, #1
 80160f2:	4a06      	ldr	r2, [pc, #24]	@ (801610c <vPortFree+0xc4>)
 80160f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160f6:	f7fe fb61 	bl	80147bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160fa:	bf00      	nop
 80160fc:	3718      	adds	r7, #24
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	20004de0 	.word	0x20004de0
 8016108:	20004dd0 	.word	0x20004dd0
 801610c:	20004ddc 	.word	0x20004ddc

08016110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016110:	b480      	push	{r7}
 8016112:	b085      	sub	sp, #20
 8016114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016116:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801611a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801611c:	4b27      	ldr	r3, [pc, #156]	@ (80161bc <prvHeapInit+0xac>)
 801611e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	f003 0307 	and.w	r3, r3, #7
 8016126:	2b00      	cmp	r3, #0
 8016128:	d00c      	beq.n	8016144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3307      	adds	r3, #7
 801612e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	f023 0307 	bic.w	r3, r3, #7
 8016136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016138:	68ba      	ldr	r2, [r7, #8]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	1ad3      	subs	r3, r2, r3
 801613e:	4a1f      	ldr	r2, [pc, #124]	@ (80161bc <prvHeapInit+0xac>)
 8016140:	4413      	add	r3, r2
 8016142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016148:	4a1d      	ldr	r2, [pc, #116]	@ (80161c0 <prvHeapInit+0xb0>)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801614e:	4b1c      	ldr	r3, [pc, #112]	@ (80161c0 <prvHeapInit+0xb0>)
 8016150:	2200      	movs	r2, #0
 8016152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	68ba      	ldr	r2, [r7, #8]
 8016158:	4413      	add	r3, r2
 801615a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801615c:	2208      	movs	r2, #8
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	1a9b      	subs	r3, r3, r2
 8016162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f023 0307 	bic.w	r3, r3, #7
 801616a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	4a15      	ldr	r2, [pc, #84]	@ (80161c4 <prvHeapInit+0xb4>)
 8016170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016172:	4b14      	ldr	r3, [pc, #80]	@ (80161c4 <prvHeapInit+0xb4>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2200      	movs	r2, #0
 8016178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801617a:	4b12      	ldr	r3, [pc, #72]	@ (80161c4 <prvHeapInit+0xb4>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2200      	movs	r2, #0
 8016180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	68fa      	ldr	r2, [r7, #12]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016190:	4b0c      	ldr	r3, [pc, #48]	@ (80161c4 <prvHeapInit+0xb4>)
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	4a0a      	ldr	r2, [pc, #40]	@ (80161c8 <prvHeapInit+0xb8>)
 801619e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	4a09      	ldr	r2, [pc, #36]	@ (80161cc <prvHeapInit+0xbc>)
 80161a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161a8:	4b09      	ldr	r3, [pc, #36]	@ (80161d0 <prvHeapInit+0xc0>)
 80161aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80161ae:	601a      	str	r2, [r3, #0]
}
 80161b0:	bf00      	nop
 80161b2:	3714      	adds	r7, #20
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr
 80161bc:	200011c4 	.word	0x200011c4
 80161c0:	20004dc4 	.word	0x20004dc4
 80161c4:	20004dcc 	.word	0x20004dcc
 80161c8:	20004dd4 	.word	0x20004dd4
 80161cc:	20004dd0 	.word	0x20004dd0
 80161d0:	20004de0 	.word	0x20004de0

080161d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161d4:	b480      	push	{r7}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161dc:	4b28      	ldr	r3, [pc, #160]	@ (8016280 <prvInsertBlockIntoFreeList+0xac>)
 80161de:	60fb      	str	r3, [r7, #12]
 80161e0:	e002      	b.n	80161e8 <prvInsertBlockIntoFreeList+0x14>
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	60fb      	str	r3, [r7, #12]
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d8f7      	bhi.n	80161e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	68ba      	ldr	r2, [r7, #8]
 80161fc:	4413      	add	r3, r2
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	429a      	cmp	r2, r3
 8016202:	d108      	bne.n	8016216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	685a      	ldr	r2, [r3, #4]
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	441a      	add	r2, r3
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	441a      	add	r2, r3
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	429a      	cmp	r2, r3
 8016228:	d118      	bne.n	801625c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	4b15      	ldr	r3, [pc, #84]	@ (8016284 <prvInsertBlockIntoFreeList+0xb0>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	429a      	cmp	r2, r3
 8016234:	d00d      	beq.n	8016252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	685a      	ldr	r2, [r3, #4]
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	685b      	ldr	r3, [r3, #4]
 8016240:	441a      	add	r2, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	681a      	ldr	r2, [r3, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	601a      	str	r2, [r3, #0]
 8016250:	e008      	b.n	8016264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016252:	4b0c      	ldr	r3, [pc, #48]	@ (8016284 <prvInsertBlockIntoFreeList+0xb0>)
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	601a      	str	r2, [r3, #0]
 801625a:	e003      	b.n	8016264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	429a      	cmp	r2, r3
 801626a:	d002      	beq.n	8016272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016272:	bf00      	nop
 8016274:	3714      	adds	r7, #20
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop
 8016280:	20004dc4 	.word	0x20004dc4
 8016284:	20004dcc 	.word	0x20004dcc

08016288 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801628c:	2200      	movs	r2, #0
 801628e:	4912      	ldr	r1, [pc, #72]	@ (80162d8 <MX_USB_DEVICE_Init+0x50>)
 8016290:	4812      	ldr	r0, [pc, #72]	@ (80162dc <MX_USB_DEVICE_Init+0x54>)
 8016292:	f7fb fb67 	bl	8011964 <USBD_Init>
 8016296:	4603      	mov	r3, r0
 8016298:	2b00      	cmp	r3, #0
 801629a:	d001      	beq.n	80162a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801629c:	f7f5 f85a 	bl	800b354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80162a0:	490f      	ldr	r1, [pc, #60]	@ (80162e0 <MX_USB_DEVICE_Init+0x58>)
 80162a2:	480e      	ldr	r0, [pc, #56]	@ (80162dc <MX_USB_DEVICE_Init+0x54>)
 80162a4:	f7fb fb8e 	bl	80119c4 <USBD_RegisterClass>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d001      	beq.n	80162b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162ae:	f7f5 f851 	bl	800b354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80162b2:	490c      	ldr	r1, [pc, #48]	@ (80162e4 <MX_USB_DEVICE_Init+0x5c>)
 80162b4:	4809      	ldr	r0, [pc, #36]	@ (80162dc <MX_USB_DEVICE_Init+0x54>)
 80162b6:	f7fb fa85 	bl	80117c4 <USBD_CDC_RegisterInterface>
 80162ba:	4603      	mov	r3, r0
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d001      	beq.n	80162c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80162c0:	f7f5 f848 	bl	800b354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80162c4:	4805      	ldr	r0, [pc, #20]	@ (80162dc <MX_USB_DEVICE_Init+0x54>)
 80162c6:	f7fb fbb3 	bl	8011a30 <USBD_Start>
 80162ca:	4603      	mov	r3, r0
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d001      	beq.n	80162d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80162d0:	f7f5 f840 	bl	800b354 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80162d4:	bf00      	nop
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	200000b4 	.word	0x200000b4
 80162dc:	20004de4 	.word	0x20004de4
 80162e0:	2000001c 	.word	0x2000001c
 80162e4:	200000a0 	.word	0x200000a0

080162e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80162ec:	2200      	movs	r2, #0
 80162ee:	4905      	ldr	r1, [pc, #20]	@ (8016304 <CDC_Init_FS+0x1c>)
 80162f0:	4805      	ldr	r0, [pc, #20]	@ (8016308 <CDC_Init_FS+0x20>)
 80162f2:	f7fb fa81 	bl	80117f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80162f6:	4905      	ldr	r1, [pc, #20]	@ (801630c <CDC_Init_FS+0x24>)
 80162f8:	4803      	ldr	r0, [pc, #12]	@ (8016308 <CDC_Init_FS+0x20>)
 80162fa:	f7fb fa9f 	bl	801183c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80162fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016300:	4618      	mov	r0, r3
 8016302:	bd80      	pop	{r7, pc}
 8016304:	200054c0 	.word	0x200054c0
 8016308:	20004de4 	.word	0x20004de4
 801630c:	200050c0 	.word	0x200050c0

08016310 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016310:	b480      	push	{r7}
 8016312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016314:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016316:	4618      	mov	r0, r3
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	4603      	mov	r3, r0
 8016328:	6039      	str	r1, [r7, #0]
 801632a:	71fb      	strb	r3, [r7, #7]
 801632c:	4613      	mov	r3, r2
 801632e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016330:	79fb      	ldrb	r3, [r7, #7]
 8016332:	2b23      	cmp	r3, #35	@ 0x23
 8016334:	d84a      	bhi.n	80163cc <CDC_Control_FS+0xac>
 8016336:	a201      	add	r2, pc, #4	@ (adr r2, 801633c <CDC_Control_FS+0x1c>)
 8016338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801633c:	080163cd 	.word	0x080163cd
 8016340:	080163cd 	.word	0x080163cd
 8016344:	080163cd 	.word	0x080163cd
 8016348:	080163cd 	.word	0x080163cd
 801634c:	080163cd 	.word	0x080163cd
 8016350:	080163cd 	.word	0x080163cd
 8016354:	080163cd 	.word	0x080163cd
 8016358:	080163cd 	.word	0x080163cd
 801635c:	080163cd 	.word	0x080163cd
 8016360:	080163cd 	.word	0x080163cd
 8016364:	080163cd 	.word	0x080163cd
 8016368:	080163cd 	.word	0x080163cd
 801636c:	080163cd 	.word	0x080163cd
 8016370:	080163cd 	.word	0x080163cd
 8016374:	080163cd 	.word	0x080163cd
 8016378:	080163cd 	.word	0x080163cd
 801637c:	080163cd 	.word	0x080163cd
 8016380:	080163cd 	.word	0x080163cd
 8016384:	080163cd 	.word	0x080163cd
 8016388:	080163cd 	.word	0x080163cd
 801638c:	080163cd 	.word	0x080163cd
 8016390:	080163cd 	.word	0x080163cd
 8016394:	080163cd 	.word	0x080163cd
 8016398:	080163cd 	.word	0x080163cd
 801639c:	080163cd 	.word	0x080163cd
 80163a0:	080163cd 	.word	0x080163cd
 80163a4:	080163cd 	.word	0x080163cd
 80163a8:	080163cd 	.word	0x080163cd
 80163ac:	080163cd 	.word	0x080163cd
 80163b0:	080163cd 	.word	0x080163cd
 80163b4:	080163cd 	.word	0x080163cd
 80163b8:	080163cd 	.word	0x080163cd
 80163bc:	080163cd 	.word	0x080163cd
 80163c0:	080163cd 	.word	0x080163cd
 80163c4:	080163cd 	.word	0x080163cd
 80163c8:	080163cd 	.word	0x080163cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80163cc:	bf00      	nop
  }

  return (USBD_OK);
 80163ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	370c      	adds	r7, #12
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr

080163dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80163e6:	6879      	ldr	r1, [r7, #4]
 80163e8:	4805      	ldr	r0, [pc, #20]	@ (8016400 <CDC_Receive_FS+0x24>)
 80163ea:	f7fb fa27 	bl	801183c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80163ee:	4804      	ldr	r0, [pc, #16]	@ (8016400 <CDC_Receive_FS+0x24>)
 80163f0:	f7fb fa82 	bl	80118f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80163f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3708      	adds	r7, #8
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	20004de4 	.word	0x20004de4

08016404 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	460b      	mov	r3, r1
 801640e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016410:	2300      	movs	r3, #0
 8016412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016414:	4b0d      	ldr	r3, [pc, #52]	@ (801644c <CDC_Transmit_FS+0x48>)
 8016416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801641a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016422:	2b00      	cmp	r3, #0
 8016424:	d001      	beq.n	801642a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016426:	2301      	movs	r3, #1
 8016428:	e00b      	b.n	8016442 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801642a:	887b      	ldrh	r3, [r7, #2]
 801642c:	461a      	mov	r2, r3
 801642e:	6879      	ldr	r1, [r7, #4]
 8016430:	4806      	ldr	r0, [pc, #24]	@ (801644c <CDC_Transmit_FS+0x48>)
 8016432:	f7fb f9e1 	bl	80117f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016436:	4805      	ldr	r0, [pc, #20]	@ (801644c <CDC_Transmit_FS+0x48>)
 8016438:	f7fb fa1e 	bl	8011878 <USBD_CDC_TransmitPacket>
 801643c:	4603      	mov	r3, r0
 801643e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016440:	7bfb      	ldrb	r3, [r7, #15]
}
 8016442:	4618      	mov	r0, r3
 8016444:	3710      	adds	r7, #16
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	20004de4 	.word	0x20004de4

08016450 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016450:	b480      	push	{r7}
 8016452:	b087      	sub	sp, #28
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	4613      	mov	r3, r2
 801645c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801645e:	2300      	movs	r3, #0
 8016460:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016466:	4618      	mov	r0, r3
 8016468:	371c      	adds	r7, #28
 801646a:	46bd      	mov	sp, r7
 801646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016470:	4770      	bx	lr
	...

08016474 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016474:	b480      	push	{r7}
 8016476:	b083      	sub	sp, #12
 8016478:	af00      	add	r7, sp, #0
 801647a:	4603      	mov	r3, r0
 801647c:	6039      	str	r1, [r7, #0]
 801647e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	2212      	movs	r2, #18
 8016484:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016486:	4b03      	ldr	r3, [pc, #12]	@ (8016494 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016488:	4618      	mov	r0, r3
 801648a:	370c      	adds	r7, #12
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr
 8016494:	200000d0 	.word	0x200000d0

08016498 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	4603      	mov	r3, r0
 80164a0:	6039      	str	r1, [r7, #0]
 80164a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	2204      	movs	r2, #4
 80164a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164aa:	4b03      	ldr	r3, [pc, #12]	@ (80164b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	370c      	adds	r7, #12
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr
 80164b8:	200000e4 	.word	0x200000e4

080164bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	4603      	mov	r3, r0
 80164c4:	6039      	str	r1, [r7, #0]
 80164c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80164c8:	79fb      	ldrb	r3, [r7, #7]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d105      	bne.n	80164da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	4907      	ldr	r1, [pc, #28]	@ (80164f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80164d2:	4808      	ldr	r0, [pc, #32]	@ (80164f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80164d4:	f7fc fc5c 	bl	8012d90 <USBD_GetString>
 80164d8:	e004      	b.n	80164e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	4904      	ldr	r1, [pc, #16]	@ (80164f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80164de:	4805      	ldr	r0, [pc, #20]	@ (80164f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80164e0:	f7fc fc56 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80164e4:	4b02      	ldr	r3, [pc, #8]	@ (80164f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3708      	adds	r7, #8
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	200058c0 	.word	0x200058c0
 80164f4:	08019dec 	.word	0x08019dec

080164f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	4603      	mov	r3, r0
 8016500:	6039      	str	r1, [r7, #0]
 8016502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016504:	683a      	ldr	r2, [r7, #0]
 8016506:	4904      	ldr	r1, [pc, #16]	@ (8016518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016508:	4804      	ldr	r0, [pc, #16]	@ (801651c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801650a:	f7fc fc41 	bl	8012d90 <USBD_GetString>
  return USBD_StrDesc;
 801650e:	4b02      	ldr	r3, [pc, #8]	@ (8016518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016510:	4618      	mov	r0, r3
 8016512:	3708      	adds	r7, #8
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	200058c0 	.word	0x200058c0
 801651c:	08019e04 	.word	0x08019e04

08016520 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	4603      	mov	r3, r0
 8016528:	6039      	str	r1, [r7, #0]
 801652a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	221a      	movs	r2, #26
 8016530:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016532:	f000 f843 	bl	80165bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016536:	4b02      	ldr	r3, [pc, #8]	@ (8016540 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016538:	4618      	mov	r0, r3
 801653a:	3708      	adds	r7, #8
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}
 8016540:	200000e8 	.word	0x200000e8

08016544 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	4603      	mov	r3, r0
 801654c:	6039      	str	r1, [r7, #0]
 801654e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016550:	79fb      	ldrb	r3, [r7, #7]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d105      	bne.n	8016562 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016556:	683a      	ldr	r2, [r7, #0]
 8016558:	4907      	ldr	r1, [pc, #28]	@ (8016578 <USBD_FS_ConfigStrDescriptor+0x34>)
 801655a:	4808      	ldr	r0, [pc, #32]	@ (801657c <USBD_FS_ConfigStrDescriptor+0x38>)
 801655c:	f7fc fc18 	bl	8012d90 <USBD_GetString>
 8016560:	e004      	b.n	801656c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016562:	683a      	ldr	r2, [r7, #0]
 8016564:	4904      	ldr	r1, [pc, #16]	@ (8016578 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016566:	4805      	ldr	r0, [pc, #20]	@ (801657c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016568:	f7fc fc12 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801656c:	4b02      	ldr	r3, [pc, #8]	@ (8016578 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801656e:	4618      	mov	r0, r3
 8016570:	3708      	adds	r7, #8
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	200058c0 	.word	0x200058c0
 801657c:	08019e18 	.word	0x08019e18

08016580 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	4603      	mov	r3, r0
 8016588:	6039      	str	r1, [r7, #0]
 801658a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801658c:	79fb      	ldrb	r3, [r7, #7]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d105      	bne.n	801659e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	4907      	ldr	r1, [pc, #28]	@ (80165b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016596:	4808      	ldr	r0, [pc, #32]	@ (80165b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016598:	f7fc fbfa 	bl	8012d90 <USBD_GetString>
 801659c:	e004      	b.n	80165a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801659e:	683a      	ldr	r2, [r7, #0]
 80165a0:	4904      	ldr	r1, [pc, #16]	@ (80165b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165a2:	4805      	ldr	r0, [pc, #20]	@ (80165b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165a4:	f7fc fbf4 	bl	8012d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165a8:	4b02      	ldr	r3, [pc, #8]	@ (80165b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	200058c0 	.word	0x200058c0
 80165b8:	08019e24 	.word	0x08019e24

080165bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80165c2:	4b0f      	ldr	r3, [pc, #60]	@ (8016600 <Get_SerialNum+0x44>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80165c8:	4b0e      	ldr	r3, [pc, #56]	@ (8016604 <Get_SerialNum+0x48>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80165ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016608 <Get_SerialNum+0x4c>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	4413      	add	r3, r2
 80165da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d009      	beq.n	80165f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80165e2:	2208      	movs	r2, #8
 80165e4:	4909      	ldr	r1, [pc, #36]	@ (801660c <Get_SerialNum+0x50>)
 80165e6:	68f8      	ldr	r0, [r7, #12]
 80165e8:	f000 f814 	bl	8016614 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80165ec:	2204      	movs	r2, #4
 80165ee:	4908      	ldr	r1, [pc, #32]	@ (8016610 <Get_SerialNum+0x54>)
 80165f0:	68b8      	ldr	r0, [r7, #8]
 80165f2:	f000 f80f 	bl	8016614 <IntToUnicode>
  }
}
 80165f6:	bf00      	nop
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	1fff7a10 	.word	0x1fff7a10
 8016604:	1fff7a14 	.word	0x1fff7a14
 8016608:	1fff7a18 	.word	0x1fff7a18
 801660c:	200000ea 	.word	0x200000ea
 8016610:	200000fa 	.word	0x200000fa

08016614 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016614:	b480      	push	{r7}
 8016616:	b087      	sub	sp, #28
 8016618:	af00      	add	r7, sp, #0
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	4613      	mov	r3, r2
 8016620:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016622:	2300      	movs	r3, #0
 8016624:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016626:	2300      	movs	r3, #0
 8016628:	75fb      	strb	r3, [r7, #23]
 801662a:	e027      	b.n	801667c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	0f1b      	lsrs	r3, r3, #28
 8016630:	2b09      	cmp	r3, #9
 8016632:	d80b      	bhi.n	801664c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	0f1b      	lsrs	r3, r3, #28
 8016638:	b2da      	uxtb	r2, r3
 801663a:	7dfb      	ldrb	r3, [r7, #23]
 801663c:	005b      	lsls	r3, r3, #1
 801663e:	4619      	mov	r1, r3
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	440b      	add	r3, r1
 8016644:	3230      	adds	r2, #48	@ 0x30
 8016646:	b2d2      	uxtb	r2, r2
 8016648:	701a      	strb	r2, [r3, #0]
 801664a:	e00a      	b.n	8016662 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	0f1b      	lsrs	r3, r3, #28
 8016650:	b2da      	uxtb	r2, r3
 8016652:	7dfb      	ldrb	r3, [r7, #23]
 8016654:	005b      	lsls	r3, r3, #1
 8016656:	4619      	mov	r1, r3
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	440b      	add	r3, r1
 801665c:	3237      	adds	r2, #55	@ 0x37
 801665e:	b2d2      	uxtb	r2, r2
 8016660:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	011b      	lsls	r3, r3, #4
 8016666:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016668:	7dfb      	ldrb	r3, [r7, #23]
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	3301      	adds	r3, #1
 801666e:	68ba      	ldr	r2, [r7, #8]
 8016670:	4413      	add	r3, r2
 8016672:	2200      	movs	r2, #0
 8016674:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016676:	7dfb      	ldrb	r3, [r7, #23]
 8016678:	3301      	adds	r3, #1
 801667a:	75fb      	strb	r3, [r7, #23]
 801667c:	7dfa      	ldrb	r2, [r7, #23]
 801667e:	79fb      	ldrb	r3, [r7, #7]
 8016680:	429a      	cmp	r2, r3
 8016682:	d3d3      	bcc.n	801662c <IntToUnicode+0x18>
  }
}
 8016684:	bf00      	nop
 8016686:	bf00      	nop
 8016688:	371c      	adds	r7, #28
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr
	...

08016694 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b08a      	sub	sp, #40	@ 0x28
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801669c:	f107 0314 	add.w	r3, r7, #20
 80166a0:	2200      	movs	r2, #0
 80166a2:	601a      	str	r2, [r3, #0]
 80166a4:	605a      	str	r2, [r3, #4]
 80166a6:	609a      	str	r2, [r3, #8]
 80166a8:	60da      	str	r2, [r3, #12]
 80166aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80166b4:	d13a      	bne.n	801672c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166b6:	2300      	movs	r3, #0
 80166b8:	613b      	str	r3, [r7, #16]
 80166ba:	4b1e      	ldr	r3, [pc, #120]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 80166bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166be:	4a1d      	ldr	r2, [pc, #116]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 80166c0:	f043 0301 	orr.w	r3, r3, #1
 80166c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80166c6:	4b1b      	ldr	r3, [pc, #108]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 80166c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166ca:	f003 0301 	and.w	r3, r3, #1
 80166ce:	613b      	str	r3, [r7, #16]
 80166d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80166d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80166d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166d8:	2302      	movs	r3, #2
 80166da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166dc:	2300      	movs	r3, #0
 80166de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166e0:	2303      	movs	r3, #3
 80166e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80166e4:	230a      	movs	r3, #10
 80166e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166e8:	f107 0314 	add.w	r3, r7, #20
 80166ec:	4619      	mov	r1, r3
 80166ee:	4812      	ldr	r0, [pc, #72]	@ (8016738 <HAL_PCD_MspInit+0xa4>)
 80166f0:	f7f6 fc02 	bl	800cef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80166f4:	4b0f      	ldr	r3, [pc, #60]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 80166f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80166f8:	4a0e      	ldr	r2, [pc, #56]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 80166fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80166fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8016700:	2300      	movs	r3, #0
 8016702:	60fb      	str	r3, [r7, #12]
 8016704:	4b0b      	ldr	r3, [pc, #44]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 8016706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016708:	4a0a      	ldr	r2, [pc, #40]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 801670a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801670e:	6453      	str	r3, [r2, #68]	@ 0x44
 8016710:	4b08      	ldr	r3, [pc, #32]	@ (8016734 <HAL_PCD_MspInit+0xa0>)
 8016712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016718:	60fb      	str	r3, [r7, #12]
 801671a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801671c:	2200      	movs	r2, #0
 801671e:	2105      	movs	r1, #5
 8016720:	2043      	movs	r0, #67	@ 0x43
 8016722:	f7f6 fbbf 	bl	800cea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016726:	2043      	movs	r0, #67	@ 0x43
 8016728:	f7f6 fbd8 	bl	800cedc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801672c:	bf00      	nop
 801672e:	3728      	adds	r7, #40	@ 0x28
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	40023800 	.word	0x40023800
 8016738:	40020000 	.word	0x40020000

0801673c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016750:	4619      	mov	r1, r3
 8016752:	4610      	mov	r0, r2
 8016754:	f7fb f9b9 	bl	8011aca <USBD_LL_SetupStage>
}
 8016758:	bf00      	nop
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	460b      	mov	r3, r1
 801676a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016772:	78fa      	ldrb	r2, [r7, #3]
 8016774:	6879      	ldr	r1, [r7, #4]
 8016776:	4613      	mov	r3, r2
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	4413      	add	r3, r2
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	440b      	add	r3, r1
 8016780:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	78fb      	ldrb	r3, [r7, #3]
 8016788:	4619      	mov	r1, r3
 801678a:	f7fb f9f3 	bl	8011b74 <USBD_LL_DataOutStage>
}
 801678e:	bf00      	nop
 8016790:	3708      	adds	r7, #8
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016796:	b580      	push	{r7, lr}
 8016798:	b082      	sub	sp, #8
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
 801679e:	460b      	mov	r3, r1
 80167a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80167a8:	78fa      	ldrb	r2, [r7, #3]
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	4613      	mov	r3, r2
 80167ae:	00db      	lsls	r3, r3, #3
 80167b0:	4413      	add	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	440b      	add	r3, r1
 80167b6:	3320      	adds	r3, #32
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	78fb      	ldrb	r3, [r7, #3]
 80167bc:	4619      	mov	r1, r3
 80167be:	f7fb fa8c 	bl	8011cda <USBD_LL_DataInStage>
}
 80167c2:	bf00      	nop
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b082      	sub	sp, #8
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80167d8:	4618      	mov	r0, r3
 80167da:	f7fb fbc6 	bl	8011f6a <USBD_LL_SOF>
}
 80167de:	bf00      	nop
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b084      	sub	sp, #16
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80167ee:	2301      	movs	r3, #1
 80167f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	79db      	ldrb	r3, [r3, #7]
 80167f6:	2b02      	cmp	r3, #2
 80167f8:	d001      	beq.n	80167fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80167fa:	f7f4 fdab 	bl	800b354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016804:	7bfa      	ldrb	r2, [r7, #15]
 8016806:	4611      	mov	r1, r2
 8016808:	4618      	mov	r0, r3
 801680a:	f7fb fb6a 	bl	8011ee2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016814:	4618      	mov	r0, r3
 8016816:	f7fb fb12 	bl	8011e3e <USBD_LL_Reset>
}
 801681a:	bf00      	nop
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
	...

08016824 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016832:	4618      	mov	r0, r3
 8016834:	f7fb fb65 	bl	8011f02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	687a      	ldr	r2, [r7, #4]
 8016844:	6812      	ldr	r2, [r2, #0]
 8016846:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801684a:	f043 0301 	orr.w	r3, r3, #1
 801684e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	7adb      	ldrb	r3, [r3, #11]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d005      	beq.n	8016864 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016858:	4b04      	ldr	r3, [pc, #16]	@ (801686c <HAL_PCD_SuspendCallback+0x48>)
 801685a:	691b      	ldr	r3, [r3, #16]
 801685c:	4a03      	ldr	r2, [pc, #12]	@ (801686c <HAL_PCD_SuspendCallback+0x48>)
 801685e:	f043 0306 	orr.w	r3, r3, #6
 8016862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016864:	bf00      	nop
 8016866:	3708      	adds	r7, #8
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	e000ed00 	.word	0xe000ed00

08016870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801687e:	4618      	mov	r0, r3
 8016880:	f7fb fb5b 	bl	8011f3a <USBD_LL_Resume>
}
 8016884:	bf00      	nop
 8016886:	3708      	adds	r7, #8
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	460b      	mov	r3, r1
 8016896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801689e:	78fa      	ldrb	r2, [r7, #3]
 80168a0:	4611      	mov	r1, r2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7fb fbb3 	bl	801200e <USBD_LL_IsoOUTIncomplete>
}
 80168a8:	bf00      	nop
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	460b      	mov	r3, r1
 80168ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168c2:	78fa      	ldrb	r2, [r7, #3]
 80168c4:	4611      	mov	r1, r2
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7fb fb6f 	bl	8011faa <USBD_LL_IsoINIncomplete>
}
 80168cc:	bf00      	nop
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fb fbc5 	bl	8012072 <USBD_LL_DevConnected>
}
 80168e8:	bf00      	nop
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80168fe:	4618      	mov	r0, r3
 8016900:	f7fb fbc2 	bl	8012088 <USBD_LL_DevDisconnected>
}
 8016904:	bf00      	nop
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	781b      	ldrb	r3, [r3, #0]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d13c      	bne.n	8016996 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801691c:	4a20      	ldr	r2, [pc, #128]	@ (80169a0 <USBD_LL_Init+0x94>)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	4a1e      	ldr	r2, [pc, #120]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016928:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801692c:	4b1c      	ldr	r3, [pc, #112]	@ (80169a0 <USBD_LL_Init+0x94>)
 801692e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8016932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016934:	4b1a      	ldr	r3, [pc, #104]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016936:	2204      	movs	r2, #4
 8016938:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801693a:	4b19      	ldr	r3, [pc, #100]	@ (80169a0 <USBD_LL_Init+0x94>)
 801693c:	2202      	movs	r2, #2
 801693e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016940:	4b17      	ldr	r3, [pc, #92]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016942:	2200      	movs	r2, #0
 8016944:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016946:	4b16      	ldr	r3, [pc, #88]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016948:	2202      	movs	r2, #2
 801694a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801694c:	4b14      	ldr	r3, [pc, #80]	@ (80169a0 <USBD_LL_Init+0x94>)
 801694e:	2200      	movs	r2, #0
 8016950:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016952:	4b13      	ldr	r3, [pc, #76]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016954:	2200      	movs	r2, #0
 8016956:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016958:	4b11      	ldr	r3, [pc, #68]	@ (80169a0 <USBD_LL_Init+0x94>)
 801695a:	2200      	movs	r2, #0
 801695c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801695e:	4b10      	ldr	r3, [pc, #64]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016960:	2200      	movs	r2, #0
 8016962:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016964:	4b0e      	ldr	r3, [pc, #56]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016966:	2200      	movs	r2, #0
 8016968:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801696a:	480d      	ldr	r0, [pc, #52]	@ (80169a0 <USBD_LL_Init+0x94>)
 801696c:	f7f6 fcac 	bl	800d2c8 <HAL_PCD_Init>
 8016970:	4603      	mov	r3, r0
 8016972:	2b00      	cmp	r3, #0
 8016974:	d001      	beq.n	801697a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016976:	f7f4 fced 	bl	800b354 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801697a:	2180      	movs	r1, #128	@ 0x80
 801697c:	4808      	ldr	r0, [pc, #32]	@ (80169a0 <USBD_LL_Init+0x94>)
 801697e:	f7f7 fed8 	bl	800e732 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016982:	2240      	movs	r2, #64	@ 0x40
 8016984:	2100      	movs	r1, #0
 8016986:	4806      	ldr	r0, [pc, #24]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016988:	f7f7 fe8c 	bl	800e6a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801698c:	2280      	movs	r2, #128	@ 0x80
 801698e:	2101      	movs	r1, #1
 8016990:	4803      	ldr	r0, [pc, #12]	@ (80169a0 <USBD_LL_Init+0x94>)
 8016992:	f7f7 fe87 	bl	800e6a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016996:	2300      	movs	r3, #0
}
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	20005ac0 	.word	0x20005ac0

080169a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b084      	sub	sp, #16
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169ac:	2300      	movs	r3, #0
 80169ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169b0:	2300      	movs	r3, #0
 80169b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7f6 fd93 	bl	800d4e6 <HAL_PCD_Start>
 80169c0:	4603      	mov	r3, r0
 80169c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f000 f942 	bl	8016c50 <USBD_Get_USB_Status>
 80169cc:	4603      	mov	r3, r0
 80169ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3710      	adds	r7, #16
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80169da:	b580      	push	{r7, lr}
 80169dc:	b084      	sub	sp, #16
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
 80169e2:	4608      	mov	r0, r1
 80169e4:	4611      	mov	r1, r2
 80169e6:	461a      	mov	r2, r3
 80169e8:	4603      	mov	r3, r0
 80169ea:	70fb      	strb	r3, [r7, #3]
 80169ec:	460b      	mov	r3, r1
 80169ee:	70bb      	strb	r3, [r7, #2]
 80169f0:	4613      	mov	r3, r2
 80169f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169f4:	2300      	movs	r3, #0
 80169f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016a02:	78bb      	ldrb	r3, [r7, #2]
 8016a04:	883a      	ldrh	r2, [r7, #0]
 8016a06:	78f9      	ldrb	r1, [r7, #3]
 8016a08:	f7f7 fa67 	bl	800deda <HAL_PCD_EP_Open>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a10:	7bfb      	ldrb	r3, [r7, #15]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f000 f91c 	bl	8016c50 <USBD_Get_USB_Status>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}

08016a26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	460b      	mov	r3, r1
 8016a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a32:	2300      	movs	r3, #0
 8016a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a36:	2300      	movs	r3, #0
 8016a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016a40:	78fa      	ldrb	r2, [r7, #3]
 8016a42:	4611      	mov	r1, r2
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f7 fab2 	bl	800dfae <HAL_PCD_EP_Close>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f000 f8fd 	bl	8016c50 <USBD_Get_USB_Status>
 8016a56:	4603      	mov	r3, r0
 8016a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3710      	adds	r7, #16
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b084      	sub	sp, #16
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a70:	2300      	movs	r3, #0
 8016a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a74:	2300      	movs	r3, #0
 8016a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016a7e:	78fa      	ldrb	r2, [r7, #3]
 8016a80:	4611      	mov	r1, r2
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7f7 fb6a 	bl	800e15c <HAL_PCD_EP_SetStall>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a8c:	7bfb      	ldrb	r3, [r7, #15]
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f000 f8de 	bl	8016c50 <USBD_Get_USB_Status>
 8016a94:	4603      	mov	r3, r0
 8016a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3710      	adds	r7, #16
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aa2:	b580      	push	{r7, lr}
 8016aa4:	b084      	sub	sp, #16
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	6078      	str	r0, [r7, #4]
 8016aaa:	460b      	mov	r3, r1
 8016aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016abc:	78fa      	ldrb	r2, [r7, #3]
 8016abe:	4611      	mov	r1, r2
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7f7 fbae 	bl	800e222 <HAL_PCD_EP_ClrStall>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016aca:	7bfb      	ldrb	r3, [r7, #15]
 8016acc:	4618      	mov	r0, r3
 8016ace:	f000 f8bf 	bl	8016c50 <USBD_Get_USB_Status>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3710      	adds	r7, #16
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	460b      	mov	r3, r1
 8016aea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016af2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	da0b      	bge.n	8016b14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016afc:	78fb      	ldrb	r3, [r7, #3]
 8016afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016b02:	68f9      	ldr	r1, [r7, #12]
 8016b04:	4613      	mov	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	4413      	add	r3, r2
 8016b0a:	009b      	lsls	r3, r3, #2
 8016b0c:	440b      	add	r3, r1
 8016b0e:	3316      	adds	r3, #22
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	e00b      	b.n	8016b2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b14:	78fb      	ldrb	r3, [r7, #3]
 8016b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016b1a:	68f9      	ldr	r1, [r7, #12]
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	4413      	add	r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	440b      	add	r3, r1
 8016b26:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016b2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3714      	adds	r7, #20
 8016b30:	46bd      	mov	sp, r7
 8016b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b36:	4770      	bx	lr

08016b38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	460b      	mov	r3, r1
 8016b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b44:	2300      	movs	r3, #0
 8016b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b52:	78fa      	ldrb	r2, [r7, #3]
 8016b54:	4611      	mov	r1, r2
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7f7 f99b 	bl	800de92 <HAL_PCD_SetAddress>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b60:	7bfb      	ldrb	r3, [r7, #15]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f000 f874 	bl	8016c50 <USBD_Get_USB_Status>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3710      	adds	r7, #16
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b086      	sub	sp, #24
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	60f8      	str	r0, [r7, #12]
 8016b7e:	607a      	str	r2, [r7, #4]
 8016b80:	603b      	str	r3, [r7, #0]
 8016b82:	460b      	mov	r3, r1
 8016b84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b86:	2300      	movs	r3, #0
 8016b88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016b94:	7af9      	ldrb	r1, [r7, #11]
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	f7f7 faa5 	bl	800e0e8 <HAL_PCD_EP_Transmit>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ba2:	7dfb      	ldrb	r3, [r7, #23]
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f000 f853 	bl	8016c50 <USBD_Get_USB_Status>
 8016baa:	4603      	mov	r3, r0
 8016bac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bae:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3718      	adds	r7, #24
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	607a      	str	r2, [r7, #4]
 8016bc2:	603b      	str	r3, [r7, #0]
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016bd6:	7af9      	ldrb	r1, [r7, #11]
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	687a      	ldr	r2, [r7, #4]
 8016bdc:	f7f7 fa31 	bl	800e042 <HAL_PCD_EP_Receive>
 8016be0:	4603      	mov	r3, r0
 8016be2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be4:	7dfb      	ldrb	r3, [r7, #23]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f000 f832 	bl	8016c50 <USBD_Get_USB_Status>
 8016bec:	4603      	mov	r3, r0
 8016bee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bf0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3718      	adds	r7, #24
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b082      	sub	sp, #8
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
 8016c02:	460b      	mov	r3, r1
 8016c04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c0c:	78fa      	ldrb	r2, [r7, #3]
 8016c0e:	4611      	mov	r1, r2
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7f7 fa51 	bl	800e0b8 <HAL_PCD_EP_GetRxCount>
 8016c16:	4603      	mov	r3, r0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016c20:	b480      	push	{r7}
 8016c22:	b083      	sub	sp, #12
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016c28:	4b03      	ldr	r3, [pc, #12]	@ (8016c38 <USBD_static_malloc+0x18>)
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	370c      	adds	r7, #12
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c34:	4770      	bx	lr
 8016c36:	bf00      	nop
 8016c38:	20005fa4 	.word	0x20005fa4

08016c3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]

}
 8016c44:	bf00      	nop
 8016c46:	370c      	adds	r7, #12
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr

08016c50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c50:	b480      	push	{r7}
 8016c52:	b085      	sub	sp, #20
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	4603      	mov	r3, r0
 8016c58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c5e:	79fb      	ldrb	r3, [r7, #7]
 8016c60:	2b03      	cmp	r3, #3
 8016c62:	d817      	bhi.n	8016c94 <USBD_Get_USB_Status+0x44>
 8016c64:	a201      	add	r2, pc, #4	@ (adr r2, 8016c6c <USBD_Get_USB_Status+0x1c>)
 8016c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c6a:	bf00      	nop
 8016c6c:	08016c7d 	.word	0x08016c7d
 8016c70:	08016c83 	.word	0x08016c83
 8016c74:	08016c89 	.word	0x08016c89
 8016c78:	08016c8f 	.word	0x08016c8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8016c80:	e00b      	b.n	8016c9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c82:	2303      	movs	r3, #3
 8016c84:	73fb      	strb	r3, [r7, #15]
    break;
 8016c86:	e008      	b.n	8016c9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c88:	2301      	movs	r3, #1
 8016c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c8c:	e005      	b.n	8016c9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c8e:	2303      	movs	r3, #3
 8016c90:	73fb      	strb	r3, [r7, #15]
    break;
 8016c92:	e002      	b.n	8016c9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016c94:	2303      	movs	r3, #3
 8016c96:	73fb      	strb	r3, [r7, #15]
    break;
 8016c98:	bf00      	nop
  }
  return usb_status;
 8016c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3714      	adds	r7, #20
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca6:	4770      	bx	lr

08016ca8 <_ZdlPvj>:
 8016ca8:	f000 b8fc 	b.w	8016ea4 <_ZdlPv>

08016cac <_Znwj>:
 8016cac:	2801      	cmp	r0, #1
 8016cae:	bf38      	it	cc
 8016cb0:	2001      	movcc	r0, #1
 8016cb2:	b510      	push	{r4, lr}
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	f000 f90c 	bl	8016ed4 <malloc>
 8016cbc:	b100      	cbz	r0, 8016cc0 <_Znwj+0x14>
 8016cbe:	bd10      	pop	{r4, pc}
 8016cc0:	f000 f8f2 	bl	8016ea8 <_ZSt15get_new_handlerv>
 8016cc4:	b908      	cbnz	r0, 8016cca <_Znwj+0x1e>
 8016cc6:	f000 f8fd 	bl	8016ec4 <abort>
 8016cca:	4780      	blx	r0
 8016ccc:	e7f3      	b.n	8016cb6 <_Znwj+0xa>

08016cce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8016cce:	b10a      	cbz	r2, 8016cd4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8016cd0:	f001 b8b5 	b.w	8017e3e <memcpy>
 8016cd4:	4770      	bx	lr

08016cd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8016cd6:	f850 3b08 	ldr.w	r3, [r0], #8
 8016cda:	1a1b      	subs	r3, r3, r0
 8016cdc:	4258      	negs	r0, r3
 8016cde:	4158      	adcs	r0, r3
 8016ce0:	4770      	bx	lr
	...

08016ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8016ce4:	b508      	push	{r3, lr}
 8016ce6:	680b      	ldr	r3, [r1, #0]
 8016ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016cec:	d302      	bcc.n	8016cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8016cee:	480d      	ldr	r0, [pc, #52]	@ (8016d24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8016cf0:	f000 f8e5 	bl	8016ebe <_ZSt20__throw_length_errorPKc>
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	d90b      	bls.n	8016d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016cf8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016cfc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8016d00:	d206      	bcs.n	8016d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016d02:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8016d06:	bf2a      	itet	cs
 8016d08:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8016d0c:	6008      	strcc	r0, [r1, #0]
 8016d0e:	600b      	strcs	r3, [r1, #0]
 8016d10:	6808      	ldr	r0, [r1, #0]
 8016d12:	3001      	adds	r0, #1
 8016d14:	d501      	bpl.n	8016d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8016d16:	f000 f8cf 	bl	8016eb8 <_ZSt17__throw_bad_allocv>
 8016d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016d1e:	f7ff bfc5 	b.w	8016cac <_Znwj>
 8016d22:	bf00      	nop
 8016d24:	0801a05c 	.word	0x0801a05c

08016d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8016d28:	b510      	push	{r4, lr}
 8016d2a:	4604      	mov	r4, r0
 8016d2c:	f7ff ffd3 	bl	8016cd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8016d30:	b920      	cbnz	r0, 8016d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8016d32:	6820      	ldr	r0, [r4, #0]
 8016d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d38:	f000 b8b4 	b.w	8016ea4 <_ZdlPv>
 8016d3c:	bd10      	pop	{r4, pc}

08016d3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8016d3e:	6840      	ldr	r0, [r0, #4]
 8016d40:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8016d44:	3901      	subs	r1, #1
 8016d46:	1a09      	subs	r1, r1, r0
 8016d48:	4291      	cmp	r1, r2
 8016d4a:	b508      	push	{r3, lr}
 8016d4c:	d202      	bcs.n	8016d54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f000 f8b5 	bl	8016ebe <_ZSt20__throw_length_errorPKc>
 8016d54:	bd08      	pop	{r3, pc}

08016d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8016d56:	2a01      	cmp	r2, #1
 8016d58:	b410      	push	{r4}
 8016d5a:	d104      	bne.n	8016d66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8016d5c:	780a      	ldrb	r2, [r1, #0]
 8016d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d62:	7002      	strb	r2, [r0, #0]
 8016d64:	4770      	bx	lr
 8016d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d6a:	f7ff bfb0 	b.w	8016cce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08016d6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8016d6e:	f100 0208 	add.w	r2, r0, #8
 8016d72:	6002      	str	r2, [r0, #0]
 8016d74:	2200      	movs	r2, #0
 8016d76:	6042      	str	r2, [r0, #4]
 8016d78:	7202      	strb	r2, [r0, #8]
 8016d7a:	4770      	bx	lr

08016d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8016d7c:	b510      	push	{r4, lr}
 8016d7e:	4604      	mov	r4, r0
 8016d80:	f7ff ffa9 	bl	8016cd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8016d84:	b908      	cbnz	r0, 8016d8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8016d86:	68a0      	ldr	r0, [r4, #8]
 8016d88:	bd10      	pop	{r4, pc}
 8016d8a:	200f      	movs	r0, #15
 8016d8c:	e7fc      	b.n	8016d88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08016d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8016d8e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d92:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016d94:	461f      	mov	r7, r3
 8016d96:	6843      	ldr	r3, [r0, #4]
 8016d98:	eb01 0802 	add.w	r8, r1, r2
 8016d9c:	1ab2      	subs	r2, r6, r2
 8016d9e:	441a      	add	r2, r3
 8016da0:	4604      	mov	r4, r0
 8016da2:	460d      	mov	r5, r1
 8016da4:	eba3 0908 	sub.w	r9, r3, r8
 8016da8:	9201      	str	r2, [sp, #4]
 8016daa:	f7ff ffe7 	bl	8016d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8016dae:	a901      	add	r1, sp, #4
 8016db0:	4602      	mov	r2, r0
 8016db2:	4620      	mov	r0, r4
 8016db4:	f7ff ff96 	bl	8016ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8016db8:	4682      	mov	sl, r0
 8016dba:	b11d      	cbz	r5, 8016dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8016dbc:	6821      	ldr	r1, [r4, #0]
 8016dbe:	462a      	mov	r2, r5
 8016dc0:	f7ff ffc9 	bl	8016d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016dc4:	b137      	cbz	r7, 8016dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8016dc6:	b12e      	cbz	r6, 8016dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8016dc8:	4632      	mov	r2, r6
 8016dca:	4639      	mov	r1, r7
 8016dcc:	eb0a 0005 	add.w	r0, sl, r5
 8016dd0:	f7ff ffc1 	bl	8016d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016dd4:	f1b9 0f00 	cmp.w	r9, #0
 8016dd8:	d007      	beq.n	8016dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8016dda:	6821      	ldr	r1, [r4, #0]
 8016ddc:	4435      	add	r5, r6
 8016dde:	464a      	mov	r2, r9
 8016de0:	4441      	add	r1, r8
 8016de2:	eb0a 0005 	add.w	r0, sl, r5
 8016de6:	f7ff ffb6 	bl	8016d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016dea:	4620      	mov	r0, r4
 8016dec:	f7ff ff9c 	bl	8016d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016df0:	9b01      	ldr	r3, [sp, #4]
 8016df2:	f8c4 a000 	str.w	sl, [r4]
 8016df6:	60a3      	str	r3, [r4, #8]
 8016df8:	b002      	add	sp, #8
 8016dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016dfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8016dfe:	6802      	ldr	r2, [r0, #0]
 8016e00:	2300      	movs	r3, #0
 8016e02:	6043      	str	r3, [r0, #4]
 8016e04:	7013      	strb	r3, [r2, #0]
 8016e06:	4770      	bx	lr

08016e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8016e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e0a:	6846      	ldr	r6, [r0, #4]
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	460f      	mov	r7, r1
 8016e10:	f7ff ffb4 	bl	8016d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8016e14:	1c75      	adds	r5, r6, #1
 8016e16:	4285      	cmp	r5, r0
 8016e18:	d907      	bls.n	8016e2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	9300      	str	r3, [sp, #0]
 8016e1e:	2300      	movs	r3, #0
 8016e20:	461a      	mov	r2, r3
 8016e22:	4631      	mov	r1, r6
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7ff ffb2 	bl	8016d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016e2a:	6823      	ldr	r3, [r4, #0]
 8016e2c:	559f      	strb	r7, [r3, r6]
 8016e2e:	6823      	ldr	r3, [r4, #0]
 8016e30:	6065      	str	r5, [r4, #4]
 8016e32:	2200      	movs	r2, #0
 8016e34:	555a      	strb	r2, [r3, r5]
 8016e36:	b003      	add	sp, #12
 8016e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8016e3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016e3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016e42:	4604      	mov	r4, r0
 8016e44:	eb02 0708 	add.w	r7, r2, r8
 8016e48:	460e      	mov	r6, r1
 8016e4a:	4615      	mov	r5, r2
 8016e4c:	f7ff ff96 	bl	8016d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8016e50:	42b8      	cmp	r0, r7
 8016e52:	d30e      	bcc.n	8016e72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8016e54:	b12d      	cbz	r5, 8016e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8016e56:	6820      	ldr	r0, [r4, #0]
 8016e58:	462a      	mov	r2, r5
 8016e5a:	4631      	mov	r1, r6
 8016e5c:	4440      	add	r0, r8
 8016e5e:	f7ff ff7a 	bl	8016d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8016e62:	6823      	ldr	r3, [r4, #0]
 8016e64:	6067      	str	r7, [r4, #4]
 8016e66:	2200      	movs	r2, #0
 8016e68:	4620      	mov	r0, r4
 8016e6a:	55da      	strb	r2, [r3, r7]
 8016e6c:	b002      	add	sp, #8
 8016e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e72:	9500      	str	r5, [sp, #0]
 8016e74:	4633      	mov	r3, r6
 8016e76:	2200      	movs	r2, #0
 8016e78:	4641      	mov	r1, r8
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	f7ff ff87 	bl	8016d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016e80:	e7ef      	b.n	8016e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
	...

08016e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8016e84:	b570      	push	{r4, r5, r6, lr}
 8016e86:	4b06      	ldr	r3, [pc, #24]	@ (8016ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	4616      	mov	r6, r2
 8016e8e:	2100      	movs	r1, #0
 8016e90:	f7ff ff55 	bl	8016d3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8016e94:	4632      	mov	r2, r6
 8016e96:	4629      	mov	r1, r5
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f7ff ffce 	bl	8016e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8016e9e:	bd70      	pop	{r4, r5, r6, pc}
 8016ea0:	0801a074 	.word	0x0801a074

08016ea4 <_ZdlPv>:
 8016ea4:	f000 b81e 	b.w	8016ee4 <free>

08016ea8 <_ZSt15get_new_handlerv>:
 8016ea8:	4b02      	ldr	r3, [pc, #8]	@ (8016eb4 <_ZSt15get_new_handlerv+0xc>)
 8016eaa:	6818      	ldr	r0, [r3, #0]
 8016eac:	f3bf 8f5b 	dmb	ish
 8016eb0:	4770      	bx	lr
 8016eb2:	bf00      	nop
 8016eb4:	200061c4 	.word	0x200061c4

08016eb8 <_ZSt17__throw_bad_allocv>:
 8016eb8:	b508      	push	{r3, lr}
 8016eba:	f000 f803 	bl	8016ec4 <abort>

08016ebe <_ZSt20__throw_length_errorPKc>:
 8016ebe:	b508      	push	{r3, lr}
 8016ec0:	f000 f800 	bl	8016ec4 <abort>

08016ec4 <abort>:
 8016ec4:	b508      	push	{r3, lr}
 8016ec6:	2006      	movs	r0, #6
 8016ec8:	f000 fec0 	bl	8017c4c <raise>
 8016ecc:	2001      	movs	r0, #1
 8016ece:	f7f4 ff1b 	bl	800bd08 <_exit>
	...

08016ed4 <malloc>:
 8016ed4:	4b02      	ldr	r3, [pc, #8]	@ (8016ee0 <malloc+0xc>)
 8016ed6:	4601      	mov	r1, r0
 8016ed8:	6818      	ldr	r0, [r3, #0]
 8016eda:	f000 b82d 	b.w	8016f38 <_malloc_r>
 8016ede:	bf00      	nop
 8016ee0:	20000110 	.word	0x20000110

08016ee4 <free>:
 8016ee4:	4b02      	ldr	r3, [pc, #8]	@ (8016ef0 <free+0xc>)
 8016ee6:	4601      	mov	r1, r0
 8016ee8:	6818      	ldr	r0, [r3, #0]
 8016eea:	f001 be05 	b.w	8018af8 <_free_r>
 8016eee:	bf00      	nop
 8016ef0:	20000110 	.word	0x20000110

08016ef4 <sbrk_aligned>:
 8016ef4:	b570      	push	{r4, r5, r6, lr}
 8016ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8016f34 <sbrk_aligned+0x40>)
 8016ef8:	460c      	mov	r4, r1
 8016efa:	6831      	ldr	r1, [r6, #0]
 8016efc:	4605      	mov	r5, r0
 8016efe:	b911      	cbnz	r1, 8016f06 <sbrk_aligned+0x12>
 8016f00:	f000 ff4e 	bl	8017da0 <_sbrk_r>
 8016f04:	6030      	str	r0, [r6, #0]
 8016f06:	4621      	mov	r1, r4
 8016f08:	4628      	mov	r0, r5
 8016f0a:	f000 ff49 	bl	8017da0 <_sbrk_r>
 8016f0e:	1c43      	adds	r3, r0, #1
 8016f10:	d103      	bne.n	8016f1a <sbrk_aligned+0x26>
 8016f12:	f04f 34ff 	mov.w	r4, #4294967295
 8016f16:	4620      	mov	r0, r4
 8016f18:	bd70      	pop	{r4, r5, r6, pc}
 8016f1a:	1cc4      	adds	r4, r0, #3
 8016f1c:	f024 0403 	bic.w	r4, r4, #3
 8016f20:	42a0      	cmp	r0, r4
 8016f22:	d0f8      	beq.n	8016f16 <sbrk_aligned+0x22>
 8016f24:	1a21      	subs	r1, r4, r0
 8016f26:	4628      	mov	r0, r5
 8016f28:	f000 ff3a 	bl	8017da0 <_sbrk_r>
 8016f2c:	3001      	adds	r0, #1
 8016f2e:	d1f2      	bne.n	8016f16 <sbrk_aligned+0x22>
 8016f30:	e7ef      	b.n	8016f12 <sbrk_aligned+0x1e>
 8016f32:	bf00      	nop
 8016f34:	200061c8 	.word	0x200061c8

08016f38 <_malloc_r>:
 8016f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f3c:	1ccd      	adds	r5, r1, #3
 8016f3e:	f025 0503 	bic.w	r5, r5, #3
 8016f42:	3508      	adds	r5, #8
 8016f44:	2d0c      	cmp	r5, #12
 8016f46:	bf38      	it	cc
 8016f48:	250c      	movcc	r5, #12
 8016f4a:	2d00      	cmp	r5, #0
 8016f4c:	4606      	mov	r6, r0
 8016f4e:	db01      	blt.n	8016f54 <_malloc_r+0x1c>
 8016f50:	42a9      	cmp	r1, r5
 8016f52:	d904      	bls.n	8016f5e <_malloc_r+0x26>
 8016f54:	230c      	movs	r3, #12
 8016f56:	6033      	str	r3, [r6, #0]
 8016f58:	2000      	movs	r0, #0
 8016f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017034 <_malloc_r+0xfc>
 8016f62:	f000 f869 	bl	8017038 <__malloc_lock>
 8016f66:	f8d8 3000 	ldr.w	r3, [r8]
 8016f6a:	461c      	mov	r4, r3
 8016f6c:	bb44      	cbnz	r4, 8016fc0 <_malloc_r+0x88>
 8016f6e:	4629      	mov	r1, r5
 8016f70:	4630      	mov	r0, r6
 8016f72:	f7ff ffbf 	bl	8016ef4 <sbrk_aligned>
 8016f76:	1c43      	adds	r3, r0, #1
 8016f78:	4604      	mov	r4, r0
 8016f7a:	d158      	bne.n	801702e <_malloc_r+0xf6>
 8016f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8016f80:	4627      	mov	r7, r4
 8016f82:	2f00      	cmp	r7, #0
 8016f84:	d143      	bne.n	801700e <_malloc_r+0xd6>
 8016f86:	2c00      	cmp	r4, #0
 8016f88:	d04b      	beq.n	8017022 <_malloc_r+0xea>
 8016f8a:	6823      	ldr	r3, [r4, #0]
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	4630      	mov	r0, r6
 8016f90:	eb04 0903 	add.w	r9, r4, r3
 8016f94:	f000 ff04 	bl	8017da0 <_sbrk_r>
 8016f98:	4581      	cmp	r9, r0
 8016f9a:	d142      	bne.n	8017022 <_malloc_r+0xea>
 8016f9c:	6821      	ldr	r1, [r4, #0]
 8016f9e:	1a6d      	subs	r5, r5, r1
 8016fa0:	4629      	mov	r1, r5
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	f7ff ffa6 	bl	8016ef4 <sbrk_aligned>
 8016fa8:	3001      	adds	r0, #1
 8016faa:	d03a      	beq.n	8017022 <_malloc_r+0xea>
 8016fac:	6823      	ldr	r3, [r4, #0]
 8016fae:	442b      	add	r3, r5
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8016fb6:	685a      	ldr	r2, [r3, #4]
 8016fb8:	bb62      	cbnz	r2, 8017014 <_malloc_r+0xdc>
 8016fba:	f8c8 7000 	str.w	r7, [r8]
 8016fbe:	e00f      	b.n	8016fe0 <_malloc_r+0xa8>
 8016fc0:	6822      	ldr	r2, [r4, #0]
 8016fc2:	1b52      	subs	r2, r2, r5
 8016fc4:	d420      	bmi.n	8017008 <_malloc_r+0xd0>
 8016fc6:	2a0b      	cmp	r2, #11
 8016fc8:	d917      	bls.n	8016ffa <_malloc_r+0xc2>
 8016fca:	1961      	adds	r1, r4, r5
 8016fcc:	42a3      	cmp	r3, r4
 8016fce:	6025      	str	r5, [r4, #0]
 8016fd0:	bf18      	it	ne
 8016fd2:	6059      	strne	r1, [r3, #4]
 8016fd4:	6863      	ldr	r3, [r4, #4]
 8016fd6:	bf08      	it	eq
 8016fd8:	f8c8 1000 	streq.w	r1, [r8]
 8016fdc:	5162      	str	r2, [r4, r5]
 8016fde:	604b      	str	r3, [r1, #4]
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f000 f82f 	bl	8017044 <__malloc_unlock>
 8016fe6:	f104 000b 	add.w	r0, r4, #11
 8016fea:	1d23      	adds	r3, r4, #4
 8016fec:	f020 0007 	bic.w	r0, r0, #7
 8016ff0:	1ac2      	subs	r2, r0, r3
 8016ff2:	bf1c      	itt	ne
 8016ff4:	1a1b      	subne	r3, r3, r0
 8016ff6:	50a3      	strne	r3, [r4, r2]
 8016ff8:	e7af      	b.n	8016f5a <_malloc_r+0x22>
 8016ffa:	6862      	ldr	r2, [r4, #4]
 8016ffc:	42a3      	cmp	r3, r4
 8016ffe:	bf0c      	ite	eq
 8017000:	f8c8 2000 	streq.w	r2, [r8]
 8017004:	605a      	strne	r2, [r3, #4]
 8017006:	e7eb      	b.n	8016fe0 <_malloc_r+0xa8>
 8017008:	4623      	mov	r3, r4
 801700a:	6864      	ldr	r4, [r4, #4]
 801700c:	e7ae      	b.n	8016f6c <_malloc_r+0x34>
 801700e:	463c      	mov	r4, r7
 8017010:	687f      	ldr	r7, [r7, #4]
 8017012:	e7b6      	b.n	8016f82 <_malloc_r+0x4a>
 8017014:	461a      	mov	r2, r3
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	42a3      	cmp	r3, r4
 801701a:	d1fb      	bne.n	8017014 <_malloc_r+0xdc>
 801701c:	2300      	movs	r3, #0
 801701e:	6053      	str	r3, [r2, #4]
 8017020:	e7de      	b.n	8016fe0 <_malloc_r+0xa8>
 8017022:	230c      	movs	r3, #12
 8017024:	6033      	str	r3, [r6, #0]
 8017026:	4630      	mov	r0, r6
 8017028:	f000 f80c 	bl	8017044 <__malloc_unlock>
 801702c:	e794      	b.n	8016f58 <_malloc_r+0x20>
 801702e:	6005      	str	r5, [r0, #0]
 8017030:	e7d6      	b.n	8016fe0 <_malloc_r+0xa8>
 8017032:	bf00      	nop
 8017034:	200061cc 	.word	0x200061cc

08017038 <__malloc_lock>:
 8017038:	4801      	ldr	r0, [pc, #4]	@ (8017040 <__malloc_lock+0x8>)
 801703a:	f000 befe 	b.w	8017e3a <__retarget_lock_acquire_recursive>
 801703e:	bf00      	nop
 8017040:	20006310 	.word	0x20006310

08017044 <__malloc_unlock>:
 8017044:	4801      	ldr	r0, [pc, #4]	@ (801704c <__malloc_unlock+0x8>)
 8017046:	f000 bef9 	b.w	8017e3c <__retarget_lock_release_recursive>
 801704a:	bf00      	nop
 801704c:	20006310 	.word	0x20006310

08017050 <realloc>:
 8017050:	4b02      	ldr	r3, [pc, #8]	@ (801705c <realloc+0xc>)
 8017052:	460a      	mov	r2, r1
 8017054:	4601      	mov	r1, r0
 8017056:	6818      	ldr	r0, [r3, #0]
 8017058:	f000 b802 	b.w	8017060 <_realloc_r>
 801705c:	20000110 	.word	0x20000110

08017060 <_realloc_r>:
 8017060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017064:	4680      	mov	r8, r0
 8017066:	4615      	mov	r5, r2
 8017068:	460c      	mov	r4, r1
 801706a:	b921      	cbnz	r1, 8017076 <_realloc_r+0x16>
 801706c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017070:	4611      	mov	r1, r2
 8017072:	f7ff bf61 	b.w	8016f38 <_malloc_r>
 8017076:	b92a      	cbnz	r2, 8017084 <_realloc_r+0x24>
 8017078:	f001 fd3e 	bl	8018af8 <_free_r>
 801707c:	2400      	movs	r4, #0
 801707e:	4620      	mov	r0, r4
 8017080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017084:	f002 f904 	bl	8019290 <_malloc_usable_size_r>
 8017088:	4285      	cmp	r5, r0
 801708a:	4606      	mov	r6, r0
 801708c:	d802      	bhi.n	8017094 <_realloc_r+0x34>
 801708e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017092:	d8f4      	bhi.n	801707e <_realloc_r+0x1e>
 8017094:	4629      	mov	r1, r5
 8017096:	4640      	mov	r0, r8
 8017098:	f7ff ff4e 	bl	8016f38 <_malloc_r>
 801709c:	4607      	mov	r7, r0
 801709e:	2800      	cmp	r0, #0
 80170a0:	d0ec      	beq.n	801707c <_realloc_r+0x1c>
 80170a2:	42b5      	cmp	r5, r6
 80170a4:	462a      	mov	r2, r5
 80170a6:	4621      	mov	r1, r4
 80170a8:	bf28      	it	cs
 80170aa:	4632      	movcs	r2, r6
 80170ac:	f000 fec7 	bl	8017e3e <memcpy>
 80170b0:	4621      	mov	r1, r4
 80170b2:	4640      	mov	r0, r8
 80170b4:	f001 fd20 	bl	8018af8 <_free_r>
 80170b8:	463c      	mov	r4, r7
 80170ba:	e7e0      	b.n	801707e <_realloc_r+0x1e>

080170bc <__cvt>:
 80170bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170c0:	ec57 6b10 	vmov	r6, r7, d0
 80170c4:	2f00      	cmp	r7, #0
 80170c6:	460c      	mov	r4, r1
 80170c8:	4619      	mov	r1, r3
 80170ca:	463b      	mov	r3, r7
 80170cc:	bfbb      	ittet	lt
 80170ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80170d2:	461f      	movlt	r7, r3
 80170d4:	2300      	movge	r3, #0
 80170d6:	232d      	movlt	r3, #45	@ 0x2d
 80170d8:	700b      	strb	r3, [r1, #0]
 80170da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80170dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80170e0:	4691      	mov	r9, r2
 80170e2:	f023 0820 	bic.w	r8, r3, #32
 80170e6:	bfbc      	itt	lt
 80170e8:	4632      	movlt	r2, r6
 80170ea:	4616      	movlt	r6, r2
 80170ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80170f0:	d005      	beq.n	80170fe <__cvt+0x42>
 80170f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80170f6:	d100      	bne.n	80170fa <__cvt+0x3e>
 80170f8:	3401      	adds	r4, #1
 80170fa:	2102      	movs	r1, #2
 80170fc:	e000      	b.n	8017100 <__cvt+0x44>
 80170fe:	2103      	movs	r1, #3
 8017100:	ab03      	add	r3, sp, #12
 8017102:	9301      	str	r3, [sp, #4]
 8017104:	ab02      	add	r3, sp, #8
 8017106:	9300      	str	r3, [sp, #0]
 8017108:	ec47 6b10 	vmov	d0, r6, r7
 801710c:	4653      	mov	r3, sl
 801710e:	4622      	mov	r2, r4
 8017110:	f000 ff2e 	bl	8017f70 <_dtoa_r>
 8017114:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017118:	4605      	mov	r5, r0
 801711a:	d119      	bne.n	8017150 <__cvt+0x94>
 801711c:	f019 0f01 	tst.w	r9, #1
 8017120:	d00e      	beq.n	8017140 <__cvt+0x84>
 8017122:	eb00 0904 	add.w	r9, r0, r4
 8017126:	2200      	movs	r2, #0
 8017128:	2300      	movs	r3, #0
 801712a:	4630      	mov	r0, r6
 801712c:	4639      	mov	r1, r7
 801712e:	f7e9 fcd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8017132:	b108      	cbz	r0, 8017138 <__cvt+0x7c>
 8017134:	f8cd 900c 	str.w	r9, [sp, #12]
 8017138:	2230      	movs	r2, #48	@ 0x30
 801713a:	9b03      	ldr	r3, [sp, #12]
 801713c:	454b      	cmp	r3, r9
 801713e:	d31e      	bcc.n	801717e <__cvt+0xc2>
 8017140:	9b03      	ldr	r3, [sp, #12]
 8017142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017144:	1b5b      	subs	r3, r3, r5
 8017146:	4628      	mov	r0, r5
 8017148:	6013      	str	r3, [r2, #0]
 801714a:	b004      	add	sp, #16
 801714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017154:	eb00 0904 	add.w	r9, r0, r4
 8017158:	d1e5      	bne.n	8017126 <__cvt+0x6a>
 801715a:	7803      	ldrb	r3, [r0, #0]
 801715c:	2b30      	cmp	r3, #48	@ 0x30
 801715e:	d10a      	bne.n	8017176 <__cvt+0xba>
 8017160:	2200      	movs	r2, #0
 8017162:	2300      	movs	r3, #0
 8017164:	4630      	mov	r0, r6
 8017166:	4639      	mov	r1, r7
 8017168:	f7e9 fcb6 	bl	8000ad8 <__aeabi_dcmpeq>
 801716c:	b918      	cbnz	r0, 8017176 <__cvt+0xba>
 801716e:	f1c4 0401 	rsb	r4, r4, #1
 8017172:	f8ca 4000 	str.w	r4, [sl]
 8017176:	f8da 3000 	ldr.w	r3, [sl]
 801717a:	4499      	add	r9, r3
 801717c:	e7d3      	b.n	8017126 <__cvt+0x6a>
 801717e:	1c59      	adds	r1, r3, #1
 8017180:	9103      	str	r1, [sp, #12]
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	e7d9      	b.n	801713a <__cvt+0x7e>

08017186 <__exponent>:
 8017186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017188:	2900      	cmp	r1, #0
 801718a:	bfba      	itte	lt
 801718c:	4249      	neglt	r1, r1
 801718e:	232d      	movlt	r3, #45	@ 0x2d
 8017190:	232b      	movge	r3, #43	@ 0x2b
 8017192:	2909      	cmp	r1, #9
 8017194:	7002      	strb	r2, [r0, #0]
 8017196:	7043      	strb	r3, [r0, #1]
 8017198:	dd29      	ble.n	80171ee <__exponent+0x68>
 801719a:	f10d 0307 	add.w	r3, sp, #7
 801719e:	461d      	mov	r5, r3
 80171a0:	270a      	movs	r7, #10
 80171a2:	461a      	mov	r2, r3
 80171a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80171a8:	fb07 1416 	mls	r4, r7, r6, r1
 80171ac:	3430      	adds	r4, #48	@ 0x30
 80171ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80171b2:	460c      	mov	r4, r1
 80171b4:	2c63      	cmp	r4, #99	@ 0x63
 80171b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80171ba:	4631      	mov	r1, r6
 80171bc:	dcf1      	bgt.n	80171a2 <__exponent+0x1c>
 80171be:	3130      	adds	r1, #48	@ 0x30
 80171c0:	1e94      	subs	r4, r2, #2
 80171c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80171c6:	1c41      	adds	r1, r0, #1
 80171c8:	4623      	mov	r3, r4
 80171ca:	42ab      	cmp	r3, r5
 80171cc:	d30a      	bcc.n	80171e4 <__exponent+0x5e>
 80171ce:	f10d 0309 	add.w	r3, sp, #9
 80171d2:	1a9b      	subs	r3, r3, r2
 80171d4:	42ac      	cmp	r4, r5
 80171d6:	bf88      	it	hi
 80171d8:	2300      	movhi	r3, #0
 80171da:	3302      	adds	r3, #2
 80171dc:	4403      	add	r3, r0
 80171de:	1a18      	subs	r0, r3, r0
 80171e0:	b003      	add	sp, #12
 80171e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80171e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80171ec:	e7ed      	b.n	80171ca <__exponent+0x44>
 80171ee:	2330      	movs	r3, #48	@ 0x30
 80171f0:	3130      	adds	r1, #48	@ 0x30
 80171f2:	7083      	strb	r3, [r0, #2]
 80171f4:	70c1      	strb	r1, [r0, #3]
 80171f6:	1d03      	adds	r3, r0, #4
 80171f8:	e7f1      	b.n	80171de <__exponent+0x58>
	...

080171fc <_printf_float>:
 80171fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017200:	b08d      	sub	sp, #52	@ 0x34
 8017202:	460c      	mov	r4, r1
 8017204:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017208:	4616      	mov	r6, r2
 801720a:	461f      	mov	r7, r3
 801720c:	4605      	mov	r5, r0
 801720e:	f000 fd25 	bl	8017c5c <_localeconv_r>
 8017212:	6803      	ldr	r3, [r0, #0]
 8017214:	9304      	str	r3, [sp, #16]
 8017216:	4618      	mov	r0, r3
 8017218:	f7e9 f832 	bl	8000280 <strlen>
 801721c:	2300      	movs	r3, #0
 801721e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017220:	f8d8 3000 	ldr.w	r3, [r8]
 8017224:	9005      	str	r0, [sp, #20]
 8017226:	3307      	adds	r3, #7
 8017228:	f023 0307 	bic.w	r3, r3, #7
 801722c:	f103 0208 	add.w	r2, r3, #8
 8017230:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017234:	f8d4 b000 	ldr.w	fp, [r4]
 8017238:	f8c8 2000 	str.w	r2, [r8]
 801723c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017240:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017244:	9307      	str	r3, [sp, #28]
 8017246:	f8cd 8018 	str.w	r8, [sp, #24]
 801724a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801724e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017252:	4b9c      	ldr	r3, [pc, #624]	@ (80174c4 <_printf_float+0x2c8>)
 8017254:	f04f 32ff 	mov.w	r2, #4294967295
 8017258:	f7e9 fc70 	bl	8000b3c <__aeabi_dcmpun>
 801725c:	bb70      	cbnz	r0, 80172bc <_printf_float+0xc0>
 801725e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017262:	4b98      	ldr	r3, [pc, #608]	@ (80174c4 <_printf_float+0x2c8>)
 8017264:	f04f 32ff 	mov.w	r2, #4294967295
 8017268:	f7e9 fc4a 	bl	8000b00 <__aeabi_dcmple>
 801726c:	bb30      	cbnz	r0, 80172bc <_printf_float+0xc0>
 801726e:	2200      	movs	r2, #0
 8017270:	2300      	movs	r3, #0
 8017272:	4640      	mov	r0, r8
 8017274:	4649      	mov	r1, r9
 8017276:	f7e9 fc39 	bl	8000aec <__aeabi_dcmplt>
 801727a:	b110      	cbz	r0, 8017282 <_printf_float+0x86>
 801727c:	232d      	movs	r3, #45	@ 0x2d
 801727e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017282:	4a91      	ldr	r2, [pc, #580]	@ (80174c8 <_printf_float+0x2cc>)
 8017284:	4b91      	ldr	r3, [pc, #580]	@ (80174cc <_printf_float+0x2d0>)
 8017286:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801728a:	bf94      	ite	ls
 801728c:	4690      	movls	r8, r2
 801728e:	4698      	movhi	r8, r3
 8017290:	2303      	movs	r3, #3
 8017292:	6123      	str	r3, [r4, #16]
 8017294:	f02b 0304 	bic.w	r3, fp, #4
 8017298:	6023      	str	r3, [r4, #0]
 801729a:	f04f 0900 	mov.w	r9, #0
 801729e:	9700      	str	r7, [sp, #0]
 80172a0:	4633      	mov	r3, r6
 80172a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80172a4:	4621      	mov	r1, r4
 80172a6:	4628      	mov	r0, r5
 80172a8:	f000 f9d2 	bl	8017650 <_printf_common>
 80172ac:	3001      	adds	r0, #1
 80172ae:	f040 808d 	bne.w	80173cc <_printf_float+0x1d0>
 80172b2:	f04f 30ff 	mov.w	r0, #4294967295
 80172b6:	b00d      	add	sp, #52	@ 0x34
 80172b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172bc:	4642      	mov	r2, r8
 80172be:	464b      	mov	r3, r9
 80172c0:	4640      	mov	r0, r8
 80172c2:	4649      	mov	r1, r9
 80172c4:	f7e9 fc3a 	bl	8000b3c <__aeabi_dcmpun>
 80172c8:	b140      	cbz	r0, 80172dc <_printf_float+0xe0>
 80172ca:	464b      	mov	r3, r9
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	bfbc      	itt	lt
 80172d0:	232d      	movlt	r3, #45	@ 0x2d
 80172d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80172d6:	4a7e      	ldr	r2, [pc, #504]	@ (80174d0 <_printf_float+0x2d4>)
 80172d8:	4b7e      	ldr	r3, [pc, #504]	@ (80174d4 <_printf_float+0x2d8>)
 80172da:	e7d4      	b.n	8017286 <_printf_float+0x8a>
 80172dc:	6863      	ldr	r3, [r4, #4]
 80172de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80172e2:	9206      	str	r2, [sp, #24]
 80172e4:	1c5a      	adds	r2, r3, #1
 80172e6:	d13b      	bne.n	8017360 <_printf_float+0x164>
 80172e8:	2306      	movs	r3, #6
 80172ea:	6063      	str	r3, [r4, #4]
 80172ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80172f0:	2300      	movs	r3, #0
 80172f2:	6022      	str	r2, [r4, #0]
 80172f4:	9303      	str	r3, [sp, #12]
 80172f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80172f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80172fc:	ab09      	add	r3, sp, #36	@ 0x24
 80172fe:	9300      	str	r3, [sp, #0]
 8017300:	6861      	ldr	r1, [r4, #4]
 8017302:	ec49 8b10 	vmov	d0, r8, r9
 8017306:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801730a:	4628      	mov	r0, r5
 801730c:	f7ff fed6 	bl	80170bc <__cvt>
 8017310:	9b06      	ldr	r3, [sp, #24]
 8017312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017314:	2b47      	cmp	r3, #71	@ 0x47
 8017316:	4680      	mov	r8, r0
 8017318:	d129      	bne.n	801736e <_printf_float+0x172>
 801731a:	1cc8      	adds	r0, r1, #3
 801731c:	db02      	blt.n	8017324 <_printf_float+0x128>
 801731e:	6863      	ldr	r3, [r4, #4]
 8017320:	4299      	cmp	r1, r3
 8017322:	dd41      	ble.n	80173a8 <_printf_float+0x1ac>
 8017324:	f1aa 0a02 	sub.w	sl, sl, #2
 8017328:	fa5f fa8a 	uxtb.w	sl, sl
 801732c:	3901      	subs	r1, #1
 801732e:	4652      	mov	r2, sl
 8017330:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017334:	9109      	str	r1, [sp, #36]	@ 0x24
 8017336:	f7ff ff26 	bl	8017186 <__exponent>
 801733a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801733c:	1813      	adds	r3, r2, r0
 801733e:	2a01      	cmp	r2, #1
 8017340:	4681      	mov	r9, r0
 8017342:	6123      	str	r3, [r4, #16]
 8017344:	dc02      	bgt.n	801734c <_printf_float+0x150>
 8017346:	6822      	ldr	r2, [r4, #0]
 8017348:	07d2      	lsls	r2, r2, #31
 801734a:	d501      	bpl.n	8017350 <_printf_float+0x154>
 801734c:	3301      	adds	r3, #1
 801734e:	6123      	str	r3, [r4, #16]
 8017350:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017354:	2b00      	cmp	r3, #0
 8017356:	d0a2      	beq.n	801729e <_printf_float+0xa2>
 8017358:	232d      	movs	r3, #45	@ 0x2d
 801735a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801735e:	e79e      	b.n	801729e <_printf_float+0xa2>
 8017360:	9a06      	ldr	r2, [sp, #24]
 8017362:	2a47      	cmp	r2, #71	@ 0x47
 8017364:	d1c2      	bne.n	80172ec <_printf_float+0xf0>
 8017366:	2b00      	cmp	r3, #0
 8017368:	d1c0      	bne.n	80172ec <_printf_float+0xf0>
 801736a:	2301      	movs	r3, #1
 801736c:	e7bd      	b.n	80172ea <_printf_float+0xee>
 801736e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017372:	d9db      	bls.n	801732c <_printf_float+0x130>
 8017374:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017378:	d118      	bne.n	80173ac <_printf_float+0x1b0>
 801737a:	2900      	cmp	r1, #0
 801737c:	6863      	ldr	r3, [r4, #4]
 801737e:	dd0b      	ble.n	8017398 <_printf_float+0x19c>
 8017380:	6121      	str	r1, [r4, #16]
 8017382:	b913      	cbnz	r3, 801738a <_printf_float+0x18e>
 8017384:	6822      	ldr	r2, [r4, #0]
 8017386:	07d0      	lsls	r0, r2, #31
 8017388:	d502      	bpl.n	8017390 <_printf_float+0x194>
 801738a:	3301      	adds	r3, #1
 801738c:	440b      	add	r3, r1
 801738e:	6123      	str	r3, [r4, #16]
 8017390:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017392:	f04f 0900 	mov.w	r9, #0
 8017396:	e7db      	b.n	8017350 <_printf_float+0x154>
 8017398:	b913      	cbnz	r3, 80173a0 <_printf_float+0x1a4>
 801739a:	6822      	ldr	r2, [r4, #0]
 801739c:	07d2      	lsls	r2, r2, #31
 801739e:	d501      	bpl.n	80173a4 <_printf_float+0x1a8>
 80173a0:	3302      	adds	r3, #2
 80173a2:	e7f4      	b.n	801738e <_printf_float+0x192>
 80173a4:	2301      	movs	r3, #1
 80173a6:	e7f2      	b.n	801738e <_printf_float+0x192>
 80173a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80173ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173ae:	4299      	cmp	r1, r3
 80173b0:	db05      	blt.n	80173be <_printf_float+0x1c2>
 80173b2:	6823      	ldr	r3, [r4, #0]
 80173b4:	6121      	str	r1, [r4, #16]
 80173b6:	07d8      	lsls	r0, r3, #31
 80173b8:	d5ea      	bpl.n	8017390 <_printf_float+0x194>
 80173ba:	1c4b      	adds	r3, r1, #1
 80173bc:	e7e7      	b.n	801738e <_printf_float+0x192>
 80173be:	2900      	cmp	r1, #0
 80173c0:	bfd4      	ite	le
 80173c2:	f1c1 0202 	rsble	r2, r1, #2
 80173c6:	2201      	movgt	r2, #1
 80173c8:	4413      	add	r3, r2
 80173ca:	e7e0      	b.n	801738e <_printf_float+0x192>
 80173cc:	6823      	ldr	r3, [r4, #0]
 80173ce:	055a      	lsls	r2, r3, #21
 80173d0:	d407      	bmi.n	80173e2 <_printf_float+0x1e6>
 80173d2:	6923      	ldr	r3, [r4, #16]
 80173d4:	4642      	mov	r2, r8
 80173d6:	4631      	mov	r1, r6
 80173d8:	4628      	mov	r0, r5
 80173da:	47b8      	blx	r7
 80173dc:	3001      	adds	r0, #1
 80173de:	d12b      	bne.n	8017438 <_printf_float+0x23c>
 80173e0:	e767      	b.n	80172b2 <_printf_float+0xb6>
 80173e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80173e6:	f240 80dd 	bls.w	80175a4 <_printf_float+0x3a8>
 80173ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80173ee:	2200      	movs	r2, #0
 80173f0:	2300      	movs	r3, #0
 80173f2:	f7e9 fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d033      	beq.n	8017462 <_printf_float+0x266>
 80173fa:	4a37      	ldr	r2, [pc, #220]	@ (80174d8 <_printf_float+0x2dc>)
 80173fc:	2301      	movs	r3, #1
 80173fe:	4631      	mov	r1, r6
 8017400:	4628      	mov	r0, r5
 8017402:	47b8      	blx	r7
 8017404:	3001      	adds	r0, #1
 8017406:	f43f af54 	beq.w	80172b2 <_printf_float+0xb6>
 801740a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801740e:	4543      	cmp	r3, r8
 8017410:	db02      	blt.n	8017418 <_printf_float+0x21c>
 8017412:	6823      	ldr	r3, [r4, #0]
 8017414:	07d8      	lsls	r0, r3, #31
 8017416:	d50f      	bpl.n	8017438 <_printf_float+0x23c>
 8017418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801741c:	4631      	mov	r1, r6
 801741e:	4628      	mov	r0, r5
 8017420:	47b8      	blx	r7
 8017422:	3001      	adds	r0, #1
 8017424:	f43f af45 	beq.w	80172b2 <_printf_float+0xb6>
 8017428:	f04f 0900 	mov.w	r9, #0
 801742c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017430:	f104 0a1a 	add.w	sl, r4, #26
 8017434:	45c8      	cmp	r8, r9
 8017436:	dc09      	bgt.n	801744c <_printf_float+0x250>
 8017438:	6823      	ldr	r3, [r4, #0]
 801743a:	079b      	lsls	r3, r3, #30
 801743c:	f100 8103 	bmi.w	8017646 <_printf_float+0x44a>
 8017440:	68e0      	ldr	r0, [r4, #12]
 8017442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017444:	4298      	cmp	r0, r3
 8017446:	bfb8      	it	lt
 8017448:	4618      	movlt	r0, r3
 801744a:	e734      	b.n	80172b6 <_printf_float+0xba>
 801744c:	2301      	movs	r3, #1
 801744e:	4652      	mov	r2, sl
 8017450:	4631      	mov	r1, r6
 8017452:	4628      	mov	r0, r5
 8017454:	47b8      	blx	r7
 8017456:	3001      	adds	r0, #1
 8017458:	f43f af2b 	beq.w	80172b2 <_printf_float+0xb6>
 801745c:	f109 0901 	add.w	r9, r9, #1
 8017460:	e7e8      	b.n	8017434 <_printf_float+0x238>
 8017462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017464:	2b00      	cmp	r3, #0
 8017466:	dc39      	bgt.n	80174dc <_printf_float+0x2e0>
 8017468:	4a1b      	ldr	r2, [pc, #108]	@ (80174d8 <_printf_float+0x2dc>)
 801746a:	2301      	movs	r3, #1
 801746c:	4631      	mov	r1, r6
 801746e:	4628      	mov	r0, r5
 8017470:	47b8      	blx	r7
 8017472:	3001      	adds	r0, #1
 8017474:	f43f af1d 	beq.w	80172b2 <_printf_float+0xb6>
 8017478:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801747c:	ea59 0303 	orrs.w	r3, r9, r3
 8017480:	d102      	bne.n	8017488 <_printf_float+0x28c>
 8017482:	6823      	ldr	r3, [r4, #0]
 8017484:	07d9      	lsls	r1, r3, #31
 8017486:	d5d7      	bpl.n	8017438 <_printf_float+0x23c>
 8017488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801748c:	4631      	mov	r1, r6
 801748e:	4628      	mov	r0, r5
 8017490:	47b8      	blx	r7
 8017492:	3001      	adds	r0, #1
 8017494:	f43f af0d 	beq.w	80172b2 <_printf_float+0xb6>
 8017498:	f04f 0a00 	mov.w	sl, #0
 801749c:	f104 0b1a 	add.w	fp, r4, #26
 80174a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174a2:	425b      	negs	r3, r3
 80174a4:	4553      	cmp	r3, sl
 80174a6:	dc01      	bgt.n	80174ac <_printf_float+0x2b0>
 80174a8:	464b      	mov	r3, r9
 80174aa:	e793      	b.n	80173d4 <_printf_float+0x1d8>
 80174ac:	2301      	movs	r3, #1
 80174ae:	465a      	mov	r2, fp
 80174b0:	4631      	mov	r1, r6
 80174b2:	4628      	mov	r0, r5
 80174b4:	47b8      	blx	r7
 80174b6:	3001      	adds	r0, #1
 80174b8:	f43f aefb 	beq.w	80172b2 <_printf_float+0xb6>
 80174bc:	f10a 0a01 	add.w	sl, sl, #1
 80174c0:	e7ee      	b.n	80174a0 <_printf_float+0x2a4>
 80174c2:	bf00      	nop
 80174c4:	7fefffff 	.word	0x7fefffff
 80174c8:	0801a089 	.word	0x0801a089
 80174cc:	0801a08d 	.word	0x0801a08d
 80174d0:	0801a091 	.word	0x0801a091
 80174d4:	0801a095 	.word	0x0801a095
 80174d8:	0801a099 	.word	0x0801a099
 80174dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80174de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80174e2:	4553      	cmp	r3, sl
 80174e4:	bfa8      	it	ge
 80174e6:	4653      	movge	r3, sl
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	4699      	mov	r9, r3
 80174ec:	dc36      	bgt.n	801755c <_printf_float+0x360>
 80174ee:	f04f 0b00 	mov.w	fp, #0
 80174f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80174f6:	f104 021a 	add.w	r2, r4, #26
 80174fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80174fc:	9306      	str	r3, [sp, #24]
 80174fe:	eba3 0309 	sub.w	r3, r3, r9
 8017502:	455b      	cmp	r3, fp
 8017504:	dc31      	bgt.n	801756a <_printf_float+0x36e>
 8017506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017508:	459a      	cmp	sl, r3
 801750a:	dc3a      	bgt.n	8017582 <_printf_float+0x386>
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	07da      	lsls	r2, r3, #31
 8017510:	d437      	bmi.n	8017582 <_printf_float+0x386>
 8017512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017514:	ebaa 0903 	sub.w	r9, sl, r3
 8017518:	9b06      	ldr	r3, [sp, #24]
 801751a:	ebaa 0303 	sub.w	r3, sl, r3
 801751e:	4599      	cmp	r9, r3
 8017520:	bfa8      	it	ge
 8017522:	4699      	movge	r9, r3
 8017524:	f1b9 0f00 	cmp.w	r9, #0
 8017528:	dc33      	bgt.n	8017592 <_printf_float+0x396>
 801752a:	f04f 0800 	mov.w	r8, #0
 801752e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017532:	f104 0b1a 	add.w	fp, r4, #26
 8017536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017538:	ebaa 0303 	sub.w	r3, sl, r3
 801753c:	eba3 0309 	sub.w	r3, r3, r9
 8017540:	4543      	cmp	r3, r8
 8017542:	f77f af79 	ble.w	8017438 <_printf_float+0x23c>
 8017546:	2301      	movs	r3, #1
 8017548:	465a      	mov	r2, fp
 801754a:	4631      	mov	r1, r6
 801754c:	4628      	mov	r0, r5
 801754e:	47b8      	blx	r7
 8017550:	3001      	adds	r0, #1
 8017552:	f43f aeae 	beq.w	80172b2 <_printf_float+0xb6>
 8017556:	f108 0801 	add.w	r8, r8, #1
 801755a:	e7ec      	b.n	8017536 <_printf_float+0x33a>
 801755c:	4642      	mov	r2, r8
 801755e:	4631      	mov	r1, r6
 8017560:	4628      	mov	r0, r5
 8017562:	47b8      	blx	r7
 8017564:	3001      	adds	r0, #1
 8017566:	d1c2      	bne.n	80174ee <_printf_float+0x2f2>
 8017568:	e6a3      	b.n	80172b2 <_printf_float+0xb6>
 801756a:	2301      	movs	r3, #1
 801756c:	4631      	mov	r1, r6
 801756e:	4628      	mov	r0, r5
 8017570:	9206      	str	r2, [sp, #24]
 8017572:	47b8      	blx	r7
 8017574:	3001      	adds	r0, #1
 8017576:	f43f ae9c 	beq.w	80172b2 <_printf_float+0xb6>
 801757a:	9a06      	ldr	r2, [sp, #24]
 801757c:	f10b 0b01 	add.w	fp, fp, #1
 8017580:	e7bb      	b.n	80174fa <_printf_float+0x2fe>
 8017582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017586:	4631      	mov	r1, r6
 8017588:	4628      	mov	r0, r5
 801758a:	47b8      	blx	r7
 801758c:	3001      	adds	r0, #1
 801758e:	d1c0      	bne.n	8017512 <_printf_float+0x316>
 8017590:	e68f      	b.n	80172b2 <_printf_float+0xb6>
 8017592:	9a06      	ldr	r2, [sp, #24]
 8017594:	464b      	mov	r3, r9
 8017596:	4442      	add	r2, r8
 8017598:	4631      	mov	r1, r6
 801759a:	4628      	mov	r0, r5
 801759c:	47b8      	blx	r7
 801759e:	3001      	adds	r0, #1
 80175a0:	d1c3      	bne.n	801752a <_printf_float+0x32e>
 80175a2:	e686      	b.n	80172b2 <_printf_float+0xb6>
 80175a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80175a8:	f1ba 0f01 	cmp.w	sl, #1
 80175ac:	dc01      	bgt.n	80175b2 <_printf_float+0x3b6>
 80175ae:	07db      	lsls	r3, r3, #31
 80175b0:	d536      	bpl.n	8017620 <_printf_float+0x424>
 80175b2:	2301      	movs	r3, #1
 80175b4:	4642      	mov	r2, r8
 80175b6:	4631      	mov	r1, r6
 80175b8:	4628      	mov	r0, r5
 80175ba:	47b8      	blx	r7
 80175bc:	3001      	adds	r0, #1
 80175be:	f43f ae78 	beq.w	80172b2 <_printf_float+0xb6>
 80175c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175c6:	4631      	mov	r1, r6
 80175c8:	4628      	mov	r0, r5
 80175ca:	47b8      	blx	r7
 80175cc:	3001      	adds	r0, #1
 80175ce:	f43f ae70 	beq.w	80172b2 <_printf_float+0xb6>
 80175d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80175d6:	2200      	movs	r2, #0
 80175d8:	2300      	movs	r3, #0
 80175da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175de:	f7e9 fa7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80175e2:	b9c0      	cbnz	r0, 8017616 <_printf_float+0x41a>
 80175e4:	4653      	mov	r3, sl
 80175e6:	f108 0201 	add.w	r2, r8, #1
 80175ea:	4631      	mov	r1, r6
 80175ec:	4628      	mov	r0, r5
 80175ee:	47b8      	blx	r7
 80175f0:	3001      	adds	r0, #1
 80175f2:	d10c      	bne.n	801760e <_printf_float+0x412>
 80175f4:	e65d      	b.n	80172b2 <_printf_float+0xb6>
 80175f6:	2301      	movs	r3, #1
 80175f8:	465a      	mov	r2, fp
 80175fa:	4631      	mov	r1, r6
 80175fc:	4628      	mov	r0, r5
 80175fe:	47b8      	blx	r7
 8017600:	3001      	adds	r0, #1
 8017602:	f43f ae56 	beq.w	80172b2 <_printf_float+0xb6>
 8017606:	f108 0801 	add.w	r8, r8, #1
 801760a:	45d0      	cmp	r8, sl
 801760c:	dbf3      	blt.n	80175f6 <_printf_float+0x3fa>
 801760e:	464b      	mov	r3, r9
 8017610:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017614:	e6df      	b.n	80173d6 <_printf_float+0x1da>
 8017616:	f04f 0800 	mov.w	r8, #0
 801761a:	f104 0b1a 	add.w	fp, r4, #26
 801761e:	e7f4      	b.n	801760a <_printf_float+0x40e>
 8017620:	2301      	movs	r3, #1
 8017622:	4642      	mov	r2, r8
 8017624:	e7e1      	b.n	80175ea <_printf_float+0x3ee>
 8017626:	2301      	movs	r3, #1
 8017628:	464a      	mov	r2, r9
 801762a:	4631      	mov	r1, r6
 801762c:	4628      	mov	r0, r5
 801762e:	47b8      	blx	r7
 8017630:	3001      	adds	r0, #1
 8017632:	f43f ae3e 	beq.w	80172b2 <_printf_float+0xb6>
 8017636:	f108 0801 	add.w	r8, r8, #1
 801763a:	68e3      	ldr	r3, [r4, #12]
 801763c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801763e:	1a5b      	subs	r3, r3, r1
 8017640:	4543      	cmp	r3, r8
 8017642:	dcf0      	bgt.n	8017626 <_printf_float+0x42a>
 8017644:	e6fc      	b.n	8017440 <_printf_float+0x244>
 8017646:	f04f 0800 	mov.w	r8, #0
 801764a:	f104 0919 	add.w	r9, r4, #25
 801764e:	e7f4      	b.n	801763a <_printf_float+0x43e>

08017650 <_printf_common>:
 8017650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017654:	4616      	mov	r6, r2
 8017656:	4698      	mov	r8, r3
 8017658:	688a      	ldr	r2, [r1, #8]
 801765a:	690b      	ldr	r3, [r1, #16]
 801765c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017660:	4293      	cmp	r3, r2
 8017662:	bfb8      	it	lt
 8017664:	4613      	movlt	r3, r2
 8017666:	6033      	str	r3, [r6, #0]
 8017668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801766c:	4607      	mov	r7, r0
 801766e:	460c      	mov	r4, r1
 8017670:	b10a      	cbz	r2, 8017676 <_printf_common+0x26>
 8017672:	3301      	adds	r3, #1
 8017674:	6033      	str	r3, [r6, #0]
 8017676:	6823      	ldr	r3, [r4, #0]
 8017678:	0699      	lsls	r1, r3, #26
 801767a:	bf42      	ittt	mi
 801767c:	6833      	ldrmi	r3, [r6, #0]
 801767e:	3302      	addmi	r3, #2
 8017680:	6033      	strmi	r3, [r6, #0]
 8017682:	6825      	ldr	r5, [r4, #0]
 8017684:	f015 0506 	ands.w	r5, r5, #6
 8017688:	d106      	bne.n	8017698 <_printf_common+0x48>
 801768a:	f104 0a19 	add.w	sl, r4, #25
 801768e:	68e3      	ldr	r3, [r4, #12]
 8017690:	6832      	ldr	r2, [r6, #0]
 8017692:	1a9b      	subs	r3, r3, r2
 8017694:	42ab      	cmp	r3, r5
 8017696:	dc26      	bgt.n	80176e6 <_printf_common+0x96>
 8017698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801769c:	6822      	ldr	r2, [r4, #0]
 801769e:	3b00      	subs	r3, #0
 80176a0:	bf18      	it	ne
 80176a2:	2301      	movne	r3, #1
 80176a4:	0692      	lsls	r2, r2, #26
 80176a6:	d42b      	bmi.n	8017700 <_printf_common+0xb0>
 80176a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176ac:	4641      	mov	r1, r8
 80176ae:	4638      	mov	r0, r7
 80176b0:	47c8      	blx	r9
 80176b2:	3001      	adds	r0, #1
 80176b4:	d01e      	beq.n	80176f4 <_printf_common+0xa4>
 80176b6:	6823      	ldr	r3, [r4, #0]
 80176b8:	6922      	ldr	r2, [r4, #16]
 80176ba:	f003 0306 	and.w	r3, r3, #6
 80176be:	2b04      	cmp	r3, #4
 80176c0:	bf02      	ittt	eq
 80176c2:	68e5      	ldreq	r5, [r4, #12]
 80176c4:	6833      	ldreq	r3, [r6, #0]
 80176c6:	1aed      	subeq	r5, r5, r3
 80176c8:	68a3      	ldr	r3, [r4, #8]
 80176ca:	bf0c      	ite	eq
 80176cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176d0:	2500      	movne	r5, #0
 80176d2:	4293      	cmp	r3, r2
 80176d4:	bfc4      	itt	gt
 80176d6:	1a9b      	subgt	r3, r3, r2
 80176d8:	18ed      	addgt	r5, r5, r3
 80176da:	2600      	movs	r6, #0
 80176dc:	341a      	adds	r4, #26
 80176de:	42b5      	cmp	r5, r6
 80176e0:	d11a      	bne.n	8017718 <_printf_common+0xc8>
 80176e2:	2000      	movs	r0, #0
 80176e4:	e008      	b.n	80176f8 <_printf_common+0xa8>
 80176e6:	2301      	movs	r3, #1
 80176e8:	4652      	mov	r2, sl
 80176ea:	4641      	mov	r1, r8
 80176ec:	4638      	mov	r0, r7
 80176ee:	47c8      	blx	r9
 80176f0:	3001      	adds	r0, #1
 80176f2:	d103      	bne.n	80176fc <_printf_common+0xac>
 80176f4:	f04f 30ff 	mov.w	r0, #4294967295
 80176f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fc:	3501      	adds	r5, #1
 80176fe:	e7c6      	b.n	801768e <_printf_common+0x3e>
 8017700:	18e1      	adds	r1, r4, r3
 8017702:	1c5a      	adds	r2, r3, #1
 8017704:	2030      	movs	r0, #48	@ 0x30
 8017706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801770a:	4422      	add	r2, r4
 801770c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017714:	3302      	adds	r3, #2
 8017716:	e7c7      	b.n	80176a8 <_printf_common+0x58>
 8017718:	2301      	movs	r3, #1
 801771a:	4622      	mov	r2, r4
 801771c:	4641      	mov	r1, r8
 801771e:	4638      	mov	r0, r7
 8017720:	47c8      	blx	r9
 8017722:	3001      	adds	r0, #1
 8017724:	d0e6      	beq.n	80176f4 <_printf_common+0xa4>
 8017726:	3601      	adds	r6, #1
 8017728:	e7d9      	b.n	80176de <_printf_common+0x8e>
	...

0801772c <_printf_i>:
 801772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017730:	7e0f      	ldrb	r7, [r1, #24]
 8017732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017734:	2f78      	cmp	r7, #120	@ 0x78
 8017736:	4691      	mov	r9, r2
 8017738:	4680      	mov	r8, r0
 801773a:	460c      	mov	r4, r1
 801773c:	469a      	mov	sl, r3
 801773e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017742:	d807      	bhi.n	8017754 <_printf_i+0x28>
 8017744:	2f62      	cmp	r7, #98	@ 0x62
 8017746:	d80a      	bhi.n	801775e <_printf_i+0x32>
 8017748:	2f00      	cmp	r7, #0
 801774a:	f000 80d2 	beq.w	80178f2 <_printf_i+0x1c6>
 801774e:	2f58      	cmp	r7, #88	@ 0x58
 8017750:	f000 80b9 	beq.w	80178c6 <_printf_i+0x19a>
 8017754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801775c:	e03a      	b.n	80177d4 <_printf_i+0xa8>
 801775e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017762:	2b15      	cmp	r3, #21
 8017764:	d8f6      	bhi.n	8017754 <_printf_i+0x28>
 8017766:	a101      	add	r1, pc, #4	@ (adr r1, 801776c <_printf_i+0x40>)
 8017768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801776c:	080177c5 	.word	0x080177c5
 8017770:	080177d9 	.word	0x080177d9
 8017774:	08017755 	.word	0x08017755
 8017778:	08017755 	.word	0x08017755
 801777c:	08017755 	.word	0x08017755
 8017780:	08017755 	.word	0x08017755
 8017784:	080177d9 	.word	0x080177d9
 8017788:	08017755 	.word	0x08017755
 801778c:	08017755 	.word	0x08017755
 8017790:	08017755 	.word	0x08017755
 8017794:	08017755 	.word	0x08017755
 8017798:	080178d9 	.word	0x080178d9
 801779c:	08017803 	.word	0x08017803
 80177a0:	08017893 	.word	0x08017893
 80177a4:	08017755 	.word	0x08017755
 80177a8:	08017755 	.word	0x08017755
 80177ac:	080178fb 	.word	0x080178fb
 80177b0:	08017755 	.word	0x08017755
 80177b4:	08017803 	.word	0x08017803
 80177b8:	08017755 	.word	0x08017755
 80177bc:	08017755 	.word	0x08017755
 80177c0:	0801789b 	.word	0x0801789b
 80177c4:	6833      	ldr	r3, [r6, #0]
 80177c6:	1d1a      	adds	r2, r3, #4
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	6032      	str	r2, [r6, #0]
 80177cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80177d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80177d4:	2301      	movs	r3, #1
 80177d6:	e09d      	b.n	8017914 <_printf_i+0x1e8>
 80177d8:	6833      	ldr	r3, [r6, #0]
 80177da:	6820      	ldr	r0, [r4, #0]
 80177dc:	1d19      	adds	r1, r3, #4
 80177de:	6031      	str	r1, [r6, #0]
 80177e0:	0606      	lsls	r6, r0, #24
 80177e2:	d501      	bpl.n	80177e8 <_printf_i+0xbc>
 80177e4:	681d      	ldr	r5, [r3, #0]
 80177e6:	e003      	b.n	80177f0 <_printf_i+0xc4>
 80177e8:	0645      	lsls	r5, r0, #25
 80177ea:	d5fb      	bpl.n	80177e4 <_printf_i+0xb8>
 80177ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80177f0:	2d00      	cmp	r5, #0
 80177f2:	da03      	bge.n	80177fc <_printf_i+0xd0>
 80177f4:	232d      	movs	r3, #45	@ 0x2d
 80177f6:	426d      	negs	r5, r5
 80177f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177fc:	4859      	ldr	r0, [pc, #356]	@ (8017964 <_printf_i+0x238>)
 80177fe:	230a      	movs	r3, #10
 8017800:	e011      	b.n	8017826 <_printf_i+0xfa>
 8017802:	6821      	ldr	r1, [r4, #0]
 8017804:	6833      	ldr	r3, [r6, #0]
 8017806:	0608      	lsls	r0, r1, #24
 8017808:	f853 5b04 	ldr.w	r5, [r3], #4
 801780c:	d402      	bmi.n	8017814 <_printf_i+0xe8>
 801780e:	0649      	lsls	r1, r1, #25
 8017810:	bf48      	it	mi
 8017812:	b2ad      	uxthmi	r5, r5
 8017814:	2f6f      	cmp	r7, #111	@ 0x6f
 8017816:	4853      	ldr	r0, [pc, #332]	@ (8017964 <_printf_i+0x238>)
 8017818:	6033      	str	r3, [r6, #0]
 801781a:	bf14      	ite	ne
 801781c:	230a      	movne	r3, #10
 801781e:	2308      	moveq	r3, #8
 8017820:	2100      	movs	r1, #0
 8017822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017826:	6866      	ldr	r6, [r4, #4]
 8017828:	60a6      	str	r6, [r4, #8]
 801782a:	2e00      	cmp	r6, #0
 801782c:	bfa2      	ittt	ge
 801782e:	6821      	ldrge	r1, [r4, #0]
 8017830:	f021 0104 	bicge.w	r1, r1, #4
 8017834:	6021      	strge	r1, [r4, #0]
 8017836:	b90d      	cbnz	r5, 801783c <_printf_i+0x110>
 8017838:	2e00      	cmp	r6, #0
 801783a:	d04b      	beq.n	80178d4 <_printf_i+0x1a8>
 801783c:	4616      	mov	r6, r2
 801783e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017842:	fb03 5711 	mls	r7, r3, r1, r5
 8017846:	5dc7      	ldrb	r7, [r0, r7]
 8017848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801784c:	462f      	mov	r7, r5
 801784e:	42bb      	cmp	r3, r7
 8017850:	460d      	mov	r5, r1
 8017852:	d9f4      	bls.n	801783e <_printf_i+0x112>
 8017854:	2b08      	cmp	r3, #8
 8017856:	d10b      	bne.n	8017870 <_printf_i+0x144>
 8017858:	6823      	ldr	r3, [r4, #0]
 801785a:	07df      	lsls	r7, r3, #31
 801785c:	d508      	bpl.n	8017870 <_printf_i+0x144>
 801785e:	6923      	ldr	r3, [r4, #16]
 8017860:	6861      	ldr	r1, [r4, #4]
 8017862:	4299      	cmp	r1, r3
 8017864:	bfde      	ittt	le
 8017866:	2330      	movle	r3, #48	@ 0x30
 8017868:	f806 3c01 	strble.w	r3, [r6, #-1]
 801786c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017870:	1b92      	subs	r2, r2, r6
 8017872:	6122      	str	r2, [r4, #16]
 8017874:	f8cd a000 	str.w	sl, [sp]
 8017878:	464b      	mov	r3, r9
 801787a:	aa03      	add	r2, sp, #12
 801787c:	4621      	mov	r1, r4
 801787e:	4640      	mov	r0, r8
 8017880:	f7ff fee6 	bl	8017650 <_printf_common>
 8017884:	3001      	adds	r0, #1
 8017886:	d14a      	bne.n	801791e <_printf_i+0x1f2>
 8017888:	f04f 30ff 	mov.w	r0, #4294967295
 801788c:	b004      	add	sp, #16
 801788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	f043 0320 	orr.w	r3, r3, #32
 8017898:	6023      	str	r3, [r4, #0]
 801789a:	4833      	ldr	r0, [pc, #204]	@ (8017968 <_printf_i+0x23c>)
 801789c:	2778      	movs	r7, #120	@ 0x78
 801789e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	6831      	ldr	r1, [r6, #0]
 80178a6:	061f      	lsls	r7, r3, #24
 80178a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80178ac:	d402      	bmi.n	80178b4 <_printf_i+0x188>
 80178ae:	065f      	lsls	r7, r3, #25
 80178b0:	bf48      	it	mi
 80178b2:	b2ad      	uxthmi	r5, r5
 80178b4:	6031      	str	r1, [r6, #0]
 80178b6:	07d9      	lsls	r1, r3, #31
 80178b8:	bf44      	itt	mi
 80178ba:	f043 0320 	orrmi.w	r3, r3, #32
 80178be:	6023      	strmi	r3, [r4, #0]
 80178c0:	b11d      	cbz	r5, 80178ca <_printf_i+0x19e>
 80178c2:	2310      	movs	r3, #16
 80178c4:	e7ac      	b.n	8017820 <_printf_i+0xf4>
 80178c6:	4827      	ldr	r0, [pc, #156]	@ (8017964 <_printf_i+0x238>)
 80178c8:	e7e9      	b.n	801789e <_printf_i+0x172>
 80178ca:	6823      	ldr	r3, [r4, #0]
 80178cc:	f023 0320 	bic.w	r3, r3, #32
 80178d0:	6023      	str	r3, [r4, #0]
 80178d2:	e7f6      	b.n	80178c2 <_printf_i+0x196>
 80178d4:	4616      	mov	r6, r2
 80178d6:	e7bd      	b.n	8017854 <_printf_i+0x128>
 80178d8:	6833      	ldr	r3, [r6, #0]
 80178da:	6825      	ldr	r5, [r4, #0]
 80178dc:	6961      	ldr	r1, [r4, #20]
 80178de:	1d18      	adds	r0, r3, #4
 80178e0:	6030      	str	r0, [r6, #0]
 80178e2:	062e      	lsls	r6, r5, #24
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	d501      	bpl.n	80178ec <_printf_i+0x1c0>
 80178e8:	6019      	str	r1, [r3, #0]
 80178ea:	e002      	b.n	80178f2 <_printf_i+0x1c6>
 80178ec:	0668      	lsls	r0, r5, #25
 80178ee:	d5fb      	bpl.n	80178e8 <_printf_i+0x1bc>
 80178f0:	8019      	strh	r1, [r3, #0]
 80178f2:	2300      	movs	r3, #0
 80178f4:	6123      	str	r3, [r4, #16]
 80178f6:	4616      	mov	r6, r2
 80178f8:	e7bc      	b.n	8017874 <_printf_i+0x148>
 80178fa:	6833      	ldr	r3, [r6, #0]
 80178fc:	1d1a      	adds	r2, r3, #4
 80178fe:	6032      	str	r2, [r6, #0]
 8017900:	681e      	ldr	r6, [r3, #0]
 8017902:	6862      	ldr	r2, [r4, #4]
 8017904:	2100      	movs	r1, #0
 8017906:	4630      	mov	r0, r6
 8017908:	f7e8 fc6a 	bl	80001e0 <memchr>
 801790c:	b108      	cbz	r0, 8017912 <_printf_i+0x1e6>
 801790e:	1b80      	subs	r0, r0, r6
 8017910:	6060      	str	r0, [r4, #4]
 8017912:	6863      	ldr	r3, [r4, #4]
 8017914:	6123      	str	r3, [r4, #16]
 8017916:	2300      	movs	r3, #0
 8017918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801791c:	e7aa      	b.n	8017874 <_printf_i+0x148>
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	4632      	mov	r2, r6
 8017922:	4649      	mov	r1, r9
 8017924:	4640      	mov	r0, r8
 8017926:	47d0      	blx	sl
 8017928:	3001      	adds	r0, #1
 801792a:	d0ad      	beq.n	8017888 <_printf_i+0x15c>
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	079b      	lsls	r3, r3, #30
 8017930:	d413      	bmi.n	801795a <_printf_i+0x22e>
 8017932:	68e0      	ldr	r0, [r4, #12]
 8017934:	9b03      	ldr	r3, [sp, #12]
 8017936:	4298      	cmp	r0, r3
 8017938:	bfb8      	it	lt
 801793a:	4618      	movlt	r0, r3
 801793c:	e7a6      	b.n	801788c <_printf_i+0x160>
 801793e:	2301      	movs	r3, #1
 8017940:	4632      	mov	r2, r6
 8017942:	4649      	mov	r1, r9
 8017944:	4640      	mov	r0, r8
 8017946:	47d0      	blx	sl
 8017948:	3001      	adds	r0, #1
 801794a:	d09d      	beq.n	8017888 <_printf_i+0x15c>
 801794c:	3501      	adds	r5, #1
 801794e:	68e3      	ldr	r3, [r4, #12]
 8017950:	9903      	ldr	r1, [sp, #12]
 8017952:	1a5b      	subs	r3, r3, r1
 8017954:	42ab      	cmp	r3, r5
 8017956:	dcf2      	bgt.n	801793e <_printf_i+0x212>
 8017958:	e7eb      	b.n	8017932 <_printf_i+0x206>
 801795a:	2500      	movs	r5, #0
 801795c:	f104 0619 	add.w	r6, r4, #25
 8017960:	e7f5      	b.n	801794e <_printf_i+0x222>
 8017962:	bf00      	nop
 8017964:	0801a09b 	.word	0x0801a09b
 8017968:	0801a0ac 	.word	0x0801a0ac

0801796c <std>:
 801796c:	2300      	movs	r3, #0
 801796e:	b510      	push	{r4, lr}
 8017970:	4604      	mov	r4, r0
 8017972:	e9c0 3300 	strd	r3, r3, [r0]
 8017976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801797a:	6083      	str	r3, [r0, #8]
 801797c:	8181      	strh	r1, [r0, #12]
 801797e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017980:	81c2      	strh	r2, [r0, #14]
 8017982:	6183      	str	r3, [r0, #24]
 8017984:	4619      	mov	r1, r3
 8017986:	2208      	movs	r2, #8
 8017988:	305c      	adds	r0, #92	@ 0x5c
 801798a:	f000 f92e 	bl	8017bea <memset>
 801798e:	4b0d      	ldr	r3, [pc, #52]	@ (80179c4 <std+0x58>)
 8017990:	6263      	str	r3, [r4, #36]	@ 0x24
 8017992:	4b0d      	ldr	r3, [pc, #52]	@ (80179c8 <std+0x5c>)
 8017994:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017996:	4b0d      	ldr	r3, [pc, #52]	@ (80179cc <std+0x60>)
 8017998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801799a:	4b0d      	ldr	r3, [pc, #52]	@ (80179d0 <std+0x64>)
 801799c:	6323      	str	r3, [r4, #48]	@ 0x30
 801799e:	4b0d      	ldr	r3, [pc, #52]	@ (80179d4 <std+0x68>)
 80179a0:	6224      	str	r4, [r4, #32]
 80179a2:	429c      	cmp	r4, r3
 80179a4:	d006      	beq.n	80179b4 <std+0x48>
 80179a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80179aa:	4294      	cmp	r4, r2
 80179ac:	d002      	beq.n	80179b4 <std+0x48>
 80179ae:	33d0      	adds	r3, #208	@ 0xd0
 80179b0:	429c      	cmp	r4, r3
 80179b2:	d105      	bne.n	80179c0 <std+0x54>
 80179b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80179b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179bc:	f000 ba3c 	b.w	8017e38 <__retarget_lock_init_recursive>
 80179c0:	bd10      	pop	{r4, pc}
 80179c2:	bf00      	nop
 80179c4:	08017b31 	.word	0x08017b31
 80179c8:	08017b53 	.word	0x08017b53
 80179cc:	08017b8b 	.word	0x08017b8b
 80179d0:	08017baf 	.word	0x08017baf
 80179d4:	200061d0 	.word	0x200061d0

080179d8 <stdio_exit_handler>:
 80179d8:	4a02      	ldr	r2, [pc, #8]	@ (80179e4 <stdio_exit_handler+0xc>)
 80179da:	4903      	ldr	r1, [pc, #12]	@ (80179e8 <stdio_exit_handler+0x10>)
 80179dc:	4803      	ldr	r0, [pc, #12]	@ (80179ec <stdio_exit_handler+0x14>)
 80179de:	f000 b869 	b.w	8017ab4 <_fwalk_sglue>
 80179e2:	bf00      	nop
 80179e4:	20000104 	.word	0x20000104
 80179e8:	08019659 	.word	0x08019659
 80179ec:	20000114 	.word	0x20000114

080179f0 <cleanup_stdio>:
 80179f0:	6841      	ldr	r1, [r0, #4]
 80179f2:	4b0c      	ldr	r3, [pc, #48]	@ (8017a24 <cleanup_stdio+0x34>)
 80179f4:	4299      	cmp	r1, r3
 80179f6:	b510      	push	{r4, lr}
 80179f8:	4604      	mov	r4, r0
 80179fa:	d001      	beq.n	8017a00 <cleanup_stdio+0x10>
 80179fc:	f001 fe2c 	bl	8019658 <_fflush_r>
 8017a00:	68a1      	ldr	r1, [r4, #8]
 8017a02:	4b09      	ldr	r3, [pc, #36]	@ (8017a28 <cleanup_stdio+0x38>)
 8017a04:	4299      	cmp	r1, r3
 8017a06:	d002      	beq.n	8017a0e <cleanup_stdio+0x1e>
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f001 fe25 	bl	8019658 <_fflush_r>
 8017a0e:	68e1      	ldr	r1, [r4, #12]
 8017a10:	4b06      	ldr	r3, [pc, #24]	@ (8017a2c <cleanup_stdio+0x3c>)
 8017a12:	4299      	cmp	r1, r3
 8017a14:	d004      	beq.n	8017a20 <cleanup_stdio+0x30>
 8017a16:	4620      	mov	r0, r4
 8017a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a1c:	f001 be1c 	b.w	8019658 <_fflush_r>
 8017a20:	bd10      	pop	{r4, pc}
 8017a22:	bf00      	nop
 8017a24:	200061d0 	.word	0x200061d0
 8017a28:	20006238 	.word	0x20006238
 8017a2c:	200062a0 	.word	0x200062a0

08017a30 <global_stdio_init.part.0>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	4b0b      	ldr	r3, [pc, #44]	@ (8017a60 <global_stdio_init.part.0+0x30>)
 8017a34:	4c0b      	ldr	r4, [pc, #44]	@ (8017a64 <global_stdio_init.part.0+0x34>)
 8017a36:	4a0c      	ldr	r2, [pc, #48]	@ (8017a68 <global_stdio_init.part.0+0x38>)
 8017a38:	601a      	str	r2, [r3, #0]
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	2104      	movs	r1, #4
 8017a40:	f7ff ff94 	bl	801796c <std>
 8017a44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a48:	2201      	movs	r2, #1
 8017a4a:	2109      	movs	r1, #9
 8017a4c:	f7ff ff8e 	bl	801796c <std>
 8017a50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a54:	2202      	movs	r2, #2
 8017a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a5a:	2112      	movs	r1, #18
 8017a5c:	f7ff bf86 	b.w	801796c <std>
 8017a60:	20006308 	.word	0x20006308
 8017a64:	200061d0 	.word	0x200061d0
 8017a68:	080179d9 	.word	0x080179d9

08017a6c <__sfp_lock_acquire>:
 8017a6c:	4801      	ldr	r0, [pc, #4]	@ (8017a74 <__sfp_lock_acquire+0x8>)
 8017a6e:	f000 b9e4 	b.w	8017e3a <__retarget_lock_acquire_recursive>
 8017a72:	bf00      	nop
 8017a74:	20006311 	.word	0x20006311

08017a78 <__sfp_lock_release>:
 8017a78:	4801      	ldr	r0, [pc, #4]	@ (8017a80 <__sfp_lock_release+0x8>)
 8017a7a:	f000 b9df 	b.w	8017e3c <__retarget_lock_release_recursive>
 8017a7e:	bf00      	nop
 8017a80:	20006311 	.word	0x20006311

08017a84 <__sinit>:
 8017a84:	b510      	push	{r4, lr}
 8017a86:	4604      	mov	r4, r0
 8017a88:	f7ff fff0 	bl	8017a6c <__sfp_lock_acquire>
 8017a8c:	6a23      	ldr	r3, [r4, #32]
 8017a8e:	b11b      	cbz	r3, 8017a98 <__sinit+0x14>
 8017a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a94:	f7ff bff0 	b.w	8017a78 <__sfp_lock_release>
 8017a98:	4b04      	ldr	r3, [pc, #16]	@ (8017aac <__sinit+0x28>)
 8017a9a:	6223      	str	r3, [r4, #32]
 8017a9c:	4b04      	ldr	r3, [pc, #16]	@ (8017ab0 <__sinit+0x2c>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d1f5      	bne.n	8017a90 <__sinit+0xc>
 8017aa4:	f7ff ffc4 	bl	8017a30 <global_stdio_init.part.0>
 8017aa8:	e7f2      	b.n	8017a90 <__sinit+0xc>
 8017aaa:	bf00      	nop
 8017aac:	080179f1 	.word	0x080179f1
 8017ab0:	20006308 	.word	0x20006308

08017ab4 <_fwalk_sglue>:
 8017ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ab8:	4607      	mov	r7, r0
 8017aba:	4688      	mov	r8, r1
 8017abc:	4614      	mov	r4, r2
 8017abe:	2600      	movs	r6, #0
 8017ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8017ac8:	d505      	bpl.n	8017ad6 <_fwalk_sglue+0x22>
 8017aca:	6824      	ldr	r4, [r4, #0]
 8017acc:	2c00      	cmp	r4, #0
 8017ace:	d1f7      	bne.n	8017ac0 <_fwalk_sglue+0xc>
 8017ad0:	4630      	mov	r0, r6
 8017ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ad6:	89ab      	ldrh	r3, [r5, #12]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d907      	bls.n	8017aec <_fwalk_sglue+0x38>
 8017adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	d003      	beq.n	8017aec <_fwalk_sglue+0x38>
 8017ae4:	4629      	mov	r1, r5
 8017ae6:	4638      	mov	r0, r7
 8017ae8:	47c0      	blx	r8
 8017aea:	4306      	orrs	r6, r0
 8017aec:	3568      	adds	r5, #104	@ 0x68
 8017aee:	e7e9      	b.n	8017ac4 <_fwalk_sglue+0x10>

08017af0 <siprintf>:
 8017af0:	b40e      	push	{r1, r2, r3}
 8017af2:	b500      	push	{lr}
 8017af4:	b09c      	sub	sp, #112	@ 0x70
 8017af6:	ab1d      	add	r3, sp, #116	@ 0x74
 8017af8:	9002      	str	r0, [sp, #8]
 8017afa:	9006      	str	r0, [sp, #24]
 8017afc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b00:	4809      	ldr	r0, [pc, #36]	@ (8017b28 <siprintf+0x38>)
 8017b02:	9107      	str	r1, [sp, #28]
 8017b04:	9104      	str	r1, [sp, #16]
 8017b06:	4909      	ldr	r1, [pc, #36]	@ (8017b2c <siprintf+0x3c>)
 8017b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b0c:	9105      	str	r1, [sp, #20]
 8017b0e:	6800      	ldr	r0, [r0, #0]
 8017b10:	9301      	str	r3, [sp, #4]
 8017b12:	a902      	add	r1, sp, #8
 8017b14:	f001 fc20 	bl	8019358 <_svfiprintf_r>
 8017b18:	9b02      	ldr	r3, [sp, #8]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	701a      	strb	r2, [r3, #0]
 8017b1e:	b01c      	add	sp, #112	@ 0x70
 8017b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b24:	b003      	add	sp, #12
 8017b26:	4770      	bx	lr
 8017b28:	20000110 	.word	0x20000110
 8017b2c:	ffff0208 	.word	0xffff0208

08017b30 <__sread>:
 8017b30:	b510      	push	{r4, lr}
 8017b32:	460c      	mov	r4, r1
 8017b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b38:	f000 f90c 	bl	8017d54 <_read_r>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	bfab      	itete	ge
 8017b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b42:	89a3      	ldrhlt	r3, [r4, #12]
 8017b44:	181b      	addge	r3, r3, r0
 8017b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b4a:	bfac      	ite	ge
 8017b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b4e:	81a3      	strhlt	r3, [r4, #12]
 8017b50:	bd10      	pop	{r4, pc}

08017b52 <__swrite>:
 8017b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b56:	461f      	mov	r7, r3
 8017b58:	898b      	ldrh	r3, [r1, #12]
 8017b5a:	05db      	lsls	r3, r3, #23
 8017b5c:	4605      	mov	r5, r0
 8017b5e:	460c      	mov	r4, r1
 8017b60:	4616      	mov	r6, r2
 8017b62:	d505      	bpl.n	8017b70 <__swrite+0x1e>
 8017b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b68:	2302      	movs	r3, #2
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	f000 f8e0 	bl	8017d30 <_lseek_r>
 8017b70:	89a3      	ldrh	r3, [r4, #12]
 8017b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b7a:	81a3      	strh	r3, [r4, #12]
 8017b7c:	4632      	mov	r2, r6
 8017b7e:	463b      	mov	r3, r7
 8017b80:	4628      	mov	r0, r5
 8017b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b86:	f000 b91b 	b.w	8017dc0 <_write_r>

08017b8a <__sseek>:
 8017b8a:	b510      	push	{r4, lr}
 8017b8c:	460c      	mov	r4, r1
 8017b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b92:	f000 f8cd 	bl	8017d30 <_lseek_r>
 8017b96:	1c43      	adds	r3, r0, #1
 8017b98:	89a3      	ldrh	r3, [r4, #12]
 8017b9a:	bf15      	itete	ne
 8017b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017ba6:	81a3      	strheq	r3, [r4, #12]
 8017ba8:	bf18      	it	ne
 8017baa:	81a3      	strhne	r3, [r4, #12]
 8017bac:	bd10      	pop	{r4, pc}

08017bae <__sclose>:
 8017bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb2:	f000 b857 	b.w	8017c64 <_close_r>

08017bb6 <memmove>:
 8017bb6:	4288      	cmp	r0, r1
 8017bb8:	b510      	push	{r4, lr}
 8017bba:	eb01 0402 	add.w	r4, r1, r2
 8017bbe:	d902      	bls.n	8017bc6 <memmove+0x10>
 8017bc0:	4284      	cmp	r4, r0
 8017bc2:	4623      	mov	r3, r4
 8017bc4:	d807      	bhi.n	8017bd6 <memmove+0x20>
 8017bc6:	1e43      	subs	r3, r0, #1
 8017bc8:	42a1      	cmp	r1, r4
 8017bca:	d008      	beq.n	8017bde <memmove+0x28>
 8017bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bd4:	e7f8      	b.n	8017bc8 <memmove+0x12>
 8017bd6:	4402      	add	r2, r0
 8017bd8:	4601      	mov	r1, r0
 8017bda:	428a      	cmp	r2, r1
 8017bdc:	d100      	bne.n	8017be0 <memmove+0x2a>
 8017bde:	bd10      	pop	{r4, pc}
 8017be0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017be4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017be8:	e7f7      	b.n	8017bda <memmove+0x24>

08017bea <memset>:
 8017bea:	4402      	add	r2, r0
 8017bec:	4603      	mov	r3, r0
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	d100      	bne.n	8017bf4 <memset+0xa>
 8017bf2:	4770      	bx	lr
 8017bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8017bf8:	e7f9      	b.n	8017bee <memset+0x4>

08017bfa <_raise_r>:
 8017bfa:	291f      	cmp	r1, #31
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	4605      	mov	r5, r0
 8017c00:	460c      	mov	r4, r1
 8017c02:	d904      	bls.n	8017c0e <_raise_r+0x14>
 8017c04:	2316      	movs	r3, #22
 8017c06:	6003      	str	r3, [r0, #0]
 8017c08:	f04f 30ff 	mov.w	r0, #4294967295
 8017c0c:	bd38      	pop	{r3, r4, r5, pc}
 8017c0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017c10:	b112      	cbz	r2, 8017c18 <_raise_r+0x1e>
 8017c12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c16:	b94b      	cbnz	r3, 8017c2c <_raise_r+0x32>
 8017c18:	4628      	mov	r0, r5
 8017c1a:	f000 f8bf 	bl	8017d9c <_getpid_r>
 8017c1e:	4622      	mov	r2, r4
 8017c20:	4601      	mov	r1, r0
 8017c22:	4628      	mov	r0, r5
 8017c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c28:	f000 b8a6 	b.w	8017d78 <_kill_r>
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d00a      	beq.n	8017c46 <_raise_r+0x4c>
 8017c30:	1c59      	adds	r1, r3, #1
 8017c32:	d103      	bne.n	8017c3c <_raise_r+0x42>
 8017c34:	2316      	movs	r3, #22
 8017c36:	6003      	str	r3, [r0, #0]
 8017c38:	2001      	movs	r0, #1
 8017c3a:	e7e7      	b.n	8017c0c <_raise_r+0x12>
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017c42:	4620      	mov	r0, r4
 8017c44:	4798      	blx	r3
 8017c46:	2000      	movs	r0, #0
 8017c48:	e7e0      	b.n	8017c0c <_raise_r+0x12>
	...

08017c4c <raise>:
 8017c4c:	4b02      	ldr	r3, [pc, #8]	@ (8017c58 <raise+0xc>)
 8017c4e:	4601      	mov	r1, r0
 8017c50:	6818      	ldr	r0, [r3, #0]
 8017c52:	f7ff bfd2 	b.w	8017bfa <_raise_r>
 8017c56:	bf00      	nop
 8017c58:	20000110 	.word	0x20000110

08017c5c <_localeconv_r>:
 8017c5c:	4800      	ldr	r0, [pc, #0]	@ (8017c60 <_localeconv_r+0x4>)
 8017c5e:	4770      	bx	lr
 8017c60:	20000250 	.word	0x20000250

08017c64 <_close_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4d06      	ldr	r5, [pc, #24]	@ (8017c80 <_close_r+0x1c>)
 8017c68:	2300      	movs	r3, #0
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	4608      	mov	r0, r1
 8017c6e:	602b      	str	r3, [r5, #0]
 8017c70:	f7f4 f88e 	bl	800bd90 <_close>
 8017c74:	1c43      	adds	r3, r0, #1
 8017c76:	d102      	bne.n	8017c7e <_close_r+0x1a>
 8017c78:	682b      	ldr	r3, [r5, #0]
 8017c7a:	b103      	cbz	r3, 8017c7e <_close_r+0x1a>
 8017c7c:	6023      	str	r3, [r4, #0]
 8017c7e:	bd38      	pop	{r3, r4, r5, pc}
 8017c80:	2000630c 	.word	0x2000630c

08017c84 <_reclaim_reent>:
 8017c84:	4b29      	ldr	r3, [pc, #164]	@ (8017d2c <_reclaim_reent+0xa8>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4283      	cmp	r3, r0
 8017c8a:	b570      	push	{r4, r5, r6, lr}
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	d04b      	beq.n	8017d28 <_reclaim_reent+0xa4>
 8017c90:	69c3      	ldr	r3, [r0, #28]
 8017c92:	b1ab      	cbz	r3, 8017cc0 <_reclaim_reent+0x3c>
 8017c94:	68db      	ldr	r3, [r3, #12]
 8017c96:	b16b      	cbz	r3, 8017cb4 <_reclaim_reent+0x30>
 8017c98:	2500      	movs	r5, #0
 8017c9a:	69e3      	ldr	r3, [r4, #28]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	5959      	ldr	r1, [r3, r5]
 8017ca0:	2900      	cmp	r1, #0
 8017ca2:	d13b      	bne.n	8017d1c <_reclaim_reent+0x98>
 8017ca4:	3504      	adds	r5, #4
 8017ca6:	2d80      	cmp	r5, #128	@ 0x80
 8017ca8:	d1f7      	bne.n	8017c9a <_reclaim_reent+0x16>
 8017caa:	69e3      	ldr	r3, [r4, #28]
 8017cac:	4620      	mov	r0, r4
 8017cae:	68d9      	ldr	r1, [r3, #12]
 8017cb0:	f000 ff22 	bl	8018af8 <_free_r>
 8017cb4:	69e3      	ldr	r3, [r4, #28]
 8017cb6:	6819      	ldr	r1, [r3, #0]
 8017cb8:	b111      	cbz	r1, 8017cc0 <_reclaim_reent+0x3c>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f000 ff1c 	bl	8018af8 <_free_r>
 8017cc0:	6961      	ldr	r1, [r4, #20]
 8017cc2:	b111      	cbz	r1, 8017cca <_reclaim_reent+0x46>
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f000 ff17 	bl	8018af8 <_free_r>
 8017cca:	69e1      	ldr	r1, [r4, #28]
 8017ccc:	b111      	cbz	r1, 8017cd4 <_reclaim_reent+0x50>
 8017cce:	4620      	mov	r0, r4
 8017cd0:	f000 ff12 	bl	8018af8 <_free_r>
 8017cd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017cd6:	b111      	cbz	r1, 8017cde <_reclaim_reent+0x5a>
 8017cd8:	4620      	mov	r0, r4
 8017cda:	f000 ff0d 	bl	8018af8 <_free_r>
 8017cde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ce0:	b111      	cbz	r1, 8017ce8 <_reclaim_reent+0x64>
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f000 ff08 	bl	8018af8 <_free_r>
 8017ce8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017cea:	b111      	cbz	r1, 8017cf2 <_reclaim_reent+0x6e>
 8017cec:	4620      	mov	r0, r4
 8017cee:	f000 ff03 	bl	8018af8 <_free_r>
 8017cf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017cf4:	b111      	cbz	r1, 8017cfc <_reclaim_reent+0x78>
 8017cf6:	4620      	mov	r0, r4
 8017cf8:	f000 fefe 	bl	8018af8 <_free_r>
 8017cfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017cfe:	b111      	cbz	r1, 8017d06 <_reclaim_reent+0x82>
 8017d00:	4620      	mov	r0, r4
 8017d02:	f000 fef9 	bl	8018af8 <_free_r>
 8017d06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017d08:	b111      	cbz	r1, 8017d10 <_reclaim_reent+0x8c>
 8017d0a:	4620      	mov	r0, r4
 8017d0c:	f000 fef4 	bl	8018af8 <_free_r>
 8017d10:	6a23      	ldr	r3, [r4, #32]
 8017d12:	b14b      	cbz	r3, 8017d28 <_reclaim_reent+0xa4>
 8017d14:	4620      	mov	r0, r4
 8017d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d1a:	4718      	bx	r3
 8017d1c:	680e      	ldr	r6, [r1, #0]
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f000 feea 	bl	8018af8 <_free_r>
 8017d24:	4631      	mov	r1, r6
 8017d26:	e7bb      	b.n	8017ca0 <_reclaim_reent+0x1c>
 8017d28:	bd70      	pop	{r4, r5, r6, pc}
 8017d2a:	bf00      	nop
 8017d2c:	20000110 	.word	0x20000110

08017d30 <_lseek_r>:
 8017d30:	b538      	push	{r3, r4, r5, lr}
 8017d32:	4d07      	ldr	r5, [pc, #28]	@ (8017d50 <_lseek_r+0x20>)
 8017d34:	4604      	mov	r4, r0
 8017d36:	4608      	mov	r0, r1
 8017d38:	4611      	mov	r1, r2
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	602a      	str	r2, [r5, #0]
 8017d3e:	461a      	mov	r2, r3
 8017d40:	f7f4 f84d 	bl	800bdde <_lseek>
 8017d44:	1c43      	adds	r3, r0, #1
 8017d46:	d102      	bne.n	8017d4e <_lseek_r+0x1e>
 8017d48:	682b      	ldr	r3, [r5, #0]
 8017d4a:	b103      	cbz	r3, 8017d4e <_lseek_r+0x1e>
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	bd38      	pop	{r3, r4, r5, pc}
 8017d50:	2000630c 	.word	0x2000630c

08017d54 <_read_r>:
 8017d54:	b538      	push	{r3, r4, r5, lr}
 8017d56:	4d07      	ldr	r5, [pc, #28]	@ (8017d74 <_read_r+0x20>)
 8017d58:	4604      	mov	r4, r0
 8017d5a:	4608      	mov	r0, r1
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	2200      	movs	r2, #0
 8017d60:	602a      	str	r2, [r5, #0]
 8017d62:	461a      	mov	r2, r3
 8017d64:	f7f3 ffdb 	bl	800bd1e <_read>
 8017d68:	1c43      	adds	r3, r0, #1
 8017d6a:	d102      	bne.n	8017d72 <_read_r+0x1e>
 8017d6c:	682b      	ldr	r3, [r5, #0]
 8017d6e:	b103      	cbz	r3, 8017d72 <_read_r+0x1e>
 8017d70:	6023      	str	r3, [r4, #0]
 8017d72:	bd38      	pop	{r3, r4, r5, pc}
 8017d74:	2000630c 	.word	0x2000630c

08017d78 <_kill_r>:
 8017d78:	b538      	push	{r3, r4, r5, lr}
 8017d7a:	4d07      	ldr	r5, [pc, #28]	@ (8017d98 <_kill_r+0x20>)
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	4604      	mov	r4, r0
 8017d80:	4608      	mov	r0, r1
 8017d82:	4611      	mov	r1, r2
 8017d84:	602b      	str	r3, [r5, #0]
 8017d86:	f7f3 ffaf 	bl	800bce8 <_kill>
 8017d8a:	1c43      	adds	r3, r0, #1
 8017d8c:	d102      	bne.n	8017d94 <_kill_r+0x1c>
 8017d8e:	682b      	ldr	r3, [r5, #0]
 8017d90:	b103      	cbz	r3, 8017d94 <_kill_r+0x1c>
 8017d92:	6023      	str	r3, [r4, #0]
 8017d94:	bd38      	pop	{r3, r4, r5, pc}
 8017d96:	bf00      	nop
 8017d98:	2000630c 	.word	0x2000630c

08017d9c <_getpid_r>:
 8017d9c:	f7f3 bf9c 	b.w	800bcd8 <_getpid>

08017da0 <_sbrk_r>:
 8017da0:	b538      	push	{r3, r4, r5, lr}
 8017da2:	4d06      	ldr	r5, [pc, #24]	@ (8017dbc <_sbrk_r+0x1c>)
 8017da4:	2300      	movs	r3, #0
 8017da6:	4604      	mov	r4, r0
 8017da8:	4608      	mov	r0, r1
 8017daa:	602b      	str	r3, [r5, #0]
 8017dac:	f7f4 f824 	bl	800bdf8 <_sbrk>
 8017db0:	1c43      	adds	r3, r0, #1
 8017db2:	d102      	bne.n	8017dba <_sbrk_r+0x1a>
 8017db4:	682b      	ldr	r3, [r5, #0]
 8017db6:	b103      	cbz	r3, 8017dba <_sbrk_r+0x1a>
 8017db8:	6023      	str	r3, [r4, #0]
 8017dba:	bd38      	pop	{r3, r4, r5, pc}
 8017dbc:	2000630c 	.word	0x2000630c

08017dc0 <_write_r>:
 8017dc0:	b538      	push	{r3, r4, r5, lr}
 8017dc2:	4d07      	ldr	r5, [pc, #28]	@ (8017de0 <_write_r+0x20>)
 8017dc4:	4604      	mov	r4, r0
 8017dc6:	4608      	mov	r0, r1
 8017dc8:	4611      	mov	r1, r2
 8017dca:	2200      	movs	r2, #0
 8017dcc:	602a      	str	r2, [r5, #0]
 8017dce:	461a      	mov	r2, r3
 8017dd0:	f7f3 ffc2 	bl	800bd58 <_write>
 8017dd4:	1c43      	adds	r3, r0, #1
 8017dd6:	d102      	bne.n	8017dde <_write_r+0x1e>
 8017dd8:	682b      	ldr	r3, [r5, #0]
 8017dda:	b103      	cbz	r3, 8017dde <_write_r+0x1e>
 8017ddc:	6023      	str	r3, [r4, #0]
 8017dde:	bd38      	pop	{r3, r4, r5, pc}
 8017de0:	2000630c 	.word	0x2000630c

08017de4 <__errno>:
 8017de4:	4b01      	ldr	r3, [pc, #4]	@ (8017dec <__errno+0x8>)
 8017de6:	6818      	ldr	r0, [r3, #0]
 8017de8:	4770      	bx	lr
 8017dea:	bf00      	nop
 8017dec:	20000110 	.word	0x20000110

08017df0 <__libc_init_array>:
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	4d0d      	ldr	r5, [pc, #52]	@ (8017e28 <__libc_init_array+0x38>)
 8017df4:	4c0d      	ldr	r4, [pc, #52]	@ (8017e2c <__libc_init_array+0x3c>)
 8017df6:	1b64      	subs	r4, r4, r5
 8017df8:	10a4      	asrs	r4, r4, #2
 8017dfa:	2600      	movs	r6, #0
 8017dfc:	42a6      	cmp	r6, r4
 8017dfe:	d109      	bne.n	8017e14 <__libc_init_array+0x24>
 8017e00:	4d0b      	ldr	r5, [pc, #44]	@ (8017e30 <__libc_init_array+0x40>)
 8017e02:	4c0c      	ldr	r4, [pc, #48]	@ (8017e34 <__libc_init_array+0x44>)
 8017e04:	f001 ff0e 	bl	8019c24 <_init>
 8017e08:	1b64      	subs	r4, r4, r5
 8017e0a:	10a4      	asrs	r4, r4, #2
 8017e0c:	2600      	movs	r6, #0
 8017e0e:	42a6      	cmp	r6, r4
 8017e10:	d105      	bne.n	8017e1e <__libc_init_array+0x2e>
 8017e12:	bd70      	pop	{r4, r5, r6, pc}
 8017e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e18:	4798      	blx	r3
 8017e1a:	3601      	adds	r6, #1
 8017e1c:	e7ee      	b.n	8017dfc <__libc_init_array+0xc>
 8017e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e22:	4798      	blx	r3
 8017e24:	3601      	adds	r6, #1
 8017e26:	e7f2      	b.n	8017e0e <__libc_init_array+0x1e>
 8017e28:	0801a400 	.word	0x0801a400
 8017e2c:	0801a400 	.word	0x0801a400
 8017e30:	0801a400 	.word	0x0801a400
 8017e34:	0801a408 	.word	0x0801a408

08017e38 <__retarget_lock_init_recursive>:
 8017e38:	4770      	bx	lr

08017e3a <__retarget_lock_acquire_recursive>:
 8017e3a:	4770      	bx	lr

08017e3c <__retarget_lock_release_recursive>:
 8017e3c:	4770      	bx	lr

08017e3e <memcpy>:
 8017e3e:	440a      	add	r2, r1
 8017e40:	4291      	cmp	r1, r2
 8017e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e46:	d100      	bne.n	8017e4a <memcpy+0xc>
 8017e48:	4770      	bx	lr
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e54:	4291      	cmp	r1, r2
 8017e56:	d1f9      	bne.n	8017e4c <memcpy+0xe>
 8017e58:	bd10      	pop	{r4, pc}

08017e5a <quorem>:
 8017e5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5e:	6903      	ldr	r3, [r0, #16]
 8017e60:	690c      	ldr	r4, [r1, #16]
 8017e62:	42a3      	cmp	r3, r4
 8017e64:	4607      	mov	r7, r0
 8017e66:	db7e      	blt.n	8017f66 <quorem+0x10c>
 8017e68:	3c01      	subs	r4, #1
 8017e6a:	f101 0814 	add.w	r8, r1, #20
 8017e6e:	00a3      	lsls	r3, r4, #2
 8017e70:	f100 0514 	add.w	r5, r0, #20
 8017e74:	9300      	str	r3, [sp, #0]
 8017e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e7a:	9301      	str	r3, [sp, #4]
 8017e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e84:	3301      	adds	r3, #1
 8017e86:	429a      	cmp	r2, r3
 8017e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017e8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017e90:	d32e      	bcc.n	8017ef0 <quorem+0x96>
 8017e92:	f04f 0a00 	mov.w	sl, #0
 8017e96:	46c4      	mov	ip, r8
 8017e98:	46ae      	mov	lr, r5
 8017e9a:	46d3      	mov	fp, sl
 8017e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017ea0:	b298      	uxth	r0, r3
 8017ea2:	fb06 a000 	mla	r0, r6, r0, sl
 8017ea6:	0c02      	lsrs	r2, r0, #16
 8017ea8:	0c1b      	lsrs	r3, r3, #16
 8017eaa:	fb06 2303 	mla	r3, r6, r3, r2
 8017eae:	f8de 2000 	ldr.w	r2, [lr]
 8017eb2:	b280      	uxth	r0, r0
 8017eb4:	b292      	uxth	r2, r2
 8017eb6:	1a12      	subs	r2, r2, r0
 8017eb8:	445a      	add	r2, fp
 8017eba:	f8de 0000 	ldr.w	r0, [lr]
 8017ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017ec8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017ecc:	b292      	uxth	r2, r2
 8017ece:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017ed2:	45e1      	cmp	r9, ip
 8017ed4:	f84e 2b04 	str.w	r2, [lr], #4
 8017ed8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017edc:	d2de      	bcs.n	8017e9c <quorem+0x42>
 8017ede:	9b00      	ldr	r3, [sp, #0]
 8017ee0:	58eb      	ldr	r3, [r5, r3]
 8017ee2:	b92b      	cbnz	r3, 8017ef0 <quorem+0x96>
 8017ee4:	9b01      	ldr	r3, [sp, #4]
 8017ee6:	3b04      	subs	r3, #4
 8017ee8:	429d      	cmp	r5, r3
 8017eea:	461a      	mov	r2, r3
 8017eec:	d32f      	bcc.n	8017f4e <quorem+0xf4>
 8017eee:	613c      	str	r4, [r7, #16]
 8017ef0:	4638      	mov	r0, r7
 8017ef2:	f001 f8c5 	bl	8019080 <__mcmp>
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	db25      	blt.n	8017f46 <quorem+0xec>
 8017efa:	4629      	mov	r1, r5
 8017efc:	2000      	movs	r0, #0
 8017efe:	f858 2b04 	ldr.w	r2, [r8], #4
 8017f02:	f8d1 c000 	ldr.w	ip, [r1]
 8017f06:	fa1f fe82 	uxth.w	lr, r2
 8017f0a:	fa1f f38c 	uxth.w	r3, ip
 8017f0e:	eba3 030e 	sub.w	r3, r3, lr
 8017f12:	4403      	add	r3, r0
 8017f14:	0c12      	lsrs	r2, r2, #16
 8017f16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017f1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f24:	45c1      	cmp	r9, r8
 8017f26:	f841 3b04 	str.w	r3, [r1], #4
 8017f2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017f2e:	d2e6      	bcs.n	8017efe <quorem+0xa4>
 8017f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f38:	b922      	cbnz	r2, 8017f44 <quorem+0xea>
 8017f3a:	3b04      	subs	r3, #4
 8017f3c:	429d      	cmp	r5, r3
 8017f3e:	461a      	mov	r2, r3
 8017f40:	d30b      	bcc.n	8017f5a <quorem+0x100>
 8017f42:	613c      	str	r4, [r7, #16]
 8017f44:	3601      	adds	r6, #1
 8017f46:	4630      	mov	r0, r6
 8017f48:	b003      	add	sp, #12
 8017f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4e:	6812      	ldr	r2, [r2, #0]
 8017f50:	3b04      	subs	r3, #4
 8017f52:	2a00      	cmp	r2, #0
 8017f54:	d1cb      	bne.n	8017eee <quorem+0x94>
 8017f56:	3c01      	subs	r4, #1
 8017f58:	e7c6      	b.n	8017ee8 <quorem+0x8e>
 8017f5a:	6812      	ldr	r2, [r2, #0]
 8017f5c:	3b04      	subs	r3, #4
 8017f5e:	2a00      	cmp	r2, #0
 8017f60:	d1ef      	bne.n	8017f42 <quorem+0xe8>
 8017f62:	3c01      	subs	r4, #1
 8017f64:	e7ea      	b.n	8017f3c <quorem+0xe2>
 8017f66:	2000      	movs	r0, #0
 8017f68:	e7ee      	b.n	8017f48 <quorem+0xee>
 8017f6a:	0000      	movs	r0, r0
 8017f6c:	0000      	movs	r0, r0
	...

08017f70 <_dtoa_r>:
 8017f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f74:	69c7      	ldr	r7, [r0, #28]
 8017f76:	b099      	sub	sp, #100	@ 0x64
 8017f78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017f7c:	ec55 4b10 	vmov	r4, r5, d0
 8017f80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017f82:	9109      	str	r1, [sp, #36]	@ 0x24
 8017f84:	4683      	mov	fp, r0
 8017f86:	920e      	str	r2, [sp, #56]	@ 0x38
 8017f88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017f8a:	b97f      	cbnz	r7, 8017fac <_dtoa_r+0x3c>
 8017f8c:	2010      	movs	r0, #16
 8017f8e:	f7fe ffa1 	bl	8016ed4 <malloc>
 8017f92:	4602      	mov	r2, r0
 8017f94:	f8cb 001c 	str.w	r0, [fp, #28]
 8017f98:	b920      	cbnz	r0, 8017fa4 <_dtoa_r+0x34>
 8017f9a:	4ba7      	ldr	r3, [pc, #668]	@ (8018238 <_dtoa_r+0x2c8>)
 8017f9c:	21ef      	movs	r1, #239	@ 0xef
 8017f9e:	48a7      	ldr	r0, [pc, #668]	@ (801823c <_dtoa_r+0x2cc>)
 8017fa0:	f001 fb82 	bl	80196a8 <__assert_func>
 8017fa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017fa8:	6007      	str	r7, [r0, #0]
 8017faa:	60c7      	str	r7, [r0, #12]
 8017fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017fb0:	6819      	ldr	r1, [r3, #0]
 8017fb2:	b159      	cbz	r1, 8017fcc <_dtoa_r+0x5c>
 8017fb4:	685a      	ldr	r2, [r3, #4]
 8017fb6:	604a      	str	r2, [r1, #4]
 8017fb8:	2301      	movs	r3, #1
 8017fba:	4093      	lsls	r3, r2
 8017fbc:	608b      	str	r3, [r1, #8]
 8017fbe:	4658      	mov	r0, fp
 8017fc0:	f000 fe24 	bl	8018c0c <_Bfree>
 8017fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	601a      	str	r2, [r3, #0]
 8017fcc:	1e2b      	subs	r3, r5, #0
 8017fce:	bfb9      	ittee	lt
 8017fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8017fd4:	9303      	strlt	r3, [sp, #12]
 8017fd6:	2300      	movge	r3, #0
 8017fd8:	6033      	strge	r3, [r6, #0]
 8017fda:	9f03      	ldr	r7, [sp, #12]
 8017fdc:	4b98      	ldr	r3, [pc, #608]	@ (8018240 <_dtoa_r+0x2d0>)
 8017fde:	bfbc      	itt	lt
 8017fe0:	2201      	movlt	r2, #1
 8017fe2:	6032      	strlt	r2, [r6, #0]
 8017fe4:	43bb      	bics	r3, r7
 8017fe6:	d112      	bne.n	801800e <_dtoa_r+0x9e>
 8017fe8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017fea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017fee:	6013      	str	r3, [r2, #0]
 8017ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017ff4:	4323      	orrs	r3, r4
 8017ff6:	f000 854d 	beq.w	8018a94 <_dtoa_r+0xb24>
 8017ffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017ffc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8018254 <_dtoa_r+0x2e4>
 8018000:	2b00      	cmp	r3, #0
 8018002:	f000 854f 	beq.w	8018aa4 <_dtoa_r+0xb34>
 8018006:	f10a 0303 	add.w	r3, sl, #3
 801800a:	f000 bd49 	b.w	8018aa0 <_dtoa_r+0xb30>
 801800e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018012:	2200      	movs	r2, #0
 8018014:	ec51 0b17 	vmov	r0, r1, d7
 8018018:	2300      	movs	r3, #0
 801801a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801801e:	f7e8 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8018022:	4680      	mov	r8, r0
 8018024:	b158      	cbz	r0, 801803e <_dtoa_r+0xce>
 8018026:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018028:	2301      	movs	r3, #1
 801802a:	6013      	str	r3, [r2, #0]
 801802c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801802e:	b113      	cbz	r3, 8018036 <_dtoa_r+0xc6>
 8018030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018032:	4b84      	ldr	r3, [pc, #528]	@ (8018244 <_dtoa_r+0x2d4>)
 8018034:	6013      	str	r3, [r2, #0]
 8018036:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018258 <_dtoa_r+0x2e8>
 801803a:	f000 bd33 	b.w	8018aa4 <_dtoa_r+0xb34>
 801803e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018042:	aa16      	add	r2, sp, #88	@ 0x58
 8018044:	a917      	add	r1, sp, #92	@ 0x5c
 8018046:	4658      	mov	r0, fp
 8018048:	f001 f8ca 	bl	80191e0 <__d2b>
 801804c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018050:	4681      	mov	r9, r0
 8018052:	2e00      	cmp	r6, #0
 8018054:	d077      	beq.n	8018146 <_dtoa_r+0x1d6>
 8018056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018058:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801805c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801806c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018070:	4619      	mov	r1, r3
 8018072:	2200      	movs	r2, #0
 8018074:	4b74      	ldr	r3, [pc, #464]	@ (8018248 <_dtoa_r+0x2d8>)
 8018076:	f7e8 f90f 	bl	8000298 <__aeabi_dsub>
 801807a:	a369      	add	r3, pc, #420	@ (adr r3, 8018220 <_dtoa_r+0x2b0>)
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	f7e8 fac2 	bl	8000608 <__aeabi_dmul>
 8018084:	a368      	add	r3, pc, #416	@ (adr r3, 8018228 <_dtoa_r+0x2b8>)
 8018086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801808a:	f7e8 f907 	bl	800029c <__adddf3>
 801808e:	4604      	mov	r4, r0
 8018090:	4630      	mov	r0, r6
 8018092:	460d      	mov	r5, r1
 8018094:	f7e8 fa4e 	bl	8000534 <__aeabi_i2d>
 8018098:	a365      	add	r3, pc, #404	@ (adr r3, 8018230 <_dtoa_r+0x2c0>)
 801809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801809e:	f7e8 fab3 	bl	8000608 <__aeabi_dmul>
 80180a2:	4602      	mov	r2, r0
 80180a4:	460b      	mov	r3, r1
 80180a6:	4620      	mov	r0, r4
 80180a8:	4629      	mov	r1, r5
 80180aa:	f7e8 f8f7 	bl	800029c <__adddf3>
 80180ae:	4604      	mov	r4, r0
 80180b0:	460d      	mov	r5, r1
 80180b2:	f7e8 fd59 	bl	8000b68 <__aeabi_d2iz>
 80180b6:	2200      	movs	r2, #0
 80180b8:	4607      	mov	r7, r0
 80180ba:	2300      	movs	r3, #0
 80180bc:	4620      	mov	r0, r4
 80180be:	4629      	mov	r1, r5
 80180c0:	f7e8 fd14 	bl	8000aec <__aeabi_dcmplt>
 80180c4:	b140      	cbz	r0, 80180d8 <_dtoa_r+0x168>
 80180c6:	4638      	mov	r0, r7
 80180c8:	f7e8 fa34 	bl	8000534 <__aeabi_i2d>
 80180cc:	4622      	mov	r2, r4
 80180ce:	462b      	mov	r3, r5
 80180d0:	f7e8 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 80180d4:	b900      	cbnz	r0, 80180d8 <_dtoa_r+0x168>
 80180d6:	3f01      	subs	r7, #1
 80180d8:	2f16      	cmp	r7, #22
 80180da:	d851      	bhi.n	8018180 <_dtoa_r+0x210>
 80180dc:	4b5b      	ldr	r3, [pc, #364]	@ (801824c <_dtoa_r+0x2dc>)
 80180de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80180e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80180ea:	f7e8 fcff 	bl	8000aec <__aeabi_dcmplt>
 80180ee:	2800      	cmp	r0, #0
 80180f0:	d048      	beq.n	8018184 <_dtoa_r+0x214>
 80180f2:	3f01      	subs	r7, #1
 80180f4:	2300      	movs	r3, #0
 80180f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80180f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80180fa:	1b9b      	subs	r3, r3, r6
 80180fc:	1e5a      	subs	r2, r3, #1
 80180fe:	bf44      	itt	mi
 8018100:	f1c3 0801 	rsbmi	r8, r3, #1
 8018104:	2300      	movmi	r3, #0
 8018106:	9208      	str	r2, [sp, #32]
 8018108:	bf54      	ite	pl
 801810a:	f04f 0800 	movpl.w	r8, #0
 801810e:	9308      	strmi	r3, [sp, #32]
 8018110:	2f00      	cmp	r7, #0
 8018112:	db39      	blt.n	8018188 <_dtoa_r+0x218>
 8018114:	9b08      	ldr	r3, [sp, #32]
 8018116:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018118:	443b      	add	r3, r7
 801811a:	9308      	str	r3, [sp, #32]
 801811c:	2300      	movs	r3, #0
 801811e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018122:	2b09      	cmp	r3, #9
 8018124:	d864      	bhi.n	80181f0 <_dtoa_r+0x280>
 8018126:	2b05      	cmp	r3, #5
 8018128:	bfc4      	itt	gt
 801812a:	3b04      	subgt	r3, #4
 801812c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801812e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018130:	f1a3 0302 	sub.w	r3, r3, #2
 8018134:	bfcc      	ite	gt
 8018136:	2400      	movgt	r4, #0
 8018138:	2401      	movle	r4, #1
 801813a:	2b03      	cmp	r3, #3
 801813c:	d863      	bhi.n	8018206 <_dtoa_r+0x296>
 801813e:	e8df f003 	tbb	[pc, r3]
 8018142:	372a      	.short	0x372a
 8018144:	5535      	.short	0x5535
 8018146:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801814a:	441e      	add	r6, r3
 801814c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018150:	2b20      	cmp	r3, #32
 8018152:	bfc1      	itttt	gt
 8018154:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018158:	409f      	lslgt	r7, r3
 801815a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801815e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018162:	bfd6      	itet	le
 8018164:	f1c3 0320 	rsble	r3, r3, #32
 8018168:	ea47 0003 	orrgt.w	r0, r7, r3
 801816c:	fa04 f003 	lslle.w	r0, r4, r3
 8018170:	f7e8 f9d0 	bl	8000514 <__aeabi_ui2d>
 8018174:	2201      	movs	r2, #1
 8018176:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801817a:	3e01      	subs	r6, #1
 801817c:	9214      	str	r2, [sp, #80]	@ 0x50
 801817e:	e777      	b.n	8018070 <_dtoa_r+0x100>
 8018180:	2301      	movs	r3, #1
 8018182:	e7b8      	b.n	80180f6 <_dtoa_r+0x186>
 8018184:	9012      	str	r0, [sp, #72]	@ 0x48
 8018186:	e7b7      	b.n	80180f8 <_dtoa_r+0x188>
 8018188:	427b      	negs	r3, r7
 801818a:	930a      	str	r3, [sp, #40]	@ 0x28
 801818c:	2300      	movs	r3, #0
 801818e:	eba8 0807 	sub.w	r8, r8, r7
 8018192:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018194:	e7c4      	b.n	8018120 <_dtoa_r+0x1b0>
 8018196:	2300      	movs	r3, #0
 8018198:	930b      	str	r3, [sp, #44]	@ 0x2c
 801819a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801819c:	2b00      	cmp	r3, #0
 801819e:	dc35      	bgt.n	801820c <_dtoa_r+0x29c>
 80181a0:	2301      	movs	r3, #1
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	9307      	str	r3, [sp, #28]
 80181a6:	461a      	mov	r2, r3
 80181a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80181aa:	e00b      	b.n	80181c4 <_dtoa_r+0x254>
 80181ac:	2301      	movs	r3, #1
 80181ae:	e7f3      	b.n	8018198 <_dtoa_r+0x228>
 80181b0:	2300      	movs	r3, #0
 80181b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80181b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181b6:	18fb      	adds	r3, r7, r3
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	3301      	adds	r3, #1
 80181bc:	2b01      	cmp	r3, #1
 80181be:	9307      	str	r3, [sp, #28]
 80181c0:	bfb8      	it	lt
 80181c2:	2301      	movlt	r3, #1
 80181c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80181c8:	2100      	movs	r1, #0
 80181ca:	2204      	movs	r2, #4
 80181cc:	f102 0514 	add.w	r5, r2, #20
 80181d0:	429d      	cmp	r5, r3
 80181d2:	d91f      	bls.n	8018214 <_dtoa_r+0x2a4>
 80181d4:	6041      	str	r1, [r0, #4]
 80181d6:	4658      	mov	r0, fp
 80181d8:	f000 fcd8 	bl	8018b8c <_Balloc>
 80181dc:	4682      	mov	sl, r0
 80181de:	2800      	cmp	r0, #0
 80181e0:	d13c      	bne.n	801825c <_dtoa_r+0x2ec>
 80181e2:	4b1b      	ldr	r3, [pc, #108]	@ (8018250 <_dtoa_r+0x2e0>)
 80181e4:	4602      	mov	r2, r0
 80181e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80181ea:	e6d8      	b.n	8017f9e <_dtoa_r+0x2e>
 80181ec:	2301      	movs	r3, #1
 80181ee:	e7e0      	b.n	80181b2 <_dtoa_r+0x242>
 80181f0:	2401      	movs	r4, #1
 80181f2:	2300      	movs	r3, #0
 80181f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80181f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80181f8:	f04f 33ff 	mov.w	r3, #4294967295
 80181fc:	9300      	str	r3, [sp, #0]
 80181fe:	9307      	str	r3, [sp, #28]
 8018200:	2200      	movs	r2, #0
 8018202:	2312      	movs	r3, #18
 8018204:	e7d0      	b.n	80181a8 <_dtoa_r+0x238>
 8018206:	2301      	movs	r3, #1
 8018208:	930b      	str	r3, [sp, #44]	@ 0x2c
 801820a:	e7f5      	b.n	80181f8 <_dtoa_r+0x288>
 801820c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	9307      	str	r3, [sp, #28]
 8018212:	e7d7      	b.n	80181c4 <_dtoa_r+0x254>
 8018214:	3101      	adds	r1, #1
 8018216:	0052      	lsls	r2, r2, #1
 8018218:	e7d8      	b.n	80181cc <_dtoa_r+0x25c>
 801821a:	bf00      	nop
 801821c:	f3af 8000 	nop.w
 8018220:	636f4361 	.word	0x636f4361
 8018224:	3fd287a7 	.word	0x3fd287a7
 8018228:	8b60c8b3 	.word	0x8b60c8b3
 801822c:	3fc68a28 	.word	0x3fc68a28
 8018230:	509f79fb 	.word	0x509f79fb
 8018234:	3fd34413 	.word	0x3fd34413
 8018238:	0801a0ca 	.word	0x0801a0ca
 801823c:	0801a0e1 	.word	0x0801a0e1
 8018240:	7ff00000 	.word	0x7ff00000
 8018244:	0801a09a 	.word	0x0801a09a
 8018248:	3ff80000 	.word	0x3ff80000
 801824c:	0801a1d8 	.word	0x0801a1d8
 8018250:	0801a139 	.word	0x0801a139
 8018254:	0801a0c6 	.word	0x0801a0c6
 8018258:	0801a099 	.word	0x0801a099
 801825c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018260:	6018      	str	r0, [r3, #0]
 8018262:	9b07      	ldr	r3, [sp, #28]
 8018264:	2b0e      	cmp	r3, #14
 8018266:	f200 80a4 	bhi.w	80183b2 <_dtoa_r+0x442>
 801826a:	2c00      	cmp	r4, #0
 801826c:	f000 80a1 	beq.w	80183b2 <_dtoa_r+0x442>
 8018270:	2f00      	cmp	r7, #0
 8018272:	dd33      	ble.n	80182dc <_dtoa_r+0x36c>
 8018274:	4bad      	ldr	r3, [pc, #692]	@ (801852c <_dtoa_r+0x5bc>)
 8018276:	f007 020f 	and.w	r2, r7, #15
 801827a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801827e:	ed93 7b00 	vldr	d7, [r3]
 8018282:	05f8      	lsls	r0, r7, #23
 8018284:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018288:	ea4f 1427 	mov.w	r4, r7, asr #4
 801828c:	d516      	bpl.n	80182bc <_dtoa_r+0x34c>
 801828e:	4ba8      	ldr	r3, [pc, #672]	@ (8018530 <_dtoa_r+0x5c0>)
 8018290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018298:	f7e8 fae0 	bl	800085c <__aeabi_ddiv>
 801829c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182a0:	f004 040f 	and.w	r4, r4, #15
 80182a4:	2603      	movs	r6, #3
 80182a6:	4da2      	ldr	r5, [pc, #648]	@ (8018530 <_dtoa_r+0x5c0>)
 80182a8:	b954      	cbnz	r4, 80182c0 <_dtoa_r+0x350>
 80182aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80182ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80182b2:	f7e8 fad3 	bl	800085c <__aeabi_ddiv>
 80182b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182ba:	e028      	b.n	801830e <_dtoa_r+0x39e>
 80182bc:	2602      	movs	r6, #2
 80182be:	e7f2      	b.n	80182a6 <_dtoa_r+0x336>
 80182c0:	07e1      	lsls	r1, r4, #31
 80182c2:	d508      	bpl.n	80182d6 <_dtoa_r+0x366>
 80182c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80182c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80182cc:	f7e8 f99c 	bl	8000608 <__aeabi_dmul>
 80182d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80182d4:	3601      	adds	r6, #1
 80182d6:	1064      	asrs	r4, r4, #1
 80182d8:	3508      	adds	r5, #8
 80182da:	e7e5      	b.n	80182a8 <_dtoa_r+0x338>
 80182dc:	f000 80d2 	beq.w	8018484 <_dtoa_r+0x514>
 80182e0:	427c      	negs	r4, r7
 80182e2:	4b92      	ldr	r3, [pc, #584]	@ (801852c <_dtoa_r+0x5bc>)
 80182e4:	4d92      	ldr	r5, [pc, #584]	@ (8018530 <_dtoa_r+0x5c0>)
 80182e6:	f004 020f 	and.w	r2, r4, #15
 80182ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80182ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80182f6:	f7e8 f987 	bl	8000608 <__aeabi_dmul>
 80182fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182fe:	1124      	asrs	r4, r4, #4
 8018300:	2300      	movs	r3, #0
 8018302:	2602      	movs	r6, #2
 8018304:	2c00      	cmp	r4, #0
 8018306:	f040 80b2 	bne.w	801846e <_dtoa_r+0x4fe>
 801830a:	2b00      	cmp	r3, #0
 801830c:	d1d3      	bne.n	80182b6 <_dtoa_r+0x346>
 801830e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018310:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018314:	2b00      	cmp	r3, #0
 8018316:	f000 80b7 	beq.w	8018488 <_dtoa_r+0x518>
 801831a:	4b86      	ldr	r3, [pc, #536]	@ (8018534 <_dtoa_r+0x5c4>)
 801831c:	2200      	movs	r2, #0
 801831e:	4620      	mov	r0, r4
 8018320:	4629      	mov	r1, r5
 8018322:	f7e8 fbe3 	bl	8000aec <__aeabi_dcmplt>
 8018326:	2800      	cmp	r0, #0
 8018328:	f000 80ae 	beq.w	8018488 <_dtoa_r+0x518>
 801832c:	9b07      	ldr	r3, [sp, #28]
 801832e:	2b00      	cmp	r3, #0
 8018330:	f000 80aa 	beq.w	8018488 <_dtoa_r+0x518>
 8018334:	9b00      	ldr	r3, [sp, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	dd37      	ble.n	80183aa <_dtoa_r+0x43a>
 801833a:	1e7b      	subs	r3, r7, #1
 801833c:	9304      	str	r3, [sp, #16]
 801833e:	4620      	mov	r0, r4
 8018340:	4b7d      	ldr	r3, [pc, #500]	@ (8018538 <_dtoa_r+0x5c8>)
 8018342:	2200      	movs	r2, #0
 8018344:	4629      	mov	r1, r5
 8018346:	f7e8 f95f 	bl	8000608 <__aeabi_dmul>
 801834a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801834e:	9c00      	ldr	r4, [sp, #0]
 8018350:	3601      	adds	r6, #1
 8018352:	4630      	mov	r0, r6
 8018354:	f7e8 f8ee 	bl	8000534 <__aeabi_i2d>
 8018358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801835c:	f7e8 f954 	bl	8000608 <__aeabi_dmul>
 8018360:	4b76      	ldr	r3, [pc, #472]	@ (801853c <_dtoa_r+0x5cc>)
 8018362:	2200      	movs	r2, #0
 8018364:	f7e7 ff9a 	bl	800029c <__adddf3>
 8018368:	4605      	mov	r5, r0
 801836a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801836e:	2c00      	cmp	r4, #0
 8018370:	f040 808d 	bne.w	801848e <_dtoa_r+0x51e>
 8018374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018378:	4b71      	ldr	r3, [pc, #452]	@ (8018540 <_dtoa_r+0x5d0>)
 801837a:	2200      	movs	r2, #0
 801837c:	f7e7 ff8c 	bl	8000298 <__aeabi_dsub>
 8018380:	4602      	mov	r2, r0
 8018382:	460b      	mov	r3, r1
 8018384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018388:	462a      	mov	r2, r5
 801838a:	4633      	mov	r3, r6
 801838c:	f7e8 fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 8018390:	2800      	cmp	r0, #0
 8018392:	f040 828b 	bne.w	80188ac <_dtoa_r+0x93c>
 8018396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801839a:	462a      	mov	r2, r5
 801839c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80183a0:	f7e8 fba4 	bl	8000aec <__aeabi_dcmplt>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	f040 8128 	bne.w	80185fa <_dtoa_r+0x68a>
 80183aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80183ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80183b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	f2c0 815a 	blt.w	801866e <_dtoa_r+0x6fe>
 80183ba:	2f0e      	cmp	r7, #14
 80183bc:	f300 8157 	bgt.w	801866e <_dtoa_r+0x6fe>
 80183c0:	4b5a      	ldr	r3, [pc, #360]	@ (801852c <_dtoa_r+0x5bc>)
 80183c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80183c6:	ed93 7b00 	vldr	d7, [r3]
 80183ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	ed8d 7b00 	vstr	d7, [sp]
 80183d2:	da03      	bge.n	80183dc <_dtoa_r+0x46c>
 80183d4:	9b07      	ldr	r3, [sp, #28]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	f340 8101 	ble.w	80185de <_dtoa_r+0x66e>
 80183dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80183e0:	4656      	mov	r6, sl
 80183e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183e6:	4620      	mov	r0, r4
 80183e8:	4629      	mov	r1, r5
 80183ea:	f7e8 fa37 	bl	800085c <__aeabi_ddiv>
 80183ee:	f7e8 fbbb 	bl	8000b68 <__aeabi_d2iz>
 80183f2:	4680      	mov	r8, r0
 80183f4:	f7e8 f89e 	bl	8000534 <__aeabi_i2d>
 80183f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183fc:	f7e8 f904 	bl	8000608 <__aeabi_dmul>
 8018400:	4602      	mov	r2, r0
 8018402:	460b      	mov	r3, r1
 8018404:	4620      	mov	r0, r4
 8018406:	4629      	mov	r1, r5
 8018408:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801840c:	f7e7 ff44 	bl	8000298 <__aeabi_dsub>
 8018410:	f806 4b01 	strb.w	r4, [r6], #1
 8018414:	9d07      	ldr	r5, [sp, #28]
 8018416:	eba6 040a 	sub.w	r4, r6, sl
 801841a:	42a5      	cmp	r5, r4
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	f040 8117 	bne.w	8018652 <_dtoa_r+0x6e2>
 8018424:	f7e7 ff3a 	bl	800029c <__adddf3>
 8018428:	e9dd 2300 	ldrd	r2, r3, [sp]
 801842c:	4604      	mov	r4, r0
 801842e:	460d      	mov	r5, r1
 8018430:	f7e8 fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8018434:	2800      	cmp	r0, #0
 8018436:	f040 80f9 	bne.w	801862c <_dtoa_r+0x6bc>
 801843a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801843e:	4620      	mov	r0, r4
 8018440:	4629      	mov	r1, r5
 8018442:	f7e8 fb49 	bl	8000ad8 <__aeabi_dcmpeq>
 8018446:	b118      	cbz	r0, 8018450 <_dtoa_r+0x4e0>
 8018448:	f018 0f01 	tst.w	r8, #1
 801844c:	f040 80ee 	bne.w	801862c <_dtoa_r+0x6bc>
 8018450:	4649      	mov	r1, r9
 8018452:	4658      	mov	r0, fp
 8018454:	f000 fbda 	bl	8018c0c <_Bfree>
 8018458:	2300      	movs	r3, #0
 801845a:	7033      	strb	r3, [r6, #0]
 801845c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801845e:	3701      	adds	r7, #1
 8018460:	601f      	str	r7, [r3, #0]
 8018462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018464:	2b00      	cmp	r3, #0
 8018466:	f000 831d 	beq.w	8018aa4 <_dtoa_r+0xb34>
 801846a:	601e      	str	r6, [r3, #0]
 801846c:	e31a      	b.n	8018aa4 <_dtoa_r+0xb34>
 801846e:	07e2      	lsls	r2, r4, #31
 8018470:	d505      	bpl.n	801847e <_dtoa_r+0x50e>
 8018472:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018476:	f7e8 f8c7 	bl	8000608 <__aeabi_dmul>
 801847a:	3601      	adds	r6, #1
 801847c:	2301      	movs	r3, #1
 801847e:	1064      	asrs	r4, r4, #1
 8018480:	3508      	adds	r5, #8
 8018482:	e73f      	b.n	8018304 <_dtoa_r+0x394>
 8018484:	2602      	movs	r6, #2
 8018486:	e742      	b.n	801830e <_dtoa_r+0x39e>
 8018488:	9c07      	ldr	r4, [sp, #28]
 801848a:	9704      	str	r7, [sp, #16]
 801848c:	e761      	b.n	8018352 <_dtoa_r+0x3e2>
 801848e:	4b27      	ldr	r3, [pc, #156]	@ (801852c <_dtoa_r+0x5bc>)
 8018490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018496:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801849a:	4454      	add	r4, sl
 801849c:	2900      	cmp	r1, #0
 801849e:	d053      	beq.n	8018548 <_dtoa_r+0x5d8>
 80184a0:	4928      	ldr	r1, [pc, #160]	@ (8018544 <_dtoa_r+0x5d4>)
 80184a2:	2000      	movs	r0, #0
 80184a4:	f7e8 f9da 	bl	800085c <__aeabi_ddiv>
 80184a8:	4633      	mov	r3, r6
 80184aa:	462a      	mov	r2, r5
 80184ac:	f7e7 fef4 	bl	8000298 <__aeabi_dsub>
 80184b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80184b4:	4656      	mov	r6, sl
 80184b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184ba:	f7e8 fb55 	bl	8000b68 <__aeabi_d2iz>
 80184be:	4605      	mov	r5, r0
 80184c0:	f7e8 f838 	bl	8000534 <__aeabi_i2d>
 80184c4:	4602      	mov	r2, r0
 80184c6:	460b      	mov	r3, r1
 80184c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184cc:	f7e7 fee4 	bl	8000298 <__aeabi_dsub>
 80184d0:	3530      	adds	r5, #48	@ 0x30
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80184da:	f806 5b01 	strb.w	r5, [r6], #1
 80184de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80184e2:	f7e8 fb03 	bl	8000aec <__aeabi_dcmplt>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d171      	bne.n	80185ce <_dtoa_r+0x65e>
 80184ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184ee:	4911      	ldr	r1, [pc, #68]	@ (8018534 <_dtoa_r+0x5c4>)
 80184f0:	2000      	movs	r0, #0
 80184f2:	f7e7 fed1 	bl	8000298 <__aeabi_dsub>
 80184f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80184fa:	f7e8 faf7 	bl	8000aec <__aeabi_dcmplt>
 80184fe:	2800      	cmp	r0, #0
 8018500:	f040 8095 	bne.w	801862e <_dtoa_r+0x6be>
 8018504:	42a6      	cmp	r6, r4
 8018506:	f43f af50 	beq.w	80183aa <_dtoa_r+0x43a>
 801850a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801850e:	4b0a      	ldr	r3, [pc, #40]	@ (8018538 <_dtoa_r+0x5c8>)
 8018510:	2200      	movs	r2, #0
 8018512:	f7e8 f879 	bl	8000608 <__aeabi_dmul>
 8018516:	4b08      	ldr	r3, [pc, #32]	@ (8018538 <_dtoa_r+0x5c8>)
 8018518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801851c:	2200      	movs	r2, #0
 801851e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018522:	f7e8 f871 	bl	8000608 <__aeabi_dmul>
 8018526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801852a:	e7c4      	b.n	80184b6 <_dtoa_r+0x546>
 801852c:	0801a1d8 	.word	0x0801a1d8
 8018530:	0801a1b0 	.word	0x0801a1b0
 8018534:	3ff00000 	.word	0x3ff00000
 8018538:	40240000 	.word	0x40240000
 801853c:	401c0000 	.word	0x401c0000
 8018540:	40140000 	.word	0x40140000
 8018544:	3fe00000 	.word	0x3fe00000
 8018548:	4631      	mov	r1, r6
 801854a:	4628      	mov	r0, r5
 801854c:	f7e8 f85c 	bl	8000608 <__aeabi_dmul>
 8018550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018554:	9415      	str	r4, [sp, #84]	@ 0x54
 8018556:	4656      	mov	r6, sl
 8018558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801855c:	f7e8 fb04 	bl	8000b68 <__aeabi_d2iz>
 8018560:	4605      	mov	r5, r0
 8018562:	f7e7 ffe7 	bl	8000534 <__aeabi_i2d>
 8018566:	4602      	mov	r2, r0
 8018568:	460b      	mov	r3, r1
 801856a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801856e:	f7e7 fe93 	bl	8000298 <__aeabi_dsub>
 8018572:	3530      	adds	r5, #48	@ 0x30
 8018574:	f806 5b01 	strb.w	r5, [r6], #1
 8018578:	4602      	mov	r2, r0
 801857a:	460b      	mov	r3, r1
 801857c:	42a6      	cmp	r6, r4
 801857e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018582:	f04f 0200 	mov.w	r2, #0
 8018586:	d124      	bne.n	80185d2 <_dtoa_r+0x662>
 8018588:	4bac      	ldr	r3, [pc, #688]	@ (801883c <_dtoa_r+0x8cc>)
 801858a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801858e:	f7e7 fe85 	bl	800029c <__adddf3>
 8018592:	4602      	mov	r2, r0
 8018594:	460b      	mov	r3, r1
 8018596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801859a:	f7e8 fac5 	bl	8000b28 <__aeabi_dcmpgt>
 801859e:	2800      	cmp	r0, #0
 80185a0:	d145      	bne.n	801862e <_dtoa_r+0x6be>
 80185a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80185a6:	49a5      	ldr	r1, [pc, #660]	@ (801883c <_dtoa_r+0x8cc>)
 80185a8:	2000      	movs	r0, #0
 80185aa:	f7e7 fe75 	bl	8000298 <__aeabi_dsub>
 80185ae:	4602      	mov	r2, r0
 80185b0:	460b      	mov	r3, r1
 80185b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185b6:	f7e8 fa99 	bl	8000aec <__aeabi_dcmplt>
 80185ba:	2800      	cmp	r0, #0
 80185bc:	f43f aef5 	beq.w	80183aa <_dtoa_r+0x43a>
 80185c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80185c2:	1e73      	subs	r3, r6, #1
 80185c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80185c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80185ca:	2b30      	cmp	r3, #48	@ 0x30
 80185cc:	d0f8      	beq.n	80185c0 <_dtoa_r+0x650>
 80185ce:	9f04      	ldr	r7, [sp, #16]
 80185d0:	e73e      	b.n	8018450 <_dtoa_r+0x4e0>
 80185d2:	4b9b      	ldr	r3, [pc, #620]	@ (8018840 <_dtoa_r+0x8d0>)
 80185d4:	f7e8 f818 	bl	8000608 <__aeabi_dmul>
 80185d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80185dc:	e7bc      	b.n	8018558 <_dtoa_r+0x5e8>
 80185de:	d10c      	bne.n	80185fa <_dtoa_r+0x68a>
 80185e0:	4b98      	ldr	r3, [pc, #608]	@ (8018844 <_dtoa_r+0x8d4>)
 80185e2:	2200      	movs	r2, #0
 80185e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185e8:	f7e8 f80e 	bl	8000608 <__aeabi_dmul>
 80185ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f0:	f7e8 fa90 	bl	8000b14 <__aeabi_dcmpge>
 80185f4:	2800      	cmp	r0, #0
 80185f6:	f000 8157 	beq.w	80188a8 <_dtoa_r+0x938>
 80185fa:	2400      	movs	r4, #0
 80185fc:	4625      	mov	r5, r4
 80185fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018600:	43db      	mvns	r3, r3
 8018602:	9304      	str	r3, [sp, #16]
 8018604:	4656      	mov	r6, sl
 8018606:	2700      	movs	r7, #0
 8018608:	4621      	mov	r1, r4
 801860a:	4658      	mov	r0, fp
 801860c:	f000 fafe 	bl	8018c0c <_Bfree>
 8018610:	2d00      	cmp	r5, #0
 8018612:	d0dc      	beq.n	80185ce <_dtoa_r+0x65e>
 8018614:	b12f      	cbz	r7, 8018622 <_dtoa_r+0x6b2>
 8018616:	42af      	cmp	r7, r5
 8018618:	d003      	beq.n	8018622 <_dtoa_r+0x6b2>
 801861a:	4639      	mov	r1, r7
 801861c:	4658      	mov	r0, fp
 801861e:	f000 faf5 	bl	8018c0c <_Bfree>
 8018622:	4629      	mov	r1, r5
 8018624:	4658      	mov	r0, fp
 8018626:	f000 faf1 	bl	8018c0c <_Bfree>
 801862a:	e7d0      	b.n	80185ce <_dtoa_r+0x65e>
 801862c:	9704      	str	r7, [sp, #16]
 801862e:	4633      	mov	r3, r6
 8018630:	461e      	mov	r6, r3
 8018632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018636:	2a39      	cmp	r2, #57	@ 0x39
 8018638:	d107      	bne.n	801864a <_dtoa_r+0x6da>
 801863a:	459a      	cmp	sl, r3
 801863c:	d1f8      	bne.n	8018630 <_dtoa_r+0x6c0>
 801863e:	9a04      	ldr	r2, [sp, #16]
 8018640:	3201      	adds	r2, #1
 8018642:	9204      	str	r2, [sp, #16]
 8018644:	2230      	movs	r2, #48	@ 0x30
 8018646:	f88a 2000 	strb.w	r2, [sl]
 801864a:	781a      	ldrb	r2, [r3, #0]
 801864c:	3201      	adds	r2, #1
 801864e:	701a      	strb	r2, [r3, #0]
 8018650:	e7bd      	b.n	80185ce <_dtoa_r+0x65e>
 8018652:	4b7b      	ldr	r3, [pc, #492]	@ (8018840 <_dtoa_r+0x8d0>)
 8018654:	2200      	movs	r2, #0
 8018656:	f7e7 ffd7 	bl	8000608 <__aeabi_dmul>
 801865a:	2200      	movs	r2, #0
 801865c:	2300      	movs	r3, #0
 801865e:	4604      	mov	r4, r0
 8018660:	460d      	mov	r5, r1
 8018662:	f7e8 fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 8018666:	2800      	cmp	r0, #0
 8018668:	f43f aebb 	beq.w	80183e2 <_dtoa_r+0x472>
 801866c:	e6f0      	b.n	8018450 <_dtoa_r+0x4e0>
 801866e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018670:	2a00      	cmp	r2, #0
 8018672:	f000 80db 	beq.w	801882c <_dtoa_r+0x8bc>
 8018676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018678:	2a01      	cmp	r2, #1
 801867a:	f300 80bf 	bgt.w	80187fc <_dtoa_r+0x88c>
 801867e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018680:	2a00      	cmp	r2, #0
 8018682:	f000 80b7 	beq.w	80187f4 <_dtoa_r+0x884>
 8018686:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801868a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801868c:	4646      	mov	r6, r8
 801868e:	9a08      	ldr	r2, [sp, #32]
 8018690:	2101      	movs	r1, #1
 8018692:	441a      	add	r2, r3
 8018694:	4658      	mov	r0, fp
 8018696:	4498      	add	r8, r3
 8018698:	9208      	str	r2, [sp, #32]
 801869a:	f000 fb6b 	bl	8018d74 <__i2b>
 801869e:	4605      	mov	r5, r0
 80186a0:	b15e      	cbz	r6, 80186ba <_dtoa_r+0x74a>
 80186a2:	9b08      	ldr	r3, [sp, #32]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	dd08      	ble.n	80186ba <_dtoa_r+0x74a>
 80186a8:	42b3      	cmp	r3, r6
 80186aa:	9a08      	ldr	r2, [sp, #32]
 80186ac:	bfa8      	it	ge
 80186ae:	4633      	movge	r3, r6
 80186b0:	eba8 0803 	sub.w	r8, r8, r3
 80186b4:	1af6      	subs	r6, r6, r3
 80186b6:	1ad3      	subs	r3, r2, r3
 80186b8:	9308      	str	r3, [sp, #32]
 80186ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80186bc:	b1f3      	cbz	r3, 80186fc <_dtoa_r+0x78c>
 80186be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	f000 80b7 	beq.w	8018834 <_dtoa_r+0x8c4>
 80186c6:	b18c      	cbz	r4, 80186ec <_dtoa_r+0x77c>
 80186c8:	4629      	mov	r1, r5
 80186ca:	4622      	mov	r2, r4
 80186cc:	4658      	mov	r0, fp
 80186ce:	f000 fc11 	bl	8018ef4 <__pow5mult>
 80186d2:	464a      	mov	r2, r9
 80186d4:	4601      	mov	r1, r0
 80186d6:	4605      	mov	r5, r0
 80186d8:	4658      	mov	r0, fp
 80186da:	f000 fb61 	bl	8018da0 <__multiply>
 80186de:	4649      	mov	r1, r9
 80186e0:	9004      	str	r0, [sp, #16]
 80186e2:	4658      	mov	r0, fp
 80186e4:	f000 fa92 	bl	8018c0c <_Bfree>
 80186e8:	9b04      	ldr	r3, [sp, #16]
 80186ea:	4699      	mov	r9, r3
 80186ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80186ee:	1b1a      	subs	r2, r3, r4
 80186f0:	d004      	beq.n	80186fc <_dtoa_r+0x78c>
 80186f2:	4649      	mov	r1, r9
 80186f4:	4658      	mov	r0, fp
 80186f6:	f000 fbfd 	bl	8018ef4 <__pow5mult>
 80186fa:	4681      	mov	r9, r0
 80186fc:	2101      	movs	r1, #1
 80186fe:	4658      	mov	r0, fp
 8018700:	f000 fb38 	bl	8018d74 <__i2b>
 8018704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018706:	4604      	mov	r4, r0
 8018708:	2b00      	cmp	r3, #0
 801870a:	f000 81cf 	beq.w	8018aac <_dtoa_r+0xb3c>
 801870e:	461a      	mov	r2, r3
 8018710:	4601      	mov	r1, r0
 8018712:	4658      	mov	r0, fp
 8018714:	f000 fbee 	bl	8018ef4 <__pow5mult>
 8018718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801871a:	2b01      	cmp	r3, #1
 801871c:	4604      	mov	r4, r0
 801871e:	f300 8095 	bgt.w	801884c <_dtoa_r+0x8dc>
 8018722:	9b02      	ldr	r3, [sp, #8]
 8018724:	2b00      	cmp	r3, #0
 8018726:	f040 8087 	bne.w	8018838 <_dtoa_r+0x8c8>
 801872a:	9b03      	ldr	r3, [sp, #12]
 801872c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018730:	2b00      	cmp	r3, #0
 8018732:	f040 8089 	bne.w	8018848 <_dtoa_r+0x8d8>
 8018736:	9b03      	ldr	r3, [sp, #12]
 8018738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801873c:	0d1b      	lsrs	r3, r3, #20
 801873e:	051b      	lsls	r3, r3, #20
 8018740:	b12b      	cbz	r3, 801874e <_dtoa_r+0x7de>
 8018742:	9b08      	ldr	r3, [sp, #32]
 8018744:	3301      	adds	r3, #1
 8018746:	9308      	str	r3, [sp, #32]
 8018748:	f108 0801 	add.w	r8, r8, #1
 801874c:	2301      	movs	r3, #1
 801874e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018752:	2b00      	cmp	r3, #0
 8018754:	f000 81b0 	beq.w	8018ab8 <_dtoa_r+0xb48>
 8018758:	6923      	ldr	r3, [r4, #16]
 801875a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801875e:	6918      	ldr	r0, [r3, #16]
 8018760:	f000 fabc 	bl	8018cdc <__hi0bits>
 8018764:	f1c0 0020 	rsb	r0, r0, #32
 8018768:	9b08      	ldr	r3, [sp, #32]
 801876a:	4418      	add	r0, r3
 801876c:	f010 001f 	ands.w	r0, r0, #31
 8018770:	d077      	beq.n	8018862 <_dtoa_r+0x8f2>
 8018772:	f1c0 0320 	rsb	r3, r0, #32
 8018776:	2b04      	cmp	r3, #4
 8018778:	dd6b      	ble.n	8018852 <_dtoa_r+0x8e2>
 801877a:	9b08      	ldr	r3, [sp, #32]
 801877c:	f1c0 001c 	rsb	r0, r0, #28
 8018780:	4403      	add	r3, r0
 8018782:	4480      	add	r8, r0
 8018784:	4406      	add	r6, r0
 8018786:	9308      	str	r3, [sp, #32]
 8018788:	f1b8 0f00 	cmp.w	r8, #0
 801878c:	dd05      	ble.n	801879a <_dtoa_r+0x82a>
 801878e:	4649      	mov	r1, r9
 8018790:	4642      	mov	r2, r8
 8018792:	4658      	mov	r0, fp
 8018794:	f000 fc08 	bl	8018fa8 <__lshift>
 8018798:	4681      	mov	r9, r0
 801879a:	9b08      	ldr	r3, [sp, #32]
 801879c:	2b00      	cmp	r3, #0
 801879e:	dd05      	ble.n	80187ac <_dtoa_r+0x83c>
 80187a0:	4621      	mov	r1, r4
 80187a2:	461a      	mov	r2, r3
 80187a4:	4658      	mov	r0, fp
 80187a6:	f000 fbff 	bl	8018fa8 <__lshift>
 80187aa:	4604      	mov	r4, r0
 80187ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d059      	beq.n	8018866 <_dtoa_r+0x8f6>
 80187b2:	4621      	mov	r1, r4
 80187b4:	4648      	mov	r0, r9
 80187b6:	f000 fc63 	bl	8019080 <__mcmp>
 80187ba:	2800      	cmp	r0, #0
 80187bc:	da53      	bge.n	8018866 <_dtoa_r+0x8f6>
 80187be:	1e7b      	subs	r3, r7, #1
 80187c0:	9304      	str	r3, [sp, #16]
 80187c2:	4649      	mov	r1, r9
 80187c4:	2300      	movs	r3, #0
 80187c6:	220a      	movs	r2, #10
 80187c8:	4658      	mov	r0, fp
 80187ca:	f000 fa41 	bl	8018c50 <__multadd>
 80187ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187d0:	4681      	mov	r9, r0
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f000 8172 	beq.w	8018abc <_dtoa_r+0xb4c>
 80187d8:	2300      	movs	r3, #0
 80187da:	4629      	mov	r1, r5
 80187dc:	220a      	movs	r2, #10
 80187de:	4658      	mov	r0, fp
 80187e0:	f000 fa36 	bl	8018c50 <__multadd>
 80187e4:	9b00      	ldr	r3, [sp, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	4605      	mov	r5, r0
 80187ea:	dc67      	bgt.n	80188bc <_dtoa_r+0x94c>
 80187ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187ee:	2b02      	cmp	r3, #2
 80187f0:	dc41      	bgt.n	8018876 <_dtoa_r+0x906>
 80187f2:	e063      	b.n	80188bc <_dtoa_r+0x94c>
 80187f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80187f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80187fa:	e746      	b.n	801868a <_dtoa_r+0x71a>
 80187fc:	9b07      	ldr	r3, [sp, #28]
 80187fe:	1e5c      	subs	r4, r3, #1
 8018800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018802:	42a3      	cmp	r3, r4
 8018804:	bfbf      	itttt	lt
 8018806:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018808:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801880a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801880c:	1ae3      	sublt	r3, r4, r3
 801880e:	bfb4      	ite	lt
 8018810:	18d2      	addlt	r2, r2, r3
 8018812:	1b1c      	subge	r4, r3, r4
 8018814:	9b07      	ldr	r3, [sp, #28]
 8018816:	bfbc      	itt	lt
 8018818:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801881a:	2400      	movlt	r4, #0
 801881c:	2b00      	cmp	r3, #0
 801881e:	bfb5      	itete	lt
 8018820:	eba8 0603 	sublt.w	r6, r8, r3
 8018824:	9b07      	ldrge	r3, [sp, #28]
 8018826:	2300      	movlt	r3, #0
 8018828:	4646      	movge	r6, r8
 801882a:	e730      	b.n	801868e <_dtoa_r+0x71e>
 801882c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801882e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018830:	4646      	mov	r6, r8
 8018832:	e735      	b.n	80186a0 <_dtoa_r+0x730>
 8018834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018836:	e75c      	b.n	80186f2 <_dtoa_r+0x782>
 8018838:	2300      	movs	r3, #0
 801883a:	e788      	b.n	801874e <_dtoa_r+0x7de>
 801883c:	3fe00000 	.word	0x3fe00000
 8018840:	40240000 	.word	0x40240000
 8018844:	40140000 	.word	0x40140000
 8018848:	9b02      	ldr	r3, [sp, #8]
 801884a:	e780      	b.n	801874e <_dtoa_r+0x7de>
 801884c:	2300      	movs	r3, #0
 801884e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018850:	e782      	b.n	8018758 <_dtoa_r+0x7e8>
 8018852:	d099      	beq.n	8018788 <_dtoa_r+0x818>
 8018854:	9a08      	ldr	r2, [sp, #32]
 8018856:	331c      	adds	r3, #28
 8018858:	441a      	add	r2, r3
 801885a:	4498      	add	r8, r3
 801885c:	441e      	add	r6, r3
 801885e:	9208      	str	r2, [sp, #32]
 8018860:	e792      	b.n	8018788 <_dtoa_r+0x818>
 8018862:	4603      	mov	r3, r0
 8018864:	e7f6      	b.n	8018854 <_dtoa_r+0x8e4>
 8018866:	9b07      	ldr	r3, [sp, #28]
 8018868:	9704      	str	r7, [sp, #16]
 801886a:	2b00      	cmp	r3, #0
 801886c:	dc20      	bgt.n	80188b0 <_dtoa_r+0x940>
 801886e:	9300      	str	r3, [sp, #0]
 8018870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018872:	2b02      	cmp	r3, #2
 8018874:	dd1e      	ble.n	80188b4 <_dtoa_r+0x944>
 8018876:	9b00      	ldr	r3, [sp, #0]
 8018878:	2b00      	cmp	r3, #0
 801887a:	f47f aec0 	bne.w	80185fe <_dtoa_r+0x68e>
 801887e:	4621      	mov	r1, r4
 8018880:	2205      	movs	r2, #5
 8018882:	4658      	mov	r0, fp
 8018884:	f000 f9e4 	bl	8018c50 <__multadd>
 8018888:	4601      	mov	r1, r0
 801888a:	4604      	mov	r4, r0
 801888c:	4648      	mov	r0, r9
 801888e:	f000 fbf7 	bl	8019080 <__mcmp>
 8018892:	2800      	cmp	r0, #0
 8018894:	f77f aeb3 	ble.w	80185fe <_dtoa_r+0x68e>
 8018898:	4656      	mov	r6, sl
 801889a:	2331      	movs	r3, #49	@ 0x31
 801889c:	f806 3b01 	strb.w	r3, [r6], #1
 80188a0:	9b04      	ldr	r3, [sp, #16]
 80188a2:	3301      	adds	r3, #1
 80188a4:	9304      	str	r3, [sp, #16]
 80188a6:	e6ae      	b.n	8018606 <_dtoa_r+0x696>
 80188a8:	9c07      	ldr	r4, [sp, #28]
 80188aa:	9704      	str	r7, [sp, #16]
 80188ac:	4625      	mov	r5, r4
 80188ae:	e7f3      	b.n	8018898 <_dtoa_r+0x928>
 80188b0:	9b07      	ldr	r3, [sp, #28]
 80188b2:	9300      	str	r3, [sp, #0]
 80188b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	f000 8104 	beq.w	8018ac4 <_dtoa_r+0xb54>
 80188bc:	2e00      	cmp	r6, #0
 80188be:	dd05      	ble.n	80188cc <_dtoa_r+0x95c>
 80188c0:	4629      	mov	r1, r5
 80188c2:	4632      	mov	r2, r6
 80188c4:	4658      	mov	r0, fp
 80188c6:	f000 fb6f 	bl	8018fa8 <__lshift>
 80188ca:	4605      	mov	r5, r0
 80188cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d05a      	beq.n	8018988 <_dtoa_r+0xa18>
 80188d2:	6869      	ldr	r1, [r5, #4]
 80188d4:	4658      	mov	r0, fp
 80188d6:	f000 f959 	bl	8018b8c <_Balloc>
 80188da:	4606      	mov	r6, r0
 80188dc:	b928      	cbnz	r0, 80188ea <_dtoa_r+0x97a>
 80188de:	4b84      	ldr	r3, [pc, #528]	@ (8018af0 <_dtoa_r+0xb80>)
 80188e0:	4602      	mov	r2, r0
 80188e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80188e6:	f7ff bb5a 	b.w	8017f9e <_dtoa_r+0x2e>
 80188ea:	692a      	ldr	r2, [r5, #16]
 80188ec:	3202      	adds	r2, #2
 80188ee:	0092      	lsls	r2, r2, #2
 80188f0:	f105 010c 	add.w	r1, r5, #12
 80188f4:	300c      	adds	r0, #12
 80188f6:	f7ff faa2 	bl	8017e3e <memcpy>
 80188fa:	2201      	movs	r2, #1
 80188fc:	4631      	mov	r1, r6
 80188fe:	4658      	mov	r0, fp
 8018900:	f000 fb52 	bl	8018fa8 <__lshift>
 8018904:	f10a 0301 	add.w	r3, sl, #1
 8018908:	9307      	str	r3, [sp, #28]
 801890a:	9b00      	ldr	r3, [sp, #0]
 801890c:	4453      	add	r3, sl
 801890e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018910:	9b02      	ldr	r3, [sp, #8]
 8018912:	f003 0301 	and.w	r3, r3, #1
 8018916:	462f      	mov	r7, r5
 8018918:	930a      	str	r3, [sp, #40]	@ 0x28
 801891a:	4605      	mov	r5, r0
 801891c:	9b07      	ldr	r3, [sp, #28]
 801891e:	4621      	mov	r1, r4
 8018920:	3b01      	subs	r3, #1
 8018922:	4648      	mov	r0, r9
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	f7ff fa98 	bl	8017e5a <quorem>
 801892a:	4639      	mov	r1, r7
 801892c:	9002      	str	r0, [sp, #8]
 801892e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018932:	4648      	mov	r0, r9
 8018934:	f000 fba4 	bl	8019080 <__mcmp>
 8018938:	462a      	mov	r2, r5
 801893a:	9008      	str	r0, [sp, #32]
 801893c:	4621      	mov	r1, r4
 801893e:	4658      	mov	r0, fp
 8018940:	f000 fbba 	bl	80190b8 <__mdiff>
 8018944:	68c2      	ldr	r2, [r0, #12]
 8018946:	4606      	mov	r6, r0
 8018948:	bb02      	cbnz	r2, 801898c <_dtoa_r+0xa1c>
 801894a:	4601      	mov	r1, r0
 801894c:	4648      	mov	r0, r9
 801894e:	f000 fb97 	bl	8019080 <__mcmp>
 8018952:	4602      	mov	r2, r0
 8018954:	4631      	mov	r1, r6
 8018956:	4658      	mov	r0, fp
 8018958:	920e      	str	r2, [sp, #56]	@ 0x38
 801895a:	f000 f957 	bl	8018c0c <_Bfree>
 801895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018962:	9e07      	ldr	r6, [sp, #28]
 8018964:	ea43 0102 	orr.w	r1, r3, r2
 8018968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801896a:	4319      	orrs	r1, r3
 801896c:	d110      	bne.n	8018990 <_dtoa_r+0xa20>
 801896e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018972:	d029      	beq.n	80189c8 <_dtoa_r+0xa58>
 8018974:	9b08      	ldr	r3, [sp, #32]
 8018976:	2b00      	cmp	r3, #0
 8018978:	dd02      	ble.n	8018980 <_dtoa_r+0xa10>
 801897a:	9b02      	ldr	r3, [sp, #8]
 801897c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018980:	9b00      	ldr	r3, [sp, #0]
 8018982:	f883 8000 	strb.w	r8, [r3]
 8018986:	e63f      	b.n	8018608 <_dtoa_r+0x698>
 8018988:	4628      	mov	r0, r5
 801898a:	e7bb      	b.n	8018904 <_dtoa_r+0x994>
 801898c:	2201      	movs	r2, #1
 801898e:	e7e1      	b.n	8018954 <_dtoa_r+0x9e4>
 8018990:	9b08      	ldr	r3, [sp, #32]
 8018992:	2b00      	cmp	r3, #0
 8018994:	db04      	blt.n	80189a0 <_dtoa_r+0xa30>
 8018996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018998:	430b      	orrs	r3, r1
 801899a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801899c:	430b      	orrs	r3, r1
 801899e:	d120      	bne.n	80189e2 <_dtoa_r+0xa72>
 80189a0:	2a00      	cmp	r2, #0
 80189a2:	dded      	ble.n	8018980 <_dtoa_r+0xa10>
 80189a4:	4649      	mov	r1, r9
 80189a6:	2201      	movs	r2, #1
 80189a8:	4658      	mov	r0, fp
 80189aa:	f000 fafd 	bl	8018fa8 <__lshift>
 80189ae:	4621      	mov	r1, r4
 80189b0:	4681      	mov	r9, r0
 80189b2:	f000 fb65 	bl	8019080 <__mcmp>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	dc03      	bgt.n	80189c2 <_dtoa_r+0xa52>
 80189ba:	d1e1      	bne.n	8018980 <_dtoa_r+0xa10>
 80189bc:	f018 0f01 	tst.w	r8, #1
 80189c0:	d0de      	beq.n	8018980 <_dtoa_r+0xa10>
 80189c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80189c6:	d1d8      	bne.n	801897a <_dtoa_r+0xa0a>
 80189c8:	9a00      	ldr	r2, [sp, #0]
 80189ca:	2339      	movs	r3, #57	@ 0x39
 80189cc:	7013      	strb	r3, [r2, #0]
 80189ce:	4633      	mov	r3, r6
 80189d0:	461e      	mov	r6, r3
 80189d2:	3b01      	subs	r3, #1
 80189d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80189d8:	2a39      	cmp	r2, #57	@ 0x39
 80189da:	d052      	beq.n	8018a82 <_dtoa_r+0xb12>
 80189dc:	3201      	adds	r2, #1
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	e612      	b.n	8018608 <_dtoa_r+0x698>
 80189e2:	2a00      	cmp	r2, #0
 80189e4:	dd07      	ble.n	80189f6 <_dtoa_r+0xa86>
 80189e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80189ea:	d0ed      	beq.n	80189c8 <_dtoa_r+0xa58>
 80189ec:	9a00      	ldr	r2, [sp, #0]
 80189ee:	f108 0301 	add.w	r3, r8, #1
 80189f2:	7013      	strb	r3, [r2, #0]
 80189f4:	e608      	b.n	8018608 <_dtoa_r+0x698>
 80189f6:	9b07      	ldr	r3, [sp, #28]
 80189f8:	9a07      	ldr	r2, [sp, #28]
 80189fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80189fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a00:	4293      	cmp	r3, r2
 8018a02:	d028      	beq.n	8018a56 <_dtoa_r+0xae6>
 8018a04:	4649      	mov	r1, r9
 8018a06:	2300      	movs	r3, #0
 8018a08:	220a      	movs	r2, #10
 8018a0a:	4658      	mov	r0, fp
 8018a0c:	f000 f920 	bl	8018c50 <__multadd>
 8018a10:	42af      	cmp	r7, r5
 8018a12:	4681      	mov	r9, r0
 8018a14:	f04f 0300 	mov.w	r3, #0
 8018a18:	f04f 020a 	mov.w	r2, #10
 8018a1c:	4639      	mov	r1, r7
 8018a1e:	4658      	mov	r0, fp
 8018a20:	d107      	bne.n	8018a32 <_dtoa_r+0xac2>
 8018a22:	f000 f915 	bl	8018c50 <__multadd>
 8018a26:	4607      	mov	r7, r0
 8018a28:	4605      	mov	r5, r0
 8018a2a:	9b07      	ldr	r3, [sp, #28]
 8018a2c:	3301      	adds	r3, #1
 8018a2e:	9307      	str	r3, [sp, #28]
 8018a30:	e774      	b.n	801891c <_dtoa_r+0x9ac>
 8018a32:	f000 f90d 	bl	8018c50 <__multadd>
 8018a36:	4629      	mov	r1, r5
 8018a38:	4607      	mov	r7, r0
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	220a      	movs	r2, #10
 8018a3e:	4658      	mov	r0, fp
 8018a40:	f000 f906 	bl	8018c50 <__multadd>
 8018a44:	4605      	mov	r5, r0
 8018a46:	e7f0      	b.n	8018a2a <_dtoa_r+0xaba>
 8018a48:	9b00      	ldr	r3, [sp, #0]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	bfcc      	ite	gt
 8018a4e:	461e      	movgt	r6, r3
 8018a50:	2601      	movle	r6, #1
 8018a52:	4456      	add	r6, sl
 8018a54:	2700      	movs	r7, #0
 8018a56:	4649      	mov	r1, r9
 8018a58:	2201      	movs	r2, #1
 8018a5a:	4658      	mov	r0, fp
 8018a5c:	f000 faa4 	bl	8018fa8 <__lshift>
 8018a60:	4621      	mov	r1, r4
 8018a62:	4681      	mov	r9, r0
 8018a64:	f000 fb0c 	bl	8019080 <__mcmp>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	dcb0      	bgt.n	80189ce <_dtoa_r+0xa5e>
 8018a6c:	d102      	bne.n	8018a74 <_dtoa_r+0xb04>
 8018a6e:	f018 0f01 	tst.w	r8, #1
 8018a72:	d1ac      	bne.n	80189ce <_dtoa_r+0xa5e>
 8018a74:	4633      	mov	r3, r6
 8018a76:	461e      	mov	r6, r3
 8018a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a7c:	2a30      	cmp	r2, #48	@ 0x30
 8018a7e:	d0fa      	beq.n	8018a76 <_dtoa_r+0xb06>
 8018a80:	e5c2      	b.n	8018608 <_dtoa_r+0x698>
 8018a82:	459a      	cmp	sl, r3
 8018a84:	d1a4      	bne.n	80189d0 <_dtoa_r+0xa60>
 8018a86:	9b04      	ldr	r3, [sp, #16]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	9304      	str	r3, [sp, #16]
 8018a8c:	2331      	movs	r3, #49	@ 0x31
 8018a8e:	f88a 3000 	strb.w	r3, [sl]
 8018a92:	e5b9      	b.n	8018608 <_dtoa_r+0x698>
 8018a94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018a96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018af4 <_dtoa_r+0xb84>
 8018a9a:	b11b      	cbz	r3, 8018aa4 <_dtoa_r+0xb34>
 8018a9c:	f10a 0308 	add.w	r3, sl, #8
 8018aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018aa2:	6013      	str	r3, [r2, #0]
 8018aa4:	4650      	mov	r0, sl
 8018aa6:	b019      	add	sp, #100	@ 0x64
 8018aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018aae:	2b01      	cmp	r3, #1
 8018ab0:	f77f ae37 	ble.w	8018722 <_dtoa_r+0x7b2>
 8018ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ab8:	2001      	movs	r0, #1
 8018aba:	e655      	b.n	8018768 <_dtoa_r+0x7f8>
 8018abc:	9b00      	ldr	r3, [sp, #0]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f77f aed6 	ble.w	8018870 <_dtoa_r+0x900>
 8018ac4:	4656      	mov	r6, sl
 8018ac6:	4621      	mov	r1, r4
 8018ac8:	4648      	mov	r0, r9
 8018aca:	f7ff f9c6 	bl	8017e5a <quorem>
 8018ace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018ad2:	f806 8b01 	strb.w	r8, [r6], #1
 8018ad6:	9b00      	ldr	r3, [sp, #0]
 8018ad8:	eba6 020a 	sub.w	r2, r6, sl
 8018adc:	4293      	cmp	r3, r2
 8018ade:	ddb3      	ble.n	8018a48 <_dtoa_r+0xad8>
 8018ae0:	4649      	mov	r1, r9
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	220a      	movs	r2, #10
 8018ae6:	4658      	mov	r0, fp
 8018ae8:	f000 f8b2 	bl	8018c50 <__multadd>
 8018aec:	4681      	mov	r9, r0
 8018aee:	e7ea      	b.n	8018ac6 <_dtoa_r+0xb56>
 8018af0:	0801a139 	.word	0x0801a139
 8018af4:	0801a0bd 	.word	0x0801a0bd

08018af8 <_free_r>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	4605      	mov	r5, r0
 8018afc:	2900      	cmp	r1, #0
 8018afe:	d041      	beq.n	8018b84 <_free_r+0x8c>
 8018b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b04:	1f0c      	subs	r4, r1, #4
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	bfb8      	it	lt
 8018b0a:	18e4      	addlt	r4, r4, r3
 8018b0c:	f7fe fa94 	bl	8017038 <__malloc_lock>
 8018b10:	4a1d      	ldr	r2, [pc, #116]	@ (8018b88 <_free_r+0x90>)
 8018b12:	6813      	ldr	r3, [r2, #0]
 8018b14:	b933      	cbnz	r3, 8018b24 <_free_r+0x2c>
 8018b16:	6063      	str	r3, [r4, #4]
 8018b18:	6014      	str	r4, [r2, #0]
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b20:	f7fe ba90 	b.w	8017044 <__malloc_unlock>
 8018b24:	42a3      	cmp	r3, r4
 8018b26:	d908      	bls.n	8018b3a <_free_r+0x42>
 8018b28:	6820      	ldr	r0, [r4, #0]
 8018b2a:	1821      	adds	r1, r4, r0
 8018b2c:	428b      	cmp	r3, r1
 8018b2e:	bf01      	itttt	eq
 8018b30:	6819      	ldreq	r1, [r3, #0]
 8018b32:	685b      	ldreq	r3, [r3, #4]
 8018b34:	1809      	addeq	r1, r1, r0
 8018b36:	6021      	streq	r1, [r4, #0]
 8018b38:	e7ed      	b.n	8018b16 <_free_r+0x1e>
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	685b      	ldr	r3, [r3, #4]
 8018b3e:	b10b      	cbz	r3, 8018b44 <_free_r+0x4c>
 8018b40:	42a3      	cmp	r3, r4
 8018b42:	d9fa      	bls.n	8018b3a <_free_r+0x42>
 8018b44:	6811      	ldr	r1, [r2, #0]
 8018b46:	1850      	adds	r0, r2, r1
 8018b48:	42a0      	cmp	r0, r4
 8018b4a:	d10b      	bne.n	8018b64 <_free_r+0x6c>
 8018b4c:	6820      	ldr	r0, [r4, #0]
 8018b4e:	4401      	add	r1, r0
 8018b50:	1850      	adds	r0, r2, r1
 8018b52:	4283      	cmp	r3, r0
 8018b54:	6011      	str	r1, [r2, #0]
 8018b56:	d1e0      	bne.n	8018b1a <_free_r+0x22>
 8018b58:	6818      	ldr	r0, [r3, #0]
 8018b5a:	685b      	ldr	r3, [r3, #4]
 8018b5c:	6053      	str	r3, [r2, #4]
 8018b5e:	4408      	add	r0, r1
 8018b60:	6010      	str	r0, [r2, #0]
 8018b62:	e7da      	b.n	8018b1a <_free_r+0x22>
 8018b64:	d902      	bls.n	8018b6c <_free_r+0x74>
 8018b66:	230c      	movs	r3, #12
 8018b68:	602b      	str	r3, [r5, #0]
 8018b6a:	e7d6      	b.n	8018b1a <_free_r+0x22>
 8018b6c:	6820      	ldr	r0, [r4, #0]
 8018b6e:	1821      	adds	r1, r4, r0
 8018b70:	428b      	cmp	r3, r1
 8018b72:	bf04      	itt	eq
 8018b74:	6819      	ldreq	r1, [r3, #0]
 8018b76:	685b      	ldreq	r3, [r3, #4]
 8018b78:	6063      	str	r3, [r4, #4]
 8018b7a:	bf04      	itt	eq
 8018b7c:	1809      	addeq	r1, r1, r0
 8018b7e:	6021      	streq	r1, [r4, #0]
 8018b80:	6054      	str	r4, [r2, #4]
 8018b82:	e7ca      	b.n	8018b1a <_free_r+0x22>
 8018b84:	bd38      	pop	{r3, r4, r5, pc}
 8018b86:	bf00      	nop
 8018b88:	200061cc 	.word	0x200061cc

08018b8c <_Balloc>:
 8018b8c:	b570      	push	{r4, r5, r6, lr}
 8018b8e:	69c6      	ldr	r6, [r0, #28]
 8018b90:	4604      	mov	r4, r0
 8018b92:	460d      	mov	r5, r1
 8018b94:	b976      	cbnz	r6, 8018bb4 <_Balloc+0x28>
 8018b96:	2010      	movs	r0, #16
 8018b98:	f7fe f99c 	bl	8016ed4 <malloc>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	61e0      	str	r0, [r4, #28]
 8018ba0:	b920      	cbnz	r0, 8018bac <_Balloc+0x20>
 8018ba2:	4b18      	ldr	r3, [pc, #96]	@ (8018c04 <_Balloc+0x78>)
 8018ba4:	4818      	ldr	r0, [pc, #96]	@ (8018c08 <_Balloc+0x7c>)
 8018ba6:	216b      	movs	r1, #107	@ 0x6b
 8018ba8:	f000 fd7e 	bl	80196a8 <__assert_func>
 8018bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018bb0:	6006      	str	r6, [r0, #0]
 8018bb2:	60c6      	str	r6, [r0, #12]
 8018bb4:	69e6      	ldr	r6, [r4, #28]
 8018bb6:	68f3      	ldr	r3, [r6, #12]
 8018bb8:	b183      	cbz	r3, 8018bdc <_Balloc+0x50>
 8018bba:	69e3      	ldr	r3, [r4, #28]
 8018bbc:	68db      	ldr	r3, [r3, #12]
 8018bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018bc2:	b9b8      	cbnz	r0, 8018bf4 <_Balloc+0x68>
 8018bc4:	2101      	movs	r1, #1
 8018bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8018bca:	1d72      	adds	r2, r6, #5
 8018bcc:	0092      	lsls	r2, r2, #2
 8018bce:	4620      	mov	r0, r4
 8018bd0:	f000 fd88 	bl	80196e4 <_calloc_r>
 8018bd4:	b160      	cbz	r0, 8018bf0 <_Balloc+0x64>
 8018bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018bda:	e00e      	b.n	8018bfa <_Balloc+0x6e>
 8018bdc:	2221      	movs	r2, #33	@ 0x21
 8018bde:	2104      	movs	r1, #4
 8018be0:	4620      	mov	r0, r4
 8018be2:	f000 fd7f 	bl	80196e4 <_calloc_r>
 8018be6:	69e3      	ldr	r3, [r4, #28]
 8018be8:	60f0      	str	r0, [r6, #12]
 8018bea:	68db      	ldr	r3, [r3, #12]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d1e4      	bne.n	8018bba <_Balloc+0x2e>
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	bd70      	pop	{r4, r5, r6, pc}
 8018bf4:	6802      	ldr	r2, [r0, #0]
 8018bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c00:	e7f7      	b.n	8018bf2 <_Balloc+0x66>
 8018c02:	bf00      	nop
 8018c04:	0801a0ca 	.word	0x0801a0ca
 8018c08:	0801a14a 	.word	0x0801a14a

08018c0c <_Bfree>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	69c6      	ldr	r6, [r0, #28]
 8018c10:	4605      	mov	r5, r0
 8018c12:	460c      	mov	r4, r1
 8018c14:	b976      	cbnz	r6, 8018c34 <_Bfree+0x28>
 8018c16:	2010      	movs	r0, #16
 8018c18:	f7fe f95c 	bl	8016ed4 <malloc>
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	61e8      	str	r0, [r5, #28]
 8018c20:	b920      	cbnz	r0, 8018c2c <_Bfree+0x20>
 8018c22:	4b09      	ldr	r3, [pc, #36]	@ (8018c48 <_Bfree+0x3c>)
 8018c24:	4809      	ldr	r0, [pc, #36]	@ (8018c4c <_Bfree+0x40>)
 8018c26:	218f      	movs	r1, #143	@ 0x8f
 8018c28:	f000 fd3e 	bl	80196a8 <__assert_func>
 8018c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c30:	6006      	str	r6, [r0, #0]
 8018c32:	60c6      	str	r6, [r0, #12]
 8018c34:	b13c      	cbz	r4, 8018c46 <_Bfree+0x3a>
 8018c36:	69eb      	ldr	r3, [r5, #28]
 8018c38:	6862      	ldr	r2, [r4, #4]
 8018c3a:	68db      	ldr	r3, [r3, #12]
 8018c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c40:	6021      	str	r1, [r4, #0]
 8018c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018c46:	bd70      	pop	{r4, r5, r6, pc}
 8018c48:	0801a0ca 	.word	0x0801a0ca
 8018c4c:	0801a14a 	.word	0x0801a14a

08018c50 <__multadd>:
 8018c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c54:	690d      	ldr	r5, [r1, #16]
 8018c56:	4607      	mov	r7, r0
 8018c58:	460c      	mov	r4, r1
 8018c5a:	461e      	mov	r6, r3
 8018c5c:	f101 0c14 	add.w	ip, r1, #20
 8018c60:	2000      	movs	r0, #0
 8018c62:	f8dc 3000 	ldr.w	r3, [ip]
 8018c66:	b299      	uxth	r1, r3
 8018c68:	fb02 6101 	mla	r1, r2, r1, r6
 8018c6c:	0c1e      	lsrs	r6, r3, #16
 8018c6e:	0c0b      	lsrs	r3, r1, #16
 8018c70:	fb02 3306 	mla	r3, r2, r6, r3
 8018c74:	b289      	uxth	r1, r1
 8018c76:	3001      	adds	r0, #1
 8018c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018c7c:	4285      	cmp	r5, r0
 8018c7e:	f84c 1b04 	str.w	r1, [ip], #4
 8018c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018c86:	dcec      	bgt.n	8018c62 <__multadd+0x12>
 8018c88:	b30e      	cbz	r6, 8018cce <__multadd+0x7e>
 8018c8a:	68a3      	ldr	r3, [r4, #8]
 8018c8c:	42ab      	cmp	r3, r5
 8018c8e:	dc19      	bgt.n	8018cc4 <__multadd+0x74>
 8018c90:	6861      	ldr	r1, [r4, #4]
 8018c92:	4638      	mov	r0, r7
 8018c94:	3101      	adds	r1, #1
 8018c96:	f7ff ff79 	bl	8018b8c <_Balloc>
 8018c9a:	4680      	mov	r8, r0
 8018c9c:	b928      	cbnz	r0, 8018caa <__multadd+0x5a>
 8018c9e:	4602      	mov	r2, r0
 8018ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8018cd4 <__multadd+0x84>)
 8018ca2:	480d      	ldr	r0, [pc, #52]	@ (8018cd8 <__multadd+0x88>)
 8018ca4:	21ba      	movs	r1, #186	@ 0xba
 8018ca6:	f000 fcff 	bl	80196a8 <__assert_func>
 8018caa:	6922      	ldr	r2, [r4, #16]
 8018cac:	3202      	adds	r2, #2
 8018cae:	f104 010c 	add.w	r1, r4, #12
 8018cb2:	0092      	lsls	r2, r2, #2
 8018cb4:	300c      	adds	r0, #12
 8018cb6:	f7ff f8c2 	bl	8017e3e <memcpy>
 8018cba:	4621      	mov	r1, r4
 8018cbc:	4638      	mov	r0, r7
 8018cbe:	f7ff ffa5 	bl	8018c0c <_Bfree>
 8018cc2:	4644      	mov	r4, r8
 8018cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018cc8:	3501      	adds	r5, #1
 8018cca:	615e      	str	r6, [r3, #20]
 8018ccc:	6125      	str	r5, [r4, #16]
 8018cce:	4620      	mov	r0, r4
 8018cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cd4:	0801a139 	.word	0x0801a139
 8018cd8:	0801a14a 	.word	0x0801a14a

08018cdc <__hi0bits>:
 8018cdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	bf36      	itet	cc
 8018ce4:	0403      	lslcc	r3, r0, #16
 8018ce6:	2000      	movcs	r0, #0
 8018ce8:	2010      	movcc	r0, #16
 8018cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018cee:	bf3c      	itt	cc
 8018cf0:	021b      	lslcc	r3, r3, #8
 8018cf2:	3008      	addcc	r0, #8
 8018cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018cf8:	bf3c      	itt	cc
 8018cfa:	011b      	lslcc	r3, r3, #4
 8018cfc:	3004      	addcc	r0, #4
 8018cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d02:	bf3c      	itt	cc
 8018d04:	009b      	lslcc	r3, r3, #2
 8018d06:	3002      	addcc	r0, #2
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	db05      	blt.n	8018d18 <__hi0bits+0x3c>
 8018d0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018d10:	f100 0001 	add.w	r0, r0, #1
 8018d14:	bf08      	it	eq
 8018d16:	2020      	moveq	r0, #32
 8018d18:	4770      	bx	lr

08018d1a <__lo0bits>:
 8018d1a:	6803      	ldr	r3, [r0, #0]
 8018d1c:	4602      	mov	r2, r0
 8018d1e:	f013 0007 	ands.w	r0, r3, #7
 8018d22:	d00b      	beq.n	8018d3c <__lo0bits+0x22>
 8018d24:	07d9      	lsls	r1, r3, #31
 8018d26:	d421      	bmi.n	8018d6c <__lo0bits+0x52>
 8018d28:	0798      	lsls	r0, r3, #30
 8018d2a:	bf49      	itett	mi
 8018d2c:	085b      	lsrmi	r3, r3, #1
 8018d2e:	089b      	lsrpl	r3, r3, #2
 8018d30:	2001      	movmi	r0, #1
 8018d32:	6013      	strmi	r3, [r2, #0]
 8018d34:	bf5c      	itt	pl
 8018d36:	6013      	strpl	r3, [r2, #0]
 8018d38:	2002      	movpl	r0, #2
 8018d3a:	4770      	bx	lr
 8018d3c:	b299      	uxth	r1, r3
 8018d3e:	b909      	cbnz	r1, 8018d44 <__lo0bits+0x2a>
 8018d40:	0c1b      	lsrs	r3, r3, #16
 8018d42:	2010      	movs	r0, #16
 8018d44:	b2d9      	uxtb	r1, r3
 8018d46:	b909      	cbnz	r1, 8018d4c <__lo0bits+0x32>
 8018d48:	3008      	adds	r0, #8
 8018d4a:	0a1b      	lsrs	r3, r3, #8
 8018d4c:	0719      	lsls	r1, r3, #28
 8018d4e:	bf04      	itt	eq
 8018d50:	091b      	lsreq	r3, r3, #4
 8018d52:	3004      	addeq	r0, #4
 8018d54:	0799      	lsls	r1, r3, #30
 8018d56:	bf04      	itt	eq
 8018d58:	089b      	lsreq	r3, r3, #2
 8018d5a:	3002      	addeq	r0, #2
 8018d5c:	07d9      	lsls	r1, r3, #31
 8018d5e:	d403      	bmi.n	8018d68 <__lo0bits+0x4e>
 8018d60:	085b      	lsrs	r3, r3, #1
 8018d62:	f100 0001 	add.w	r0, r0, #1
 8018d66:	d003      	beq.n	8018d70 <__lo0bits+0x56>
 8018d68:	6013      	str	r3, [r2, #0]
 8018d6a:	4770      	bx	lr
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	4770      	bx	lr
 8018d70:	2020      	movs	r0, #32
 8018d72:	4770      	bx	lr

08018d74 <__i2b>:
 8018d74:	b510      	push	{r4, lr}
 8018d76:	460c      	mov	r4, r1
 8018d78:	2101      	movs	r1, #1
 8018d7a:	f7ff ff07 	bl	8018b8c <_Balloc>
 8018d7e:	4602      	mov	r2, r0
 8018d80:	b928      	cbnz	r0, 8018d8e <__i2b+0x1a>
 8018d82:	4b05      	ldr	r3, [pc, #20]	@ (8018d98 <__i2b+0x24>)
 8018d84:	4805      	ldr	r0, [pc, #20]	@ (8018d9c <__i2b+0x28>)
 8018d86:	f240 1145 	movw	r1, #325	@ 0x145
 8018d8a:	f000 fc8d 	bl	80196a8 <__assert_func>
 8018d8e:	2301      	movs	r3, #1
 8018d90:	6144      	str	r4, [r0, #20]
 8018d92:	6103      	str	r3, [r0, #16]
 8018d94:	bd10      	pop	{r4, pc}
 8018d96:	bf00      	nop
 8018d98:	0801a139 	.word	0x0801a139
 8018d9c:	0801a14a 	.word	0x0801a14a

08018da0 <__multiply>:
 8018da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da4:	4614      	mov	r4, r2
 8018da6:	690a      	ldr	r2, [r1, #16]
 8018da8:	6923      	ldr	r3, [r4, #16]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	bfa8      	it	ge
 8018dae:	4623      	movge	r3, r4
 8018db0:	460f      	mov	r7, r1
 8018db2:	bfa4      	itt	ge
 8018db4:	460c      	movge	r4, r1
 8018db6:	461f      	movge	r7, r3
 8018db8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018dbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018dc0:	68a3      	ldr	r3, [r4, #8]
 8018dc2:	6861      	ldr	r1, [r4, #4]
 8018dc4:	eb0a 0609 	add.w	r6, sl, r9
 8018dc8:	42b3      	cmp	r3, r6
 8018dca:	b085      	sub	sp, #20
 8018dcc:	bfb8      	it	lt
 8018dce:	3101      	addlt	r1, #1
 8018dd0:	f7ff fedc 	bl	8018b8c <_Balloc>
 8018dd4:	b930      	cbnz	r0, 8018de4 <__multiply+0x44>
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	4b44      	ldr	r3, [pc, #272]	@ (8018eec <__multiply+0x14c>)
 8018dda:	4845      	ldr	r0, [pc, #276]	@ (8018ef0 <__multiply+0x150>)
 8018ddc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018de0:	f000 fc62 	bl	80196a8 <__assert_func>
 8018de4:	f100 0514 	add.w	r5, r0, #20
 8018de8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018dec:	462b      	mov	r3, r5
 8018dee:	2200      	movs	r2, #0
 8018df0:	4543      	cmp	r3, r8
 8018df2:	d321      	bcc.n	8018e38 <__multiply+0x98>
 8018df4:	f107 0114 	add.w	r1, r7, #20
 8018df8:	f104 0214 	add.w	r2, r4, #20
 8018dfc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018e00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018e04:	9302      	str	r3, [sp, #8]
 8018e06:	1b13      	subs	r3, r2, r4
 8018e08:	3b15      	subs	r3, #21
 8018e0a:	f023 0303 	bic.w	r3, r3, #3
 8018e0e:	3304      	adds	r3, #4
 8018e10:	f104 0715 	add.w	r7, r4, #21
 8018e14:	42ba      	cmp	r2, r7
 8018e16:	bf38      	it	cc
 8018e18:	2304      	movcc	r3, #4
 8018e1a:	9301      	str	r3, [sp, #4]
 8018e1c:	9b02      	ldr	r3, [sp, #8]
 8018e1e:	9103      	str	r1, [sp, #12]
 8018e20:	428b      	cmp	r3, r1
 8018e22:	d80c      	bhi.n	8018e3e <__multiply+0x9e>
 8018e24:	2e00      	cmp	r6, #0
 8018e26:	dd03      	ble.n	8018e30 <__multiply+0x90>
 8018e28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d05b      	beq.n	8018ee8 <__multiply+0x148>
 8018e30:	6106      	str	r6, [r0, #16]
 8018e32:	b005      	add	sp, #20
 8018e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e38:	f843 2b04 	str.w	r2, [r3], #4
 8018e3c:	e7d8      	b.n	8018df0 <__multiply+0x50>
 8018e3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8018e42:	f1ba 0f00 	cmp.w	sl, #0
 8018e46:	d024      	beq.n	8018e92 <__multiply+0xf2>
 8018e48:	f104 0e14 	add.w	lr, r4, #20
 8018e4c:	46a9      	mov	r9, r5
 8018e4e:	f04f 0c00 	mov.w	ip, #0
 8018e52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018e56:	f8d9 3000 	ldr.w	r3, [r9]
 8018e5a:	fa1f fb87 	uxth.w	fp, r7
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	fb0a 330b 	mla	r3, sl, fp, r3
 8018e64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018e68:	f8d9 7000 	ldr.w	r7, [r9]
 8018e6c:	4463      	add	r3, ip
 8018e6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018e72:	fb0a c70b 	mla	r7, sl, fp, ip
 8018e76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018e7a:	b29b      	uxth	r3, r3
 8018e7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018e80:	4572      	cmp	r2, lr
 8018e82:	f849 3b04 	str.w	r3, [r9], #4
 8018e86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018e8a:	d8e2      	bhi.n	8018e52 <__multiply+0xb2>
 8018e8c:	9b01      	ldr	r3, [sp, #4]
 8018e8e:	f845 c003 	str.w	ip, [r5, r3]
 8018e92:	9b03      	ldr	r3, [sp, #12]
 8018e94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018e98:	3104      	adds	r1, #4
 8018e9a:	f1b9 0f00 	cmp.w	r9, #0
 8018e9e:	d021      	beq.n	8018ee4 <__multiply+0x144>
 8018ea0:	682b      	ldr	r3, [r5, #0]
 8018ea2:	f104 0c14 	add.w	ip, r4, #20
 8018ea6:	46ae      	mov	lr, r5
 8018ea8:	f04f 0a00 	mov.w	sl, #0
 8018eac:	f8bc b000 	ldrh.w	fp, [ip]
 8018eb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018eb4:	fb09 770b 	mla	r7, r9, fp, r7
 8018eb8:	4457      	add	r7, sl
 8018eba:	b29b      	uxth	r3, r3
 8018ebc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018ec0:	f84e 3b04 	str.w	r3, [lr], #4
 8018ec4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018ec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ecc:	f8be 3000 	ldrh.w	r3, [lr]
 8018ed0:	fb09 330a 	mla	r3, r9, sl, r3
 8018ed4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018ed8:	4562      	cmp	r2, ip
 8018eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ede:	d8e5      	bhi.n	8018eac <__multiply+0x10c>
 8018ee0:	9f01      	ldr	r7, [sp, #4]
 8018ee2:	51eb      	str	r3, [r5, r7]
 8018ee4:	3504      	adds	r5, #4
 8018ee6:	e799      	b.n	8018e1c <__multiply+0x7c>
 8018ee8:	3e01      	subs	r6, #1
 8018eea:	e79b      	b.n	8018e24 <__multiply+0x84>
 8018eec:	0801a139 	.word	0x0801a139
 8018ef0:	0801a14a 	.word	0x0801a14a

08018ef4 <__pow5mult>:
 8018ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ef8:	4615      	mov	r5, r2
 8018efa:	f012 0203 	ands.w	r2, r2, #3
 8018efe:	4607      	mov	r7, r0
 8018f00:	460e      	mov	r6, r1
 8018f02:	d007      	beq.n	8018f14 <__pow5mult+0x20>
 8018f04:	4c25      	ldr	r4, [pc, #148]	@ (8018f9c <__pow5mult+0xa8>)
 8018f06:	3a01      	subs	r2, #1
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f0e:	f7ff fe9f 	bl	8018c50 <__multadd>
 8018f12:	4606      	mov	r6, r0
 8018f14:	10ad      	asrs	r5, r5, #2
 8018f16:	d03d      	beq.n	8018f94 <__pow5mult+0xa0>
 8018f18:	69fc      	ldr	r4, [r7, #28]
 8018f1a:	b97c      	cbnz	r4, 8018f3c <__pow5mult+0x48>
 8018f1c:	2010      	movs	r0, #16
 8018f1e:	f7fd ffd9 	bl	8016ed4 <malloc>
 8018f22:	4602      	mov	r2, r0
 8018f24:	61f8      	str	r0, [r7, #28]
 8018f26:	b928      	cbnz	r0, 8018f34 <__pow5mult+0x40>
 8018f28:	4b1d      	ldr	r3, [pc, #116]	@ (8018fa0 <__pow5mult+0xac>)
 8018f2a:	481e      	ldr	r0, [pc, #120]	@ (8018fa4 <__pow5mult+0xb0>)
 8018f2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018f30:	f000 fbba 	bl	80196a8 <__assert_func>
 8018f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f38:	6004      	str	r4, [r0, #0]
 8018f3a:	60c4      	str	r4, [r0, #12]
 8018f3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f44:	b94c      	cbnz	r4, 8018f5a <__pow5mult+0x66>
 8018f46:	f240 2171 	movw	r1, #625	@ 0x271
 8018f4a:	4638      	mov	r0, r7
 8018f4c:	f7ff ff12 	bl	8018d74 <__i2b>
 8018f50:	2300      	movs	r3, #0
 8018f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f56:	4604      	mov	r4, r0
 8018f58:	6003      	str	r3, [r0, #0]
 8018f5a:	f04f 0900 	mov.w	r9, #0
 8018f5e:	07eb      	lsls	r3, r5, #31
 8018f60:	d50a      	bpl.n	8018f78 <__pow5mult+0x84>
 8018f62:	4631      	mov	r1, r6
 8018f64:	4622      	mov	r2, r4
 8018f66:	4638      	mov	r0, r7
 8018f68:	f7ff ff1a 	bl	8018da0 <__multiply>
 8018f6c:	4631      	mov	r1, r6
 8018f6e:	4680      	mov	r8, r0
 8018f70:	4638      	mov	r0, r7
 8018f72:	f7ff fe4b 	bl	8018c0c <_Bfree>
 8018f76:	4646      	mov	r6, r8
 8018f78:	106d      	asrs	r5, r5, #1
 8018f7a:	d00b      	beq.n	8018f94 <__pow5mult+0xa0>
 8018f7c:	6820      	ldr	r0, [r4, #0]
 8018f7e:	b938      	cbnz	r0, 8018f90 <__pow5mult+0x9c>
 8018f80:	4622      	mov	r2, r4
 8018f82:	4621      	mov	r1, r4
 8018f84:	4638      	mov	r0, r7
 8018f86:	f7ff ff0b 	bl	8018da0 <__multiply>
 8018f8a:	6020      	str	r0, [r4, #0]
 8018f8c:	f8c0 9000 	str.w	r9, [r0]
 8018f90:	4604      	mov	r4, r0
 8018f92:	e7e4      	b.n	8018f5e <__pow5mult+0x6a>
 8018f94:	4630      	mov	r0, r6
 8018f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f9a:	bf00      	nop
 8018f9c:	0801a1a4 	.word	0x0801a1a4
 8018fa0:	0801a0ca 	.word	0x0801a0ca
 8018fa4:	0801a14a 	.word	0x0801a14a

08018fa8 <__lshift>:
 8018fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fac:	460c      	mov	r4, r1
 8018fae:	6849      	ldr	r1, [r1, #4]
 8018fb0:	6923      	ldr	r3, [r4, #16]
 8018fb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018fb6:	68a3      	ldr	r3, [r4, #8]
 8018fb8:	4607      	mov	r7, r0
 8018fba:	4691      	mov	r9, r2
 8018fbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018fc0:	f108 0601 	add.w	r6, r8, #1
 8018fc4:	42b3      	cmp	r3, r6
 8018fc6:	db0b      	blt.n	8018fe0 <__lshift+0x38>
 8018fc8:	4638      	mov	r0, r7
 8018fca:	f7ff fddf 	bl	8018b8c <_Balloc>
 8018fce:	4605      	mov	r5, r0
 8018fd0:	b948      	cbnz	r0, 8018fe6 <__lshift+0x3e>
 8018fd2:	4602      	mov	r2, r0
 8018fd4:	4b28      	ldr	r3, [pc, #160]	@ (8019078 <__lshift+0xd0>)
 8018fd6:	4829      	ldr	r0, [pc, #164]	@ (801907c <__lshift+0xd4>)
 8018fd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018fdc:	f000 fb64 	bl	80196a8 <__assert_func>
 8018fe0:	3101      	adds	r1, #1
 8018fe2:	005b      	lsls	r3, r3, #1
 8018fe4:	e7ee      	b.n	8018fc4 <__lshift+0x1c>
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	f100 0114 	add.w	r1, r0, #20
 8018fec:	f100 0210 	add.w	r2, r0, #16
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	4553      	cmp	r3, sl
 8018ff4:	db33      	blt.n	801905e <__lshift+0xb6>
 8018ff6:	6920      	ldr	r0, [r4, #16]
 8018ff8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ffc:	f104 0314 	add.w	r3, r4, #20
 8019000:	f019 091f 	ands.w	r9, r9, #31
 8019004:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019008:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801900c:	d02b      	beq.n	8019066 <__lshift+0xbe>
 801900e:	f1c9 0e20 	rsb	lr, r9, #32
 8019012:	468a      	mov	sl, r1
 8019014:	2200      	movs	r2, #0
 8019016:	6818      	ldr	r0, [r3, #0]
 8019018:	fa00 f009 	lsl.w	r0, r0, r9
 801901c:	4310      	orrs	r0, r2
 801901e:	f84a 0b04 	str.w	r0, [sl], #4
 8019022:	f853 2b04 	ldr.w	r2, [r3], #4
 8019026:	459c      	cmp	ip, r3
 8019028:	fa22 f20e 	lsr.w	r2, r2, lr
 801902c:	d8f3      	bhi.n	8019016 <__lshift+0x6e>
 801902e:	ebac 0304 	sub.w	r3, ip, r4
 8019032:	3b15      	subs	r3, #21
 8019034:	f023 0303 	bic.w	r3, r3, #3
 8019038:	3304      	adds	r3, #4
 801903a:	f104 0015 	add.w	r0, r4, #21
 801903e:	4584      	cmp	ip, r0
 8019040:	bf38      	it	cc
 8019042:	2304      	movcc	r3, #4
 8019044:	50ca      	str	r2, [r1, r3]
 8019046:	b10a      	cbz	r2, 801904c <__lshift+0xa4>
 8019048:	f108 0602 	add.w	r6, r8, #2
 801904c:	3e01      	subs	r6, #1
 801904e:	4638      	mov	r0, r7
 8019050:	612e      	str	r6, [r5, #16]
 8019052:	4621      	mov	r1, r4
 8019054:	f7ff fdda 	bl	8018c0c <_Bfree>
 8019058:	4628      	mov	r0, r5
 801905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801905e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019062:	3301      	adds	r3, #1
 8019064:	e7c5      	b.n	8018ff2 <__lshift+0x4a>
 8019066:	3904      	subs	r1, #4
 8019068:	f853 2b04 	ldr.w	r2, [r3], #4
 801906c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019070:	459c      	cmp	ip, r3
 8019072:	d8f9      	bhi.n	8019068 <__lshift+0xc0>
 8019074:	e7ea      	b.n	801904c <__lshift+0xa4>
 8019076:	bf00      	nop
 8019078:	0801a139 	.word	0x0801a139
 801907c:	0801a14a 	.word	0x0801a14a

08019080 <__mcmp>:
 8019080:	690a      	ldr	r2, [r1, #16]
 8019082:	4603      	mov	r3, r0
 8019084:	6900      	ldr	r0, [r0, #16]
 8019086:	1a80      	subs	r0, r0, r2
 8019088:	b530      	push	{r4, r5, lr}
 801908a:	d10e      	bne.n	80190aa <__mcmp+0x2a>
 801908c:	3314      	adds	r3, #20
 801908e:	3114      	adds	r1, #20
 8019090:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019094:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019098:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801909c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80190a0:	4295      	cmp	r5, r2
 80190a2:	d003      	beq.n	80190ac <__mcmp+0x2c>
 80190a4:	d205      	bcs.n	80190b2 <__mcmp+0x32>
 80190a6:	f04f 30ff 	mov.w	r0, #4294967295
 80190aa:	bd30      	pop	{r4, r5, pc}
 80190ac:	42a3      	cmp	r3, r4
 80190ae:	d3f3      	bcc.n	8019098 <__mcmp+0x18>
 80190b0:	e7fb      	b.n	80190aa <__mcmp+0x2a>
 80190b2:	2001      	movs	r0, #1
 80190b4:	e7f9      	b.n	80190aa <__mcmp+0x2a>
	...

080190b8 <__mdiff>:
 80190b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190bc:	4689      	mov	r9, r1
 80190be:	4606      	mov	r6, r0
 80190c0:	4611      	mov	r1, r2
 80190c2:	4648      	mov	r0, r9
 80190c4:	4614      	mov	r4, r2
 80190c6:	f7ff ffdb 	bl	8019080 <__mcmp>
 80190ca:	1e05      	subs	r5, r0, #0
 80190cc:	d112      	bne.n	80190f4 <__mdiff+0x3c>
 80190ce:	4629      	mov	r1, r5
 80190d0:	4630      	mov	r0, r6
 80190d2:	f7ff fd5b 	bl	8018b8c <_Balloc>
 80190d6:	4602      	mov	r2, r0
 80190d8:	b928      	cbnz	r0, 80190e6 <__mdiff+0x2e>
 80190da:	4b3f      	ldr	r3, [pc, #252]	@ (80191d8 <__mdiff+0x120>)
 80190dc:	f240 2137 	movw	r1, #567	@ 0x237
 80190e0:	483e      	ldr	r0, [pc, #248]	@ (80191dc <__mdiff+0x124>)
 80190e2:	f000 fae1 	bl	80196a8 <__assert_func>
 80190e6:	2301      	movs	r3, #1
 80190e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80190ec:	4610      	mov	r0, r2
 80190ee:	b003      	add	sp, #12
 80190f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f4:	bfbc      	itt	lt
 80190f6:	464b      	movlt	r3, r9
 80190f8:	46a1      	movlt	r9, r4
 80190fa:	4630      	mov	r0, r6
 80190fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019100:	bfba      	itte	lt
 8019102:	461c      	movlt	r4, r3
 8019104:	2501      	movlt	r5, #1
 8019106:	2500      	movge	r5, #0
 8019108:	f7ff fd40 	bl	8018b8c <_Balloc>
 801910c:	4602      	mov	r2, r0
 801910e:	b918      	cbnz	r0, 8019118 <__mdiff+0x60>
 8019110:	4b31      	ldr	r3, [pc, #196]	@ (80191d8 <__mdiff+0x120>)
 8019112:	f240 2145 	movw	r1, #581	@ 0x245
 8019116:	e7e3      	b.n	80190e0 <__mdiff+0x28>
 8019118:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801911c:	6926      	ldr	r6, [r4, #16]
 801911e:	60c5      	str	r5, [r0, #12]
 8019120:	f109 0310 	add.w	r3, r9, #16
 8019124:	f109 0514 	add.w	r5, r9, #20
 8019128:	f104 0e14 	add.w	lr, r4, #20
 801912c:	f100 0b14 	add.w	fp, r0, #20
 8019130:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019134:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019138:	9301      	str	r3, [sp, #4]
 801913a:	46d9      	mov	r9, fp
 801913c:	f04f 0c00 	mov.w	ip, #0
 8019140:	9b01      	ldr	r3, [sp, #4]
 8019142:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019146:	f853 af04 	ldr.w	sl, [r3, #4]!
 801914a:	9301      	str	r3, [sp, #4]
 801914c:	fa1f f38a 	uxth.w	r3, sl
 8019150:	4619      	mov	r1, r3
 8019152:	b283      	uxth	r3, r0
 8019154:	1acb      	subs	r3, r1, r3
 8019156:	0c00      	lsrs	r0, r0, #16
 8019158:	4463      	add	r3, ip
 801915a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801915e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8019162:	b29b      	uxth	r3, r3
 8019164:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019168:	4576      	cmp	r6, lr
 801916a:	f849 3b04 	str.w	r3, [r9], #4
 801916e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019172:	d8e5      	bhi.n	8019140 <__mdiff+0x88>
 8019174:	1b33      	subs	r3, r6, r4
 8019176:	3b15      	subs	r3, #21
 8019178:	f023 0303 	bic.w	r3, r3, #3
 801917c:	3415      	adds	r4, #21
 801917e:	3304      	adds	r3, #4
 8019180:	42a6      	cmp	r6, r4
 8019182:	bf38      	it	cc
 8019184:	2304      	movcc	r3, #4
 8019186:	441d      	add	r5, r3
 8019188:	445b      	add	r3, fp
 801918a:	461e      	mov	r6, r3
 801918c:	462c      	mov	r4, r5
 801918e:	4544      	cmp	r4, r8
 8019190:	d30e      	bcc.n	80191b0 <__mdiff+0xf8>
 8019192:	f108 0103 	add.w	r1, r8, #3
 8019196:	1b49      	subs	r1, r1, r5
 8019198:	f021 0103 	bic.w	r1, r1, #3
 801919c:	3d03      	subs	r5, #3
 801919e:	45a8      	cmp	r8, r5
 80191a0:	bf38      	it	cc
 80191a2:	2100      	movcc	r1, #0
 80191a4:	440b      	add	r3, r1
 80191a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80191aa:	b191      	cbz	r1, 80191d2 <__mdiff+0x11a>
 80191ac:	6117      	str	r7, [r2, #16]
 80191ae:	e79d      	b.n	80190ec <__mdiff+0x34>
 80191b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80191b4:	46e6      	mov	lr, ip
 80191b6:	0c08      	lsrs	r0, r1, #16
 80191b8:	fa1c fc81 	uxtah	ip, ip, r1
 80191bc:	4471      	add	r1, lr
 80191be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80191c2:	b289      	uxth	r1, r1
 80191c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80191c8:	f846 1b04 	str.w	r1, [r6], #4
 80191cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80191d0:	e7dd      	b.n	801918e <__mdiff+0xd6>
 80191d2:	3f01      	subs	r7, #1
 80191d4:	e7e7      	b.n	80191a6 <__mdiff+0xee>
 80191d6:	bf00      	nop
 80191d8:	0801a139 	.word	0x0801a139
 80191dc:	0801a14a 	.word	0x0801a14a

080191e0 <__d2b>:
 80191e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80191e4:	460f      	mov	r7, r1
 80191e6:	2101      	movs	r1, #1
 80191e8:	ec59 8b10 	vmov	r8, r9, d0
 80191ec:	4616      	mov	r6, r2
 80191ee:	f7ff fccd 	bl	8018b8c <_Balloc>
 80191f2:	4604      	mov	r4, r0
 80191f4:	b930      	cbnz	r0, 8019204 <__d2b+0x24>
 80191f6:	4602      	mov	r2, r0
 80191f8:	4b23      	ldr	r3, [pc, #140]	@ (8019288 <__d2b+0xa8>)
 80191fa:	4824      	ldr	r0, [pc, #144]	@ (801928c <__d2b+0xac>)
 80191fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8019200:	f000 fa52 	bl	80196a8 <__assert_func>
 8019204:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801920c:	b10d      	cbz	r5, 8019212 <__d2b+0x32>
 801920e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019212:	9301      	str	r3, [sp, #4]
 8019214:	f1b8 0300 	subs.w	r3, r8, #0
 8019218:	d023      	beq.n	8019262 <__d2b+0x82>
 801921a:	4668      	mov	r0, sp
 801921c:	9300      	str	r3, [sp, #0]
 801921e:	f7ff fd7c 	bl	8018d1a <__lo0bits>
 8019222:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019226:	b1d0      	cbz	r0, 801925e <__d2b+0x7e>
 8019228:	f1c0 0320 	rsb	r3, r0, #32
 801922c:	fa02 f303 	lsl.w	r3, r2, r3
 8019230:	430b      	orrs	r3, r1
 8019232:	40c2      	lsrs	r2, r0
 8019234:	6163      	str	r3, [r4, #20]
 8019236:	9201      	str	r2, [sp, #4]
 8019238:	9b01      	ldr	r3, [sp, #4]
 801923a:	61a3      	str	r3, [r4, #24]
 801923c:	2b00      	cmp	r3, #0
 801923e:	bf0c      	ite	eq
 8019240:	2201      	moveq	r2, #1
 8019242:	2202      	movne	r2, #2
 8019244:	6122      	str	r2, [r4, #16]
 8019246:	b1a5      	cbz	r5, 8019272 <__d2b+0x92>
 8019248:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801924c:	4405      	add	r5, r0
 801924e:	603d      	str	r5, [r7, #0]
 8019250:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019254:	6030      	str	r0, [r6, #0]
 8019256:	4620      	mov	r0, r4
 8019258:	b003      	add	sp, #12
 801925a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801925e:	6161      	str	r1, [r4, #20]
 8019260:	e7ea      	b.n	8019238 <__d2b+0x58>
 8019262:	a801      	add	r0, sp, #4
 8019264:	f7ff fd59 	bl	8018d1a <__lo0bits>
 8019268:	9b01      	ldr	r3, [sp, #4]
 801926a:	6163      	str	r3, [r4, #20]
 801926c:	3020      	adds	r0, #32
 801926e:	2201      	movs	r2, #1
 8019270:	e7e8      	b.n	8019244 <__d2b+0x64>
 8019272:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019276:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801927a:	6038      	str	r0, [r7, #0]
 801927c:	6918      	ldr	r0, [r3, #16]
 801927e:	f7ff fd2d 	bl	8018cdc <__hi0bits>
 8019282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019286:	e7e5      	b.n	8019254 <__d2b+0x74>
 8019288:	0801a139 	.word	0x0801a139
 801928c:	0801a14a 	.word	0x0801a14a

08019290 <_malloc_usable_size_r>:
 8019290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019294:	1f18      	subs	r0, r3, #4
 8019296:	2b00      	cmp	r3, #0
 8019298:	bfbc      	itt	lt
 801929a:	580b      	ldrlt	r3, [r1, r0]
 801929c:	18c0      	addlt	r0, r0, r3
 801929e:	4770      	bx	lr

080192a0 <__ssputs_r>:
 80192a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a4:	688e      	ldr	r6, [r1, #8]
 80192a6:	461f      	mov	r7, r3
 80192a8:	42be      	cmp	r6, r7
 80192aa:	680b      	ldr	r3, [r1, #0]
 80192ac:	4682      	mov	sl, r0
 80192ae:	460c      	mov	r4, r1
 80192b0:	4690      	mov	r8, r2
 80192b2:	d82d      	bhi.n	8019310 <__ssputs_r+0x70>
 80192b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80192b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80192bc:	d026      	beq.n	801930c <__ssputs_r+0x6c>
 80192be:	6965      	ldr	r5, [r4, #20]
 80192c0:	6909      	ldr	r1, [r1, #16]
 80192c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192c6:	eba3 0901 	sub.w	r9, r3, r1
 80192ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80192ce:	1c7b      	adds	r3, r7, #1
 80192d0:	444b      	add	r3, r9
 80192d2:	106d      	asrs	r5, r5, #1
 80192d4:	429d      	cmp	r5, r3
 80192d6:	bf38      	it	cc
 80192d8:	461d      	movcc	r5, r3
 80192da:	0553      	lsls	r3, r2, #21
 80192dc:	d527      	bpl.n	801932e <__ssputs_r+0x8e>
 80192de:	4629      	mov	r1, r5
 80192e0:	f7fd fe2a 	bl	8016f38 <_malloc_r>
 80192e4:	4606      	mov	r6, r0
 80192e6:	b360      	cbz	r0, 8019342 <__ssputs_r+0xa2>
 80192e8:	6921      	ldr	r1, [r4, #16]
 80192ea:	464a      	mov	r2, r9
 80192ec:	f7fe fda7 	bl	8017e3e <memcpy>
 80192f0:	89a3      	ldrh	r3, [r4, #12]
 80192f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80192f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80192fa:	81a3      	strh	r3, [r4, #12]
 80192fc:	6126      	str	r6, [r4, #16]
 80192fe:	6165      	str	r5, [r4, #20]
 8019300:	444e      	add	r6, r9
 8019302:	eba5 0509 	sub.w	r5, r5, r9
 8019306:	6026      	str	r6, [r4, #0]
 8019308:	60a5      	str	r5, [r4, #8]
 801930a:	463e      	mov	r6, r7
 801930c:	42be      	cmp	r6, r7
 801930e:	d900      	bls.n	8019312 <__ssputs_r+0x72>
 8019310:	463e      	mov	r6, r7
 8019312:	6820      	ldr	r0, [r4, #0]
 8019314:	4632      	mov	r2, r6
 8019316:	4641      	mov	r1, r8
 8019318:	f7fe fc4d 	bl	8017bb6 <memmove>
 801931c:	68a3      	ldr	r3, [r4, #8]
 801931e:	1b9b      	subs	r3, r3, r6
 8019320:	60a3      	str	r3, [r4, #8]
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	4433      	add	r3, r6
 8019326:	6023      	str	r3, [r4, #0]
 8019328:	2000      	movs	r0, #0
 801932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801932e:	462a      	mov	r2, r5
 8019330:	f7fd fe96 	bl	8017060 <_realloc_r>
 8019334:	4606      	mov	r6, r0
 8019336:	2800      	cmp	r0, #0
 8019338:	d1e0      	bne.n	80192fc <__ssputs_r+0x5c>
 801933a:	6921      	ldr	r1, [r4, #16]
 801933c:	4650      	mov	r0, sl
 801933e:	f7ff fbdb 	bl	8018af8 <_free_r>
 8019342:	230c      	movs	r3, #12
 8019344:	f8ca 3000 	str.w	r3, [sl]
 8019348:	89a3      	ldrh	r3, [r4, #12]
 801934a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801934e:	81a3      	strh	r3, [r4, #12]
 8019350:	f04f 30ff 	mov.w	r0, #4294967295
 8019354:	e7e9      	b.n	801932a <__ssputs_r+0x8a>
	...

08019358 <_svfiprintf_r>:
 8019358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	4698      	mov	r8, r3
 801935e:	898b      	ldrh	r3, [r1, #12]
 8019360:	061b      	lsls	r3, r3, #24
 8019362:	b09d      	sub	sp, #116	@ 0x74
 8019364:	4607      	mov	r7, r0
 8019366:	460d      	mov	r5, r1
 8019368:	4614      	mov	r4, r2
 801936a:	d510      	bpl.n	801938e <_svfiprintf_r+0x36>
 801936c:	690b      	ldr	r3, [r1, #16]
 801936e:	b973      	cbnz	r3, 801938e <_svfiprintf_r+0x36>
 8019370:	2140      	movs	r1, #64	@ 0x40
 8019372:	f7fd fde1 	bl	8016f38 <_malloc_r>
 8019376:	6028      	str	r0, [r5, #0]
 8019378:	6128      	str	r0, [r5, #16]
 801937a:	b930      	cbnz	r0, 801938a <_svfiprintf_r+0x32>
 801937c:	230c      	movs	r3, #12
 801937e:	603b      	str	r3, [r7, #0]
 8019380:	f04f 30ff 	mov.w	r0, #4294967295
 8019384:	b01d      	add	sp, #116	@ 0x74
 8019386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938a:	2340      	movs	r3, #64	@ 0x40
 801938c:	616b      	str	r3, [r5, #20]
 801938e:	2300      	movs	r3, #0
 8019390:	9309      	str	r3, [sp, #36]	@ 0x24
 8019392:	2320      	movs	r3, #32
 8019394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019398:	f8cd 800c 	str.w	r8, [sp, #12]
 801939c:	2330      	movs	r3, #48	@ 0x30
 801939e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801953c <_svfiprintf_r+0x1e4>
 80193a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80193a6:	f04f 0901 	mov.w	r9, #1
 80193aa:	4623      	mov	r3, r4
 80193ac:	469a      	mov	sl, r3
 80193ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193b2:	b10a      	cbz	r2, 80193b8 <_svfiprintf_r+0x60>
 80193b4:	2a25      	cmp	r2, #37	@ 0x25
 80193b6:	d1f9      	bne.n	80193ac <_svfiprintf_r+0x54>
 80193b8:	ebba 0b04 	subs.w	fp, sl, r4
 80193bc:	d00b      	beq.n	80193d6 <_svfiprintf_r+0x7e>
 80193be:	465b      	mov	r3, fp
 80193c0:	4622      	mov	r2, r4
 80193c2:	4629      	mov	r1, r5
 80193c4:	4638      	mov	r0, r7
 80193c6:	f7ff ff6b 	bl	80192a0 <__ssputs_r>
 80193ca:	3001      	adds	r0, #1
 80193cc:	f000 80a7 	beq.w	801951e <_svfiprintf_r+0x1c6>
 80193d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193d2:	445a      	add	r2, fp
 80193d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80193d6:	f89a 3000 	ldrb.w	r3, [sl]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f000 809f 	beq.w	801951e <_svfiprintf_r+0x1c6>
 80193e0:	2300      	movs	r3, #0
 80193e2:	f04f 32ff 	mov.w	r2, #4294967295
 80193e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193ea:	f10a 0a01 	add.w	sl, sl, #1
 80193ee:	9304      	str	r3, [sp, #16]
 80193f0:	9307      	str	r3, [sp, #28]
 80193f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80193f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80193f8:	4654      	mov	r4, sl
 80193fa:	2205      	movs	r2, #5
 80193fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019400:	484e      	ldr	r0, [pc, #312]	@ (801953c <_svfiprintf_r+0x1e4>)
 8019402:	f7e6 feed 	bl	80001e0 <memchr>
 8019406:	9a04      	ldr	r2, [sp, #16]
 8019408:	b9d8      	cbnz	r0, 8019442 <_svfiprintf_r+0xea>
 801940a:	06d0      	lsls	r0, r2, #27
 801940c:	bf44      	itt	mi
 801940e:	2320      	movmi	r3, #32
 8019410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019414:	0711      	lsls	r1, r2, #28
 8019416:	bf44      	itt	mi
 8019418:	232b      	movmi	r3, #43	@ 0x2b
 801941a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801941e:	f89a 3000 	ldrb.w	r3, [sl]
 8019422:	2b2a      	cmp	r3, #42	@ 0x2a
 8019424:	d015      	beq.n	8019452 <_svfiprintf_r+0xfa>
 8019426:	9a07      	ldr	r2, [sp, #28]
 8019428:	4654      	mov	r4, sl
 801942a:	2000      	movs	r0, #0
 801942c:	f04f 0c0a 	mov.w	ip, #10
 8019430:	4621      	mov	r1, r4
 8019432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019436:	3b30      	subs	r3, #48	@ 0x30
 8019438:	2b09      	cmp	r3, #9
 801943a:	d94b      	bls.n	80194d4 <_svfiprintf_r+0x17c>
 801943c:	b1b0      	cbz	r0, 801946c <_svfiprintf_r+0x114>
 801943e:	9207      	str	r2, [sp, #28]
 8019440:	e014      	b.n	801946c <_svfiprintf_r+0x114>
 8019442:	eba0 0308 	sub.w	r3, r0, r8
 8019446:	fa09 f303 	lsl.w	r3, r9, r3
 801944a:	4313      	orrs	r3, r2
 801944c:	9304      	str	r3, [sp, #16]
 801944e:	46a2      	mov	sl, r4
 8019450:	e7d2      	b.n	80193f8 <_svfiprintf_r+0xa0>
 8019452:	9b03      	ldr	r3, [sp, #12]
 8019454:	1d19      	adds	r1, r3, #4
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	9103      	str	r1, [sp, #12]
 801945a:	2b00      	cmp	r3, #0
 801945c:	bfbb      	ittet	lt
 801945e:	425b      	neglt	r3, r3
 8019460:	f042 0202 	orrlt.w	r2, r2, #2
 8019464:	9307      	strge	r3, [sp, #28]
 8019466:	9307      	strlt	r3, [sp, #28]
 8019468:	bfb8      	it	lt
 801946a:	9204      	strlt	r2, [sp, #16]
 801946c:	7823      	ldrb	r3, [r4, #0]
 801946e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019470:	d10a      	bne.n	8019488 <_svfiprintf_r+0x130>
 8019472:	7863      	ldrb	r3, [r4, #1]
 8019474:	2b2a      	cmp	r3, #42	@ 0x2a
 8019476:	d132      	bne.n	80194de <_svfiprintf_r+0x186>
 8019478:	9b03      	ldr	r3, [sp, #12]
 801947a:	1d1a      	adds	r2, r3, #4
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	9203      	str	r2, [sp, #12]
 8019480:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019484:	3402      	adds	r4, #2
 8019486:	9305      	str	r3, [sp, #20]
 8019488:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801954c <_svfiprintf_r+0x1f4>
 801948c:	7821      	ldrb	r1, [r4, #0]
 801948e:	2203      	movs	r2, #3
 8019490:	4650      	mov	r0, sl
 8019492:	f7e6 fea5 	bl	80001e0 <memchr>
 8019496:	b138      	cbz	r0, 80194a8 <_svfiprintf_r+0x150>
 8019498:	9b04      	ldr	r3, [sp, #16]
 801949a:	eba0 000a 	sub.w	r0, r0, sl
 801949e:	2240      	movs	r2, #64	@ 0x40
 80194a0:	4082      	lsls	r2, r0
 80194a2:	4313      	orrs	r3, r2
 80194a4:	3401      	adds	r4, #1
 80194a6:	9304      	str	r3, [sp, #16]
 80194a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194ac:	4824      	ldr	r0, [pc, #144]	@ (8019540 <_svfiprintf_r+0x1e8>)
 80194ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80194b2:	2206      	movs	r2, #6
 80194b4:	f7e6 fe94 	bl	80001e0 <memchr>
 80194b8:	2800      	cmp	r0, #0
 80194ba:	d036      	beq.n	801952a <_svfiprintf_r+0x1d2>
 80194bc:	4b21      	ldr	r3, [pc, #132]	@ (8019544 <_svfiprintf_r+0x1ec>)
 80194be:	bb1b      	cbnz	r3, 8019508 <_svfiprintf_r+0x1b0>
 80194c0:	9b03      	ldr	r3, [sp, #12]
 80194c2:	3307      	adds	r3, #7
 80194c4:	f023 0307 	bic.w	r3, r3, #7
 80194c8:	3308      	adds	r3, #8
 80194ca:	9303      	str	r3, [sp, #12]
 80194cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194ce:	4433      	add	r3, r6
 80194d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80194d2:	e76a      	b.n	80193aa <_svfiprintf_r+0x52>
 80194d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80194d8:	460c      	mov	r4, r1
 80194da:	2001      	movs	r0, #1
 80194dc:	e7a8      	b.n	8019430 <_svfiprintf_r+0xd8>
 80194de:	2300      	movs	r3, #0
 80194e0:	3401      	adds	r4, #1
 80194e2:	9305      	str	r3, [sp, #20]
 80194e4:	4619      	mov	r1, r3
 80194e6:	f04f 0c0a 	mov.w	ip, #10
 80194ea:	4620      	mov	r0, r4
 80194ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194f0:	3a30      	subs	r2, #48	@ 0x30
 80194f2:	2a09      	cmp	r2, #9
 80194f4:	d903      	bls.n	80194fe <_svfiprintf_r+0x1a6>
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d0c6      	beq.n	8019488 <_svfiprintf_r+0x130>
 80194fa:	9105      	str	r1, [sp, #20]
 80194fc:	e7c4      	b.n	8019488 <_svfiprintf_r+0x130>
 80194fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019502:	4604      	mov	r4, r0
 8019504:	2301      	movs	r3, #1
 8019506:	e7f0      	b.n	80194ea <_svfiprintf_r+0x192>
 8019508:	ab03      	add	r3, sp, #12
 801950a:	9300      	str	r3, [sp, #0]
 801950c:	462a      	mov	r2, r5
 801950e:	4b0e      	ldr	r3, [pc, #56]	@ (8019548 <_svfiprintf_r+0x1f0>)
 8019510:	a904      	add	r1, sp, #16
 8019512:	4638      	mov	r0, r7
 8019514:	f7fd fe72 	bl	80171fc <_printf_float>
 8019518:	1c42      	adds	r2, r0, #1
 801951a:	4606      	mov	r6, r0
 801951c:	d1d6      	bne.n	80194cc <_svfiprintf_r+0x174>
 801951e:	89ab      	ldrh	r3, [r5, #12]
 8019520:	065b      	lsls	r3, r3, #25
 8019522:	f53f af2d 	bmi.w	8019380 <_svfiprintf_r+0x28>
 8019526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019528:	e72c      	b.n	8019384 <_svfiprintf_r+0x2c>
 801952a:	ab03      	add	r3, sp, #12
 801952c:	9300      	str	r3, [sp, #0]
 801952e:	462a      	mov	r2, r5
 8019530:	4b05      	ldr	r3, [pc, #20]	@ (8019548 <_svfiprintf_r+0x1f0>)
 8019532:	a904      	add	r1, sp, #16
 8019534:	4638      	mov	r0, r7
 8019536:	f7fe f8f9 	bl	801772c <_printf_i>
 801953a:	e7ed      	b.n	8019518 <_svfiprintf_r+0x1c0>
 801953c:	0801a2a0 	.word	0x0801a2a0
 8019540:	0801a2aa 	.word	0x0801a2aa
 8019544:	080171fd 	.word	0x080171fd
 8019548:	080192a1 	.word	0x080192a1
 801954c:	0801a2a6 	.word	0x0801a2a6

08019550 <__sflush_r>:
 8019550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019558:	0716      	lsls	r6, r2, #28
 801955a:	4605      	mov	r5, r0
 801955c:	460c      	mov	r4, r1
 801955e:	d454      	bmi.n	801960a <__sflush_r+0xba>
 8019560:	684b      	ldr	r3, [r1, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	dc02      	bgt.n	801956c <__sflush_r+0x1c>
 8019566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019568:	2b00      	cmp	r3, #0
 801956a:	dd48      	ble.n	80195fe <__sflush_r+0xae>
 801956c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801956e:	2e00      	cmp	r6, #0
 8019570:	d045      	beq.n	80195fe <__sflush_r+0xae>
 8019572:	2300      	movs	r3, #0
 8019574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019578:	682f      	ldr	r7, [r5, #0]
 801957a:	6a21      	ldr	r1, [r4, #32]
 801957c:	602b      	str	r3, [r5, #0]
 801957e:	d030      	beq.n	80195e2 <__sflush_r+0x92>
 8019580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019582:	89a3      	ldrh	r3, [r4, #12]
 8019584:	0759      	lsls	r1, r3, #29
 8019586:	d505      	bpl.n	8019594 <__sflush_r+0x44>
 8019588:	6863      	ldr	r3, [r4, #4]
 801958a:	1ad2      	subs	r2, r2, r3
 801958c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801958e:	b10b      	cbz	r3, 8019594 <__sflush_r+0x44>
 8019590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019592:	1ad2      	subs	r2, r2, r3
 8019594:	2300      	movs	r3, #0
 8019596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019598:	6a21      	ldr	r1, [r4, #32]
 801959a:	4628      	mov	r0, r5
 801959c:	47b0      	blx	r6
 801959e:	1c43      	adds	r3, r0, #1
 80195a0:	89a3      	ldrh	r3, [r4, #12]
 80195a2:	d106      	bne.n	80195b2 <__sflush_r+0x62>
 80195a4:	6829      	ldr	r1, [r5, #0]
 80195a6:	291d      	cmp	r1, #29
 80195a8:	d82b      	bhi.n	8019602 <__sflush_r+0xb2>
 80195aa:	4a2a      	ldr	r2, [pc, #168]	@ (8019654 <__sflush_r+0x104>)
 80195ac:	410a      	asrs	r2, r1
 80195ae:	07d6      	lsls	r6, r2, #31
 80195b0:	d427      	bmi.n	8019602 <__sflush_r+0xb2>
 80195b2:	2200      	movs	r2, #0
 80195b4:	6062      	str	r2, [r4, #4]
 80195b6:	04d9      	lsls	r1, r3, #19
 80195b8:	6922      	ldr	r2, [r4, #16]
 80195ba:	6022      	str	r2, [r4, #0]
 80195bc:	d504      	bpl.n	80195c8 <__sflush_r+0x78>
 80195be:	1c42      	adds	r2, r0, #1
 80195c0:	d101      	bne.n	80195c6 <__sflush_r+0x76>
 80195c2:	682b      	ldr	r3, [r5, #0]
 80195c4:	b903      	cbnz	r3, 80195c8 <__sflush_r+0x78>
 80195c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80195c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80195ca:	602f      	str	r7, [r5, #0]
 80195cc:	b1b9      	cbz	r1, 80195fe <__sflush_r+0xae>
 80195ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80195d2:	4299      	cmp	r1, r3
 80195d4:	d002      	beq.n	80195dc <__sflush_r+0x8c>
 80195d6:	4628      	mov	r0, r5
 80195d8:	f7ff fa8e 	bl	8018af8 <_free_r>
 80195dc:	2300      	movs	r3, #0
 80195de:	6363      	str	r3, [r4, #52]	@ 0x34
 80195e0:	e00d      	b.n	80195fe <__sflush_r+0xae>
 80195e2:	2301      	movs	r3, #1
 80195e4:	4628      	mov	r0, r5
 80195e6:	47b0      	blx	r6
 80195e8:	4602      	mov	r2, r0
 80195ea:	1c50      	adds	r0, r2, #1
 80195ec:	d1c9      	bne.n	8019582 <__sflush_r+0x32>
 80195ee:	682b      	ldr	r3, [r5, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d0c6      	beq.n	8019582 <__sflush_r+0x32>
 80195f4:	2b1d      	cmp	r3, #29
 80195f6:	d001      	beq.n	80195fc <__sflush_r+0xac>
 80195f8:	2b16      	cmp	r3, #22
 80195fa:	d11e      	bne.n	801963a <__sflush_r+0xea>
 80195fc:	602f      	str	r7, [r5, #0]
 80195fe:	2000      	movs	r0, #0
 8019600:	e022      	b.n	8019648 <__sflush_r+0xf8>
 8019602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019606:	b21b      	sxth	r3, r3
 8019608:	e01b      	b.n	8019642 <__sflush_r+0xf2>
 801960a:	690f      	ldr	r7, [r1, #16]
 801960c:	2f00      	cmp	r7, #0
 801960e:	d0f6      	beq.n	80195fe <__sflush_r+0xae>
 8019610:	0793      	lsls	r3, r2, #30
 8019612:	680e      	ldr	r6, [r1, #0]
 8019614:	bf08      	it	eq
 8019616:	694b      	ldreq	r3, [r1, #20]
 8019618:	600f      	str	r7, [r1, #0]
 801961a:	bf18      	it	ne
 801961c:	2300      	movne	r3, #0
 801961e:	eba6 0807 	sub.w	r8, r6, r7
 8019622:	608b      	str	r3, [r1, #8]
 8019624:	f1b8 0f00 	cmp.w	r8, #0
 8019628:	dde9      	ble.n	80195fe <__sflush_r+0xae>
 801962a:	6a21      	ldr	r1, [r4, #32]
 801962c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801962e:	4643      	mov	r3, r8
 8019630:	463a      	mov	r2, r7
 8019632:	4628      	mov	r0, r5
 8019634:	47b0      	blx	r6
 8019636:	2800      	cmp	r0, #0
 8019638:	dc08      	bgt.n	801964c <__sflush_r+0xfc>
 801963a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801963e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019642:	81a3      	strh	r3, [r4, #12]
 8019644:	f04f 30ff 	mov.w	r0, #4294967295
 8019648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801964c:	4407      	add	r7, r0
 801964e:	eba8 0800 	sub.w	r8, r8, r0
 8019652:	e7e7      	b.n	8019624 <__sflush_r+0xd4>
 8019654:	dfbffffe 	.word	0xdfbffffe

08019658 <_fflush_r>:
 8019658:	b538      	push	{r3, r4, r5, lr}
 801965a:	690b      	ldr	r3, [r1, #16]
 801965c:	4605      	mov	r5, r0
 801965e:	460c      	mov	r4, r1
 8019660:	b913      	cbnz	r3, 8019668 <_fflush_r+0x10>
 8019662:	2500      	movs	r5, #0
 8019664:	4628      	mov	r0, r5
 8019666:	bd38      	pop	{r3, r4, r5, pc}
 8019668:	b118      	cbz	r0, 8019672 <_fflush_r+0x1a>
 801966a:	6a03      	ldr	r3, [r0, #32]
 801966c:	b90b      	cbnz	r3, 8019672 <_fflush_r+0x1a>
 801966e:	f7fe fa09 	bl	8017a84 <__sinit>
 8019672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d0f3      	beq.n	8019662 <_fflush_r+0xa>
 801967a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801967c:	07d0      	lsls	r0, r2, #31
 801967e:	d404      	bmi.n	801968a <_fflush_r+0x32>
 8019680:	0599      	lsls	r1, r3, #22
 8019682:	d402      	bmi.n	801968a <_fflush_r+0x32>
 8019684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019686:	f7fe fbd8 	bl	8017e3a <__retarget_lock_acquire_recursive>
 801968a:	4628      	mov	r0, r5
 801968c:	4621      	mov	r1, r4
 801968e:	f7ff ff5f 	bl	8019550 <__sflush_r>
 8019692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019694:	07da      	lsls	r2, r3, #31
 8019696:	4605      	mov	r5, r0
 8019698:	d4e4      	bmi.n	8019664 <_fflush_r+0xc>
 801969a:	89a3      	ldrh	r3, [r4, #12]
 801969c:	059b      	lsls	r3, r3, #22
 801969e:	d4e1      	bmi.n	8019664 <_fflush_r+0xc>
 80196a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196a2:	f7fe fbcb 	bl	8017e3c <__retarget_lock_release_recursive>
 80196a6:	e7dd      	b.n	8019664 <_fflush_r+0xc>

080196a8 <__assert_func>:
 80196a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196aa:	4614      	mov	r4, r2
 80196ac:	461a      	mov	r2, r3
 80196ae:	4b09      	ldr	r3, [pc, #36]	@ (80196d4 <__assert_func+0x2c>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	4605      	mov	r5, r0
 80196b4:	68d8      	ldr	r0, [r3, #12]
 80196b6:	b954      	cbnz	r4, 80196ce <__assert_func+0x26>
 80196b8:	4b07      	ldr	r3, [pc, #28]	@ (80196d8 <__assert_func+0x30>)
 80196ba:	461c      	mov	r4, r3
 80196bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80196c0:	9100      	str	r1, [sp, #0]
 80196c2:	462b      	mov	r3, r5
 80196c4:	4905      	ldr	r1, [pc, #20]	@ (80196dc <__assert_func+0x34>)
 80196c6:	f000 f841 	bl	801974c <fiprintf>
 80196ca:	f7fd fbfb 	bl	8016ec4 <abort>
 80196ce:	4b04      	ldr	r3, [pc, #16]	@ (80196e0 <__assert_func+0x38>)
 80196d0:	e7f4      	b.n	80196bc <__assert_func+0x14>
 80196d2:	bf00      	nop
 80196d4:	20000110 	.word	0x20000110
 80196d8:	0801a2f6 	.word	0x0801a2f6
 80196dc:	0801a2c8 	.word	0x0801a2c8
 80196e0:	0801a2bb 	.word	0x0801a2bb

080196e4 <_calloc_r>:
 80196e4:	b570      	push	{r4, r5, r6, lr}
 80196e6:	fba1 5402 	umull	r5, r4, r1, r2
 80196ea:	b93c      	cbnz	r4, 80196fc <_calloc_r+0x18>
 80196ec:	4629      	mov	r1, r5
 80196ee:	f7fd fc23 	bl	8016f38 <_malloc_r>
 80196f2:	4606      	mov	r6, r0
 80196f4:	b928      	cbnz	r0, 8019702 <_calloc_r+0x1e>
 80196f6:	2600      	movs	r6, #0
 80196f8:	4630      	mov	r0, r6
 80196fa:	bd70      	pop	{r4, r5, r6, pc}
 80196fc:	220c      	movs	r2, #12
 80196fe:	6002      	str	r2, [r0, #0]
 8019700:	e7f9      	b.n	80196f6 <_calloc_r+0x12>
 8019702:	462a      	mov	r2, r5
 8019704:	4621      	mov	r1, r4
 8019706:	f7fe fa70 	bl	8017bea <memset>
 801970a:	e7f5      	b.n	80196f8 <_calloc_r+0x14>

0801970c <__ascii_mbtowc>:
 801970c:	b082      	sub	sp, #8
 801970e:	b901      	cbnz	r1, 8019712 <__ascii_mbtowc+0x6>
 8019710:	a901      	add	r1, sp, #4
 8019712:	b142      	cbz	r2, 8019726 <__ascii_mbtowc+0x1a>
 8019714:	b14b      	cbz	r3, 801972a <__ascii_mbtowc+0x1e>
 8019716:	7813      	ldrb	r3, [r2, #0]
 8019718:	600b      	str	r3, [r1, #0]
 801971a:	7812      	ldrb	r2, [r2, #0]
 801971c:	1e10      	subs	r0, r2, #0
 801971e:	bf18      	it	ne
 8019720:	2001      	movne	r0, #1
 8019722:	b002      	add	sp, #8
 8019724:	4770      	bx	lr
 8019726:	4610      	mov	r0, r2
 8019728:	e7fb      	b.n	8019722 <__ascii_mbtowc+0x16>
 801972a:	f06f 0001 	mvn.w	r0, #1
 801972e:	e7f8      	b.n	8019722 <__ascii_mbtowc+0x16>

08019730 <__ascii_wctomb>:
 8019730:	4603      	mov	r3, r0
 8019732:	4608      	mov	r0, r1
 8019734:	b141      	cbz	r1, 8019748 <__ascii_wctomb+0x18>
 8019736:	2aff      	cmp	r2, #255	@ 0xff
 8019738:	d904      	bls.n	8019744 <__ascii_wctomb+0x14>
 801973a:	228a      	movs	r2, #138	@ 0x8a
 801973c:	601a      	str	r2, [r3, #0]
 801973e:	f04f 30ff 	mov.w	r0, #4294967295
 8019742:	4770      	bx	lr
 8019744:	700a      	strb	r2, [r1, #0]
 8019746:	2001      	movs	r0, #1
 8019748:	4770      	bx	lr
	...

0801974c <fiprintf>:
 801974c:	b40e      	push	{r1, r2, r3}
 801974e:	b503      	push	{r0, r1, lr}
 8019750:	4601      	mov	r1, r0
 8019752:	ab03      	add	r3, sp, #12
 8019754:	4805      	ldr	r0, [pc, #20]	@ (801976c <fiprintf+0x20>)
 8019756:	f853 2b04 	ldr.w	r2, [r3], #4
 801975a:	6800      	ldr	r0, [r0, #0]
 801975c:	9301      	str	r3, [sp, #4]
 801975e:	f000 f831 	bl	80197c4 <_vfiprintf_r>
 8019762:	b002      	add	sp, #8
 8019764:	f85d eb04 	ldr.w	lr, [sp], #4
 8019768:	b003      	add	sp, #12
 801976a:	4770      	bx	lr
 801976c:	20000110 	.word	0x20000110

08019770 <__sfputc_r>:
 8019770:	6893      	ldr	r3, [r2, #8]
 8019772:	3b01      	subs	r3, #1
 8019774:	2b00      	cmp	r3, #0
 8019776:	b410      	push	{r4}
 8019778:	6093      	str	r3, [r2, #8]
 801977a:	da08      	bge.n	801978e <__sfputc_r+0x1e>
 801977c:	6994      	ldr	r4, [r2, #24]
 801977e:	42a3      	cmp	r3, r4
 8019780:	db01      	blt.n	8019786 <__sfputc_r+0x16>
 8019782:	290a      	cmp	r1, #10
 8019784:	d103      	bne.n	801978e <__sfputc_r+0x1e>
 8019786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801978a:	f000 b933 	b.w	80199f4 <__swbuf_r>
 801978e:	6813      	ldr	r3, [r2, #0]
 8019790:	1c58      	adds	r0, r3, #1
 8019792:	6010      	str	r0, [r2, #0]
 8019794:	7019      	strb	r1, [r3, #0]
 8019796:	4608      	mov	r0, r1
 8019798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801979c:	4770      	bx	lr

0801979e <__sfputs_r>:
 801979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197a0:	4606      	mov	r6, r0
 80197a2:	460f      	mov	r7, r1
 80197a4:	4614      	mov	r4, r2
 80197a6:	18d5      	adds	r5, r2, r3
 80197a8:	42ac      	cmp	r4, r5
 80197aa:	d101      	bne.n	80197b0 <__sfputs_r+0x12>
 80197ac:	2000      	movs	r0, #0
 80197ae:	e007      	b.n	80197c0 <__sfputs_r+0x22>
 80197b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197b4:	463a      	mov	r2, r7
 80197b6:	4630      	mov	r0, r6
 80197b8:	f7ff ffda 	bl	8019770 <__sfputc_r>
 80197bc:	1c43      	adds	r3, r0, #1
 80197be:	d1f3      	bne.n	80197a8 <__sfputs_r+0xa>
 80197c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197c4 <_vfiprintf_r>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	460d      	mov	r5, r1
 80197ca:	b09d      	sub	sp, #116	@ 0x74
 80197cc:	4614      	mov	r4, r2
 80197ce:	4698      	mov	r8, r3
 80197d0:	4606      	mov	r6, r0
 80197d2:	b118      	cbz	r0, 80197dc <_vfiprintf_r+0x18>
 80197d4:	6a03      	ldr	r3, [r0, #32]
 80197d6:	b90b      	cbnz	r3, 80197dc <_vfiprintf_r+0x18>
 80197d8:	f7fe f954 	bl	8017a84 <__sinit>
 80197dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197de:	07d9      	lsls	r1, r3, #31
 80197e0:	d405      	bmi.n	80197ee <_vfiprintf_r+0x2a>
 80197e2:	89ab      	ldrh	r3, [r5, #12]
 80197e4:	059a      	lsls	r2, r3, #22
 80197e6:	d402      	bmi.n	80197ee <_vfiprintf_r+0x2a>
 80197e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197ea:	f7fe fb26 	bl	8017e3a <__retarget_lock_acquire_recursive>
 80197ee:	89ab      	ldrh	r3, [r5, #12]
 80197f0:	071b      	lsls	r3, r3, #28
 80197f2:	d501      	bpl.n	80197f8 <_vfiprintf_r+0x34>
 80197f4:	692b      	ldr	r3, [r5, #16]
 80197f6:	b99b      	cbnz	r3, 8019820 <_vfiprintf_r+0x5c>
 80197f8:	4629      	mov	r1, r5
 80197fa:	4630      	mov	r0, r6
 80197fc:	f000 f938 	bl	8019a70 <__swsetup_r>
 8019800:	b170      	cbz	r0, 8019820 <_vfiprintf_r+0x5c>
 8019802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019804:	07dc      	lsls	r4, r3, #31
 8019806:	d504      	bpl.n	8019812 <_vfiprintf_r+0x4e>
 8019808:	f04f 30ff 	mov.w	r0, #4294967295
 801980c:	b01d      	add	sp, #116	@ 0x74
 801980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019812:	89ab      	ldrh	r3, [r5, #12]
 8019814:	0598      	lsls	r0, r3, #22
 8019816:	d4f7      	bmi.n	8019808 <_vfiprintf_r+0x44>
 8019818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801981a:	f7fe fb0f 	bl	8017e3c <__retarget_lock_release_recursive>
 801981e:	e7f3      	b.n	8019808 <_vfiprintf_r+0x44>
 8019820:	2300      	movs	r3, #0
 8019822:	9309      	str	r3, [sp, #36]	@ 0x24
 8019824:	2320      	movs	r3, #32
 8019826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801982a:	f8cd 800c 	str.w	r8, [sp, #12]
 801982e:	2330      	movs	r3, #48	@ 0x30
 8019830:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80199e0 <_vfiprintf_r+0x21c>
 8019834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019838:	f04f 0901 	mov.w	r9, #1
 801983c:	4623      	mov	r3, r4
 801983e:	469a      	mov	sl, r3
 8019840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019844:	b10a      	cbz	r2, 801984a <_vfiprintf_r+0x86>
 8019846:	2a25      	cmp	r2, #37	@ 0x25
 8019848:	d1f9      	bne.n	801983e <_vfiprintf_r+0x7a>
 801984a:	ebba 0b04 	subs.w	fp, sl, r4
 801984e:	d00b      	beq.n	8019868 <_vfiprintf_r+0xa4>
 8019850:	465b      	mov	r3, fp
 8019852:	4622      	mov	r2, r4
 8019854:	4629      	mov	r1, r5
 8019856:	4630      	mov	r0, r6
 8019858:	f7ff ffa1 	bl	801979e <__sfputs_r>
 801985c:	3001      	adds	r0, #1
 801985e:	f000 80a7 	beq.w	80199b0 <_vfiprintf_r+0x1ec>
 8019862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019864:	445a      	add	r2, fp
 8019866:	9209      	str	r2, [sp, #36]	@ 0x24
 8019868:	f89a 3000 	ldrb.w	r3, [sl]
 801986c:	2b00      	cmp	r3, #0
 801986e:	f000 809f 	beq.w	80199b0 <_vfiprintf_r+0x1ec>
 8019872:	2300      	movs	r3, #0
 8019874:	f04f 32ff 	mov.w	r2, #4294967295
 8019878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801987c:	f10a 0a01 	add.w	sl, sl, #1
 8019880:	9304      	str	r3, [sp, #16]
 8019882:	9307      	str	r3, [sp, #28]
 8019884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019888:	931a      	str	r3, [sp, #104]	@ 0x68
 801988a:	4654      	mov	r4, sl
 801988c:	2205      	movs	r2, #5
 801988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019892:	4853      	ldr	r0, [pc, #332]	@ (80199e0 <_vfiprintf_r+0x21c>)
 8019894:	f7e6 fca4 	bl	80001e0 <memchr>
 8019898:	9a04      	ldr	r2, [sp, #16]
 801989a:	b9d8      	cbnz	r0, 80198d4 <_vfiprintf_r+0x110>
 801989c:	06d1      	lsls	r1, r2, #27
 801989e:	bf44      	itt	mi
 80198a0:	2320      	movmi	r3, #32
 80198a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198a6:	0713      	lsls	r3, r2, #28
 80198a8:	bf44      	itt	mi
 80198aa:	232b      	movmi	r3, #43	@ 0x2b
 80198ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80198b0:	f89a 3000 	ldrb.w	r3, [sl]
 80198b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80198b6:	d015      	beq.n	80198e4 <_vfiprintf_r+0x120>
 80198b8:	9a07      	ldr	r2, [sp, #28]
 80198ba:	4654      	mov	r4, sl
 80198bc:	2000      	movs	r0, #0
 80198be:	f04f 0c0a 	mov.w	ip, #10
 80198c2:	4621      	mov	r1, r4
 80198c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198c8:	3b30      	subs	r3, #48	@ 0x30
 80198ca:	2b09      	cmp	r3, #9
 80198cc:	d94b      	bls.n	8019966 <_vfiprintf_r+0x1a2>
 80198ce:	b1b0      	cbz	r0, 80198fe <_vfiprintf_r+0x13a>
 80198d0:	9207      	str	r2, [sp, #28]
 80198d2:	e014      	b.n	80198fe <_vfiprintf_r+0x13a>
 80198d4:	eba0 0308 	sub.w	r3, r0, r8
 80198d8:	fa09 f303 	lsl.w	r3, r9, r3
 80198dc:	4313      	orrs	r3, r2
 80198de:	9304      	str	r3, [sp, #16]
 80198e0:	46a2      	mov	sl, r4
 80198e2:	e7d2      	b.n	801988a <_vfiprintf_r+0xc6>
 80198e4:	9b03      	ldr	r3, [sp, #12]
 80198e6:	1d19      	adds	r1, r3, #4
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	9103      	str	r1, [sp, #12]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	bfbb      	ittet	lt
 80198f0:	425b      	neglt	r3, r3
 80198f2:	f042 0202 	orrlt.w	r2, r2, #2
 80198f6:	9307      	strge	r3, [sp, #28]
 80198f8:	9307      	strlt	r3, [sp, #28]
 80198fa:	bfb8      	it	lt
 80198fc:	9204      	strlt	r2, [sp, #16]
 80198fe:	7823      	ldrb	r3, [r4, #0]
 8019900:	2b2e      	cmp	r3, #46	@ 0x2e
 8019902:	d10a      	bne.n	801991a <_vfiprintf_r+0x156>
 8019904:	7863      	ldrb	r3, [r4, #1]
 8019906:	2b2a      	cmp	r3, #42	@ 0x2a
 8019908:	d132      	bne.n	8019970 <_vfiprintf_r+0x1ac>
 801990a:	9b03      	ldr	r3, [sp, #12]
 801990c:	1d1a      	adds	r2, r3, #4
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	9203      	str	r2, [sp, #12]
 8019912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019916:	3402      	adds	r4, #2
 8019918:	9305      	str	r3, [sp, #20]
 801991a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80199f0 <_vfiprintf_r+0x22c>
 801991e:	7821      	ldrb	r1, [r4, #0]
 8019920:	2203      	movs	r2, #3
 8019922:	4650      	mov	r0, sl
 8019924:	f7e6 fc5c 	bl	80001e0 <memchr>
 8019928:	b138      	cbz	r0, 801993a <_vfiprintf_r+0x176>
 801992a:	9b04      	ldr	r3, [sp, #16]
 801992c:	eba0 000a 	sub.w	r0, r0, sl
 8019930:	2240      	movs	r2, #64	@ 0x40
 8019932:	4082      	lsls	r2, r0
 8019934:	4313      	orrs	r3, r2
 8019936:	3401      	adds	r4, #1
 8019938:	9304      	str	r3, [sp, #16]
 801993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801993e:	4829      	ldr	r0, [pc, #164]	@ (80199e4 <_vfiprintf_r+0x220>)
 8019940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019944:	2206      	movs	r2, #6
 8019946:	f7e6 fc4b 	bl	80001e0 <memchr>
 801994a:	2800      	cmp	r0, #0
 801994c:	d03f      	beq.n	80199ce <_vfiprintf_r+0x20a>
 801994e:	4b26      	ldr	r3, [pc, #152]	@ (80199e8 <_vfiprintf_r+0x224>)
 8019950:	bb1b      	cbnz	r3, 801999a <_vfiprintf_r+0x1d6>
 8019952:	9b03      	ldr	r3, [sp, #12]
 8019954:	3307      	adds	r3, #7
 8019956:	f023 0307 	bic.w	r3, r3, #7
 801995a:	3308      	adds	r3, #8
 801995c:	9303      	str	r3, [sp, #12]
 801995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019960:	443b      	add	r3, r7
 8019962:	9309      	str	r3, [sp, #36]	@ 0x24
 8019964:	e76a      	b.n	801983c <_vfiprintf_r+0x78>
 8019966:	fb0c 3202 	mla	r2, ip, r2, r3
 801996a:	460c      	mov	r4, r1
 801996c:	2001      	movs	r0, #1
 801996e:	e7a8      	b.n	80198c2 <_vfiprintf_r+0xfe>
 8019970:	2300      	movs	r3, #0
 8019972:	3401      	adds	r4, #1
 8019974:	9305      	str	r3, [sp, #20]
 8019976:	4619      	mov	r1, r3
 8019978:	f04f 0c0a 	mov.w	ip, #10
 801997c:	4620      	mov	r0, r4
 801997e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019982:	3a30      	subs	r2, #48	@ 0x30
 8019984:	2a09      	cmp	r2, #9
 8019986:	d903      	bls.n	8019990 <_vfiprintf_r+0x1cc>
 8019988:	2b00      	cmp	r3, #0
 801998a:	d0c6      	beq.n	801991a <_vfiprintf_r+0x156>
 801998c:	9105      	str	r1, [sp, #20]
 801998e:	e7c4      	b.n	801991a <_vfiprintf_r+0x156>
 8019990:	fb0c 2101 	mla	r1, ip, r1, r2
 8019994:	4604      	mov	r4, r0
 8019996:	2301      	movs	r3, #1
 8019998:	e7f0      	b.n	801997c <_vfiprintf_r+0x1b8>
 801999a:	ab03      	add	r3, sp, #12
 801999c:	9300      	str	r3, [sp, #0]
 801999e:	462a      	mov	r2, r5
 80199a0:	4b12      	ldr	r3, [pc, #72]	@ (80199ec <_vfiprintf_r+0x228>)
 80199a2:	a904      	add	r1, sp, #16
 80199a4:	4630      	mov	r0, r6
 80199a6:	f7fd fc29 	bl	80171fc <_printf_float>
 80199aa:	4607      	mov	r7, r0
 80199ac:	1c78      	adds	r0, r7, #1
 80199ae:	d1d6      	bne.n	801995e <_vfiprintf_r+0x19a>
 80199b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199b2:	07d9      	lsls	r1, r3, #31
 80199b4:	d405      	bmi.n	80199c2 <_vfiprintf_r+0x1fe>
 80199b6:	89ab      	ldrh	r3, [r5, #12]
 80199b8:	059a      	lsls	r2, r3, #22
 80199ba:	d402      	bmi.n	80199c2 <_vfiprintf_r+0x1fe>
 80199bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199be:	f7fe fa3d 	bl	8017e3c <__retarget_lock_release_recursive>
 80199c2:	89ab      	ldrh	r3, [r5, #12]
 80199c4:	065b      	lsls	r3, r3, #25
 80199c6:	f53f af1f 	bmi.w	8019808 <_vfiprintf_r+0x44>
 80199ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80199cc:	e71e      	b.n	801980c <_vfiprintf_r+0x48>
 80199ce:	ab03      	add	r3, sp, #12
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	462a      	mov	r2, r5
 80199d4:	4b05      	ldr	r3, [pc, #20]	@ (80199ec <_vfiprintf_r+0x228>)
 80199d6:	a904      	add	r1, sp, #16
 80199d8:	4630      	mov	r0, r6
 80199da:	f7fd fea7 	bl	801772c <_printf_i>
 80199de:	e7e4      	b.n	80199aa <_vfiprintf_r+0x1e6>
 80199e0:	0801a2a0 	.word	0x0801a2a0
 80199e4:	0801a2aa 	.word	0x0801a2aa
 80199e8:	080171fd 	.word	0x080171fd
 80199ec:	0801979f 	.word	0x0801979f
 80199f0:	0801a2a6 	.word	0x0801a2a6

080199f4 <__swbuf_r>:
 80199f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199f6:	460e      	mov	r6, r1
 80199f8:	4614      	mov	r4, r2
 80199fa:	4605      	mov	r5, r0
 80199fc:	b118      	cbz	r0, 8019a06 <__swbuf_r+0x12>
 80199fe:	6a03      	ldr	r3, [r0, #32]
 8019a00:	b90b      	cbnz	r3, 8019a06 <__swbuf_r+0x12>
 8019a02:	f7fe f83f 	bl	8017a84 <__sinit>
 8019a06:	69a3      	ldr	r3, [r4, #24]
 8019a08:	60a3      	str	r3, [r4, #8]
 8019a0a:	89a3      	ldrh	r3, [r4, #12]
 8019a0c:	071a      	lsls	r2, r3, #28
 8019a0e:	d501      	bpl.n	8019a14 <__swbuf_r+0x20>
 8019a10:	6923      	ldr	r3, [r4, #16]
 8019a12:	b943      	cbnz	r3, 8019a26 <__swbuf_r+0x32>
 8019a14:	4621      	mov	r1, r4
 8019a16:	4628      	mov	r0, r5
 8019a18:	f000 f82a 	bl	8019a70 <__swsetup_r>
 8019a1c:	b118      	cbz	r0, 8019a26 <__swbuf_r+0x32>
 8019a1e:	f04f 37ff 	mov.w	r7, #4294967295
 8019a22:	4638      	mov	r0, r7
 8019a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a26:	6823      	ldr	r3, [r4, #0]
 8019a28:	6922      	ldr	r2, [r4, #16]
 8019a2a:	1a98      	subs	r0, r3, r2
 8019a2c:	6963      	ldr	r3, [r4, #20]
 8019a2e:	b2f6      	uxtb	r6, r6
 8019a30:	4283      	cmp	r3, r0
 8019a32:	4637      	mov	r7, r6
 8019a34:	dc05      	bgt.n	8019a42 <__swbuf_r+0x4e>
 8019a36:	4621      	mov	r1, r4
 8019a38:	4628      	mov	r0, r5
 8019a3a:	f7ff fe0d 	bl	8019658 <_fflush_r>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d1ed      	bne.n	8019a1e <__swbuf_r+0x2a>
 8019a42:	68a3      	ldr	r3, [r4, #8]
 8019a44:	3b01      	subs	r3, #1
 8019a46:	60a3      	str	r3, [r4, #8]
 8019a48:	6823      	ldr	r3, [r4, #0]
 8019a4a:	1c5a      	adds	r2, r3, #1
 8019a4c:	6022      	str	r2, [r4, #0]
 8019a4e:	701e      	strb	r6, [r3, #0]
 8019a50:	6962      	ldr	r2, [r4, #20]
 8019a52:	1c43      	adds	r3, r0, #1
 8019a54:	429a      	cmp	r2, r3
 8019a56:	d004      	beq.n	8019a62 <__swbuf_r+0x6e>
 8019a58:	89a3      	ldrh	r3, [r4, #12]
 8019a5a:	07db      	lsls	r3, r3, #31
 8019a5c:	d5e1      	bpl.n	8019a22 <__swbuf_r+0x2e>
 8019a5e:	2e0a      	cmp	r6, #10
 8019a60:	d1df      	bne.n	8019a22 <__swbuf_r+0x2e>
 8019a62:	4621      	mov	r1, r4
 8019a64:	4628      	mov	r0, r5
 8019a66:	f7ff fdf7 	bl	8019658 <_fflush_r>
 8019a6a:	2800      	cmp	r0, #0
 8019a6c:	d0d9      	beq.n	8019a22 <__swbuf_r+0x2e>
 8019a6e:	e7d6      	b.n	8019a1e <__swbuf_r+0x2a>

08019a70 <__swsetup_r>:
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4b29      	ldr	r3, [pc, #164]	@ (8019b18 <__swsetup_r+0xa8>)
 8019a74:	4605      	mov	r5, r0
 8019a76:	6818      	ldr	r0, [r3, #0]
 8019a78:	460c      	mov	r4, r1
 8019a7a:	b118      	cbz	r0, 8019a84 <__swsetup_r+0x14>
 8019a7c:	6a03      	ldr	r3, [r0, #32]
 8019a7e:	b90b      	cbnz	r3, 8019a84 <__swsetup_r+0x14>
 8019a80:	f7fe f800 	bl	8017a84 <__sinit>
 8019a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a88:	0719      	lsls	r1, r3, #28
 8019a8a:	d422      	bmi.n	8019ad2 <__swsetup_r+0x62>
 8019a8c:	06da      	lsls	r2, r3, #27
 8019a8e:	d407      	bmi.n	8019aa0 <__swsetup_r+0x30>
 8019a90:	2209      	movs	r2, #9
 8019a92:	602a      	str	r2, [r5, #0]
 8019a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a98:	81a3      	strh	r3, [r4, #12]
 8019a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a9e:	e033      	b.n	8019b08 <__swsetup_r+0x98>
 8019aa0:	0758      	lsls	r0, r3, #29
 8019aa2:	d512      	bpl.n	8019aca <__swsetup_r+0x5a>
 8019aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019aa6:	b141      	cbz	r1, 8019aba <__swsetup_r+0x4a>
 8019aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019aac:	4299      	cmp	r1, r3
 8019aae:	d002      	beq.n	8019ab6 <__swsetup_r+0x46>
 8019ab0:	4628      	mov	r0, r5
 8019ab2:	f7ff f821 	bl	8018af8 <_free_r>
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8019aba:	89a3      	ldrh	r3, [r4, #12]
 8019abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019ac0:	81a3      	strh	r3, [r4, #12]
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	6063      	str	r3, [r4, #4]
 8019ac6:	6923      	ldr	r3, [r4, #16]
 8019ac8:	6023      	str	r3, [r4, #0]
 8019aca:	89a3      	ldrh	r3, [r4, #12]
 8019acc:	f043 0308 	orr.w	r3, r3, #8
 8019ad0:	81a3      	strh	r3, [r4, #12]
 8019ad2:	6923      	ldr	r3, [r4, #16]
 8019ad4:	b94b      	cbnz	r3, 8019aea <__swsetup_r+0x7a>
 8019ad6:	89a3      	ldrh	r3, [r4, #12]
 8019ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019ae0:	d003      	beq.n	8019aea <__swsetup_r+0x7a>
 8019ae2:	4621      	mov	r1, r4
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	f000 f83f 	bl	8019b68 <__smakebuf_r>
 8019aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019aee:	f013 0201 	ands.w	r2, r3, #1
 8019af2:	d00a      	beq.n	8019b0a <__swsetup_r+0x9a>
 8019af4:	2200      	movs	r2, #0
 8019af6:	60a2      	str	r2, [r4, #8]
 8019af8:	6962      	ldr	r2, [r4, #20]
 8019afa:	4252      	negs	r2, r2
 8019afc:	61a2      	str	r2, [r4, #24]
 8019afe:	6922      	ldr	r2, [r4, #16]
 8019b00:	b942      	cbnz	r2, 8019b14 <__swsetup_r+0xa4>
 8019b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b06:	d1c5      	bne.n	8019a94 <__swsetup_r+0x24>
 8019b08:	bd38      	pop	{r3, r4, r5, pc}
 8019b0a:	0799      	lsls	r1, r3, #30
 8019b0c:	bf58      	it	pl
 8019b0e:	6962      	ldrpl	r2, [r4, #20]
 8019b10:	60a2      	str	r2, [r4, #8]
 8019b12:	e7f4      	b.n	8019afe <__swsetup_r+0x8e>
 8019b14:	2000      	movs	r0, #0
 8019b16:	e7f7      	b.n	8019b08 <__swsetup_r+0x98>
 8019b18:	20000110 	.word	0x20000110

08019b1c <__swhatbuf_r>:
 8019b1c:	b570      	push	{r4, r5, r6, lr}
 8019b1e:	460c      	mov	r4, r1
 8019b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b24:	2900      	cmp	r1, #0
 8019b26:	b096      	sub	sp, #88	@ 0x58
 8019b28:	4615      	mov	r5, r2
 8019b2a:	461e      	mov	r6, r3
 8019b2c:	da0d      	bge.n	8019b4a <__swhatbuf_r+0x2e>
 8019b2e:	89a3      	ldrh	r3, [r4, #12]
 8019b30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019b34:	f04f 0100 	mov.w	r1, #0
 8019b38:	bf14      	ite	ne
 8019b3a:	2340      	movne	r3, #64	@ 0x40
 8019b3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019b40:	2000      	movs	r0, #0
 8019b42:	6031      	str	r1, [r6, #0]
 8019b44:	602b      	str	r3, [r5, #0]
 8019b46:	b016      	add	sp, #88	@ 0x58
 8019b48:	bd70      	pop	{r4, r5, r6, pc}
 8019b4a:	466a      	mov	r2, sp
 8019b4c:	f000 f848 	bl	8019be0 <_fstat_r>
 8019b50:	2800      	cmp	r0, #0
 8019b52:	dbec      	blt.n	8019b2e <__swhatbuf_r+0x12>
 8019b54:	9901      	ldr	r1, [sp, #4]
 8019b56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019b5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019b5e:	4259      	negs	r1, r3
 8019b60:	4159      	adcs	r1, r3
 8019b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019b66:	e7eb      	b.n	8019b40 <__swhatbuf_r+0x24>

08019b68 <__smakebuf_r>:
 8019b68:	898b      	ldrh	r3, [r1, #12]
 8019b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b6c:	079d      	lsls	r5, r3, #30
 8019b6e:	4606      	mov	r6, r0
 8019b70:	460c      	mov	r4, r1
 8019b72:	d507      	bpl.n	8019b84 <__smakebuf_r+0x1c>
 8019b74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019b78:	6023      	str	r3, [r4, #0]
 8019b7a:	6123      	str	r3, [r4, #16]
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	6163      	str	r3, [r4, #20]
 8019b80:	b003      	add	sp, #12
 8019b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b84:	ab01      	add	r3, sp, #4
 8019b86:	466a      	mov	r2, sp
 8019b88:	f7ff ffc8 	bl	8019b1c <__swhatbuf_r>
 8019b8c:	9f00      	ldr	r7, [sp, #0]
 8019b8e:	4605      	mov	r5, r0
 8019b90:	4639      	mov	r1, r7
 8019b92:	4630      	mov	r0, r6
 8019b94:	f7fd f9d0 	bl	8016f38 <_malloc_r>
 8019b98:	b948      	cbnz	r0, 8019bae <__smakebuf_r+0x46>
 8019b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b9e:	059a      	lsls	r2, r3, #22
 8019ba0:	d4ee      	bmi.n	8019b80 <__smakebuf_r+0x18>
 8019ba2:	f023 0303 	bic.w	r3, r3, #3
 8019ba6:	f043 0302 	orr.w	r3, r3, #2
 8019baa:	81a3      	strh	r3, [r4, #12]
 8019bac:	e7e2      	b.n	8019b74 <__smakebuf_r+0xc>
 8019bae:	89a3      	ldrh	r3, [r4, #12]
 8019bb0:	6020      	str	r0, [r4, #0]
 8019bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019bb6:	81a3      	strh	r3, [r4, #12]
 8019bb8:	9b01      	ldr	r3, [sp, #4]
 8019bba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019bbe:	b15b      	cbz	r3, 8019bd8 <__smakebuf_r+0x70>
 8019bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	f000 f81d 	bl	8019c04 <_isatty_r>
 8019bca:	b128      	cbz	r0, 8019bd8 <__smakebuf_r+0x70>
 8019bcc:	89a3      	ldrh	r3, [r4, #12]
 8019bce:	f023 0303 	bic.w	r3, r3, #3
 8019bd2:	f043 0301 	orr.w	r3, r3, #1
 8019bd6:	81a3      	strh	r3, [r4, #12]
 8019bd8:	89a3      	ldrh	r3, [r4, #12]
 8019bda:	431d      	orrs	r5, r3
 8019bdc:	81a5      	strh	r5, [r4, #12]
 8019bde:	e7cf      	b.n	8019b80 <__smakebuf_r+0x18>

08019be0 <_fstat_r>:
 8019be0:	b538      	push	{r3, r4, r5, lr}
 8019be2:	4d07      	ldr	r5, [pc, #28]	@ (8019c00 <_fstat_r+0x20>)
 8019be4:	2300      	movs	r3, #0
 8019be6:	4604      	mov	r4, r0
 8019be8:	4608      	mov	r0, r1
 8019bea:	4611      	mov	r1, r2
 8019bec:	602b      	str	r3, [r5, #0]
 8019bee:	f7f2 f8db 	bl	800bda8 <_fstat>
 8019bf2:	1c43      	adds	r3, r0, #1
 8019bf4:	d102      	bne.n	8019bfc <_fstat_r+0x1c>
 8019bf6:	682b      	ldr	r3, [r5, #0]
 8019bf8:	b103      	cbz	r3, 8019bfc <_fstat_r+0x1c>
 8019bfa:	6023      	str	r3, [r4, #0]
 8019bfc:	bd38      	pop	{r3, r4, r5, pc}
 8019bfe:	bf00      	nop
 8019c00:	2000630c 	.word	0x2000630c

08019c04 <_isatty_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d06      	ldr	r5, [pc, #24]	@ (8019c20 <_isatty_r+0x1c>)
 8019c08:	2300      	movs	r3, #0
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	4608      	mov	r0, r1
 8019c0e:	602b      	str	r3, [r5, #0]
 8019c10:	f7f2 f8da 	bl	800bdc8 <_isatty>
 8019c14:	1c43      	adds	r3, r0, #1
 8019c16:	d102      	bne.n	8019c1e <_isatty_r+0x1a>
 8019c18:	682b      	ldr	r3, [r5, #0]
 8019c1a:	b103      	cbz	r3, 8019c1e <_isatty_r+0x1a>
 8019c1c:	6023      	str	r3, [r4, #0]
 8019c1e:	bd38      	pop	{r3, r4, r5, pc}
 8019c20:	2000630c 	.word	0x2000630c

08019c24 <_init>:
 8019c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c26:	bf00      	nop
 8019c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c2a:	bc08      	pop	{r3}
 8019c2c:	469e      	mov	lr, r3
 8019c2e:	4770      	bx	lr

08019c30 <_fini>:
 8019c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c32:	bf00      	nop
 8019c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c36:	bc08      	pop	{r3}
 8019c38:	469e      	mov	lr, r3
 8019c3a:	4770      	bx	lr
