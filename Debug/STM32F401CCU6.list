
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006f04  08006f04  00007f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800702c  0800702c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  0800702c  0800702c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007034  08007034  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007034  08007034  00008034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007038  08007038  00008038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800703c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c18  20000060  0800709c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c78  0800709c  00009c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001855c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004531  00000000  00000000  000215ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00025b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001012  00000000  00000000  00027040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006225  00000000  00000000  00028052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a8c  00000000  00000000  0002e277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fc3  00000000  00000000  00045d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000decc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  000ded0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000e4b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006eec 	.word	0x08006eec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006eec 	.word	0x08006eec

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>:
 *      Author: Admin
 */

#include "MyRTOSTask.h"

MyRTOSTask::MyRTOSTask(const char *name, void (*runFunction)(void*),
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
		void *params, uint16_t size, UBaseType_t priority) :
		taskName(name), runFunction(runFunction), params(params), stackSize(
				size), priority(priority) {
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm+0x4c>)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	601a      	str	r2, [r3, #0]
		taskName(name), runFunction(runFunction), params(params), stackSize(
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	8b3a      	ldrh	r2, [r7, #24]
 8000e46:	829a      	strh	r2, [r3, #20]
				size), priority(priority) {
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	619a      	str	r2, [r3, #24]
	this->taskHandle = nullptr;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
	this->stopSt = false;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	771a      	strb	r2, [r3, #28]
}
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	08006f54 	.word	0x08006f54

08000e6c <_ZN10MyRTOSTaskD1Ev>:
MyRTOSTask::~MyRTOSTask() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <_ZN10MyRTOSTaskD1Ev+0x38>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
	if (taskHandle != nullptr) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <_ZN10MyRTOSTaskD1Ev+0x26>
		vTaskDelete(taskHandle);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ff8a 	bl	8004da0 <vTaskDelete>
		taskHandle = nullptr;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
	}
	runFunction = nullptr;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08006f54 	.word	0x08006f54

08000ea8 <_ZN10MyRTOSTaskD0Ev>:
MyRTOSTask::~MyRTOSTask() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
}
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffdb 	bl	8000e6c <_ZN10MyRTOSTaskD1Ev>
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f005 fdfd 	bl	8006ab8 <_ZdlPvj>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN10MyRTOSTask5delayEm>:

void MyRTOSTask::delay(TickType_t timeMs) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	vTaskDelay(pdMS_TO_TICKS(timeMs));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ed8:	fb02 f303 	mul.w	r3, r2, r3
 8000edc:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_ZN10MyRTOSTask5delayEm+0x2c>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	099b      	lsrs	r3, r3, #6
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 ffcf 	bl	8004e88 <vTaskDelay>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	10624dd3 	.word	0x10624dd3

08000ef8 <_ZN10MyRTOSTask3runEv>:

void MyRTOSTask::run() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <_ZN10MyRTOSTask3runEv+0x1c>
		this->runFunction(this->params);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6912      	ldr	r2, [r2, #16]
 8000f10:	4610      	mov	r0, r2
 8000f12:	4798      	blx	r3
	}
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZN10MyRTOSTask12taskFunctionEPv>:

bool MyRTOSTask::isRunning() {
	return taskHandle != nullptr;
}

void MyRTOSTask::taskFunction(void *params) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	MyRTOSTask *task = static_cast<MyRTOSTask*>(params);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60fb      	str	r3, [r7, #12]
	task->run();
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	4798      	blx	r3
	vTaskDelete(NULL);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f003 ff34 	bl	8004da0 <vTaskDelete>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZN10MyRTOSTask5startEv>:

bool MyRTOSTask::start() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	6078      	str	r0, [r7, #4]
	stopSt = false;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
	BaseType_t result = xTaskCreate(taskFunction, taskName, stackSize, this,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6899      	ldr	r1, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8a98      	ldrh	r0, [r3, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3204      	adds	r2, #4
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4602      	mov	r2, r0
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <_ZN10MyRTOSTask5startEv+0x44>)
 8000f68:	f003 fdbc 	bl	8004ae4 <xTaskCreate>
 8000f6c:	60f8      	str	r0, [r7, #12]
			priority, &taskHandle);
	return result == pdPASS;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08000f1d 	.word	0x08000f1d

08000f88 <_ZN10MyRTOSTask4stopEv>:

void MyRTOSTask::stop() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	stopSt = true;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	771a      	strb	r2, [r3, #28]
	if (taskHandle != nullptr) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <_ZN10MyRTOSTask4stopEv+0x26>
		vTaskDelete(taskHandle);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fefc 	bl	8004da0 <vTaskDelete>
		taskHandle = nullptr;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
	}
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fbc:	f000 fffe 	bl	8001fbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc0:	f000 f820 	bl	8001004 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc4:	f000 f894 	bl	80010f0 <_ZL12MX_GPIO_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000fc8:	f002 fc2c 	bl	8003824 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <main+0x40>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <main+0x44>)
 8000fd2:	f002 fc71 	bl	80038b8 <osThreadNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <main+0x48>)
 8000fda:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
	SensorReader::getInstance().start();
 8000fdc:	f000 fe7e 	bl	8001cdc <_ZN12SensorReader11getInstanceEv>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	330c      	adds	r3, #12
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4610      	mov	r0, r2
 8000fec:	4798      	blx	r3
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000fee:	f002 fc3d 	bl	800386c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <main+0x3a>
 8000ff6:	bf00      	nop
 8000ff8:	08006f68 	.word	0x08006f68
 8000ffc:	08001235 	.word	0x08001235
 8001000:	2000007c 	.word	0x2000007c

08001004 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	@ 0x50
 8001008:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	@ 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fe34 	bl	8006c80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <_Z18SystemClock_Configv+0xe4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <_Z18SystemClock_Configv+0xe4>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <_Z18SystemClock_Configv+0xe4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <_Z18SystemClock_Configv+0xe8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001050:	4a26      	ldr	r2, [pc, #152]	@ (80010ec <_Z18SystemClock_Configv+0xe8>)
 8001052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <_Z18SystemClock_Configv+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001068:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001078:	2319      	movs	r3, #25
 800107a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800107c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001080:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001082:	2304      	movs	r3, #4
 8001084:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4618      	mov	r0, r3
 8001090:	f001 faa0 	bl	80025d4 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 80010a4:	f000 f8e0 	bl	8001268 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fcfd 	bl	8002ac4 <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bf14      	ite	ne
 80010d0:	2301      	movne	r3, #1
 80010d2:	2300      	moveq	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 80010da:	f000 f8c5 	bl	8001268 <Error_Handler>
	}
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	@ 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b46      	ldr	r3, [pc, #280]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a45      	ldr	r2, [pc, #276]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a3e      	ldr	r2, [pc, #248]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a37      	ldr	r2, [pc, #220]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a30      	ldr	r2, [pc, #192]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <_ZL12MX_GPIO_Initv+0x134>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	482a      	ldr	r0, [pc, #168]	@ (8001228 <_ZL12MX_GPIO_Initv+0x138>)
 800117e:	f001 f9dd 	bl	800253c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001182:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001186:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4823      	ldr	r0, [pc, #140]	@ (8001228 <_ZL12MX_GPIO_Initv+0x138>)
 800119c:	f001 f832 	bl	8002204 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 80011a0:	23fe      	movs	r3, #254	@ 0xfe
 80011a2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <_ZL12MX_GPIO_Initv+0x13c>)
 80011b4:	f001 f826 	bl	8002204 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80011b8:	2307      	movs	r3, #7
 80011ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4818      	ldr	r0, [pc, #96]	@ (8001230 <_ZL12MX_GPIO_Initv+0x140>)
 80011ce:	f001 f819 	bl	8002204 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 80011d2:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 80011d6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4812      	ldr	r0, [pc, #72]	@ (8001230 <_ZL12MX_GPIO_Initv+0x140>)
 80011e8:	f001 f80c 	bl	8002204 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	2006      	movs	r0, #6
 80011f2:	f000 ffdd 	bl	80021b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011f6:	2006      	movs	r0, #6
 80011f8:	f000 fff6 	bl	80021e8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2105      	movs	r1, #5
 8001200:	2007      	movs	r0, #7
 8001202:	f000 ffd5 	bl	80021b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001206:	2007      	movs	r0, #7
 8001208:	f000 ffee 	bl	80021e8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	2008      	movs	r0, #8
 8001212:	f000 ffcd 	bl	80021b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001216:	2008      	movs	r0, #8
 8001218:	f000 ffe6 	bl	80021e8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f002 fbcd 	bl	80039dc <osDelay>
 8001242:	e7fb      	b.n	800123c <_Z16StartDefaultTaskPv+0x8>

08001244 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001256:	f000 fed3 	bl	8002000 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40010000 	.word	0x40010000

08001268 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_MspInit+0x54>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_MspInit+0x54>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x54>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_MspInit+0x54>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_MspInit+0x54>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f000 ff79 	bl	80021b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	@ 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <HAL_InitTick+0xd8>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <HAL_InitTick+0xd8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ec:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HAL_InitTick+0xd8>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fdaa 	bl	8002e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001308:	f001 fd94 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 800130c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	4a25      	ldr	r2, [pc, #148]	@ (80013a8 <HAL_InitTick+0xdc>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3b01      	subs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_InitTick+0xe0>)
 800131e:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_InitTick+0xe4>)
 8001320:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001322:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <HAL_InitTick+0xe0>)
 8001324:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800132a:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <HAL_InitTick+0xe0>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_InitTick+0xe0>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_InitTick+0xe0>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_InitTick+0xe0>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001342:	481a      	ldr	r0, [pc, #104]	@ (80013ac <HAL_InitTick+0xe0>)
 8001344:	f001 fdbc 	bl	8002ec0 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800134e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11b      	bne.n	800138e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <HAL_InitTick+0xe0>)
 8001358:	f001 fe18 	bl	8002f8c <HAL_TIM_Base_Start_IT>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800136a:	2019      	movs	r0, #25
 800136c:	f000 ff3c 	bl	80021e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d808      	bhi.n	8001388 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001376:	2200      	movs	r2, #0
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	2019      	movs	r0, #25
 800137c:	f000 ff18 	bl	80021b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001380:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <HAL_InitTick+0xe8>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e002      	b.n	800138e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_InitTick+0xec>)
 8001390:	210e      	movs	r1, #14
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <HAL_InitTick+0xe0>)
 8001394:	f001 ffc6 	bl	8003324 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8001398:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800139c:	4618      	mov	r0, r3
 800139e:	3730      	adds	r7, #48	@ 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	20000080 	.word	0x20000080
 80013b0:	40010000 	.word	0x40010000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	080013bd 	.word	0x080013bd

080013bc <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80013c4:	f000 fe1c 	bl	8002000 <HAL_IncTick>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <NMI_Handler+0x4>

080013d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile (
 80013dc:	f01e 0f04 	tst.w	lr, #4
 80013e0:	bf0c      	ite	eq
 80013e2:	f3ef 8008 	mrseq	r0, MSP
 80013e6:	f3ef 8009 	mrsne	r0, PSP
 80013ea:	f000 b82a 	b.w	8001442 <hard_fault_handler_c>
        "MRSEQ r0, MSP    \n"
        "MRSNE r0, PSP    \n"
        "B hard_fault_handler_c \n"
    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	bf00      	nop
 80013f0:	e7fd      	b.n	80013ee <HardFault_Handler+0x16>

080013f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f6:	bf00      	nop
 80013f8:	e7fd      	b.n	80013f6 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	bf00      	nop
 8001400:	e7fd      	b.n	80013fe <BusFault_Handler+0x4>

08001402 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001406:	bf00      	nop
 8001408:	e7fd      	b.n	8001406 <UsageFault_Handler+0x4>

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800141c:	2001      	movs	r0, #1
 800141e:	f001 f8c1 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800142a:	2002      	movs	r0, #2
 800142c:	f001 f8ba 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001438:	2004      	movs	r0, #4
 800143a:	f001 f8b3 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <hard_fault_handler_c>:
void hard_fault_handler_c(uint32_t *stack) {
 8001442:	b480      	push	{r7}
 8001444:	b08b      	sub	sp, #44	@ 0x2c
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
    uint32_t r0  = stack[0];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stack[1];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stack[2];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stack[3];
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stack[4];
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stack[5];
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stack[6];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stack[7];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	60bb      	str	r3, [r7, #8]

    // Đặt breakpoint ở đây để kiểm tra giá trị các thanh ghi
    while (1);
 800147a:	bf00      	nop
 800147c:	e7fd      	b.n	800147a <hard_fault_handler_c+0x38>
	...

08001480 <TIM1_UP_TIM10_IRQHandler>:
}
/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001486:	f001 fde3 	bl	8003050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000080 	.word	0x20000080

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ae:	f005 fc99 	bl	8006de4 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	bf00      	nop
 80014d8:	e7fd      	b.n	80014d6 <_exit+0x12>
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f005 fc6a 	bl	8006de4 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20010000 	.word	0x20010000
 800153c:	00000400 	.word	0x00000400
 8001540:	20000134 	.word	0x20000134
 8001544:	20004c78 	.word	0x20004c78

08001548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <_ZN7IRQTaskD1Ev>:

#ifndef INC_READER_IRQ_IRQTASK_H_
#define INC_READER_IRQ_IRQTASK_H_
#include "MyRTOSTask.h"
#include "semphr.h"
class IRQTask: public MyRTOSTask {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_ZN7IRQTaskD1Ev+0x20>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc75 	bl	8000e6c <_ZN10MyRTOSTaskD1Ev>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	08006fd0 	.word	0x08006fd0

08001590 <_ZN7IRQTaskD0Ev>:
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_ZN7IRQTaskD1Ev>
 800159e:	2124      	movs	r1, #36	@ 0x24
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f005 fa89 	bl	8006ab8 <_ZdlPvj>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN7CarDataC1Ev>:
#define INC_MODEL_CARDATA_H_

constexpr uint8_t CAR_STOP = 0;
constexpr uint8_t CAR_FORWARD = 1;
constexpr uint8_t CAR_BACKWARD = 2;
struct CarData {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	721a      	strb	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_ZN11EncoderTaskC1Ed>:
#include "Reader/IRQ/EncoderTash.h"

EncoderTask::EncoderTask(double scala) :
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	ed87 0b00 	vstr	d0, [r7]
		IRQTask("EncoderTask", nullptr, nullptr, 128, 1), aPin(MyPin(GPIOB, GPIO_PIN_0)), bPin(
				MyPin(GPIOB, GPIO_PIN_1)), scala(scala), carData() {
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	2200      	movs	r2, #0
 80015f6:	491b      	ldr	r1, [pc, #108]	@ (8001664 <_ZN11EncoderTaskC1Ed+0x88>)
 80015f8:	f000 f900 	bl	80017fc <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 80015fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <_ZN11EncoderTaskC1Ed+0x8c>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]
		IRQTask("EncoderTask", nullptr, nullptr, 128, 1), aPin(MyPin(GPIOB, GPIO_PIN_0)), bPin(
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3324      	adds	r3, #36	@ 0x24
 8001606:	2201      	movs	r2, #1
 8001608:	4918      	ldr	r1, [pc, #96]	@ (800166c <_ZN11EncoderTaskC1Ed+0x90>)
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fa00 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	332c      	adds	r3, #44	@ 0x2c
 8001614:	2202      	movs	r2, #2
 8001616:	4915      	ldr	r1, [pc, #84]	@ (800166c <_ZN11EncoderTaskC1Ed+0x90>)
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f9f9 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOB, GPIO_PIN_1)), scala(scala), carData() {
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001624:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3348      	adds	r3, #72	@ 0x48
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ffb3 	bl	80015b0 <_ZN7CarDataC1Ev>
	this->count = 0;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34
	this->hasCallA = false;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08006f10 	.word	0x08006f10
 8001668:	08006fac 	.word	0x08006fac
 800166c:	40020400 	.word	0x40020400

08001670 <_ZN11EncoderTask9isExactlyEt>:

bool EncoderTask::isExactly(uint16_t pin) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
	if (this->aPin.equalPin(pin)) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3324      	adds	r3, #36	@ 0x24
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f9d7 	bl	8001a38 <_ZN5MyPin8equalPinEt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <_ZN11EncoderTask9isExactlyEt+0x2c>
		this->hasCallA = true;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		return true;
 8001698:	2301      	movs	r3, #1
 800169a:	e010      	b.n	80016be <_ZN11EncoderTask9isExactlyEt+0x4e>
	} else if (this->bPin.equalPin(pin)) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	332c      	adds	r3, #44	@ 0x2c
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f9c7 	bl	8001a38 <_ZN5MyPin8equalPinEt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <_ZN11EncoderTask9isExactlyEt+0x4c>
		this->hasCallA = false;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		return true;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <_ZN11EncoderTask9isExactlyEt+0x4e>
	}
	return false;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN11EncoderTask12taskCallbackEv>:

void EncoderTask::setScale(double scala){
	this->scala = scala;
}

void EncoderTask::taskCallback() {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	if (this->hasCallA) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d012      	beq.n	80016fe <_ZN11EncoderTask12taskCallbackEv+0x38>
		if (this->bPin.readValue()) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	332c      	adds	r3, #44	@ 0x2c
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f9bf 	bl	8001a60 <_ZN5MyPin9readValueEv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d017      	beq.n	8001722 <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count += 1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		if (this->aPin.readValue()) {
			this->count -= 1;
		}
	}
}
 80016fc:	e011      	b.n	8001722 <_ZN11EncoderTask12taskCallbackEv+0x5c>
		if (this->aPin.readValue()) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3324      	adds	r3, #36	@ 0x24
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f9ac 	bl	8001a60 <_ZN5MyPin9readValueEv>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <_ZN11EncoderTask12taskCallbackEv+0x5c>
			this->count -= 1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZN11EncoderTask10getCarDataEv>:

const CarData& EncoderTask::getCarData() {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	int32_t tempV = this->count;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001736:	60fb      	str	r3, [r7, #12]
	if (tempV == 0) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <_ZN11EncoderTask10getCarDataEv+0x26>
		carData.distance = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	649a      	str	r2, [r3, #72]	@ 0x48
		carData.status = CAR_STOP;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800174e:	e02d      	b.n	80017ac <_ZN11EncoderTask10getCarDataEv+0x82>
	} else {
		carData.distance = tempV / this->scala == 0 ? 1.0f : this->scala;
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7fe fe97 	bl	8000484 <__aeabi_i2d>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800175c:	f7ff f826 	bl	80007ac <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f7ff f95a 	bl	8000a28 <__aeabi_dcmpeq>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <_ZN11EncoderTask10getCarDataEv+0x62>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff f982 	bl	8000a8c <__aeabi_d2f>
 8001788:	4603      	mov	r3, r0
 800178a:	e001      	b.n	8001790 <_ZN11EncoderTask10getCarDataEv+0x66>
 800178c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6493      	str	r3, [r2, #72]	@ 0x48
		if (tempV > 0) {
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dd04      	ble.n	80017a4 <_ZN11EncoderTask10getCarDataEv+0x7a>
			carData.status = CAR_FORWARD;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80017a2:	e003      	b.n	80017ac <_ZN11EncoderTask10getCarDataEv+0x82>
		} else {
			carData.status = CAR_BACKWARD;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
	}
	return this->carData;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3348      	adds	r3, #72	@ 0x48
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZN11EncoderTaskD1Ev>:

#include "IRQTask.h"
#include "Reader/MyPin.h"
#include "Model/CarData.h"

class EncoderTask: public IRQTask {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <_ZN11EncoderTaskD1Ev+0x20>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fecf 	bl	800156c <_ZN7IRQTaskD1Ev>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	08006fac 	.word	0x08006fac

080017dc <_ZN11EncoderTaskD0Ev>:
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_ZN11EncoderTaskD1Ev>
 80017ea:	2158      	movs	r1, #88	@ 0x58
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f005 f963 	bl	8006ab8 <_ZdlPvj>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZN7IRQTaskC1EPKcPFvPvES2_tm>:
 *  Created on: Dec 9, 2024
 *      Author: Admin
 */
#include "Reader/IRQ/IRQTask.h"

IRQTask::IRQTask(const char *name, void (*runFunction)(void *), void *params, uint16_t stackSize,
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
		UBaseType_t priority) :
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
				xSemaphoreCreateBinary()) {
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	8b3b      	ldrh	r3, [r7, #24]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	f7ff faff 	bl	8000e1c <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <_ZN7IRQTaskC1EPKcPFvPvES2_tm+0x44>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	2203      	movs	r2, #3
 8001826:	2100      	movs	r1, #0
 8001828:	2001      	movs	r0, #1
 800182a:	f002 fac2 	bl	8003db2 <xQueueGenericCreate>
 800182e:	4602      	mov	r2, r0
		MyRTOSTask(name, runFunction, params, stackSize, priority), xSemaphore(
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	621a      	str	r2, [r3, #32]

}
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	08006fd0 	.word	0x08006fd0

08001844 <_ZN7IRQTask17interruptCallbackEt>:
void IRQTask::interruptCallback(uint16_t pin) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFAIL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
	if(isExactly(pin)){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3318      	adds	r3, #24
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	4611      	mov	r1, r2
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <_ZN7IRQTask17interruptCallbackEt+0x36>
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f107 020c 	add.w	r2, r7, #12
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fccd 	bl	8004214 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <_ZN7IRQTask17interruptCallbackEt+0x4c>
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <_ZN7IRQTask17interruptCallbackEt+0x54>)
 8001882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	f3bf 8f6f 	isb	sy
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <_ZN7IRQTask12taskCallbackEv>:

void IRQTask::taskCallback() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if (this->runFunction != nullptr) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <_ZN7IRQTask12taskCallbackEv+0x1c>
		this->runFunction(this->params);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6912      	ldr	r2, [r2, #16]
 80018b4:	4610      	mov	r0, r2
 80018b6:	4798      	blx	r3
	}
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN7IRQTask3runEv>:

void IRQTask::run() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fe11 	bl	80044f8 <xQueueSemaphoreTake>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <_ZN7IRQTask3runEv+0x8>
			this->taskCallback();
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3314      	adds	r3, #20
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 80018f2:	e7e9      	b.n	80018c8 <_ZN7IRQTask3runEv+0x8>

080018f4 <_ZN7RpmTaskC1Et>:
 *      Author: Admin
 */

#include "Reader/IRQ/RpmTask.h"

RpmTask::RpmTask(uint16_t scala) :
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
		IRQTask("rpmTask", nullptr, nullptr, 128, 1), rpmPin(
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala) {
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	2301      	movs	r3, #1
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	2200      	movs	r2, #0
 800190e:	490c      	ldr	r1, [pc, #48]	@ (8001940 <_ZN7RpmTaskC1Et+0x4c>)
 8001910:	f7ff ff74 	bl	80017fc <_ZN7IRQTaskC1EPKcPFvPvES2_tm>
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <_ZN7RpmTaskC1Et+0x50>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
		IRQTask("rpmTask", nullptr, nullptr, 128, 1), rpmPin(
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3324      	adds	r3, #36	@ 0x24
 800191e:	2204      	movs	r2, #4
 8001920:	4909      	ldr	r1, [pc, #36]	@ (8001948 <_ZN7RpmTaskC1Et+0x54>)
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f874 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOB, GPIO_PIN_2)), scala(scala) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	861a      	strh	r2, [r3, #48]	@ 0x30
	this->count = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	08006f1c 	.word	0x08006f1c
 8001944:	08006ff4 	.word	0x08006ff4
 8001948:	40020400 	.word	0x40020400

0800194c <_ZN7RpmTask9isExactlyEt>:

bool RpmTask::isExactly(uint16_t pin) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
	return this->rpmPin.equalPin(pin);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3324      	adds	r3, #36	@ 0x24
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f869 	bl	8001a38 <_ZN5MyPin8equalPinEt>
 8001966:	4603      	mov	r3, r0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN7RpmTask8getValueEv>:

uint16_t RpmTask::getValue() {
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	uint32_t tempV = this->count;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	60fb      	str	r3, [r7, #12]
	this->count = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	62da      	str	r2, [r3, #44]	@ 0x2c
	return tempV / this->scala == 0 ? 1 : this->scala;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001988:	461a      	mov	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4293      	cmp	r3, r2
 800198e:	d302      	bcc.n	8001996 <_ZN7RpmTask8getValueEv+0x26>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001994:	e000      	b.n	8001998 <_ZN7RpmTask8getValueEv+0x28>
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_ZN7RpmTask12taskCallbackEv>:

void RpmTask::setScale(uint16_t scala) {
	this->scala = scala;
}

void RpmTask::taskCallback() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <_ZN7RpmTask12taskCallbackEv+0x24>)
 80019b2:	f000 fddc 	bl	800256e <HAL_GPIO_TogglePin>
	this->count += 1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020800 	.word	0x40020800

080019cc <_ZN7RpmTaskD1Ev>:

#ifndef INC_READER_IRQ_RPMTASK_H_
#define INC_READER_IRQ_RPMTASK_H_
#include "IRQTask.h"
#include "Reader/MyPin.h"
class RpmTask: public IRQTask {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <_ZN7RpmTaskD1Ev+0x20>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fdc5 	bl	800156c <_ZN7IRQTaskD1Ev>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08006ff4 	.word	0x08006ff4

080019f0 <_ZN7RpmTaskD0Ev>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_ZN7RpmTaskD1Ev>
 80019fe:	2134      	movs	r1, #52	@ 0x34
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f005 f859 	bl	8006ab8 <_ZdlPvj>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>:
 *      Author: Admin
 */

#include "Reader/MyPin.h"

MyPin::MyPin(GPIO_TypeDef *port, uint16_t pin) :
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
		port(port), pin(pin) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	88fa      	ldrh	r2, [r7, #6]
 8001a28:	809a      	strh	r2, [r3, #4]
}
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZN5MyPin8equalPinEt>:

bool MyPin::equalPin(uint16_t pin){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
	return pin == this->pin;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	889b      	ldrh	r3, [r3, #4]
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_ZN5MyPin9readValueEv>:

GPIO_PinState MyPin::readValue() {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if (!port) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <_ZN5MyPin9readValueEv+0x14>
		return GPIO_PIN_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e009      	b.n	8001a88 <_ZN5MyPin9readValueEv+0x28>
	}
	return HAL_GPIO_ReadPin(port, pin);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	889b      	ldrh	r3, [r3, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f000 fd44 	bl	800250c <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	bf00      	nop
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>:

bool MyPin::readValueWithRTOSDebounce(bool reverse) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
	if (!port) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <_ZN5MyPin25readValueWithRTOSDebounceEb+0x18>
		return reverse;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	e029      	b.n	8001afc <_ZN5MyPin25readValueWithRTOSDebounceEb+0x6c>
	}
	if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	889b      	ldrh	r3, [r3, #4]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f000 fd2a 	bl	800250c <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d016      	beq.n	8001afa <_ZN5MyPin25readValueWithRTOSDebounceEb+0x6a>
		vTaskDelay(pdMS_TO_TICKS(30));
 8001acc:	201e      	movs	r0, #30
 8001ace:	f003 f9db 	bl	8004e88 <vTaskDelay>
		if (HAL_GPIO_ReadPin(port, pin) != reverse) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	889b      	ldrh	r3, [r3, #4]
 8001ada:	4619      	mov	r1, r3
 8001adc:	4610      	mov	r0, r2
 8001ade:	f000 fd15 	bl	800250c <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <_ZN5MyPin25readValueWithRTOSDebounceEb+0x6a>
			return true;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <_ZN5MyPin25readValueWithRTOSDebounceEb+0x6c>
		}
	}
	return false;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN10SensorDataC1Ev>:

#ifndef INC_MODEL_SERSORDATA_H_
#define INC_MODEL_SERSORDATA_H_

#include "Model/CarData.h"
struct SensorData {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	330c      	adds	r3, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fd4d 	bl	80015b0 <_ZN7CarDataC1Ev>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN12SensorReaderC1Ev>:
 */

#include <Reader/SensorReader.h>
SensorReader *SensorReader::instance = nullptr;
SemaphoreHandle_t SensorReader::mtx = nullptr;
SensorReader::SensorReader() :
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	6078      	str	r0, [r7, #4]
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4)), npPin(
				MyPin(GPIOA, GPIO_PIN_4)), s1Pin(MyPin(GPIOA, GPIO_PIN_5)), s2Pin(
				MyPin(GPIOA, GPIO_PIN_6)), s3Pin(MyPin(GPIOA, GPIO_PIN_7)), s4Pin(
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorData(), encoderTask(
				EncoderTask(10.5)), rpmTask(RpmTask(1)) {
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	4942      	ldr	r1, [pc, #264]	@ (8001c40 <_ZN12SensorReaderC1Ev+0x120>)
 8001b38:	f7ff f970 	bl	8000e1c <_ZN10MyRTOSTaskC1EPKcPFvPvES2_tm>
 8001b3c:	4a41      	ldr	r2, [pc, #260]	@ (8001c44 <_ZN12SensorReaderC1Ev+0x124>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
		MyRTOSTask("SensorReader", nullptr, nullptr, 128, 1), atPin(
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3320      	adds	r3, #32
 8001b46:	2202      	movs	r2, #2
 8001b48:	493f      	ldr	r1, [pc, #252]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff60 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOA, GPIO_PIN_1)), ptPin(MyPin(GPIOA, GPIO_PIN_2)), cmPin(
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3328      	adds	r3, #40	@ 0x28
 8001b54:	2204      	movs	r2, #4
 8001b56:	493c      	ldr	r1, [pc, #240]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff59 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3330      	adds	r3, #48	@ 0x30
 8001b62:	2208      	movs	r2, #8
 8001b64:	4938      	ldr	r1, [pc, #224]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff52 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOA, GPIO_PIN_3)), ntPin(MyPin(GPIOA, GPIO_PIN_4)), npPin(
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3338      	adds	r3, #56	@ 0x38
 8001b70:	2210      	movs	r2, #16
 8001b72:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff4b 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3340      	adds	r3, #64	@ 0x40
 8001b7e:	2210      	movs	r2, #16
 8001b80:	4931      	ldr	r1, [pc, #196]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff44 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOA, GPIO_PIN_4)), s1Pin(MyPin(GPIOA, GPIO_PIN_5)), s2Pin(
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3348      	adds	r3, #72	@ 0x48
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	492e      	ldr	r1, [pc, #184]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff3d 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3350      	adds	r3, #80	@ 0x50
 8001b9a:	2240      	movs	r2, #64	@ 0x40
 8001b9c:	492a      	ldr	r1, [pc, #168]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOA, GPIO_PIN_6)), s3Pin(MyPin(GPIOA, GPIO_PIN_7)), s4Pin(
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3358      	adds	r3, #88	@ 0x58
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	4927      	ldr	r1, [pc, #156]	@ (8001c48 <_ZN12SensorReaderC1Ev+0x128>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff2f 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	@ 0x60
 8001bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bba:	4924      	ldr	r1, [pc, #144]	@ (8001c4c <_ZN12SensorReaderC1Ev+0x12c>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff27 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOB, GPIO_PIN_10)), t1Pin(MyPin(GPIOB, GPIO_PIN_12)), t2Pin(
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3368      	adds	r3, #104	@ 0x68
 8001bc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bca:	4920      	ldr	r1, [pc, #128]	@ (8001c4c <_ZN12SensorReaderC1Ev+0x12c>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff1f 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3370      	adds	r3, #112	@ 0x70
 8001bd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bda:	491c      	ldr	r1, [pc, #112]	@ (8001c4c <_ZN12SensorReaderC1Ev+0x12c>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff17 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
				MyPin(GPIOB, GPIO_PIN_13)), t3Pin(MyPin(GPIOB, GPIO_PIN_14)), sensorData(), encoderTask(
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3378      	adds	r3, #120	@ 0x78
 8001be6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bea:	4918      	ldr	r1, [pc, #96]	@ (8001c4c <_ZN12SensorReaderC1Ev+0x12c>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff0f 	bl	8001a10 <_ZN5MyPinC1EP12GPIO_TypeDeft>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3380      	adds	r3, #128	@ 0x80
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3380      	adds	r3, #128	@ 0x80
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff7b 	bl	8001b04 <_ZN10SensorDataC1Ev>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3398      	adds	r3, #152	@ 0x98
 8001c12:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001c38 <_ZN12SensorReaderC1Ev+0x118>
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fce0 	bl	80015dc <_ZN11EncoderTaskC1Ed>
				EncoderTask(10.5)), rpmTask(RpmTask(1)) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	33f0      	adds	r3, #240	@ 0xf0
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fe66 	bl	80018f4 <_ZN7RpmTaskC1Et>
}
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40250000 	.word	0x40250000
 8001c40:	08006f24 	.word	0x08006f24
 8001c44:	08007018 	.word	0x08007018
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400

08001c50 <_ZN12SensorReaderD1Ev>:

SensorReader::~SensorReader() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <_ZN12SensorReaderD1Ev+0x34>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	33f0      	adds	r3, #240	@ 0xf0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff feb2 	bl	80019cc <_ZN7RpmTaskD1Ev>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3398      	adds	r3, #152	@ 0x98
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fda3 	bl	80017b8 <_ZN11EncoderTaskD1Ev>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f8f9 	bl	8000e6c <_ZN10MyRTOSTaskD1Ev>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08007018 	.word	0x08007018

08001c88 <_ZN12SensorReaderD0Ev>:
SensorReader::~SensorReader() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
}
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffdd 	bl	8001c50 <_ZN12SensorReaderD1Ev>
 8001c96:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f004 ff0c 	bl	8006ab8 <_ZdlPvj>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN12SensorReader15handleInterruptEt>:

void SensorReader::handleInterrupt(uint16_t pin) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]
	this->encoderTask.interruptCallback(pin);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3398      	adds	r3, #152	@ 0x98
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fdc0 	bl	8001844 <_ZN7IRQTask17interruptCallbackEt>
	this->rpmTask.interruptCallback(pin);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	33f0      	adds	r3, #240	@ 0xf0
 8001cc8:	887a      	ldrh	r2, [r7, #2]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fdb9 	bl	8001844 <_ZN7IRQTask17interruptCallbackEt>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <_ZN12SensorReader11getInstanceEv>:

const SensorData& SensorReader::getSensorData() const {
	return sensorData;
}

SensorReader& SensorReader::getInstance() {
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	if (instance == nullptr) {
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <_ZN12SensorReader11getInstanceEv+0x74>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d12e      	bne.n	8001d46 <_ZN12SensorReader11getInstanceEv+0x6a>
		if (mtx == nullptr) {
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <_ZN12SensorReader11getInstanceEv+0x78>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <_ZN12SensorReader11getInstanceEv+0x20>
			mtx = xSemaphoreCreateMutex();
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f002 f8d6 	bl	8003ea2 <xQueueCreateMutex>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <_ZN12SensorReader11getInstanceEv+0x78>)
 8001cfa:	6013      	str	r3, [r2, #0]
		}
		if (xSemaphoreTake(mtx, portMAX_DELAY) == pdTRUE) {
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <_ZN12SensorReader11getInstanceEv+0x78>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 fbf7 	bl	80044f8 <xQueueSemaphoreTake>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <_ZN12SensorReader11getInstanceEv+0x6a>
			if (instance == nullptr) {
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <_ZN12SensorReader11getInstanceEv+0x74>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <_ZN12SensorReader11getInstanceEv+0x5c>
				instance = new SensorReader();
 8001d22:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8001d26:	f004 fec9 	bl	8006abc <_Znwj>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461c      	mov	r4, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fef6 	bl	8001b20 <_ZN12SensorReaderC1Ev>
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <_ZN12SensorReader11getInstanceEv+0x74>)
 8001d36:	601c      	str	r4, [r3, #0]
			}
			xSemaphoreGive(mtx);
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <_ZN12SensorReader11getInstanceEv+0x78>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	f002 f8c7 	bl	8003ed4 <xQueueGenericSend>
		}
	}
	return *instance;
 8001d46:	4b02      	ldr	r3, [pc, #8]	@ (8001d50 <_ZN12SensorReader11getInstanceEv+0x74>)
 8001d48:	681b      	ldr	r3, [r3, #0]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd98      	pop	{r3, r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000138 	.word	0x20000138
 8001d54:	2000013c 	.word	0x2000013c

08001d58 <_ZN12SensorReader13getGearNumberEv>:

int SensorReader::getGearNumber() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	bool s1 = this->s1Pin.readValueWithRTOSDebounce(), s2 =
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3348      	adds	r3, #72	@ 0x48
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe92 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
			this->s2Pin.readValueWithRTOSDebounce(), s3 =
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3350      	adds	r3, #80	@ 0x50
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe8a 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73bb      	strb	r3, [r7, #14]
			this->s3Pin.readValueWithRTOSDebounce(), s4 =
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3358      	adds	r3, #88	@ 0x58
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe82 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	737b      	strb	r3, [r7, #13]
			this->s4Pin.readValueWithRTOSDebounce();
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3360      	adds	r3, #96	@ 0x60
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe7a 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	733b      	strb	r3, [r7, #12]
	if (s3) {
 8001da0:	7b7b      	ldrb	r3, [r7, #13]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00e      	beq.n	8001dc4 <_ZN12SensorReader13getGearNumberEv+0x6c>
		if (s1) {
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZN12SensorReader13getGearNumberEv+0x58>
			return 3;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e014      	b.n	8001dda <_ZN12SensorReader13getGearNumberEv+0x82>
		}
		if (s2) {
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_ZN12SensorReader13getGearNumberEv+0x62>
			return 4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	e00f      	b.n	8001dda <_ZN12SensorReader13getGearNumberEv+0x82>
		}
		if (s4) {
 8001dba:	7b3b      	ldrb	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <_ZN12SensorReader13getGearNumberEv+0x6c>
			return 5;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	e00a      	b.n	8001dda <_ZN12SensorReader13getGearNumberEv+0x82>
		}
	}
	if (s1) {
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <_ZN12SensorReader13getGearNumberEv+0x76>
		return 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e005      	b.n	8001dda <_ZN12SensorReader13getGearNumberEv+0x82>
	}
	if (s2) {
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <_ZN12SensorReader13getGearNumberEv+0x80>
		return 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e000      	b.n	8001dda <_ZN12SensorReader13getGearNumberEv+0x82>
	}
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_ZN12SensorReader3runEv>:

void SensorReader::run() {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	this->encoderTask.start();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3398      	adds	r3, #152	@ 0x98
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f8a6 	bl	8000f40 <_ZN10MyRTOSTask5startEv>
	this->rpmTask.start();
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	33f0      	adds	r3, #240	@ 0xf0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f8a1 	bl	8000f40 <_ZN10MyRTOSTask5startEv>
	this->stopSt = false;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
	while (!this->stopSt) {
 8001e04:	e07c      	b.n	8001f00 <_ZN12SensorReader3runEv+0x11e>
		this->sensorData.at = this->atPin.readValueWithRTOSDebounce();
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3320      	adds	r3, #32
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe3f 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		this->sensorData.pt = this->ptPin.readValueWithRTOSDebounce();
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3328      	adds	r3, #40	@ 0x28
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe34 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		this->sensorData.cm = this->cmPin.readValueWithRTOSDebounce();
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3330      	adds	r3, #48	@ 0x30
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe29 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
		this->sensorData.nt = this->ntPin.readValueWithRTOSDebounce();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3338      	adds	r3, #56	@ 0x38
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fe1e 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		this->sensorData.np = this->npPin.readValueWithRTOSDebounce();
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3340      	adds	r3, #64	@ 0x40
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe13 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		this->sensorData.t1 = this->t1Pin.readValueWithRTOSDebounce();
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3368      	adds	r3, #104	@ 0x68
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fe08 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
		this->sensorData.t2 = this->t2Pin.readValueWithRTOSDebounce();
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3370      	adds	r3, #112	@ 0x70
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fdfd 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		this->sensorData.t3 = this->t3Pin.readValueWithRTOSDebounce();
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3378      	adds	r3, #120	@ 0x78
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fdf2 	bl	8001a90 <_ZN5MyPin25readValueWithRTOSDebounceEb>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
		this->sensorData.gear = this->getGearNumber();
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff4e 	bl	8001d58 <_ZN12SensorReader13getGearNumberEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		this->sensorData.rpm = this->rpmTask.getValue();
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	33f0      	adds	r3, #240	@ 0xf0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fd50 	bl	8001970 <_ZN7RpmTask8getValueEv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
		this->sensorData.cardata = this->encoderTask.getCarData();
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3398      	adds	r3, #152	@ 0x98
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc23 	bl	800172a <_ZN11EncoderTask10getCarDataEv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	338c      	adds	r3, #140	@ 0x8c
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	6851      	ldr	r1, [r2, #4]
 8001eee:	6018      	str	r0, [r3, #0]
 8001ef0:	6059      	str	r1, [r3, #4]
 8001ef2:	7a12      	ldrb	r2, [r2, #8]
 8001ef4:	721a      	strb	r2, [r3, #8]
		delay(100);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2164      	movs	r1, #100	@ 0x64
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ffe4 	bl	8000ec8 <_ZN10MyRTOSTask5delayEm>
	while (!this->stopSt) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7f1b      	ldrb	r3, [r3, #28]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f47f af7b 	bne.w	8001e06 <_ZN12SensorReader3runEv+0x24>
	}
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZN12SensorReader4stopEv>:

void SensorReader::stop() {
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	this->encoderTask.stop();
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3398      	adds	r3, #152	@ 0x98
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f82e 	bl	8000f88 <_ZN10MyRTOSTask4stopEv>
	this->rpmTask.stop();
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	33f0      	adds	r3, #240	@ 0xf0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f829 	bl	8000f88 <_ZN10MyRTOSTask4stopEv>
	MyRTOSTask::stop();
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f825 	bl	8000f88 <_ZN10MyRTOSTask4stopEv>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	80fb      	strh	r3, [r7, #6]
	SensorReader::getInstance().handleInterrupt(pin);
 8001f50:	f7ff fec4 	bl	8001cdc <_ZN12SensorReader11getInstanceEv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f7ff fea5 	bl	8001caa <_ZN12SensorReader15handleInterruptEt>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f6c:	f7ff faec 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 ff2b 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f80d 	bl	8000fb8 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001fac:	0800703c 	.word	0x0800703c
  ldr r2, =_sbss
 8001fb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001fb4:	20004c78 	.word	0x20004c78

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f8d8 	bl	800219a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	200f      	movs	r0, #15
 8001fec:	f7ff f96e 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff f940 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	20000140 	.word	0x20000140

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000140 	.word	0x20000140

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	@ (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	@ (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	@ (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff4c 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c2:	f7ff ff61 	bl	8002088 <__NVIC_GetPriorityGrouping>
 80021c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	6978      	ldr	r0, [r7, #20]
 80021ce:	f7ff ffb1 	bl	8002134 <NVIC_EncodePriority>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff80 	bl	80020e0 <__NVIC_SetPriority>
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff54 	bl	80020a4 <__NVIC_EnableIRQ>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	e159      	b.n	80024d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 8148 	bne.w	80024ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d005      	beq.n	8002256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	2b02      	cmp	r3, #2
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d017      	beq.n	80022f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d123      	bne.n	8002348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a2 	beq.w	80024ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b57      	ldr	r3, [pc, #348]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4a56      	ldr	r2, [pc, #344]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44
 800239a:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_GPIO_Init+0x2ec>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a49      	ldr	r2, [pc, #292]	@ (80024f4 <HAL_GPIO_Init+0x2f0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x202>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a48      	ldr	r2, [pc, #288]	@ (80024f8 <HAL_GPIO_Init+0x2f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x1fe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a47      	ldr	r2, [pc, #284]	@ (80024fc <HAL_GPIO_Init+0x2f8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x1fa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a46      	ldr	r2, [pc, #280]	@ (8002500 <HAL_GPIO_Init+0x2fc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x1f6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a45      	ldr	r2, [pc, #276]	@ (8002504 <HAL_GPIO_Init+0x300>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x1f2>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x204>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x204>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	@ (80024f0 <HAL_GPIO_Init+0x2ec>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <HAL_GPIO_Init+0x304>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a24      	ldr	r2, [pc, #144]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_GPIO_Init+0x304>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f aea2 	bls.w	8002220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4013      	ands	r3, r2
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43d9      	mvns	r1, r3
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	400b      	ands	r3, r1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ba:	4a05      	ldr	r2, [pc, #20]	@ (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fcbf 	bl	8001f46 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e267      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d075      	beq.n	80026de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025f2:	4b88      	ldr	r3, [pc, #544]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d00c      	beq.n	8002618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b85      	ldr	r3, [pc, #532]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002606:	2b08      	cmp	r3, #8
 8002608:	d112      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b82      	ldr	r3, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002616:	d10b      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	4b7e      	ldr	r3, [pc, #504]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d05b      	beq.n	80026dc <HAL_RCC_OscConfig+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d157      	bne.n	80026dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e242      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x74>
 800263a:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x98>
 8002652:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6f      	ldr	r2, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6c      	ldr	r2, [pc, #432]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 800266c:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a68      	ldr	r2, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff fccc 	bl	8002028 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff fcc8 	bl	8002028 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e207      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xc0>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fcb8 	bl	8002028 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff fcb4 	bl	8002028 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1f3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0xe8>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d11c      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1c7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4937      	ldr	r1, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	e03a      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_OscConfig+0x244>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff fc6d 	bl	8002028 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7ff fc69 	bl	8002028 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1a8      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4925      	ldr	r1, [pc, #148]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x244>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff fc4c 	bl	8002028 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002794:	f7ff fc48 	bl	8002028 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e187      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_RCC_OscConfig+0x248>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff fc2c 	bl	8002028 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7ff fc28 	bl	8002028 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e167      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x200>
 80027f2:	e01b      	b.n	800282c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_OscConfig+0x248>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff fc15 	bl	8002028 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7ff fc11 	bl	8002028 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d907      	bls.n	8002820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e150      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002814:	40023800 	.word	0x40023800
 8002818:	42470000 	.word	0x42470000
 800281c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b88      	ldr	r3, [pc, #544]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ea      	bne.n	8002802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a7c      	ldr	r2, [pc, #496]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b77      	ldr	r3, [pc, #476]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b74      	ldr	r3, [pc, #464]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a73      	ldr	r2, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7ff fbd1 	bl	8002028 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7ff fbcd 	bl	8002028 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e10c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x2ea>
 80028b0:	4b64      	ldr	r3, [pc, #400]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a63      	ldr	r2, [pc, #396]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x30c>
 80028c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028e0:	4b58      	ldr	r3, [pc, #352]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a57      	ldr	r2, [pc, #348]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	4b55      	ldr	r3, [pc, #340]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a54      	ldr	r2, [pc, #336]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7ff fb92 	bl	8002028 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7ff fb8e 	bl	8002028 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0cb      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	4b49      	ldr	r3, [pc, #292]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ee      	beq.n	8002908 <HAL_RCC_OscConfig+0x334>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7ff fb7c 	bl	8002028 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff fb78 	bl	8002028 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0b5      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ee      	bne.n	8002934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	4a38      	ldr	r2, [pc, #224]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a1 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002972:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d05c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d141      	bne.n	8002a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fb4c 	bl	8002028 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7ff fb48 	bl	8002028 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e087      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	491b      	ldr	r1, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff fb21 	bl	8002028 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff fb1d 	bl	8002028 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e05c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x416>
 8002a08:	e054      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fb0a 	bl	8002028 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff fb06 	bl	8002028 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e045      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x444>
 8002a36:	e03d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e038      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ec>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d121      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cc      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b68      	ldr	r3, [pc, #416]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90c      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b65      	ldr	r3, [pc, #404]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a52      	ldr	r2, [pc, #328]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d044      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e067      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4934      	ldr	r1, [pc, #208]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff fa38 	bl	8002028 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7ff fa34 	bl	8002028 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d20c      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	@ (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fb2e 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08006f8c 	.word	0x08006f8c
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b090      	sub	sp, #64	@ 0x40
 8002c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca8:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	f200 80a1 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc2:	e09b      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cc8:	e09b      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cca:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cce:	e098      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	2200      	movs	r2, #0
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cfc:	fb03 f201 	mul.w	r2, r3, r1
 8002d00:	2300      	movs	r3, #0
 8002d02:	fb00 f303 	mul.w	r3, r0, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d10:	460a      	mov	r2, r1
 8002d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d16:	4413      	add	r3, r2
 8002d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	61fa      	str	r2, [r7, #28]
 8002d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d2a:	f7fd feff 	bl	8000b2c <__aeabi_uldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4613      	mov	r3, r2
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d36:	e053      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4b35      	ldr	r3, [pc, #212]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	2200      	movs	r2, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	617a      	str	r2, [r7, #20]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d4a:	f04f 0b00 	mov.w	fp, #0
 8002d4e:	4652      	mov	r2, sl
 8002d50:	465b      	mov	r3, fp
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ebb2 080a 	subs.w	r8, r2, sl
 8002d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d82:	ebb2 0408 	subs.w	r4, r2, r8
 8002d86:	eb63 0509 	sbc.w	r5, r3, r9
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	00eb      	lsls	r3, r5, #3
 8002d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d98:	00e2      	lsls	r2, r4, #3
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	eb14 030a 	adds.w	r3, r4, sl
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	eb45 030b 	adc.w	r3, r5, fp
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db6:	4629      	mov	r1, r5
 8002db8:	028b      	lsls	r3, r1, #10
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	028a      	lsls	r2, r1, #10
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	60fa      	str	r2, [r7, #12]
 8002dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd4:	f7fd feaa 	bl	8000b2c <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3740      	adds	r7, #64	@ 0x40
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	017d7840 	.word	0x017d7840

08002e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08006f9c 	.word	0x08006f9c

08002e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	220f      	movs	r2, #15
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e6c:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <HAL_RCC_GetClockConfig+0x60>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e04c      	b.n	8002f6c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d111      	bne.n	8002f02 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fbe2 	bl	80036b0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <HAL_TIM_Base_Init+0xb4>)
 8002ef8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f000 fb3f 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	08002f79 	.word	0x08002f79

08002f78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e044      	b.n	800302e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_TIM_Base_Start_IT+0xb0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003040 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d026      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0202 	mvn.w	r2, #2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
 80030a4:	e009      	b.n	80030ba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d026      	beq.n	8003118 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d021      	beq.n	8003118 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
 80030fc:	e009      	b.n	8003112 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d026      	beq.n	8003170 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d021      	beq.n	8003170 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
 8003154:	e009      	b.n	800316a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d026      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d021      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2208      	movs	r2, #8
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e009      	b.n	80031c2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0201 	mvn.w	r2, #1
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0220 	mvn.w	r2, #32
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	460b      	mov	r3, r1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e125      	b.n	800358c <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 80b9 	bne.w	80034c0 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	2b1a      	cmp	r3, #26
 8003352:	f200 80b2 	bhi.w	80034ba <HAL_TIM_RegisterCallback+0x196>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_TIM_RegisterCallback+0x38>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	080033c9 	.word	0x080033c9
 8003360:	080033d1 	.word	0x080033d1
 8003364:	080033d9 	.word	0x080033d9
 8003368:	080033e1 	.word	0x080033e1
 800336c:	080033e9 	.word	0x080033e9
 8003370:	080033f1 	.word	0x080033f1
 8003374:	080033f9 	.word	0x080033f9
 8003378:	08003401 	.word	0x08003401
 800337c:	08003409 	.word	0x08003409
 8003380:	08003411 	.word	0x08003411
 8003384:	08003419 	.word	0x08003419
 8003388:	08003421 	.word	0x08003421
 800338c:	08003429 	.word	0x08003429
 8003390:	08003431 	.word	0x08003431
 8003394:	08003439 	.word	0x08003439
 8003398:	08003443 	.word	0x08003443
 800339c:	0800344d 	.word	0x0800344d
 80033a0:	08003457 	.word	0x08003457
 80033a4:	08003461 	.word	0x08003461
 80033a8:	0800346b 	.word	0x0800346b
 80033ac:	08003475 	.word	0x08003475
 80033b0:	0800347f 	.word	0x0800347f
 80033b4:	08003489 	.word	0x08003489
 80033b8:	08003493 	.word	0x08003493
 80033bc:	0800349d 	.word	0x0800349d
 80033c0:	080034a7 	.word	0x080034a7
 80033c4:	080034b1 	.word	0x080034b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80033ce:	e0dc      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80033d6:	e0d8      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80033de:	e0d4      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80033e6:	e0d0      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80033ee:	e0cc      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80033f6:	e0c8      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80033fe:	e0c4      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003406:	e0c0      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800340e:	e0bc      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003416:	e0b8      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800341e:	e0b4      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003426:	e0b0      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800342e:	e0ac      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003436:	e0a8      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003440:	e0a3      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800344a:	e09e      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003454:	e099      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800345e:	e094      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003468:	e08f      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003472:	e08a      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800347c:	e085      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003486:	e080      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003490:	e07b      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800349a:	e076      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80034a4:	e071      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80034ae:	e06c      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80034b8:	e067      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
        break;
 80034be:	e064      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d15c      	bne.n	8003586 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	2b0d      	cmp	r3, #13
 80034d0:	d856      	bhi.n	8003580 <HAL_TIM_RegisterCallback+0x25c>
 80034d2:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <HAL_TIM_RegisterCallback+0x1b4>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	08003511 	.word	0x08003511
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003521 	.word	0x08003521
 80034e4:	08003529 	.word	0x08003529
 80034e8:	08003531 	.word	0x08003531
 80034ec:	08003539 	.word	0x08003539
 80034f0:	08003541 	.word	0x08003541
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003551 	.word	0x08003551
 80034fc:	08003559 	.word	0x08003559
 8003500:	08003561 	.word	0x08003561
 8003504:	08003569 	.word	0x08003569
 8003508:	08003571 	.word	0x08003571
 800350c:	08003579 	.word	0x08003579
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8003516:	e038      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800351e:	e034      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003526:	e030      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800352e:	e02c      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003536:	e028      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800353e:	e024      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003546:	e020      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800354e:	e01c      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003556:	e018      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800355e:	e014      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003566:	e010      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800356e:	e00c      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003576:	e008      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800357e:	e004      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
        break;
 8003584:	e001      	b.n	800358a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800358a:	7dfb      	ldrb	r3, [r7, #23]
}
 800358c:	4618      	mov	r0, r3
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003694 <TIM_Base_SetConfig+0xfc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00f      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b6:	d00b      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <TIM_Base_SetConfig+0x100>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <TIM_Base_SetConfig+0x104>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <TIM_Base_SetConfig+0x108>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d108      	bne.n	80035e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003694 <TIM_Base_SetConfig+0xfc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01b      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f0:	d017      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a28      	ldr	r2, [pc, #160]	@ (8003698 <TIM_Base_SetConfig+0x100>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a27      	ldr	r2, [pc, #156]	@ (800369c <TIM_Base_SetConfig+0x104>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00f      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a26      	ldr	r2, [pc, #152]	@ (80036a0 <TIM_Base_SetConfig+0x108>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a25      	ldr	r2, [pc, #148]	@ (80036a4 <TIM_Base_SetConfig+0x10c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <TIM_Base_SetConfig+0x110>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <TIM_Base_SetConfig+0x114>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0e      	ldr	r2, [pc, #56]	@ (8003694 <TIM_Base_SetConfig+0xfc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d103      	bne.n	8003668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]
  }
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <TIM_ResetCallback+0x7c>)
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <TIM_ResetCallback+0x80>)
 80036c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003734 <TIM_ResetCallback+0x84>)
 80036cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <TIM_ResetCallback+0x88>)
 80036d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <TIM_ResetCallback+0x8c>)
 80036dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <TIM_ResetCallback+0x90>)
 80036e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a16      	ldr	r2, [pc, #88]	@ (8003744 <TIM_ResetCallback+0x94>)
 80036ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <TIM_ResetCallback+0x98>)
 80036f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a14      	ldr	r2, [pc, #80]	@ (800374c <TIM_ResetCallback+0x9c>)
 80036fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a13      	ldr	r2, [pc, #76]	@ (8003750 <TIM_ResetCallback+0xa0>)
 8003704:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <TIM_ResetCallback+0xa4>)
 800370c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <TIM_ResetCallback+0xa8>)
 8003714:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	@ (800375c <TIM_ResetCallback+0xac>)
 800371c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	08001245 	.word	0x08001245
 8003730:	08003271 	.word	0x08003271
 8003734:	080032e9 	.word	0x080032e9
 8003738:	080032fd 	.word	0x080032fd
 800373c:	08003299 	.word	0x08003299
 8003740:	080032ad 	.word	0x080032ad
 8003744:	08003285 	.word	0x08003285
 8003748:	080032c1 	.word	0x080032c1
 800374c:	080032d5 	.word	0x080032d5
 8003750:	08003311 	.word	0x08003311
 8003754:	08003761 	.word	0x08003761
 8003758:	08003775 	.word	0x08003775
 800375c:	08003789 	.word	0x08003789

08003760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <__NVIC_SetPriority>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0a      	blt.n	80037c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	490c      	ldr	r1, [pc, #48]	@ (80037e8 <__NVIC_SetPriority+0x4c>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	440b      	add	r3, r1
 80037c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037c4:	e00a      	b.n	80037dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4908      	ldr	r1, [pc, #32]	@ (80037ec <__NVIC_SetPriority+0x50>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b04      	subs	r3, #4
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	440b      	add	r3, r1
 80037da:	761a      	strb	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <SysTick_Handler+0x1c>)
 80037f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037f8:	f001 ffe0 	bl	80057bc <xTaskGetSchedulerState>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003802:	f002 fed9 	bl	80065b8 <xPortSysTickHandler>
  }
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	e000e010 	.word	0xe000e010

08003810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003814:	2100      	movs	r1, #0
 8003816:	f06f 0004 	mvn.w	r0, #4
 800381a:	f7ff ffbf 	bl	800379c <__NVIC_SetPriority>
#endif
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800382a:	f3ef 8305 	mrs	r3, IPSR
 800382e:	603b      	str	r3, [r7, #0]
  return(result);
 8003830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003836:	f06f 0305 	mvn.w	r3, #5
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	e00c      	b.n	8003858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800383e:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <osKernelInitialize+0x44>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <osKernelInitialize+0x44>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800384c:	2300      	movs	r3, #0
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e002      	b.n	8003858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003858:	687b      	ldr	r3, [r7, #4]
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000144 	.word	0x20000144

0800386c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003872:	f3ef 8305 	mrs	r3, IPSR
 8003876:	603b      	str	r3, [r7, #0]
  return(result);
 8003878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800387e:	f06f 0305 	mvn.w	r3, #5
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e010      	b.n	80038a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003886:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <osKernelStart+0x48>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d109      	bne.n	80038a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800388e:	f7ff ffbf 	bl	8003810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <osKernelStart+0x48>)
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003898:	f001 fb2c 	bl	8004ef4 <vTaskStartScheduler>
      stat = osOK;
 800389c:	2300      	movs	r3, #0
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	e002      	b.n	80038a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038a8:	687b      	ldr	r3, [r7, #4]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000144 	.word	0x20000144

080038b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	@ 0x38
 80038bc:	af04      	add	r7, sp, #16
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c8:	f3ef 8305 	mrs	r3, IPSR
 80038cc:	617b      	str	r3, [r7, #20]
  return(result);
 80038ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d17e      	bne.n	80039d2 <osThreadNew+0x11a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d07b      	beq.n	80039d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038da:	2380      	movs	r3, #128	@ 0x80
 80038dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038de:	2318      	movs	r3, #24
 80038e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d045      	beq.n	800397e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <osThreadNew+0x48>
        name = attr->name;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <osThreadNew+0x6e>
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b38      	cmp	r3, #56	@ 0x38
 8003918:	d805      	bhi.n	8003926 <osThreadNew+0x6e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <osThreadNew+0x72>
        return (NULL);
 8003926:	2300      	movs	r3, #0
 8003928:	e054      	b.n	80039d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <osThreadNew+0xa8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2ba7      	cmp	r3, #167	@ 0xa7
 8003948:	d90a      	bls.n	8003960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <osThreadNew+0xa8>
        mem = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e010      	b.n	8003982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <osThreadNew+0xca>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <osThreadNew+0xca>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <osThreadNew+0xca>
          mem = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e001      	b.n	8003982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d110      	bne.n	80039aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f001 f840 	bl	8004a24 <xTaskCreateStatic>
 80039a4:	4603      	mov	r3, r0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e013      	b.n	80039d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d110      	bne.n	80039d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	f107 0310 	add.w	r3, r7, #16
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f001 f88e 	bl	8004ae4 <xTaskCreate>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d001      	beq.n	80039d2 <osThreadNew+0x11a>
            hTask = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039d2:	693b      	ldr	r3, [r7, #16]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	@ 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e4:	f3ef 8305 	mrs	r3, IPSR
 80039e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <osDelay+0x1c>
    stat = osErrorISR;
 80039f0:	f06f 0305 	mvn.w	r3, #5
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e007      	b.n	8003a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 fa40 	bl	8004e88 <vTaskDelay>
    }
  }

  return (stat);
 8003a08:	68fb      	ldr	r3, [r7, #12]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a07      	ldr	r2, [pc, #28]	@ (8003a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a06      	ldr	r2, [pc, #24]	@ (8003a44 <vApplicationGetIdleTaskMemory+0x30>)
 8003a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2280      	movs	r2, #128	@ 0x80
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000148 	.word	0x20000148
 8003a44:	200001f0 	.word	0x200001f0

08003a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a07      	ldr	r2, [pc, #28]	@ (8003a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4a06      	ldr	r2, [pc, #24]	@ (8003a78 <vApplicationGetTimerTaskMemory+0x30>)
 8003a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a66:	601a      	str	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	200003f0 	.word	0x200003f0
 8003a78:	20000498 	.word	0x20000498

08003a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f103 0208 	add.w	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f103 0208 	add.w	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f103 0208 	add.w	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d103      	bne.n	8003b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e00c      	b.n	8003b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3308      	adds	r3, #8
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e002      	b.n	8003b4c <vListInsert+0x2e>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d2f6      	bcs.n	8003b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d103      	bne.n	8003bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1e5a      	subs	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c10:	f002 fc42 	bl	8006498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	3b01      	subs	r3, #1
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	22ff      	movs	r2, #255	@ 0xff
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	22ff      	movs	r2, #255	@ 0xff
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01a      	beq.n	8003ca4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3310      	adds	r3, #16
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 fbdc 	bl	8005430 <xTaskRemoveFromEventList>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <xQueueGenericReset+0xd0>)
 8003c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	e009      	b.n	8003ca4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3310      	adds	r3, #16
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fef1 	bl	8003a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3324      	adds	r3, #36	@ 0x24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff feec 	bl	8003a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ca4:	f002 fc2a 	bl	80064fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ca8:	2301      	movs	r3, #1
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <xQueueGenericCreateStatic+0x56>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <xQueueGenericCreateStatic+0x5a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueGenericCreateStatic+0x5c>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	623b      	str	r3, [r7, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xQueueGenericCreateStatic+0x84>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueGenericCreateStatic+0x88>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueGenericCreateStatic+0x8a>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d5e:	2350      	movs	r3, #80	@ 0x50
 8003d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b50      	cmp	r3, #80	@ 0x50
 8003d66:	d00b      	beq.n	8003d80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	61bb      	str	r3, [r7, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f840 	bl	8003e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3730      	adds	r7, #48	@ 0x30
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08a      	sub	sp, #40	@ 0x28
 8003db6:	af02      	add	r7, sp, #8
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <xQueueGenericCreate+0x2c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	613b      	str	r3, [r7, #16]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3350      	adds	r3, #80	@ 0x50
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 fc75 	bl	80066dc <pvPortMalloc>
 8003df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3350      	adds	r3, #80	@ 0x50
 8003e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f805 	bl	8003e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e002      	b.n	8003e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e56:	2101      	movs	r1, #1
 8003e58:	69b8      	ldr	r0, [r7, #24]
 8003e5a:	f7ff fec3 	bl	8003be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2200      	movs	r2, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f81d 	bl	8003ed4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6939      	ldr	r1, [r7, #16]
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff79 	bl	8003db2 <xQueueGenericCreate>
 8003ec0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ffd3 	bl	8003e6e <prvInitialiseMutex>

		return xNewQueue;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08e      	sub	sp, #56	@ 0x38
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <xQueueGenericSend+0x34>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <xQueueGenericSend+0x42>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <xQueueGenericSend+0x46>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <xQueueGenericSend+0x48>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <xQueueGenericSend+0x64>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d103      	bne.n	8003f46 <xQueueGenericSend+0x72>
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <xQueueGenericSend+0x76>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <xQueueGenericSend+0x78>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <xQueueGenericSend+0x94>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f68:	f001 fc28 	bl	80057bc <xTaskGetSchedulerState>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <xQueueGenericSend+0xa4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xQueueGenericSend+0xa8>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <xQueueGenericSend+0xaa>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <xQueueGenericSend+0xc6>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61fb      	str	r3, [r7, #28]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f9a:	f002 fa7d 	bl	8006498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <xQueueGenericSend+0xdc>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d129      	bne.n	8004004 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fb6:	f000 fbc7 	bl	8004748 <prvCopyDataToQueue>
 8003fba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	3324      	adds	r3, #36	@ 0x24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fa31 	bl	8005430 <xTaskRemoveFromEventList>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <xQueueGenericSend+0x200>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	e00a      	b.n	8003ffc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fec:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <xQueueGenericSend+0x200>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ffc:	f002 fa7e 	bl	80064fc <vPortExitCritical>
				return pdPASS;
 8004000:	2301      	movs	r3, #1
 8004002:	e063      	b.n	80040cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400a:	f002 fa77 	bl	80064fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800400e:	2300      	movs	r3, #0
 8004010:	e05c      	b.n	80040cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fa6b 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004026:	f002 fa69 	bl	80064fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402a:	f000 ffd3 	bl	8004fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800402e:	f002 fa33 	bl	8006498 <vPortEnterCritical>
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004038:	b25b      	sxtb	r3, r3
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d103      	bne.n	8004048 <xQueueGenericSend+0x174>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404e:	b25b      	sxtb	r3, r3
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x18a>
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800405e:	f002 fa4d 	bl	80064fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004062:	1d3a      	adds	r2, r7, #4
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f001 fa5a 	bl	8005524 <xTaskCheckForTimeOut>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d124      	bne.n	80040c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004076:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004078:	f000 fc5e 	bl	8004938 <prvIsQueueFull>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	3310      	adds	r3, #16
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f97e 	bl	800538c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004092:	f000 fbe9 	bl	8004868 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004096:	f000 ffab 	bl	8004ff0 <xTaskResumeAll>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f af7c 	bne.w	8003f9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040a2:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <xQueueGenericSend+0x200>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e772      	b.n	8003f9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b6:	f000 fbd7 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ba:	f000 ff99 	bl	8004ff0 <xTaskResumeAll>
 80040be:	e76c      	b.n	8003f9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c2:	f000 fbd1 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040c6:	f000 ff93 	bl	8004ff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3738      	adds	r7, #56	@ 0x38
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b090      	sub	sp, #64	@ 0x40
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <xQueueGenericSendFromISR+0x3e>
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueGenericSendFromISR+0x42>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueGenericSendFromISR+0x44>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d103      	bne.n	8004146 <xQueueGenericSendFromISR+0x6e>
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <xQueueGenericSendFromISR+0x72>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <xQueueGenericSendFromISR+0x74>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	623b      	str	r3, [r7, #32]
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004168:	f002 fa76 	bl	8006658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800416c:	f3ef 8211 	mrs	r2, BASEPRI
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004184:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004186:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <xQueueGenericSendFromISR+0xc2>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d12f      	bne.n	80041fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041b0:	f000 faca 	bl	8004748 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d112      	bne.n	80041e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	3324      	adds	r3, #36	@ 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f930 	bl	8005430 <xTaskRemoveFromEventList>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e007      	b.n	80041f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041e8:	3301      	adds	r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	b25a      	sxtb	r2, r3
 80041ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041f4:	2301      	movs	r3, #1
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80041f8:	e001      	b.n	80041fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800420a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800420c:	4618      	mov	r0, r3
 800420e:	3740      	adds	r7, #64	@ 0x40
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	@ 0x38
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	623b      	str	r3, [r7, #32]
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61fb      	str	r3, [r7, #28]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <xQueueGiveFromISR+0x5c>
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <xQueueGiveFromISR+0x60>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <xQueueGiveFromISR+0x62>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61bb      	str	r3, [r7, #24]
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	e7fd      	b.n	800428e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004292:	f002 f9e1 	bl	8006658 <vPortValidateInterruptPriority>
	__asm volatile
 8004296:	f3ef 8211 	mrs	r2, BASEPRI
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	617a      	str	r2, [r7, #20]
 80042ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80042ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042be:	429a      	cmp	r2, r3
 80042c0:	d22b      	bcs.n	800431a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d112      	bne.n	8004304 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	3324      	adds	r3, #36	@ 0x24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f8a0 	bl	8005430 <xTaskRemoveFromEventList>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e007      	b.n	8004314 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004308:	3301      	adds	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	b25a      	sxtb	r2, r3
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
 8004318:	e001      	b.n	800431e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f383 8811 	msr	BASEPRI, r3
}
 8004328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800432a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800432c:	4618      	mov	r0, r3
 800432e:	3738      	adds	r7, #56	@ 0x38
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	@ 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <xQueueReceive+0x32>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	623b      	str	r3, [r7, #32]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <xQueueReceive+0x40>
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <xQueueReceive+0x44>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <xQueueReceive+0x46>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <xQueueReceive+0x62>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61fb      	str	r3, [r7, #28]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004396:	f001 fa11 	bl	80057bc <xTaskGetSchedulerState>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <xQueueReceive+0x72>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueReceive+0x76>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueReceive+0x78>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <xQueueReceive+0x94>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	61bb      	str	r3, [r7, #24]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c8:	f002 f866 	bl	8006498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01f      	beq.n	8004418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043dc:	f000 fa1e 	bl	800481c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	3310      	adds	r3, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f81b 	bl	8005430 <xTaskRemoveFromEventList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004400:	4b3c      	ldr	r3, [pc, #240]	@ (80044f4 <xQueueReceive+0x1c0>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004410:	f002 f874 	bl	80064fc <vPortExitCritical>
				return pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	e069      	b.n	80044ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800441e:	f002 f86d 	bl	80064fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004422:	2300      	movs	r3, #0
 8004424:	e062      	b.n	80044ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800442c:	f107 0310 	add.w	r3, r7, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f001 f861 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800443a:	f002 f85f 	bl	80064fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800443e:	f000 fdc9 	bl	8004fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004442:	f002 f829 	bl	8006498 <vPortEnterCritical>
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d103      	bne.n	800445c <xQueueReceive+0x128>
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004462:	b25b      	sxtb	r3, r3
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d103      	bne.n	8004472 <xQueueReceive+0x13e>
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004472:	f002 f843 	bl	80064fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004476:	1d3a      	adds	r2, r7, #4
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f001 f850 	bl	8005524 <xTaskCheckForTimeOut>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d123      	bne.n	80044d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800448c:	f000 fa3e 	bl	800490c <prvIsQueueEmpty>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d017      	beq.n	80044c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 ff74 	bl	800538c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a6:	f000 f9df 	bl	8004868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044aa:	f000 fda1 	bl	8004ff0 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d189      	bne.n	80043c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <xQueueReceive+0x1c0>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	e780      	b.n	80043c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044c8:	f000 f9ce 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044cc:	f000 fd90 	bl	8004ff0 <xTaskResumeAll>
 80044d0:	e77a      	b.n	80043c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044d4:	f000 f9c8 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044d8:	f000 fd8a 	bl	8004ff0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044de:	f000 fa15 	bl	800490c <prvIsQueueEmpty>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f43f af6f 	beq.w	80043c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	@ 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	@ 0x38
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61fb      	str	r3, [r7, #28]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454c:	f001 f936 	bl	80057bc <xTaskGetSchedulerState>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <xQueueSemaphoreTake+0x64>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <xQueueSemaphoreTake+0x68>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <xQueueSemaphoreTake+0x6a>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	61bb      	str	r3, [r7, #24]
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800457e:	f001 ff8b 	bl	8006498 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d024      	beq.n	80045d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800459e:	f001 fa87 	bl	8005ab0 <pvTaskIncrementMutexHeldCount>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00f      	beq.n	80045d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b2:	3310      	adds	r3, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 ff3b 	bl	8005430 <xTaskRemoveFromEventList>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045c0:	4b54      	ldr	r3, [pc, #336]	@ (8004714 <xQueueSemaphoreTake+0x21c>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045d0:	f001 ff94 	bl	80064fc <vPortExitCritical>
				return pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e098      	b.n	800470a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d112      	bne.n	8004604 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	617b      	str	r3, [r7, #20]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80045fc:	f001 ff7e 	bl	80064fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004600:	2300      	movs	r3, #0
 8004602:	e082      	b.n	800470a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460a:	f107 030c 	add.w	r3, r7, #12
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff72 	bl	80054f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004618:	f001 ff70 	bl	80064fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800461c:	f000 fcda 	bl	8004fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004620:	f001 ff3a 	bl	8006498 <vPortEnterCritical>
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004626:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800462a:	b25b      	sxtb	r3, r3
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d103      	bne.n	800463a <xQueueSemaphoreTake+0x142>
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d103      	bne.n	8004650 <xQueueSemaphoreTake+0x158>
 8004648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004650:	f001 ff54 	bl	80064fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004654:	463a      	mov	r2, r7
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff61 	bl	8005524 <xTaskCheckForTimeOut>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d132      	bne.n	80046ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004668:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800466a:	f000 f94f 	bl	800490c <prvIsQueueEmpty>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d026      	beq.n	80046c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800467c:	f001 ff0c 	bl	8006498 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f001 f8b7 	bl	80057f8 <xTaskPriorityInherit>
 800468a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800468c:	f001 ff36 	bl	80064fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	3324      	adds	r3, #36	@ 0x24
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fe77 	bl	800538c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800469e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046a0:	f000 f8e2 	bl	8004868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046a4:	f000 fca4 	bl	8004ff0 <xTaskResumeAll>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f47f af67 	bne.w	800457e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80046b0:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <xQueueSemaphoreTake+0x21c>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	e75d      	b.n	800457e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046c4:	f000 f8d0 	bl	8004868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c8:	f000 fc92 	bl	8004ff0 <xTaskResumeAll>
 80046cc:	e757      	b.n	800457e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80046ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046d0:	f000 f8ca 	bl	8004868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d4:	f000 fc8c 	bl	8004ff0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046da:	f000 f917 	bl	800490c <prvIsQueueEmpty>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f43f af4c 	beq.w	800457e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80046ec:	f001 fed4 	bl	8006498 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80046f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046f2:	f000 f811 	bl	8004718 <prvGetDisinheritPriorityAfterTimeout>
 80046f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80046f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f952 	bl	80059a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004704:	f001 fefa 	bl	80064fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800470a:	4618      	mov	r0, r3
 800470c:	3738      	adds	r7, #56	@ 0x38
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e001      	b.n	800473a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800473a:	68fb      	ldr	r3, [r7, #12]
	}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10d      	bne.n	8004782 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d14d      	bne.n	800480a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f8a8 	bl	80058c8 <xTaskPriorityDisinherit>
 8004778:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	e043      	b.n	800480a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d119      	bne.n	80047bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6858      	ldr	r0, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	461a      	mov	r2, r3
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	f002 fb52 	bl	8006e3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d32b      	bcc.n	800480a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	e026      	b.n	800480a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68d8      	ldr	r0, [r3, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	461a      	mov	r2, r3
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	f002 fb38 	bl	8006e3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	425b      	negs	r3, r3
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d207      	bcs.n	80047f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	425b      	negs	r3, r3
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d105      	bne.n	800480a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3b01      	subs	r3, #1
 8004808:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004812:	697b      	ldr	r3, [r7, #20]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	441a      	add	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	d303      	bcc.n	8004850 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68d9      	ldr	r1, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	461a      	mov	r2, r3
 800485a:	6838      	ldr	r0, [r7, #0]
 800485c:	f002 faee 	bl	8006e3c <memcpy>
	}
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004870:	f001 fe12 	bl	8006498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800487a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800487c:	e011      	b.n	80048a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d012      	beq.n	80048ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	@ 0x24
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fdd0 	bl	8005430 <xTaskRemoveFromEventList>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004896:	f000 fea9 	bl	80055ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	3b01      	subs	r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dce9      	bgt.n	800487e <prvUnlockQueue+0x16>
 80048aa:	e000      	b.n	80048ae <prvUnlockQueue+0x46>
					break;
 80048ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	22ff      	movs	r2, #255	@ 0xff
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80048b6:	f001 fe21 	bl	80064fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048ba:	f001 fded 	bl	8006498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c6:	e011      	b.n	80048ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d012      	beq.n	80048f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3310      	adds	r3, #16
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fdab 	bl	8005430 <xTaskRemoveFromEventList>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048e0:	f000 fe84 	bl	80055ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	dce9      	bgt.n	80048c8 <prvUnlockQueue+0x60>
 80048f4:	e000      	b.n	80048f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	22ff      	movs	r2, #255	@ 0xff
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004900:	f001 fdfc 	bl	80064fc <vPortExitCritical>
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004914:	f001 fdc0 	bl	8006498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e001      	b.n	800492a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800492a:	f001 fde7 	bl	80064fc <vPortExitCritical>

	return xReturn;
 800492e:	68fb      	ldr	r3, [r7, #12]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004940:	f001 fdaa 	bl	8006498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	429a      	cmp	r2, r3
 800494e:	d102      	bne.n	8004956 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e001      	b.n	800495a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800495a:	f001 fdcf 	bl	80064fc <vPortExitCritical>

	return xReturn;
 800495e:	68fb      	ldr	r3, [r7, #12]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e014      	b.n	80049a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004978:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <vQueueAddToRegistry+0x50>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004984:	490c      	ldr	r1, [pc, #48]	@ (80049b8 <vQueueAddToRegistry+0x50>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800498e:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <vQueueAddToRegistry+0x50>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800499a:	e006      	b.n	80049aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b07      	cmp	r3, #7
 80049a6:	d9e7      	bls.n	8004978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000898 	.word	0x20000898

080049bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049cc:	f001 fd64 	bl	8006498 <vPortEnterCritical>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d103      	bne.n	80049e6 <vQueueWaitForMessageRestricted+0x2a>
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d103      	bne.n	80049fc <vQueueWaitForMessageRestricted+0x40>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049fc:	f001 fd7e 	bl	80064fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3324      	adds	r3, #36	@ 0x24
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fce1 	bl	80053d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ff26 	bl	8004868 <prvUnlockQueue>
	}
 8004a1c:	bf00      	nop
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	@ 0x38
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	61fb      	str	r3, [r7, #28]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a6e:	23a8      	movs	r3, #168	@ 0xa8
 8004a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a76:	d00b      	beq.n	8004a90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	61bb      	str	r3, [r7, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01e      	beq.n	8004ad6 <xTaskCreateStatic+0xb2>
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01b      	beq.n	8004ad6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9303      	str	r3, [sp, #12]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	9302      	str	r3, [sp, #8]
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f851 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ad0:	f000 f8f6 	bl	8004cc0 <prvAddNewTaskToReadyList>
 8004ad4:	e001      	b.n	8004ada <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ada:	697b      	ldr	r3, [r7, #20]
	}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3728      	adds	r7, #40	@ 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af04      	add	r7, sp, #16
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 fdef 	bl	80066dc <pvPortMalloc>
 8004afe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00e      	beq.n	8004b24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b06:	20a8      	movs	r0, #168	@ 0xa8
 8004b08:	f001 fde8 	bl	80066dc <pvPortMalloc>
 8004b0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b1a:	e005      	b.n	8004b28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	f001 feab 	bl	8006878 <vPortFree>
 8004b22:	e001      	b.n	8004b28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	9302      	str	r3, [sp, #8]
 8004b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f80f 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b52:	69f8      	ldr	r0, [r7, #28]
 8004b54:	f000 f8b4 	bl	8004cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e002      	b.n	8004b64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b64:	69bb      	ldr	r3, [r7, #24]
	}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	461a      	mov	r2, r3
 8004b88:	21a5      	movs	r1, #165	@ 0xa5
 8004b8a:	f002 f879 	bl	8006c80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	617b      	str	r3, [r7, #20]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01f      	beq.n	8004c10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	e012      	b.n	8004bfc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	7819      	ldrb	r1, [r3, #0]
 8004bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	3334      	adds	r3, #52	@ 0x34
 8004be6:	460a      	mov	r2, r1
 8004be8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d006      	beq.n	8004c04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d9e9      	bls.n	8004bd6 <prvInitialiseNewTask+0x66>
 8004c02:	e000      	b.n	8004c06 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c0e:	e003      	b.n	8004c18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	2b37      	cmp	r3, #55	@ 0x37
 8004c1c:	d901      	bls.n	8004c22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c1e:	2337      	movs	r3, #55	@ 0x37
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe ff3f 	bl	8003abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	3318      	adds	r3, #24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe ff3a 	bl	8003abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	3354      	adds	r3, #84	@ 0x54
 8004c72:	224c      	movs	r2, #76	@ 0x4c
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f002 f802 	bl	8006c80 <memset>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb4 <prvInitialiseNewTask+0x144>)
 8004c80:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb8 <prvInitialiseNewTask+0x148>)
 8004c86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004cbc <prvInitialiseNewTask+0x14c>)
 8004c8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	69b8      	ldr	r0, [r7, #24]
 8004c94:	f001 face 	bl	8006234 <pxPortInitialiseStack>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004caa:	bf00      	nop
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20004b38 	.word	0x20004b38
 8004cb8:	20004ba0 	.word	0x20004ba0
 8004cbc:	20004c08 	.word	0x20004c08

08004cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cc8:	f001 fbe6 	bl	8006498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cde:	4a2a      	ldr	r2, [pc, #168]	@ (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ce4:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d110      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cec:	f000 fca2 	bl	8005634 <prvInitialiseTaskLists>
 8004cf0:	e00d      	b.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cf2:	4b26      	ldr	r3, [pc, #152]	@ (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cfa:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d802      	bhi.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d08:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	@ (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d18:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d24:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <prvAddNewTaskToReadyList+0x74>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a15      	ldr	r2, [pc, #84]	@ (8004d98 <prvAddNewTaskToReadyList+0xd8>)
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe fec3 	bl	8003ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d50:	f001 fbd4 	bl	80064fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d54:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d207      	bcs.n	8004d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <prvAddNewTaskToReadyList+0xdc>)
 8004d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000dac 	.word	0x20000dac
 8004d88:	200008d8 	.word	0x200008d8
 8004d8c:	20000db8 	.word	0x20000db8
 8004d90:	20000dc8 	.word	0x20000dc8
 8004d94:	20000db4 	.word	0x20000db4
 8004d98:	200008dc 	.word	0x200008dc
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004da8:	f001 fb76 	bl	8006498 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <vTaskDelete+0x18>
 8004db2:	4b2d      	ldr	r3, [pc, #180]	@ (8004e68 <vTaskDelete+0xc8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	e000      	b.n	8004dba <vTaskDelete+0x1a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fee5 	bl	8003b90 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fedc 	bl	8003b90 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004dd8:	4b24      	ldr	r3, [pc, #144]	@ (8004e6c <vTaskDelete+0xcc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <vTaskDelete+0xcc>)
 8004de0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004de2:	4b21      	ldr	r3, [pc, #132]	@ (8004e68 <vTaskDelete+0xc8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d10b      	bne.n	8004e04 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	481f      	ldr	r0, [pc, #124]	@ (8004e70 <vTaskDelete+0xd0>)
 8004df4:	f7fe fe6f 	bl	8003ad6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004df8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <vTaskDelete+0xd4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e74 <vTaskDelete+0xd4>)
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e009      	b.n	8004e18 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004e04:	4b1c      	ldr	r3, [pc, #112]	@ (8004e78 <vTaskDelete+0xd8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e78 <vTaskDelete+0xd8>)
 8004e0c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fc7e 	bl	8005710 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004e14:	f000 fcb2 	bl	800577c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004e18:	f001 fb70 	bl	80064fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004e1c:	4b17      	ldr	r3, [pc, #92]	@ (8004e7c <vTaskDelete+0xdc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004e24:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <vTaskDelete+0xc8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d117      	bne.n	8004e5e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <vTaskDelete+0xe0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <vTaskDelete+0xae>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <vTaskDelete+0xe4>)
 8004e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200008d8 	.word	0x200008d8
 8004e6c:	20000dc8 	.word	0x20000dc8
 8004e70:	20000d80 	.word	0x20000d80
 8004e74:	20000d94 	.word	0x20000d94
 8004e78:	20000dac 	.word	0x20000dac
 8004e7c:	20000db8 	.word	0x20000db8
 8004e80:	20000dd4 	.word	0x20000dd4
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e9a:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <vTaskDelay+0x64>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <vTaskDelay+0x32>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eba:	f000 f88b 	bl	8004fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fe09 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ec6:	f000 f893 	bl	8004ff0 <xTaskResumeAll>
 8004eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ed2:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <vTaskDelay+0x68>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000dd4 	.word	0x20000dd4
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	@ 0x28
 8004ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f02:	463a      	mov	r2, r7
 8004f04:	1d39      	adds	r1, r7, #4
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fd82 	bl	8003a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f10:	6839      	ldr	r1, [r7, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	9202      	str	r2, [sp, #8]
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	460a      	mov	r2, r1
 8004f22:	4924      	ldr	r1, [pc, #144]	@ (8004fb4 <vTaskStartScheduler+0xc0>)
 8004f24:	4824      	ldr	r0, [pc, #144]	@ (8004fb8 <vTaskStartScheduler+0xc4>)
 8004f26:	f7ff fd7d 	bl	8004a24 <xTaskCreateStatic>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4a23      	ldr	r2, [pc, #140]	@ (8004fbc <vTaskStartScheduler+0xc8>)
 8004f2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f30:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <vTaskStartScheduler+0xc8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e001      	b.n	8004f42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d102      	bne.n	8004f4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f48:	f000 fe1a 	bl	8005b80 <xTimerCreateTimerTask>
 8004f4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d11b      	bne.n	8004f8c <vTaskStartScheduler+0x98>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613b      	str	r3, [r7, #16]
}
 8004f66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f68:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <vTaskStartScheduler+0xcc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3354      	adds	r3, #84	@ 0x54
 8004f6e:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <vTaskStartScheduler+0xd0>)
 8004f70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f72:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <vTaskStartScheduler+0xd4>)
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f7a:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <vTaskStartScheduler+0xd8>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f80:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <vTaskStartScheduler+0xdc>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f86:	f001 f9e3 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f8a:	e00f      	b.n	8004fac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d10b      	bne.n	8004fac <vTaskStartScheduler+0xb8>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60fb      	str	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <vTaskStartScheduler+0xb4>
}
 8004fac:	bf00      	nop
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	08006f34 	.word	0x08006f34
 8004fb8:	08005605 	.word	0x08005605
 8004fbc:	20000dd0 	.word	0x20000dd0
 8004fc0:	200008d8 	.word	0x200008d8
 8004fc4:	20000010 	.word	0x20000010
 8004fc8:	20000dcc 	.word	0x20000dcc
 8004fcc:	20000db8 	.word	0x20000db8
 8004fd0:	20000db0 	.word	0x20000db0

08004fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <vTaskSuspendAll+0x18>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4a03      	ldr	r2, [pc, #12]	@ (8004fec <vTaskSuspendAll+0x18>)
 8004fe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000dd4 	.word	0x20000dd4

08004ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ffe:	4b42      	ldr	r3, [pc, #264]	@ (8005108 <xTaskResumeAll+0x118>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xTaskResumeAll+0x2e>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	603b      	str	r3, [r7, #0]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800501e:	f001 fa3b 	bl	8006498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005022:	4b39      	ldr	r3, [pc, #228]	@ (8005108 <xTaskResumeAll+0x118>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3b01      	subs	r3, #1
 8005028:	4a37      	ldr	r2, [pc, #220]	@ (8005108 <xTaskResumeAll+0x118>)
 800502a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502c:	4b36      	ldr	r3, [pc, #216]	@ (8005108 <xTaskResumeAll+0x118>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d162      	bne.n	80050fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005034:	4b35      	ldr	r3, [pc, #212]	@ (800510c <xTaskResumeAll+0x11c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05e      	beq.n	80050fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800503c:	e02f      	b.n	800509e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503e:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <xTaskResumeAll+0x120>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3318      	adds	r3, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fda0 	bl	8003b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe fd9b 	bl	8003b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	4b2d      	ldr	r3, [pc, #180]	@ (8005114 <xTaskResumeAll+0x124>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d903      	bls.n	800506e <xTaskResumeAll+0x7e>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	4a2a      	ldr	r2, [pc, #168]	@ (8005114 <xTaskResumeAll+0x124>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4a27      	ldr	r2, [pc, #156]	@ (8005118 <xTaskResumeAll+0x128>)
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fe fd26 	bl	8003ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508e:	4b23      	ldr	r3, [pc, #140]	@ (800511c <xTaskResumeAll+0x12c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005098:	4b21      	ldr	r3, [pc, #132]	@ (8005120 <xTaskResumeAll+0x130>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800509e:	4b1c      	ldr	r3, [pc, #112]	@ (8005110 <xTaskResumeAll+0x120>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1cb      	bne.n	800503e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050ac:	f000 fb66 	bl	800577c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <xTaskResumeAll+0x134>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050bc:	f000 f846 	bl	800514c <xTaskIncrementTick>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <xTaskResumeAll+0x130>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f1      	bne.n	80050bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <xTaskResumeAll+0x134>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <xTaskResumeAll+0x130>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <xTaskResumeAll+0x138>)
 80050ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050fa:	f001 f9ff 	bl	80064fc <vPortExitCritical>

	return xAlreadyYielded;
 80050fe:	68bb      	ldr	r3, [r7, #8]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000dd4 	.word	0x20000dd4
 800510c:	20000dac 	.word	0x20000dac
 8005110:	20000d6c 	.word	0x20000d6c
 8005114:	20000db4 	.word	0x20000db4
 8005118:	200008dc 	.word	0x200008dc
 800511c:	200008d8 	.word	0x200008d8
 8005120:	20000dc0 	.word	0x20000dc0
 8005124:	20000dbc 	.word	0x20000dbc
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <xTaskGetTickCount+0x1c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000db0 	.word	0x20000db0

0800514c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005156:	4b4f      	ldr	r3, [pc, #316]	@ (8005294 <xTaskIncrementTick+0x148>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8090 	bne.w	8005280 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005160:	4b4d      	ldr	r3, [pc, #308]	@ (8005298 <xTaskIncrementTick+0x14c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005168:	4a4b      	ldr	r2, [pc, #300]	@ (8005298 <xTaskIncrementTick+0x14c>)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d121      	bne.n	80051b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005174:	4b49      	ldr	r3, [pc, #292]	@ (800529c <xTaskIncrementTick+0x150>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <xTaskIncrementTick+0x4a>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	603b      	str	r3, [r7, #0]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xTaskIncrementTick+0x46>
 8005196:	4b41      	ldr	r3, [pc, #260]	@ (800529c <xTaskIncrementTick+0x150>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	4b40      	ldr	r3, [pc, #256]	@ (80052a0 <xTaskIncrementTick+0x154>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3e      	ldr	r2, [pc, #248]	@ (800529c <xTaskIncrementTick+0x150>)
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4a3e      	ldr	r2, [pc, #248]	@ (80052a0 <xTaskIncrementTick+0x154>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <xTaskIncrementTick+0x158>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	4a3c      	ldr	r2, [pc, #240]	@ (80052a4 <xTaskIncrementTick+0x158>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	f000 fae2 	bl	800577c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051b8:	4b3b      	ldr	r3, [pc, #236]	@ (80052a8 <xTaskIncrementTick+0x15c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d349      	bcc.n	8005256 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c2:	4b36      	ldr	r3, [pc, #216]	@ (800529c <xTaskIncrementTick+0x150>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051cc:	4b36      	ldr	r3, [pc, #216]	@ (80052a8 <xTaskIncrementTick+0x15c>)
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	601a      	str	r2, [r3, #0]
					break;
 80051d4:	e03f      	b.n	8005256 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d6:	4b31      	ldr	r3, [pc, #196]	@ (800529c <xTaskIncrementTick+0x150>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d203      	bcs.n	80051f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ee:	4a2e      	ldr	r2, [pc, #184]	@ (80052a8 <xTaskIncrementTick+0x15c>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051f4:	e02f      	b.n	8005256 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fcc8 	bl	8003b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3318      	adds	r3, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fcbf 	bl	8003b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005216:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <xTaskIncrementTick+0x160>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d903      	bls.n	8005226 <xTaskIncrementTick+0xda>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	4a22      	ldr	r2, [pc, #136]	@ (80052ac <xTaskIncrementTick+0x160>)
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4a1f      	ldr	r2, [pc, #124]	@ (80052b0 <xTaskIncrementTick+0x164>)
 8005234:	441a      	add	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fe fc4a 	bl	8003ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005246:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <xTaskIncrementTick+0x168>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d3b8      	bcc.n	80051c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005254:	e7b5      	b.n	80051c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005256:	4b17      	ldr	r3, [pc, #92]	@ (80052b4 <xTaskIncrementTick+0x168>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525c:	4914      	ldr	r1, [pc, #80]	@ (80052b0 <xTaskIncrementTick+0x164>)
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d901      	bls.n	8005272 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005272:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <xTaskIncrementTick+0x16c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800527a:	2301      	movs	r3, #1
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e004      	b.n	800528a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005280:	4b0e      	ldr	r3, [pc, #56]	@ (80052bc <xTaskIncrementTick+0x170>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	4a0d      	ldr	r2, [pc, #52]	@ (80052bc <xTaskIncrementTick+0x170>)
 8005288:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000dd4 	.word	0x20000dd4
 8005298:	20000db0 	.word	0x20000db0
 800529c:	20000d64 	.word	0x20000d64
 80052a0:	20000d68 	.word	0x20000d68
 80052a4:	20000dc4 	.word	0x20000dc4
 80052a8:	20000dcc 	.word	0x20000dcc
 80052ac:	20000db4 	.word	0x20000db4
 80052b0:	200008dc 	.word	0x200008dc
 80052b4:	200008d8 	.word	0x200008d8
 80052b8:	20000dc0 	.word	0x20000dc0
 80052bc:	20000dbc 	.word	0x20000dbc

080052c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005374 <vTaskSwitchContext+0xb4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <vTaskSwitchContext+0xb8>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052d4:	e047      	b.n	8005366 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80052d6:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <vTaskSwitchContext+0xb8>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	4b27      	ldr	r3, [pc, #156]	@ (800537c <vTaskSwitchContext+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e011      	b.n	8005308 <vTaskSwitchContext+0x48>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <vTaskSwitchContext+0x42>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	e7fd      	b.n	80052fe <vTaskSwitchContext+0x3e>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b01      	subs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	491d      	ldr	r1, [pc, #116]	@ (8005380 <vTaskSwitchContext+0xc0>)
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0e3      	beq.n	80052e4 <vTaskSwitchContext+0x24>
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <vTaskSwitchContext+0xc0>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3308      	adds	r3, #8
 800533e:	429a      	cmp	r2, r3
 8005340:	d104      	bne.n	800534c <vTaskSwitchContext+0x8c>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <vTaskSwitchContext+0xc4>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4a09      	ldr	r2, [pc, #36]	@ (800537c <vTaskSwitchContext+0xbc>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800535c:	4b09      	ldr	r3, [pc, #36]	@ (8005384 <vTaskSwitchContext+0xc4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3354      	adds	r3, #84	@ 0x54
 8005362:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <vTaskSwitchContext+0xc8>)
 8005364:	6013      	str	r3, [r2, #0]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000dd4 	.word	0x20000dd4
 8005378:	20000dc0 	.word	0x20000dc0
 800537c:	20000db4 	.word	0x20000db4
 8005380:	200008dc 	.word	0x200008dc
 8005384:	200008d8 	.word	0x200008d8
 8005388:	20000010 	.word	0x20000010

0800538c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60fb      	str	r3, [r7, #12]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b4:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <vTaskPlaceOnEventList+0x48>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fe fbae 	bl	8003b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053c2:	2101      	movs	r1, #1
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f000 fb87 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200008d8 	.word	0x200008d8

080053d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <vTaskPlaceOnEventListRestricted+0x54>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3318      	adds	r3, #24
 8005408:	4619      	mov	r1, r3
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7fe fb63 	bl	8003ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 fb5a 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
	}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200008d8 	.word	0x200008d8

08005430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3318      	adds	r3, #24
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fb94 	bl	8003b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <xTaskRemoveFromEventList+0xb0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11d      	bne.n	80054ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3304      	adds	r3, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fb8b 	bl	8003b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547e:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <xTaskRemoveFromEventList+0xb4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d903      	bls.n	800548e <xTaskRemoveFromEventList+0x5e>
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <xTaskRemoveFromEventList+0xb4>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4a13      	ldr	r2, [pc, #76]	@ (80054e8 <xTaskRemoveFromEventList+0xb8>)
 800549c:	441a      	add	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe fb16 	bl	8003ad6 <vListInsertEnd>
 80054aa:	e005      	b.n	80054b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3318      	adds	r3, #24
 80054b0:	4619      	mov	r1, r3
 80054b2:	480e      	ldr	r0, [pc, #56]	@ (80054ec <xTaskRemoveFromEventList+0xbc>)
 80054b4:	f7fe fb0f 	bl	8003ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054bc:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <xTaskRemoveFromEventList+0xc0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d905      	bls.n	80054d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <xTaskRemoveFromEventList+0xc4>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e001      	b.n	80054d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000dd4 	.word	0x20000dd4
 80054e4:	20000db4 	.word	0x20000db4
 80054e8:	200008dc 	.word	0x200008dc
 80054ec:	20000d6c 	.word	0x20000d6c
 80054f0:	200008d8 	.word	0x200008d8
 80054f4:	20000dc0 	.word	0x20000dc0

080054f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <vTaskInternalSetTimeOutState+0x24>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <vTaskInternalSetTimeOutState+0x28>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	20000dc4 	.word	0x20000dc4
 8005520:	20000db0 	.word	0x20000db0

08005524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800556a:	f000 ff95 	bl	8006498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800556e:	4b1d      	ldr	r3, [pc, #116]	@ (80055e4 <xTaskCheckForTimeOut+0xc0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d102      	bne.n	800558e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e023      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <xTaskCheckForTimeOut+0xc4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d007      	beq.n	80055aa <xTaskCheckForTimeOut+0x86>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e015      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d20b      	bcs.n	80055cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff99 	bl	80054f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e004      	b.n	80055d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055d6:	f000 ff91 	bl	80064fc <vPortExitCritical>

	return xReturn;
 80055da:	69fb      	ldr	r3, [r7, #28]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000db0 	.word	0x20000db0
 80055e8:	20000dc4 	.word	0x20000dc4

080055ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055f0:	4b03      	ldr	r3, [pc, #12]	@ (8005600 <vTaskMissedYield+0x14>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000dc0 	.word	0x20000dc0

08005604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800560c:	f000 f852 	bl	80056b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005610:	4b06      	ldr	r3, [pc, #24]	@ (800562c <prvIdleTask+0x28>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d9f9      	bls.n	800560c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <prvIdleTask+0x2c>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005628:	e7f0      	b.n	800560c <prvIdleTask+0x8>
 800562a:	bf00      	nop
 800562c:	200008dc 	.word	0x200008dc
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	e00c      	b.n	800565a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4a12      	ldr	r2, [pc, #72]	@ (8005694 <prvInitialiseTaskLists+0x60>)
 800564c:	4413      	add	r3, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fa14 	bl	8003a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3301      	adds	r3, #1
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b37      	cmp	r3, #55	@ 0x37
 800565e:	d9ef      	bls.n	8005640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005660:	480d      	ldr	r0, [pc, #52]	@ (8005698 <prvInitialiseTaskLists+0x64>)
 8005662:	f7fe fa0b 	bl	8003a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005666:	480d      	ldr	r0, [pc, #52]	@ (800569c <prvInitialiseTaskLists+0x68>)
 8005668:	f7fe fa08 	bl	8003a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800566c:	480c      	ldr	r0, [pc, #48]	@ (80056a0 <prvInitialiseTaskLists+0x6c>)
 800566e:	f7fe fa05 	bl	8003a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005672:	480c      	ldr	r0, [pc, #48]	@ (80056a4 <prvInitialiseTaskLists+0x70>)
 8005674:	f7fe fa02 	bl	8003a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005678:	480b      	ldr	r0, [pc, #44]	@ (80056a8 <prvInitialiseTaskLists+0x74>)
 800567a:	f7fe f9ff 	bl	8003a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800567e:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <prvInitialiseTaskLists+0x78>)
 8005680:	4a05      	ldr	r2, [pc, #20]	@ (8005698 <prvInitialiseTaskLists+0x64>)
 8005682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <prvInitialiseTaskLists+0x7c>)
 8005686:	4a05      	ldr	r2, [pc, #20]	@ (800569c <prvInitialiseTaskLists+0x68>)
 8005688:	601a      	str	r2, [r3, #0]
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200008dc 	.word	0x200008dc
 8005698:	20000d3c 	.word	0x20000d3c
 800569c:	20000d50 	.word	0x20000d50
 80056a0:	20000d6c 	.word	0x20000d6c
 80056a4:	20000d80 	.word	0x20000d80
 80056a8:	20000d98 	.word	0x20000d98
 80056ac:	20000d64 	.word	0x20000d64
 80056b0:	20000d68 	.word	0x20000d68

080056b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ba:	e019      	b.n	80056f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056bc:	f000 feec 	bl	8006498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	4b10      	ldr	r3, [pc, #64]	@ (8005704 <prvCheckTasksWaitingTermination+0x50>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe fa5f 	bl	8003b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005708 <prvCheckTasksWaitingTermination+0x54>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005708 <prvCheckTasksWaitingTermination+0x54>)
 80056da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056e6:	f000 ff09 	bl	80064fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f810 	bl	8005710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <prvCheckTasksWaitingTermination+0x58>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e1      	bne.n	80056bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000d80 	.word	0x20000d80
 8005708:	20000dac 	.word	0x20000dac
 800570c:	20000d94 	.word	0x20000d94

08005710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3354      	adds	r3, #84	@ 0x54
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fae7 	bl	8006cf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005728:	2b00      	cmp	r3, #0
 800572a:	d108      	bne.n	800573e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f8a1 	bl	8006878 <vPortFree>
				vPortFree( pxTCB );
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 f89e 	bl	8006878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800573c:	e019      	b.n	8005772 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005744:	2b01      	cmp	r3, #1
 8005746:	d103      	bne.n	8005750 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f895 	bl	8006878 <vPortFree>
	}
 800574e:	e010      	b.n	8005772 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005756:	2b02      	cmp	r3, #2
 8005758:	d00b      	beq.n	8005772 <prvDeleteTCB+0x62>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60fb      	str	r3, [r7, #12]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <prvDeleteTCB+0x5e>
	}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005794:	e008      	b.n	80057a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005796:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a04      	ldr	r2, [pc, #16]	@ (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000d64 	.word	0x20000d64
 80057b8:	20000dcc 	.word	0x20000dcc

080057bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
	}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000db8 	.word	0x20000db8
 80057f4:	20000dd4 	.word	0x20000dd4

080057f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d051      	beq.n	80058b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005812:	4b2a      	ldr	r3, [pc, #168]	@ (80058bc <xTaskPriorityInherit+0xc4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	429a      	cmp	r2, r3
 800581a:	d241      	bcs.n	80058a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db06      	blt.n	8005832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <xTaskPriorityInherit+0xc4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6959      	ldr	r1, [r3, #20]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <xTaskPriorityInherit+0xc8>)
 8005844:	4413      	add	r3, r2
 8005846:	4299      	cmp	r1, r3
 8005848:	d122      	bne.n	8005890 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe f99e 	bl	8003b90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005854:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <xTaskPriorityInherit+0xc4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005862:	4b18      	ldr	r3, [pc, #96]	@ (80058c4 <xTaskPriorityInherit+0xcc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <xTaskPriorityInherit+0x7a>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	4a15      	ldr	r2, [pc, #84]	@ (80058c4 <xTaskPriorityInherit+0xcc>)
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a10      	ldr	r2, [pc, #64]	@ (80058c0 <xTaskPriorityInherit+0xc8>)
 8005880:	441a      	add	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3304      	adds	r3, #4
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7fe f924 	bl	8003ad6 <vListInsertEnd>
 800588e:	e004      	b.n	800589a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005890:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <xTaskPriorityInherit+0xc4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e008      	b.n	80058b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a4:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <xTaskPriorityInherit+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d201      	bcs.n	80058b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058b2:	68fb      	ldr	r3, [r7, #12]
	}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200008d8 	.word	0x200008d8
 80058c0:	200008dc 	.word	0x200008dc
 80058c4:	20000db4 	.word	0x20000db4

080058c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d058      	beq.n	8005990 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058de:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <xTaskPriorityDisinherit+0xd4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d00b      	beq.n	8005900 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60fb      	str	r3, [r7, #12]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60bb      	str	r3, [r7, #8]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	429a      	cmp	r2, r3
 8005934:	d02c      	beq.n	8005990 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593a:	2b00      	cmp	r3, #0
 800593c:	d128      	bne.n	8005990 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3304      	adds	r3, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe f924 	bl	8003b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005960:	4b0f      	ldr	r3, [pc, #60]	@ (80059a0 <xTaskPriorityDisinherit+0xd8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d903      	bls.n	8005970 <xTaskPriorityDisinherit+0xa8>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4a0c      	ldr	r2, [pc, #48]	@ (80059a0 <xTaskPriorityDisinherit+0xd8>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4a09      	ldr	r2, [pc, #36]	@ (80059a4 <xTaskPriorityDisinherit+0xdc>)
 800597e:	441a      	add	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7fe f8a5 	bl	8003ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005990:	697b      	ldr	r3, [r7, #20]
	}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200008d8 	.word	0x200008d8
 80059a0:	20000db4 	.word	0x20000db4
 80059a4:	200008dc 	.word	0x200008dc

080059a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d06c      	beq.n	8005a9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d902      	bls.n	80059f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e002      	b.n	80059f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d04c      	beq.n	8005a9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d147      	bne.n	8005a9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d10b      	bne.n	8005a2c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60bb      	str	r3, [r7, #8]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	db04      	blt.n	8005a4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a13      	ldr	r2, [pc, #76]	@ (8005aa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d11c      	bne.n	8005a9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe f893 	bl	8003b90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005aac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d903      	bls.n	8005a7e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005aac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a07      	ldr	r2, [pc, #28]	@ (8005aa8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a8c:	441a      	add	r2, r3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe f81e 	bl	8003ad6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a9a:	bf00      	nop
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200008d8 	.word	0x200008d8
 8005aa8:	200008dc 	.word	0x200008dc
 8005aac:	20000db4 	.word	0x20000db4

08005ab0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ab4:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005ac6:	4b03      	ldr	r3, [pc, #12]	@ (8005ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	200008d8 	.word	0x200008d8

08005ad8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ae2:	4b21      	ldr	r3, [pc, #132]	@ (8005b68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae8:	4b20      	ldr	r3, [pc, #128]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe f84e 	bl	8003b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d10a      	bne.n	8005b12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b1a      	ldr	r3, [pc, #104]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4819      	ldr	r0, [pc, #100]	@ (8005b70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b0c:	f7fd ffe3 	bl	8003ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b10:	e026      	b.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b1a:	4b14      	ldr	r3, [pc, #80]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d209      	bcs.n	8005b3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fd fff1 	bl	8003b1e <vListInsert>
}
 8005b3c:	e010      	b.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fd ffe7 	bl	8003b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d202      	bcs.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b5a:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6013      	str	r3, [r2, #0]
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000db0 	.word	0x20000db0
 8005b6c:	200008d8 	.word	0x200008d8
 8005b70:	20000d98 	.word	0x20000d98
 8005b74:	20000d68 	.word	0x20000d68
 8005b78:	20000d64 	.word	0x20000d64
 8005b7c:	20000dcc 	.word	0x20000dcc

08005b80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	@ 0x28
 8005b84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b8a:	f000 fb13 	bl	80061b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <xTimerCreateTimerTask+0x84>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d021      	beq.n	8005bda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b9e:	1d3a      	adds	r2, r7, #4
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fd ff4d 	bl	8003a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	9202      	str	r2, [sp, #8]
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	4911      	ldr	r1, [pc, #68]	@ (8005c08 <xTimerCreateTimerTask+0x88>)
 8005bc2:	4812      	ldr	r0, [pc, #72]	@ (8005c0c <xTimerCreateTimerTask+0x8c>)
 8005bc4:	f7fe ff2e 	bl	8004a24 <xTaskCreateStatic>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <xTimerCreateTimerTask+0x90>)
 8005bcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <xTimerCreateTimerTask+0x90>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bf8:	697b      	ldr	r3, [r7, #20]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000e08 	.word	0x20000e08
 8005c08:	08006f3c 	.word	0x08006f3c
 8005c0c:	08005d4d 	.word	0x08005d4d
 8005c10:	20000e0c 	.word	0x20000e0c

08005c14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <xTimerGenericCommand+0x30>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c44:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <xTimerGenericCommand+0x98>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02a      	beq.n	8005ca2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	dc18      	bgt.n	8005c90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c5e:	f7ff fdad 	bl	80057bc <xTaskGetSchedulerState>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d109      	bne.n	8005c7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c68:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <xTimerGenericCommand+0x98>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	f107 0110 	add.w	r1, r7, #16
 8005c70:	2300      	movs	r3, #0
 8005c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c74:	f7fe f92e 	bl	8003ed4 <xQueueGenericSend>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c7a:	e012      	b.n	8005ca2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <xTimerGenericCommand+0x98>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f107 0110 	add.w	r1, r7, #16
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	f7fe f924 	bl	8003ed4 <xQueueGenericSend>
 8005c8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c8e:	e008      	b.n	8005ca2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c90:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <xTimerGenericCommand+0x98>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	f107 0110 	add.w	r1, r7, #16
 8005c98:	2300      	movs	r3, #0
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	f7fe fa1c 	bl	80040d8 <xQueueGenericSendFromISR>
 8005ca0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3728      	adds	r7, #40	@ 0x28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000e08 	.word	0x20000e08

08005cb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cba:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <prvProcessExpiredTimer+0x98>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fd ff61 	bl	8003b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d023      	beq.n	8005d24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	18d1      	adds	r1, r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	6978      	ldr	r0, [r7, #20]
 8005cea:	f000 f8d5 	bl	8005e98 <prvInsertTimerInActiveList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d020      	beq.n	8005d36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f7ff ff88 	bl	8005c14 <xTimerGenericCommand>
 8005d04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d114      	bne.n	8005d36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	e7fd      	b.n	8005d20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	6978      	ldr	r0, [r7, #20]
 8005d3c:	4798      	blx	r3
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000e00 	.word	0x20000e00

08005d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d54:	f107 0308 	add.w	r3, r7, #8
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f859 	bl	8005e10 <prvGetNextExpireTime>
 8005d5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f805 	bl	8005d74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d6a:	f000 f8d7 	bl	8005f1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d6e:	bf00      	nop
 8005d70:	e7f0      	b.n	8005d54 <prvTimerTask+0x8>
	...

08005d74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d7e:	f7ff f929 	bl	8004fd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f866 	bl	8005e58 <prvSampleTimeNow>
 8005d8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d130      	bne.n	8005df6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <prvProcessTimerOrBlockTask+0x3c>
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d806      	bhi.n	8005db0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005da2:	f7ff f925 	bl	8004ff0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff ff81 	bl	8005cb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005dae:	e024      	b.n	8005dfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005db6:	4b13      	ldr	r3, [pc, #76]	@ (8005e04 <prvProcessTimerOrBlockTask+0x90>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <prvProcessTimerOrBlockTask+0x50>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <prvProcessTimerOrBlockTask+0x52>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <prvProcessTimerOrBlockTask+0x94>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f7fe fdf1 	bl	80049bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dda:	f7ff f909 	bl	8004ff0 <xTaskResumeAll>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005de4:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <prvProcessTimerOrBlockTask+0x98>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
}
 8005df4:	e001      	b.n	8005dfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005df6:	f7ff f8fb 	bl	8004ff0 <xTaskResumeAll>
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000e04 	.word	0x20000e04
 8005e08:	20000e08 	.word	0x20000e08
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e18:	4b0e      	ldr	r3, [pc, #56]	@ (8005e54 <prvGetNextExpireTime+0x44>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <prvGetNextExpireTime+0x16>
 8005e22:	2201      	movs	r2, #1
 8005e24:	e000      	b.n	8005e28 <prvGetNextExpireTime+0x18>
 8005e26:	2200      	movs	r2, #0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e34:	4b07      	ldr	r3, [pc, #28]	@ (8005e54 <prvGetNextExpireTime+0x44>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e001      	b.n	8005e44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000e00 	.word	0x20000e00

08005e58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e60:	f7ff f964 	bl	800512c <xTaskGetTickCount>
 8005e64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e66:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <prvSampleTimeNow+0x3c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d205      	bcs.n	8005e7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e70:	f000 f93a 	bl	80060e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	e002      	b.n	8005e82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e82:	4a04      	ldr	r2, [pc, #16]	@ (8005e94 <prvSampleTimeNow+0x3c>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000e10 	.word	0x20000e10

08005e98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d812      	bhi.n	8005ee4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e01b      	b.n	8005f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ed2:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <prvInsertTimerInActiveList+0x7c>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7fd fe1e 	bl	8003b1e <vListInsert>
 8005ee2:	e012      	b.n	8005f0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d206      	bcs.n	8005efa <prvInsertTimerInActiveList+0x62>
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e007      	b.n	8005f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005efa:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <prvInsertTimerInActiveList+0x80>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fd fe0a 	bl	8003b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f0a:	697b      	ldr	r3, [r7, #20]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000e04 	.word	0x20000e04
 8005f18:	20000e00 	.word	0x20000e00

08005f1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08e      	sub	sp, #56	@ 0x38
 8005f20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f22:	e0ce      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da19      	bge.n	8005f5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	61fb      	str	r3, [r7, #28]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f54:	6850      	ldr	r0, [r2, #4]
 8005f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f58:	6892      	ldr	r2, [r2, #8]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f2c0 80ae 	blt.w	80060c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fd fe0a 	bl	8003b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ff6a 	bl	8005e58 <prvSampleTimeNow>
 8005f84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	f200 8097 	bhi.w	80060bc <prvProcessReceivedCommands+0x1a0>
 8005f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f94 <prvProcessReceivedCommands+0x78>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fbd 	.word	0x08005fbd
 8005fa0:	08006033 	.word	0x08006033
 8005fa4:	08006047 	.word	0x08006047
 8005fa8:	08006093 	.word	0x08006093
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fbd 	.word	0x08005fbd
 8005fb4:	08006033 	.word	0x08006033
 8005fb8:	08006047 	.word	0x08006047
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	18d1      	adds	r1, r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fdc:	f7ff ff5c 	bl	8005e98 <prvInsertTimerInActiveList>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06c      	beq.n	80060c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d061      	beq.n	80060c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	441a      	add	r2, r3
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2300      	movs	r3, #0
 800600a:	2100      	movs	r1, #0
 800600c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600e:	f7ff fe01 	bl	8005c14 <xTimerGenericCommand>
 8006012:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d152      	bne.n	80060c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	61bb      	str	r3, [r7, #24]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006044:	e03d      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	617b      	str	r3, [r7, #20]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	18d1      	adds	r1, r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800608c:	f7ff ff04 	bl	8005e98 <prvInsertTimerInActiveList>
					break;
 8006090:	e017      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80060a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a2:	f000 fbe9 	bl	8006878 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060a6:	e00c      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060ba:	e002      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80060c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060c2:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <prvProcessReceivedCommands+0x1c8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1d39      	adds	r1, r7, #4
 80060c8:	2200      	movs	r2, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe f932 	bl	8004334 <xQueueReceive>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f47f af26 	bne.w	8005f24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	3730      	adds	r7, #48	@ 0x30
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000e08 	.word	0x20000e08

080060e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ee:	e049      	b.n	8006184 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f0:	4b2e      	ldr	r3, [pc, #184]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fa:	4b2c      	ldr	r3, [pc, #176]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7fd fd41 	bl	8003b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d02f      	beq.n	8006184 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d90e      	bls.n	8006154 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006142:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fd fce6 	bl	8003b1e <vListInsert>
 8006152:	e017      	b.n	8006184 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	2300      	movs	r3, #0
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	2100      	movs	r1, #0
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff fd58 	bl	8005c14 <xTimerGenericCommand>
 8006164:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	603b      	str	r3, [r7, #0]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006184:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1b0      	bne.n	80060f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <prvSwitchTimerLists+0xc8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a04      	ldr	r2, [pc, #16]	@ (80061ac <prvSwitchTimerLists+0xc4>)
 800619a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800619c:	4a04      	ldr	r2, [pc, #16]	@ (80061b0 <prvSwitchTimerLists+0xc8>)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000e00 	.word	0x20000e00
 80061b0:	20000e04 	.word	0x20000e04

080061b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061ba:	f000 f96d 	bl	8006498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061be:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <prvCheckForValidListAndQueue+0x60>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d120      	bne.n	8006208 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061c6:	4814      	ldr	r0, [pc, #80]	@ (8006218 <prvCheckForValidListAndQueue+0x64>)
 80061c8:	f7fd fc58 	bl	8003a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061cc:	4813      	ldr	r0, [pc, #76]	@ (800621c <prvCheckForValidListAndQueue+0x68>)
 80061ce:	f7fd fc55 	bl	8003a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061d2:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <prvCheckForValidListAndQueue+0x6c>)
 80061d4:	4a10      	ldr	r2, [pc, #64]	@ (8006218 <prvCheckForValidListAndQueue+0x64>)
 80061d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061d8:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <prvCheckForValidListAndQueue+0x70>)
 80061da:	4a10      	ldr	r2, [pc, #64]	@ (800621c <prvCheckForValidListAndQueue+0x68>)
 80061dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061de:	2300      	movs	r3, #0
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4b11      	ldr	r3, [pc, #68]	@ (8006228 <prvCheckForValidListAndQueue+0x74>)
 80061e4:	4a11      	ldr	r2, [pc, #68]	@ (800622c <prvCheckForValidListAndQueue+0x78>)
 80061e6:	2110      	movs	r1, #16
 80061e8:	200a      	movs	r0, #10
 80061ea:	f7fd fd65 	bl	8003cb8 <xQueueGenericCreateStatic>
 80061ee:	4603      	mov	r3, r0
 80061f0:	4a08      	ldr	r2, [pc, #32]	@ (8006214 <prvCheckForValidListAndQueue+0x60>)
 80061f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061f4:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <prvCheckForValidListAndQueue+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <prvCheckForValidListAndQueue+0x60>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	490b      	ldr	r1, [pc, #44]	@ (8006230 <prvCheckForValidListAndQueue+0x7c>)
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fbb0 	bl	8004968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006208:	f000 f978 	bl	80064fc <vPortExitCritical>
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000e08 	.word	0x20000e08
 8006218:	20000dd8 	.word	0x20000dd8
 800621c:	20000dec 	.word	0x20000dec
 8006220:	20000e00 	.word	0x20000e00
 8006224:	20000e04 	.word	0x20000e04
 8006228:	20000eb4 	.word	0x20000eb4
 800622c:	20000e14 	.word	0x20000e14
 8006230:	08006f44 	.word	0x08006f44

08006234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b04      	subs	r3, #4
 8006244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800624c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b04      	subs	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006264:	4a0c      	ldr	r2, [pc, #48]	@ (8006298 <pxPortInitialiseStack+0x64>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3b14      	subs	r3, #20
 800626e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b04      	subs	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f06f 0202 	mvn.w	r2, #2
 8006282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3b20      	subs	r3, #32
 8006288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	0800629d 	.word	0x0800629d

0800629c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062a6:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <prvTaskExitError+0x58>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d00b      	beq.n	80062c8 <prvTaskExitError+0x2c>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <prvTaskExitError+0x28>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	60bb      	str	r3, [r7, #8]
}
 80062da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062dc:	bf00      	nop
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0fc      	beq.n	80062de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	2000000c 	.word	0x2000000c
	...

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	@ (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	@ (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006356:	4b47      	ldr	r3, [pc, #284]	@ (8006474 <xPortStartScheduler+0x124>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a47      	ldr	r2, [pc, #284]	@ (8006478 <xPortStartScheduler+0x128>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10b      	bne.n	8006378 <xPortStartScheduler+0x28>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006378:	4b3e      	ldr	r3, [pc, #248]	@ (8006474 <xPortStartScheduler+0x124>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a3f      	ldr	r2, [pc, #252]	@ (800647c <xPortStartScheduler+0x12c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10b      	bne.n	800639a <xPortStartScheduler+0x4a>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60fb      	str	r3, [r7, #12]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800639a:	4b39      	ldr	r3, [pc, #228]	@ (8006480 <xPortStartScheduler+0x130>)
 800639c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	22ff      	movs	r2, #255	@ 0xff
 80063aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <xPortStartScheduler+0x134>)
 80063c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063c2:	4b31      	ldr	r3, [pc, #196]	@ (8006488 <xPortStartScheduler+0x138>)
 80063c4:	2207      	movs	r2, #7
 80063c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c8:	e009      	b.n	80063de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006488 <xPortStartScheduler+0x138>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006488 <xPortStartScheduler+0x138>)
 80063d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e6:	2b80      	cmp	r3, #128	@ 0x80
 80063e8:	d0ef      	beq.n	80063ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063ea:	4b27      	ldr	r3, [pc, #156]	@ (8006488 <xPortStartScheduler+0x138>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f1c3 0307 	rsb	r3, r3, #7
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d00b      	beq.n	800640e <xPortStartScheduler+0xbe>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800640e:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <xPortStartScheduler+0x138>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <xPortStartScheduler+0x138>)
 8006416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006418:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <xPortStartScheduler+0x138>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006420:	4a19      	ldr	r2, [pc, #100]	@ (8006488 <xPortStartScheduler+0x138>)
 8006422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800642c:	4b17      	ldr	r3, [pc, #92]	@ (800648c <xPortStartScheduler+0x13c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a16      	ldr	r2, [pc, #88]	@ (800648c <xPortStartScheduler+0x13c>)
 8006432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006438:	4b14      	ldr	r3, [pc, #80]	@ (800648c <xPortStartScheduler+0x13c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a13      	ldr	r2, [pc, #76]	@ (800648c <xPortStartScheduler+0x13c>)
 800643e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006444:	f000 f8da 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006448:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <xPortStartScheduler+0x140>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800644e:	f000 f8f9 	bl	8006644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006452:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <xPortStartScheduler+0x144>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a0f      	ldr	r2, [pc, #60]	@ (8006494 <xPortStartScheduler+0x144>)
 8006458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800645c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800645e:	f7ff ff63 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006462:	f7fe ff2d 	bl	80052c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006466:	f7ff ff19 	bl	800629c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000ed00 	.word	0xe000ed00
 8006478:	410fc271 	.word	0x410fc271
 800647c:	410fc270 	.word	0x410fc270
 8006480:	e000e400 	.word	0xe000e400
 8006484:	20000f04 	.word	0x20000f04
 8006488:	20000f08 	.word	0x20000f08
 800648c:	e000ed20 	.word	0xe000ed20
 8006490:	2000000c 	.word	0x2000000c
 8006494:	e000ef34 	.word	0xe000ef34

08006498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <vPortEnterCritical+0x5c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	4a0e      	ldr	r2, [pc, #56]	@ (80064f4 <vPortEnterCritical+0x5c>)
 80064ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064bc:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <vPortEnterCritical+0x5c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d110      	bne.n	80064e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c4:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <vPortEnterCritical+0x60>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	603b      	str	r3, [r7, #0]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <vPortEnterCritical+0x4a>
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000000c 	.word	0x2000000c
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006502:	4b12      	ldr	r3, [pc, #72]	@ (800654c <vPortExitCritical+0x50>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <vPortExitCritical+0x26>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	607b      	str	r3, [r7, #4]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006522:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3b01      	subs	r3, #1
 8006528:	4a08      	ldr	r2, [pc, #32]	@ (800654c <vPortExitCritical+0x50>)
 800652a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vPortExitCritical+0x50>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <vPortExitCritical+0x44>
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7fe fe9e 	bl	80052c0 <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7fe fdbb 	bl	800514c <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <xPortSysTickHandler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <vPortSetupTimerInterrupt+0x38>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <vPortSetupTimerInterrupt+0x3c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	@ (800663c <vPortSetupTimerInterrupt+0x40>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a09      	ldr	r2, [pc, #36]	@ (8006640 <vPortSetupTimerInterrupt+0x44>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e010 	.word	0xe000e010
 8006634:	e000e018 	.word	0xe000e018
 8006638:	20000000 	.word	0x20000000
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	e000e014 	.word	0xe000e014

08006644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006654 <vPortEnableVFP+0x10>
 8006648:	6801      	ldr	r1, [r0, #0]
 800664a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800664e:	6001      	str	r1, [r0, #0]
 8006650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006652:	bf00      	nop
 8006654:	e000ed88 	.word	0xe000ed88

08006658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d915      	bls.n	8006696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666a:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <vPortValidateInterruptPriority+0x74>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006674:	4b16      	ldr	r3, [pc, #88]	@ (80066d0 <vPortValidateInterruptPriority+0x78>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	7afa      	ldrb	r2, [r7, #11]
 800667a:	429a      	cmp	r2, r3
 800667c:	d20b      	bcs.n	8006696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006696:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <vPortValidateInterruptPriority+0x7c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800669e:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <vPortValidateInterruptPriority+0x80>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d90b      	bls.n	80066be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	603b      	str	r3, [r7, #0]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <vPortValidateInterruptPriority+0x62>
	}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	e000e3f0 	.word	0xe000e3f0
 80066d0:	20000f04 	.word	0x20000f04
 80066d4:	e000ed0c 	.word	0xe000ed0c
 80066d8:	20000f08 	.word	0x20000f08

080066dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	@ 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e8:	f7fe fc74 	bl	8004fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006860 <pvPortMalloc+0x184>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f4:	f000 f924 	bl	8006940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006864 <pvPortMalloc+0x188>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f040 8095 	bne.w	8006830 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01e      	beq.n	800674a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800670c:	2208      	movs	r2, #8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f023 0307 	bic.w	r3, r3, #7
 8006724:	3308      	adds	r3, #8
 8006726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <pvPortMalloc+0x6e>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	617b      	str	r3, [r7, #20]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d06f      	beq.n	8006830 <pvPortMalloc+0x154>
 8006750:	4b45      	ldr	r3, [pc, #276]	@ (8006868 <pvPortMalloc+0x18c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d86a      	bhi.n	8006830 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800675a:	4b44      	ldr	r3, [pc, #272]	@ (800686c <pvPortMalloc+0x190>)
 800675c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800675e:	4b43      	ldr	r3, [pc, #268]	@ (800686c <pvPortMalloc+0x190>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006764:	e004      	b.n	8006770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d903      	bls.n	8006782 <pvPortMalloc+0xa6>
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f1      	bne.n	8006766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006782:	4b37      	ldr	r3, [pc, #220]	@ (8006860 <pvPortMalloc+0x184>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006788:	429a      	cmp	r2, r3
 800678a:	d051      	beq.n	8006830 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	4413      	add	r3, r2
 8006794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	2308      	movs	r3, #8
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d920      	bls.n	80067f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <pvPortMalloc+0xfc>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067ea:	69b8      	ldr	r0, [r7, #24]
 80067ec:	f000 f90a 	bl	8006a04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <pvPortMalloc+0x18c>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006868 <pvPortMalloc+0x18c>)
 80067fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006868 <pvPortMalloc+0x18c>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b1b      	ldr	r3, [pc, #108]	@ (8006870 <pvPortMalloc+0x194>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d203      	bcs.n	8006812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800680a:	4b17      	ldr	r3, [pc, #92]	@ (8006868 <pvPortMalloc+0x18c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a18      	ldr	r2, [pc, #96]	@ (8006870 <pvPortMalloc+0x194>)
 8006810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <pvPortMalloc+0x188>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	431a      	orrs	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <pvPortMalloc+0x198>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a11      	ldr	r2, [pc, #68]	@ (8006874 <pvPortMalloc+0x198>)
 800682e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006830:	f7fe fbde 	bl	8004ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <pvPortMalloc+0x17a>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <pvPortMalloc+0x176>
	return pvReturn;
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	@ 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20004b14 	.word	0x20004b14
 8006864:	20004b28 	.word	0x20004b28
 8006868:	20004b18 	.word	0x20004b18
 800686c:	20004b0c 	.word	0x20004b0c
 8006870:	20004b1c 	.word	0x20004b1c
 8006874:	20004b20 	.word	0x20004b20

08006878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04f      	beq.n	800692a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800688a:	2308      	movs	r3, #8
 800688c:	425b      	negs	r3, r3
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b25      	ldr	r3, [pc, #148]	@ (8006934 <vPortFree+0xbc>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10b      	bne.n	80068be <vPortFree+0x46>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60fb      	str	r3, [r7, #12]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <vPortFree+0x66>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	60bb      	str	r3, [r7, #8]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	4b14      	ldr	r3, [pc, #80]	@ (8006934 <vPortFree+0xbc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01e      	beq.n	800692a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11a      	bne.n	800692a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <vPortFree+0xbc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	43db      	mvns	r3, r3
 80068fe:	401a      	ands	r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006904:	f7fe fb66 	bl	8004fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <vPortFree+0xc0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4413      	add	r3, r2
 8006912:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <vPortFree+0xc0>)
 8006914:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f000 f874 	bl	8006a04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <vPortFree+0xc4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	4a06      	ldr	r2, [pc, #24]	@ (800693c <vPortFree+0xc4>)
 8006924:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006926:	f7fe fb63 	bl	8004ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20004b28 	.word	0x20004b28
 8006938:	20004b18 	.word	0x20004b18
 800693c:	20004b24 	.word	0x20004b24

08006940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006946:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800694a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800694c:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <prvHeapInit+0xac>)
 800694e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00c      	beq.n	8006974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3307      	adds	r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	4a1f      	ldr	r2, [pc, #124]	@ (80069ec <prvHeapInit+0xac>)
 8006970:	4413      	add	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006978:	4a1d      	ldr	r2, [pc, #116]	@ (80069f0 <prvHeapInit+0xb0>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800697e:	4b1c      	ldr	r3, [pc, #112]	@ (80069f0 <prvHeapInit+0xb0>)
 8006980:	2200      	movs	r2, #0
 8006982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4413      	add	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800698c:	2208      	movs	r2, #8
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <prvHeapInit+0xb4>)
 80069a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <prvHeapInit+0xb4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069aa:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <prvHeapInit+0xb4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <prvHeapInit+0xb4>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a0a      	ldr	r2, [pc, #40]	@ (80069f8 <prvHeapInit+0xb8>)
 80069ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4a09      	ldr	r2, [pc, #36]	@ (80069fc <prvHeapInit+0xbc>)
 80069d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069d8:	4b09      	ldr	r3, [pc, #36]	@ (8006a00 <prvHeapInit+0xc0>)
 80069da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069de:	601a      	str	r2, [r3, #0]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000f0c 	.word	0x20000f0c
 80069f0:	20004b0c 	.word	0x20004b0c
 80069f4:	20004b14 	.word	0x20004b14
 80069f8:	20004b1c 	.word	0x20004b1c
 80069fc:	20004b18 	.word	0x20004b18
 8006a00:	20004b28 	.word	0x20004b28

08006a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a0c:	4b28      	ldr	r3, [pc, #160]	@ (8006ab0 <prvInsertBlockIntoFreeList+0xac>)
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <prvInsertBlockIntoFreeList+0x14>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d8f7      	bhi.n	8006a12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d108      	bne.n	8006a46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	441a      	add	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d118      	bne.n	8006a8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d00d      	beq.n	8006a82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	441a      	add	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e008      	b.n	8006a94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a82:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e003      	b.n	8006a94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d002      	beq.n	8006aa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20004b0c 	.word	0x20004b0c
 8006ab4:	20004b14 	.word	0x20004b14

08006ab8 <_ZdlPvj>:
 8006ab8:	f000 b811 	b.w	8006ade <_ZdlPv>

08006abc <_Znwj>:
 8006abc:	2801      	cmp	r0, #1
 8006abe:	bf38      	it	cc
 8006ac0:	2001      	movcc	r0, #1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f81c 	bl	8006b04 <malloc>
 8006acc:	b100      	cbz	r0, 8006ad0 <_Znwj+0x14>
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	f000 f808 	bl	8006ae4 <_ZSt15get_new_handlerv>
 8006ad4:	b908      	cbnz	r0, 8006ada <_Znwj+0x1e>
 8006ad6:	f000 f80d 	bl	8006af4 <abort>
 8006ada:	4780      	blx	r0
 8006adc:	e7f3      	b.n	8006ac6 <_Znwj+0xa>

08006ade <_ZdlPv>:
 8006ade:	f000 b819 	b.w	8006b14 <free>
	...

08006ae4 <_ZSt15get_new_handlerv>:
 8006ae4:	4b02      	ldr	r3, [pc, #8]	@ (8006af0 <_ZSt15get_new_handlerv+0xc>)
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	f3bf 8f5b 	dmb	ish
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	20004b2c 	.word	0x20004b2c

08006af4 <abort>:
 8006af4:	b508      	push	{r3, lr}
 8006af6:	2006      	movs	r0, #6
 8006af8:	f000 f8f2 	bl	8006ce0 <raise>
 8006afc:	2001      	movs	r0, #1
 8006afe:	f7fa fce1 	bl	80014c4 <_exit>
	...

08006b04 <malloc>:
 8006b04:	4b02      	ldr	r3, [pc, #8]	@ (8006b10 <malloc+0xc>)
 8006b06:	4601      	mov	r1, r0
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f000 b82d 	b.w	8006b68 <_malloc_r>
 8006b0e:	bf00      	nop
 8006b10:	20000010 	.word	0x20000010

08006b14 <free>:
 8006b14:	4b02      	ldr	r3, [pc, #8]	@ (8006b20 <free+0xc>)
 8006b16:	4601      	mov	r1, r0
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	f000 b99d 	b.w	8006e58 <_free_r>
 8006b1e:	bf00      	nop
 8006b20:	20000010 	.word	0x20000010

08006b24 <sbrk_aligned>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4e0f      	ldr	r6, [pc, #60]	@ (8006b64 <sbrk_aligned+0x40>)
 8006b28:	460c      	mov	r4, r1
 8006b2a:	6831      	ldr	r1, [r6, #0]
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	b911      	cbnz	r1, 8006b36 <sbrk_aligned+0x12>
 8006b30:	f000 f948 	bl	8006dc4 <_sbrk_r>
 8006b34:	6030      	str	r0, [r6, #0]
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f943 	bl	8006dc4 <_sbrk_r>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	d103      	bne.n	8006b4a <sbrk_aligned+0x26>
 8006b42:	f04f 34ff 	mov.w	r4, #4294967295
 8006b46:	4620      	mov	r0, r4
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
 8006b4a:	1cc4      	adds	r4, r0, #3
 8006b4c:	f024 0403 	bic.w	r4, r4, #3
 8006b50:	42a0      	cmp	r0, r4
 8006b52:	d0f8      	beq.n	8006b46 <sbrk_aligned+0x22>
 8006b54:	1a21      	subs	r1, r4, r0
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f934 	bl	8006dc4 <_sbrk_r>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d1f2      	bne.n	8006b46 <sbrk_aligned+0x22>
 8006b60:	e7ef      	b.n	8006b42 <sbrk_aligned+0x1e>
 8006b62:	bf00      	nop
 8006b64:	20004b30 	.word	0x20004b30

08006b68 <_malloc_r>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	1ccd      	adds	r5, r1, #3
 8006b6e:	f025 0503 	bic.w	r5, r5, #3
 8006b72:	3508      	adds	r5, #8
 8006b74:	2d0c      	cmp	r5, #12
 8006b76:	bf38      	it	cc
 8006b78:	250c      	movcc	r5, #12
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	db01      	blt.n	8006b84 <_malloc_r+0x1c>
 8006b80:	42a9      	cmp	r1, r5
 8006b82:	d904      	bls.n	8006b8e <_malloc_r+0x26>
 8006b84:	230c      	movs	r3, #12
 8006b86:	6033      	str	r3, [r6, #0]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c64 <_malloc_r+0xfc>
 8006b92:	f000 f869 	bl	8006c68 <__malloc_lock>
 8006b96:	f8d8 3000 	ldr.w	r3, [r8]
 8006b9a:	461c      	mov	r4, r3
 8006b9c:	bb44      	cbnz	r4, 8006bf0 <_malloc_r+0x88>
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff ffbf 	bl	8006b24 <sbrk_aligned>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d158      	bne.n	8006c5e <_malloc_r+0xf6>
 8006bac:	f8d8 4000 	ldr.w	r4, [r8]
 8006bb0:	4627      	mov	r7, r4
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	d143      	bne.n	8006c3e <_malloc_r+0xd6>
 8006bb6:	2c00      	cmp	r4, #0
 8006bb8:	d04b      	beq.n	8006c52 <_malloc_r+0xea>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	eb04 0903 	add.w	r9, r4, r3
 8006bc4:	f000 f8fe 	bl	8006dc4 <_sbrk_r>
 8006bc8:	4581      	cmp	r9, r0
 8006bca:	d142      	bne.n	8006c52 <_malloc_r+0xea>
 8006bcc:	6821      	ldr	r1, [r4, #0]
 8006bce:	1a6d      	subs	r5, r5, r1
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ffa6 	bl	8006b24 <sbrk_aligned>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d03a      	beq.n	8006c52 <_malloc_r+0xea>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	442b      	add	r3, r5
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	f8d8 3000 	ldr.w	r3, [r8]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	bb62      	cbnz	r2, 8006c44 <_malloc_r+0xdc>
 8006bea:	f8c8 7000 	str.w	r7, [r8]
 8006bee:	e00f      	b.n	8006c10 <_malloc_r+0xa8>
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	1b52      	subs	r2, r2, r5
 8006bf4:	d420      	bmi.n	8006c38 <_malloc_r+0xd0>
 8006bf6:	2a0b      	cmp	r2, #11
 8006bf8:	d917      	bls.n	8006c2a <_malloc_r+0xc2>
 8006bfa:	1961      	adds	r1, r4, r5
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	6025      	str	r5, [r4, #0]
 8006c00:	bf18      	it	ne
 8006c02:	6059      	strne	r1, [r3, #4]
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	bf08      	it	eq
 8006c08:	f8c8 1000 	streq.w	r1, [r8]
 8006c0c:	5162      	str	r2, [r4, r5]
 8006c0e:	604b      	str	r3, [r1, #4]
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f82f 	bl	8006c74 <__malloc_unlock>
 8006c16:	f104 000b 	add.w	r0, r4, #11
 8006c1a:	1d23      	adds	r3, r4, #4
 8006c1c:	f020 0007 	bic.w	r0, r0, #7
 8006c20:	1ac2      	subs	r2, r0, r3
 8006c22:	bf1c      	itt	ne
 8006c24:	1a1b      	subne	r3, r3, r0
 8006c26:	50a3      	strne	r3, [r4, r2]
 8006c28:	e7af      	b.n	8006b8a <_malloc_r+0x22>
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	bf0c      	ite	eq
 8006c30:	f8c8 2000 	streq.w	r2, [r8]
 8006c34:	605a      	strne	r2, [r3, #4]
 8006c36:	e7eb      	b.n	8006c10 <_malloc_r+0xa8>
 8006c38:	4623      	mov	r3, r4
 8006c3a:	6864      	ldr	r4, [r4, #4]
 8006c3c:	e7ae      	b.n	8006b9c <_malloc_r+0x34>
 8006c3e:	463c      	mov	r4, r7
 8006c40:	687f      	ldr	r7, [r7, #4]
 8006c42:	e7b6      	b.n	8006bb2 <_malloc_r+0x4a>
 8006c44:	461a      	mov	r2, r3
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	d1fb      	bne.n	8006c44 <_malloc_r+0xdc>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6053      	str	r3, [r2, #4]
 8006c50:	e7de      	b.n	8006c10 <_malloc_r+0xa8>
 8006c52:	230c      	movs	r3, #12
 8006c54:	6033      	str	r3, [r6, #0]
 8006c56:	4630      	mov	r0, r6
 8006c58:	f000 f80c 	bl	8006c74 <__malloc_unlock>
 8006c5c:	e794      	b.n	8006b88 <_malloc_r+0x20>
 8006c5e:	6005      	str	r5, [r0, #0]
 8006c60:	e7d6      	b.n	8006c10 <_malloc_r+0xa8>
 8006c62:	bf00      	nop
 8006c64:	20004b34 	.word	0x20004b34

08006c68 <__malloc_lock>:
 8006c68:	4801      	ldr	r0, [pc, #4]	@ (8006c70 <__malloc_lock+0x8>)
 8006c6a:	f000 b8e5 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20004c74 	.word	0x20004c74

08006c74 <__malloc_unlock>:
 8006c74:	4801      	ldr	r0, [pc, #4]	@ (8006c7c <__malloc_unlock+0x8>)
 8006c76:	f000 b8e0 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	20004c74 	.word	0x20004c74

08006c80 <memset>:
 8006c80:	4402      	add	r2, r0
 8006c82:	4603      	mov	r3, r0
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d100      	bne.n	8006c8a <memset+0xa>
 8006c88:	4770      	bx	lr
 8006c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8e:	e7f9      	b.n	8006c84 <memset+0x4>

08006c90 <_raise_r>:
 8006c90:	291f      	cmp	r1, #31
 8006c92:	b538      	push	{r3, r4, r5, lr}
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	d904      	bls.n	8006ca4 <_raise_r+0x14>
 8006c9a:	2316      	movs	r3, #22
 8006c9c:	6003      	str	r3, [r0, #0]
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ca6:	b112      	cbz	r2, 8006cae <_raise_r+0x1e>
 8006ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cac:	b94b      	cbnz	r3, 8006cc2 <_raise_r+0x32>
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f886 	bl	8006dc0 <_getpid_r>
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cbe:	f000 b86d 	b.w	8006d9c <_kill_r>
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d00a      	beq.n	8006cdc <_raise_r+0x4c>
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	d103      	bne.n	8006cd2 <_raise_r+0x42>
 8006cca:	2316      	movs	r3, #22
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e7e7      	b.n	8006ca2 <_raise_r+0x12>
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4798      	blx	r3
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7e0      	b.n	8006ca2 <_raise_r+0x12>

08006ce0 <raise>:
 8006ce0:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <raise+0xc>)
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f7ff bfd3 	b.w	8006c90 <_raise_r>
 8006cea:	bf00      	nop
 8006cec:	20000010 	.word	0x20000010

08006cf0 <_reclaim_reent>:
 8006cf0:	4b29      	ldr	r3, [pc, #164]	@ (8006d98 <_reclaim_reent+0xa8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4283      	cmp	r3, r0
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d04b      	beq.n	8006d94 <_reclaim_reent+0xa4>
 8006cfc:	69c3      	ldr	r3, [r0, #28]
 8006cfe:	b1ab      	cbz	r3, 8006d2c <_reclaim_reent+0x3c>
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	b16b      	cbz	r3, 8006d20 <_reclaim_reent+0x30>
 8006d04:	2500      	movs	r5, #0
 8006d06:	69e3      	ldr	r3, [r4, #28]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	5959      	ldr	r1, [r3, r5]
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d13b      	bne.n	8006d88 <_reclaim_reent+0x98>
 8006d10:	3504      	adds	r5, #4
 8006d12:	2d80      	cmp	r5, #128	@ 0x80
 8006d14:	d1f7      	bne.n	8006d06 <_reclaim_reent+0x16>
 8006d16:	69e3      	ldr	r3, [r4, #28]
 8006d18:	4620      	mov	r0, r4
 8006d1a:	68d9      	ldr	r1, [r3, #12]
 8006d1c:	f000 f89c 	bl	8006e58 <_free_r>
 8006d20:	69e3      	ldr	r3, [r4, #28]
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	b111      	cbz	r1, 8006d2c <_reclaim_reent+0x3c>
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f896 	bl	8006e58 <_free_r>
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	b111      	cbz	r1, 8006d36 <_reclaim_reent+0x46>
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f891 	bl	8006e58 <_free_r>
 8006d36:	69e1      	ldr	r1, [r4, #28]
 8006d38:	b111      	cbz	r1, 8006d40 <_reclaim_reent+0x50>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 f88c 	bl	8006e58 <_free_r>
 8006d40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006d42:	b111      	cbz	r1, 8006d4a <_reclaim_reent+0x5a>
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 f887 	bl	8006e58 <_free_r>
 8006d4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d4c:	b111      	cbz	r1, 8006d54 <_reclaim_reent+0x64>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f882 	bl	8006e58 <_free_r>
 8006d54:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d56:	b111      	cbz	r1, 8006d5e <_reclaim_reent+0x6e>
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 f87d 	bl	8006e58 <_free_r>
 8006d5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d60:	b111      	cbz	r1, 8006d68 <_reclaim_reent+0x78>
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f878 	bl	8006e58 <_free_r>
 8006d68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006d6a:	b111      	cbz	r1, 8006d72 <_reclaim_reent+0x82>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 f873 	bl	8006e58 <_free_r>
 8006d72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d74:	b111      	cbz	r1, 8006d7c <_reclaim_reent+0x8c>
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f86e 	bl	8006e58 <_free_r>
 8006d7c:	6a23      	ldr	r3, [r4, #32]
 8006d7e:	b14b      	cbz	r3, 8006d94 <_reclaim_reent+0xa4>
 8006d80:	4620      	mov	r0, r4
 8006d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d86:	4718      	bx	r3
 8006d88:	680e      	ldr	r6, [r1, #0]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f864 	bl	8006e58 <_free_r>
 8006d90:	4631      	mov	r1, r6
 8006d92:	e7bb      	b.n	8006d0c <_reclaim_reent+0x1c>
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	bf00      	nop
 8006d98:	20000010 	.word	0x20000010

08006d9c <_kill_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	@ (8006dbc <_kill_r+0x20>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fa fb7b 	bl	80014a4 <_kill>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d102      	bne.n	8006db8 <_kill_r+0x1c>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b103      	cbz	r3, 8006db8 <_kill_r+0x1c>
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop
 8006dbc:	20004c70 	.word	0x20004c70

08006dc0 <_getpid_r>:
 8006dc0:	f7fa bb68 	b.w	8001494 <_getpid>

08006dc4 <_sbrk_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d06      	ldr	r5, [pc, #24]	@ (8006de0 <_sbrk_r+0x1c>)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fa fb84 	bl	80014dc <_sbrk>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_sbrk_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_sbrk_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20004c70 	.word	0x20004c70

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	@ (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000010 	.word	0x20000010

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4d0d      	ldr	r5, [pc, #52]	@ (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	@ (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4d0b      	ldr	r5, [pc, #44]	@ (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	@ (8006e34 <__libc_init_array+0x44>)
 8006e04:	f000 f872 	bl	8006eec <_init>
 8006e08:	1b64      	subs	r4, r4, r5
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e18:	4798      	blx	r3
 8006e1a:	3601      	adds	r6, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e22:	4798      	blx	r3
 8006e24:	3601      	adds	r6, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	08007034 	.word	0x08007034
 8006e2c:	08007034 	.word	0x08007034
 8006e30:	08007034 	.word	0x08007034
 8006e34:	08007038 	.word	0x08007038

08006e38 <__retarget_lock_acquire_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_release_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <memcpy>:
 8006e3c:	440a      	add	r2, r1
 8006e3e:	4291      	cmp	r1, r2
 8006e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e44:	d100      	bne.n	8006e48 <memcpy+0xc>
 8006e46:	4770      	bx	lr
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e52:	4291      	cmp	r1, r2
 8006e54:	d1f9      	bne.n	8006e4a <memcpy+0xe>
 8006e56:	bd10      	pop	{r4, pc}

08006e58 <_free_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	d041      	beq.n	8006ee4 <_free_r+0x8c>
 8006e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e64:	1f0c      	subs	r4, r1, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bfb8      	it	lt
 8006e6a:	18e4      	addlt	r4, r4, r3
 8006e6c:	f7ff fefc 	bl	8006c68 <__malloc_lock>
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <_free_r+0x90>)
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	b933      	cbnz	r3, 8006e84 <_free_r+0x2c>
 8006e76:	6063      	str	r3, [r4, #4]
 8006e78:	6014      	str	r4, [r2, #0]
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e80:	f7ff bef8 	b.w	8006c74 <__malloc_unlock>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d908      	bls.n	8006e9a <_free_r+0x42>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	1821      	adds	r1, r4, r0
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	bf01      	itttt	eq
 8006e90:	6819      	ldreq	r1, [r3, #0]
 8006e92:	685b      	ldreq	r3, [r3, #4]
 8006e94:	1809      	addeq	r1, r1, r0
 8006e96:	6021      	streq	r1, [r4, #0]
 8006e98:	e7ed      	b.n	8006e76 <_free_r+0x1e>
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b10b      	cbz	r3, 8006ea4 <_free_r+0x4c>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d9fa      	bls.n	8006e9a <_free_r+0x42>
 8006ea4:	6811      	ldr	r1, [r2, #0]
 8006ea6:	1850      	adds	r0, r2, r1
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d10b      	bne.n	8006ec4 <_free_r+0x6c>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	4401      	add	r1, r0
 8006eb0:	1850      	adds	r0, r2, r1
 8006eb2:	4283      	cmp	r3, r0
 8006eb4:	6011      	str	r1, [r2, #0]
 8006eb6:	d1e0      	bne.n	8006e7a <_free_r+0x22>
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	6053      	str	r3, [r2, #4]
 8006ebe:	4408      	add	r0, r1
 8006ec0:	6010      	str	r0, [r2, #0]
 8006ec2:	e7da      	b.n	8006e7a <_free_r+0x22>
 8006ec4:	d902      	bls.n	8006ecc <_free_r+0x74>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	e7d6      	b.n	8006e7a <_free_r+0x22>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	1821      	adds	r1, r4, r0
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf04      	itt	eq
 8006ed4:	6819      	ldreq	r1, [r3, #0]
 8006ed6:	685b      	ldreq	r3, [r3, #4]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	bf04      	itt	eq
 8006edc:	1809      	addeq	r1, r1, r0
 8006ede:	6021      	streq	r1, [r4, #0]
 8006ee0:	6054      	str	r4, [r2, #4]
 8006ee2:	e7ca      	b.n	8006e7a <_free_r+0x22>
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20004b34 	.word	0x20004b34

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
